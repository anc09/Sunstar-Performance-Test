/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 55.0, "minX": 0.0, "maxY": 180449.0, "series": [{"data": [[0.0, 55.0], [0.1, 58.0], [0.2, 64.0], [0.3, 65.0], [0.4, 87.0], [0.5, 93.0], [0.6, 96.0], [0.7, 103.0], [0.8, 104.0], [0.9, 127.0], [1.0, 140.0], [1.1, 147.0], [1.2, 164.0], [1.3, 182.0], [1.4, 193.0], [1.5, 202.0], [1.6, 207.0], [1.7, 212.0], [1.8, 222.0], [1.9, 224.0], [2.0, 225.0], [2.1, 228.0], [2.2, 232.0], [2.3, 236.0], [2.4, 243.0], [2.5, 244.0], [2.6, 249.0], [2.7, 252.0], [2.8, 255.0], [2.9, 256.0], [3.0, 259.0], [3.1, 261.0], [3.2, 269.0], [3.3, 275.0], [3.4, 279.0], [3.5, 280.0], [3.6, 284.0], [3.7, 286.0], [3.8, 287.0], [3.9, 288.0], [4.0, 289.0], [4.1, 290.0], [4.2, 291.0], [4.3, 292.0], [4.4, 292.0], [4.5, 293.0], [4.6, 295.0], [4.7, 297.0], [4.8, 305.0], [4.9, 305.0], [5.0, 308.0], [5.1, 310.0], [5.2, 311.0], [5.3, 313.0], [5.4, 314.0], [5.5, 314.0], [5.6, 315.0], [5.7, 316.0], [5.8, 317.0], [5.9, 318.0], [6.0, 319.0], [6.1, 319.0], [6.2, 320.0], [6.3, 323.0], [6.4, 325.0], [6.5, 326.0], [6.6, 329.0], [6.7, 331.0], [6.8, 333.0], [6.9, 333.0], [7.0, 336.0], [7.1, 341.0], [7.2, 341.0], [7.3, 342.0], [7.4, 345.0], [7.5, 347.0], [7.6, 348.0], [7.7, 348.0], [7.8, 356.0], [7.9, 357.0], [8.0, 361.0], [8.1, 363.0], [8.2, 375.0], [8.3, 381.0], [8.4, 381.0], [8.5, 384.0], [8.6, 387.0], [8.7, 390.0], [8.8, 396.0], [8.9, 399.0], [9.0, 402.0], [9.1, 402.0], [9.2, 403.0], [9.3, 405.0], [9.4, 408.0], [9.5, 410.0], [9.6, 412.0], [9.7, 415.0], [9.8, 418.0], [9.9, 424.0], [10.0, 425.0], [10.1, 427.0], [10.2, 432.0], [10.3, 438.0], [10.4, 439.0], [10.5, 441.0], [10.6, 442.0], [10.7, 443.0], [10.8, 444.0], [10.9, 444.0], [11.0, 445.0], [11.1, 447.0], [11.2, 448.0], [11.3, 449.0], [11.4, 452.0], [11.5, 456.0], [11.6, 459.0], [11.7, 462.0], [11.8, 463.0], [11.9, 464.0], [12.0, 465.0], [12.1, 466.0], [12.2, 466.0], [12.3, 468.0], [12.4, 470.0], [12.5, 471.0], [12.6, 474.0], [12.7, 474.0], [12.8, 476.0], [12.9, 477.0], [13.0, 478.0], [13.1, 479.0], [13.2, 481.0], [13.3, 482.0], [13.4, 482.0], [13.5, 483.0], [13.6, 484.0], [13.7, 486.0], [13.8, 488.0], [13.9, 489.0], [14.0, 491.0], [14.1, 491.0], [14.2, 491.0], [14.3, 492.0], [14.4, 495.0], [14.5, 495.0], [14.6, 496.0], [14.7, 496.0], [14.8, 498.0], [14.9, 499.0], [15.0, 503.0], [15.1, 515.0], [15.2, 520.0], [15.3, 521.0], [15.4, 524.0], [15.5, 525.0], [15.6, 528.0], [15.7, 529.0], [15.8, 531.0], [15.9, 542.0], [16.0, 546.0], [16.1, 549.0], [16.2, 551.0], [16.3, 553.0], [16.4, 554.0], [16.5, 559.0], [16.6, 560.0], [16.7, 560.0], [16.8, 567.0], [16.9, 569.0], [17.0, 570.0], [17.1, 576.0], [17.2, 581.0], [17.3, 582.0], [17.4, 585.0], [17.5, 589.0], [17.6, 591.0], [17.7, 591.0], [17.8, 594.0], [17.9, 594.0], [18.0, 596.0], [18.1, 596.0], [18.2, 597.0], [18.3, 599.0], [18.4, 600.0], [18.5, 601.0], [18.6, 605.0], [18.7, 606.0], [18.8, 608.0], [18.9, 608.0], [19.0, 609.0], [19.1, 611.0], [19.2, 612.0], [19.3, 612.0], [19.4, 618.0], [19.5, 620.0], [19.6, 621.0], [19.7, 621.0], [19.8, 622.0], [19.9, 627.0], [20.0, 629.0], [20.1, 630.0], [20.2, 633.0], [20.3, 635.0], [20.4, 637.0], [20.5, 638.0], [20.6, 640.0], [20.7, 644.0], [20.8, 645.0], [20.9, 647.0], [21.0, 650.0], [21.1, 653.0], [21.2, 655.0], [21.3, 656.0], [21.4, 660.0], [21.5, 661.0], [21.6, 663.0], [21.7, 664.0], [21.8, 665.0], [21.9, 668.0], [22.0, 671.0], [22.1, 672.0], [22.2, 673.0], [22.3, 676.0], [22.4, 677.0], [22.5, 678.0], [22.6, 681.0], [22.7, 685.0], [22.8, 689.0], [22.9, 690.0], [23.0, 693.0], [23.1, 699.0], [23.2, 702.0], [23.3, 705.0], [23.4, 709.0], [23.5, 711.0], [23.6, 716.0], [23.7, 718.0], [23.8, 719.0], [23.9, 721.0], [24.0, 722.0], [24.1, 723.0], [24.2, 723.0], [24.3, 724.0], [24.4, 728.0], [24.5, 729.0], [24.6, 730.0], [24.7, 732.0], [24.8, 736.0], [24.9, 737.0], [25.0, 739.0], [25.1, 744.0], [25.2, 745.0], [25.3, 746.0], [25.4, 750.0], [25.5, 756.0], [25.6, 757.0], [25.7, 757.0], [25.8, 760.0], [25.9, 760.0], [26.0, 761.0], [26.1, 762.0], [26.2, 762.0], [26.3, 764.0], [26.4, 767.0], [26.5, 773.0], [26.6, 775.0], [26.7, 777.0], [26.8, 779.0], [26.9, 781.0], [27.0, 782.0], [27.1, 787.0], [27.2, 788.0], [27.3, 791.0], [27.4, 793.0], [27.5, 796.0], [27.6, 798.0], [27.7, 798.0], [27.8, 804.0], [27.9, 805.0], [28.0, 807.0], [28.1, 807.0], [28.2, 811.0], [28.3, 811.0], [28.4, 813.0], [28.5, 814.0], [28.6, 815.0], [28.7, 815.0], [28.8, 818.0], [28.9, 819.0], [29.0, 823.0], [29.1, 825.0], [29.2, 826.0], [29.3, 826.0], [29.4, 827.0], [29.5, 830.0], [29.6, 833.0], [29.7, 833.0], [29.8, 835.0], [29.9, 838.0], [30.0, 839.0], [30.1, 842.0], [30.2, 844.0], [30.3, 845.0], [30.4, 847.0], [30.5, 848.0], [30.6, 854.0], [30.7, 856.0], [30.8, 857.0], [30.9, 858.0], [31.0, 858.0], [31.1, 858.0], [31.2, 861.0], [31.3, 863.0], [31.4, 864.0], [31.5, 866.0], [31.6, 869.0], [31.7, 869.0], [31.8, 870.0], [31.9, 871.0], [32.0, 872.0], [32.1, 872.0], [32.2, 873.0], [32.3, 873.0], [32.4, 874.0], [32.5, 875.0], [32.6, 880.0], [32.7, 882.0], [32.8, 883.0], [32.9, 883.0], [33.0, 884.0], [33.1, 885.0], [33.2, 886.0], [33.3, 886.0], [33.4, 886.0], [33.5, 888.0], [33.6, 891.0], [33.7, 891.0], [33.8, 893.0], [33.9, 895.0], [34.0, 896.0], [34.1, 897.0], [34.2, 897.0], [34.3, 900.0], [34.4, 901.0], [34.5, 903.0], [34.6, 904.0], [34.7, 904.0], [34.8, 906.0], [34.9, 906.0], [35.0, 908.0], [35.1, 909.0], [35.2, 910.0], [35.3, 910.0], [35.4, 911.0], [35.5, 911.0], [35.6, 912.0], [35.7, 913.0], [35.8, 915.0], [35.9, 916.0], [36.0, 916.0], [36.1, 918.0], [36.2, 919.0], [36.3, 920.0], [36.4, 922.0], [36.5, 923.0], [36.6, 925.0], [36.7, 926.0], [36.8, 926.0], [36.9, 928.0], [37.0, 932.0], [37.1, 933.0], [37.2, 933.0], [37.3, 934.0], [37.4, 934.0], [37.5, 936.0], [37.6, 939.0], [37.7, 939.0], [37.8, 940.0], [37.9, 942.0], [38.0, 946.0], [38.1, 946.0], [38.2, 947.0], [38.3, 949.0], [38.4, 950.0], [38.5, 951.0], [38.6, 954.0], [38.7, 955.0], [38.8, 955.0], [38.9, 956.0], [39.0, 956.0], [39.1, 956.0], [39.2, 956.0], [39.3, 956.0], [39.4, 957.0], [39.5, 958.0], [39.6, 958.0], [39.7, 960.0], [39.8, 960.0], [39.9, 961.0], [40.0, 962.0], [40.1, 962.0], [40.2, 963.0], [40.3, 964.0], [40.4, 966.0], [40.5, 967.0], [40.6, 970.0], [40.7, 971.0], [40.8, 972.0], [40.9, 972.0], [41.0, 973.0], [41.1, 973.0], [41.2, 974.0], [41.3, 974.0], [41.4, 976.0], [41.5, 976.0], [41.6, 977.0], [41.7, 978.0], [41.8, 979.0], [41.9, 982.0], [42.0, 983.0], [42.1, 985.0], [42.2, 985.0], [42.3, 987.0], [42.4, 988.0], [42.5, 989.0], [42.6, 991.0], [42.7, 992.0], [42.8, 995.0], [42.9, 997.0], [43.0, 997.0], [43.1, 999.0], [43.2, 1000.0], [43.3, 1000.0], [43.4, 1002.0], [43.5, 1003.0], [43.6, 1004.0], [43.7, 1006.0], [43.8, 1008.0], [43.9, 1010.0], [44.0, 1012.0], [44.1, 1013.0], [44.2, 1016.0], [44.3, 1019.0], [44.4, 1021.0], [44.5, 1024.0], [44.6, 1026.0], [44.7, 1029.0], [44.8, 1035.0], [44.9, 1038.0], [45.0, 1039.0], [45.1, 1046.0], [45.2, 1061.0], [45.3, 1071.0], [45.4, 1075.0], [45.5, 1079.0], [45.6, 1079.0], [45.7, 1080.0], [45.8, 1088.0], [45.9, 1096.0], [46.0, 1099.0], [46.1, 1101.0], [46.2, 1102.0], [46.3, 1112.0], [46.4, 1113.0], [46.5, 1115.0], [46.6, 1117.0], [46.7, 1122.0], [46.8, 1125.0], [46.9, 1129.0], [47.0, 1132.0], [47.1, 1134.0], [47.2, 1139.0], [47.3, 1140.0], [47.4, 1143.0], [47.5, 1145.0], [47.6, 1146.0], [47.7, 1149.0], [47.8, 1149.0], [47.9, 1150.0], [48.0, 1156.0], [48.1, 1157.0], [48.2, 1158.0], [48.3, 1159.0], [48.4, 1160.0], [48.5, 1162.0], [48.6, 1163.0], [48.7, 1165.0], [48.8, 1166.0], [48.9, 1167.0], [49.0, 1170.0], [49.1, 1175.0], [49.2, 1180.0], [49.3, 1180.0], [49.4, 1183.0], [49.5, 1187.0], [49.6, 1190.0], [49.7, 1194.0], [49.8, 1196.0], [49.9, 1201.0], [50.0, 1202.0], [50.1, 1206.0], [50.2, 1207.0], [50.3, 1207.0], [50.4, 1214.0], [50.5, 1214.0], [50.6, 1216.0], [50.7, 1220.0], [50.8, 1223.0], [50.9, 1223.0], [51.0, 1224.0], [51.1, 1227.0], [51.2, 1236.0], [51.3, 1237.0], [51.4, 1240.0], [51.5, 1250.0], [51.6, 1252.0], [51.7, 1252.0], [51.8, 1253.0], [51.9, 1255.0], [52.0, 1256.0], [52.1, 1257.0], [52.2, 1260.0], [52.3, 1262.0], [52.4, 1264.0], [52.5, 1264.0], [52.6, 1266.0], [52.7, 1273.0], [52.8, 1274.0], [52.9, 1274.0], [53.0, 1275.0], [53.1, 1278.0], [53.2, 1279.0], [53.3, 1283.0], [53.4, 1289.0], [53.5, 1290.0], [53.6, 1293.0], [53.7, 1293.0], [53.8, 1297.0], [53.9, 1301.0], [54.0, 1301.0], [54.1, 1305.0], [54.2, 1305.0], [54.3, 1307.0], [54.4, 1312.0], [54.5, 1313.0], [54.6, 1314.0], [54.7, 1316.0], [54.8, 1318.0], [54.9, 1318.0], [55.0, 1321.0], [55.1, 1325.0], [55.2, 1331.0], [55.3, 1333.0], [55.4, 1337.0], [55.5, 1339.0], [55.6, 1342.0], [55.7, 1344.0], [55.8, 1347.0], [55.9, 1349.0], [56.0, 1357.0], [56.1, 1358.0], [56.2, 1361.0], [56.3, 1362.0], [56.4, 1363.0], [56.5, 1364.0], [56.6, 1365.0], [56.7, 1366.0], [56.8, 1368.0], [56.9, 1370.0], [57.0, 1372.0], [57.1, 1373.0], [57.2, 1375.0], [57.3, 1377.0], [57.4, 1378.0], [57.5, 1380.0], [57.6, 1381.0], [57.7, 1382.0], [57.8, 1383.0], [57.9, 1384.0], [58.0, 1386.0], [58.1, 1386.0], [58.2, 1389.0], [58.3, 1391.0], [58.4, 1395.0], [58.5, 1395.0], [58.6, 1397.0], [58.7, 1406.0], [58.8, 1408.0], [58.9, 1408.0], [59.0, 1411.0], [59.1, 1412.0], [59.2, 1415.0], [59.3, 1415.0], [59.4, 1418.0], [59.5, 1419.0], [59.6, 1421.0], [59.7, 1421.0], [59.8, 1421.0], [59.9, 1424.0], [60.0, 1427.0], [60.1, 1428.0], [60.2, 1432.0], [60.3, 1438.0], [60.4, 1442.0], [60.5, 1442.0], [60.6, 1452.0], [60.7, 1455.0], [60.8, 1458.0], [60.9, 1458.0], [61.0, 1459.0], [61.1, 1463.0], [61.2, 1465.0], [61.3, 1465.0], [61.4, 1466.0], [61.5, 1467.0], [61.6, 1468.0], [61.7, 1472.0], [61.8, 1474.0], [61.9, 1478.0], [62.0, 1482.0], [62.1, 1482.0], [62.2, 1485.0], [62.3, 1487.0], [62.4, 1492.0], [62.5, 1493.0], [62.6, 1496.0], [62.7, 1497.0], [62.8, 1504.0], [62.9, 1509.0], [63.0, 1516.0], [63.1, 1517.0], [63.2, 1521.0], [63.3, 1524.0], [63.4, 1525.0], [63.5, 1533.0], [63.6, 1536.0], [63.7, 1537.0], [63.8, 1540.0], [63.9, 1542.0], [64.0, 1550.0], [64.1, 1551.0], [64.2, 1556.0], [64.3, 1584.0], [64.4, 1585.0], [64.5, 1586.0], [64.6, 1595.0], [64.7, 1598.0], [64.8, 1602.0], [64.9, 1603.0], [65.0, 1609.0], [65.1, 1619.0], [65.2, 1623.0], [65.3, 1630.0], [65.4, 1633.0], [65.5, 1637.0], [65.6, 1638.0], [65.7, 1639.0], [65.8, 1639.0], [65.9, 1646.0], [66.0, 1648.0], [66.1, 1649.0], [66.2, 1650.0], [66.3, 1659.0], [66.4, 1660.0], [66.5, 1662.0], [66.6, 1663.0], [66.7, 1668.0], [66.8, 1670.0], [66.9, 1673.0], [67.0, 1684.0], [67.1, 1690.0], [67.2, 1694.0], [67.3, 1696.0], [67.4, 1704.0], [67.5, 1707.0], [67.6, 1716.0], [67.7, 1716.0], [67.8, 1717.0], [67.9, 1723.0], [68.0, 1724.0], [68.1, 1725.0], [68.2, 1729.0], [68.3, 1733.0], [68.4, 1735.0], [68.5, 1738.0], [68.6, 1744.0], [68.7, 1754.0], [68.8, 1755.0], [68.9, 1758.0], [69.0, 1761.0], [69.1, 1776.0], [69.2, 1780.0], [69.3, 1782.0], [69.4, 1784.0], [69.5, 1792.0], [69.6, 1796.0], [69.7, 1799.0], [69.8, 1800.0], [69.9, 1802.0], [70.0, 1802.0], [70.1, 1808.0], [70.2, 1818.0], [70.3, 1820.0], [70.4, 1822.0], [70.5, 1823.0], [70.6, 1828.0], [70.7, 1828.0], [70.8, 1830.0], [70.9, 1832.0], [71.0, 1837.0], [71.1, 1838.0], [71.2, 1841.0], [71.3, 1850.0], [71.4, 1861.0], [71.5, 1865.0], [71.6, 1868.0], [71.7, 1876.0], [71.8, 1879.0], [71.9, 1882.0], [72.0, 1882.0], [72.1, 1883.0], [72.2, 1887.0], [72.3, 1888.0], [72.4, 1890.0], [72.5, 1893.0], [72.6, 1895.0], [72.7, 1898.0], [72.8, 1901.0], [72.9, 1906.0], [73.0, 1908.0], [73.1, 1910.0], [73.2, 1912.0], [73.3, 1914.0], [73.4, 1919.0], [73.5, 1922.0], [73.6, 1922.0], [73.7, 1923.0], [73.8, 1923.0], [73.9, 1925.0], [74.0, 1927.0], [74.1, 1928.0], [74.2, 1930.0], [74.3, 1933.0], [74.4, 1933.0], [74.5, 1935.0], [74.6, 1936.0], [74.7, 1937.0], [74.8, 1939.0], [74.9, 1940.0], [75.0, 1941.0], [75.1, 1941.0], [75.2, 1943.0], [75.3, 1945.0], [75.4, 1947.0], [75.5, 1947.0], [75.6, 1951.0], [75.7, 1954.0], [75.8, 1956.0], [75.9, 1959.0], [76.0, 1960.0], [76.1, 1962.0], [76.2, 1963.0], [76.3, 1966.0], [76.4, 1968.0], [76.5, 1970.0], [76.6, 1973.0], [76.7, 1977.0], [76.8, 1978.0], [76.9, 1982.0], [77.0, 1990.0], [77.1, 1991.0], [77.2, 1992.0], [77.3, 1993.0], [77.4, 1995.0], [77.5, 1997.0], [77.6, 1997.0], [77.7, 2000.0], [77.8, 2002.0], [77.9, 2003.0], [78.0, 2004.0], [78.1, 2006.0], [78.2, 2006.0], [78.3, 2009.0], [78.4, 2009.0], [78.5, 2011.0], [78.6, 2014.0], [78.7, 2017.0], [78.8, 2018.0], [78.9, 2019.0], [79.0, 2023.0], [79.1, 2024.0], [79.2, 2026.0], [79.3, 2027.0], [79.4, 2030.0], [79.5, 2031.0], [79.6, 2032.0], [79.7, 2033.0], [79.8, 2036.0], [79.9, 2037.0], [80.0, 2037.0], [80.1, 2040.0], [80.2, 2041.0], [80.3, 2042.0], [80.4, 2043.0], [80.5, 2046.0], [80.6, 2048.0], [80.7, 2051.0], [80.8, 2051.0], [80.9, 2051.0], [81.0, 2054.0], [81.1, 2055.0], [81.2, 2056.0], [81.3, 2061.0], [81.4, 2063.0], [81.5, 2065.0], [81.6, 2066.0], [81.7, 2067.0], [81.8, 2071.0], [81.9, 2073.0], [82.0, 2074.0], [82.1, 2076.0], [82.2, 2078.0], [82.3, 2080.0], [82.4, 2081.0], [82.5, 2082.0], [82.6, 2084.0], [82.7, 2086.0], [82.8, 2086.0], [82.9, 2092.0], [83.0, 2104.0], [83.1, 2112.0], [83.2, 2123.0], [83.3, 2129.0], [83.4, 2134.0], [83.5, 2153.0], [83.6, 2170.0], [83.7, 2180.0], [83.8, 2191.0], [83.9, 2197.0], [84.0, 2197.0], [84.1, 2210.0], [84.2, 2266.0], [84.3, 2268.0], [84.4, 2269.0], [84.5, 2272.0], [84.6, 2274.0], [84.7, 2282.0], [84.8, 2285.0], [84.9, 2289.0], [85.0, 2292.0], [85.1, 2305.0], [85.2, 2305.0], [85.3, 2315.0], [85.4, 2318.0], [85.5, 2319.0], [85.6, 2320.0], [85.7, 2321.0], [85.8, 2325.0], [85.9, 2326.0], [86.0, 2327.0], [86.1, 2331.0], [86.2, 2333.0], [86.3, 2338.0], [86.4, 2339.0], [86.5, 2341.0], [86.6, 2342.0], [86.7, 2344.0], [86.8, 2345.0], [86.9, 2347.0], [87.0, 2349.0], [87.1, 2353.0], [87.2, 2357.0], [87.3, 2365.0], [87.4, 2366.0], [87.5, 2369.0], [87.6, 2375.0], [87.7, 2383.0], [87.8, 2387.0], [87.9, 2390.0], [88.0, 2393.0], [88.1, 2405.0], [88.2, 2411.0], [88.3, 2419.0], [88.4, 2420.0], [88.5, 2424.0], [88.6, 2428.0], [88.7, 2438.0], [88.8, 2442.0], [88.9, 2451.0], [89.0, 2457.0], [89.1, 2473.0], [89.2, 2474.0], [89.3, 2476.0], [89.4, 2477.0], [89.5, 2505.0], [89.6, 2507.0], [89.7, 2515.0], [89.8, 2525.0], [89.9, 2529.0], [90.0, 2546.0], [90.1, 2564.0], [90.2, 2570.0], [90.3, 2580.0], [90.4, 2581.0], [90.5, 2586.0], [90.6, 2620.0], [90.7, 2621.0], [90.8, 2621.0], [90.9, 2622.0], [91.0, 2627.0], [91.1, 2635.0], [91.2, 2645.0], [91.3, 2650.0], [91.4, 2655.0], [91.5, 2666.0], [91.6, 2685.0], [91.7, 2689.0], [91.8, 2714.0], [91.9, 2782.0], [92.0, 2792.0], [92.1, 2813.0], [92.2, 2831.0], [92.3, 2838.0], [92.4, 2838.0], [92.5, 2852.0], [92.6, 2860.0], [92.7, 2869.0], [92.8, 2870.0], [92.9, 2876.0], [93.0, 2880.0], [93.1, 2881.0], [93.2, 2884.0], [93.3, 2906.0], [93.4, 2914.0], [93.5, 2921.0], [93.6, 2923.0], [93.7, 2930.0], [93.8, 2940.0], [93.9, 2945.0], [94.0, 2945.0], [94.1, 2949.0], [94.2, 2955.0], [94.3, 2965.0], [94.4, 2969.0], [94.5, 2971.0], [94.6, 2994.0], [94.7, 3009.0], [94.8, 3072.0], [94.9, 3085.0], [95.0, 3178.0], [95.1, 3338.0], [95.2, 3356.0], [95.3, 3361.0], [95.4, 12084.0], [95.5, 12318.0], [95.6, 12704.0], [95.7, 19334.0], [95.8, 20120.0], [95.9, 20296.0], [96.0, 25357.0], [96.1, 26224.0], [96.2, 26803.0], [96.3, 27063.0], [96.4, 27128.0], [96.5, 27392.0], [96.6, 34602.0], [96.7, 35015.0], [96.8, 35058.0], [96.9, 41821.0], [97.0, 42116.0], [97.1, 47433.0], [97.2, 49126.0], [97.3, 49704.0], [97.4, 55760.0], [97.5, 57427.0], [97.6, 58218.0], [97.7, 60321.0], [97.8, 60341.0], [97.9, 60379.0], [98.0, 120282.0], [98.1, 120334.0], [98.2, 120356.0], [98.3, 171385.0], [98.4, 171760.0], [98.5, 178504.0], [98.6, 178569.0], [98.7, 180080.0], [98.8, 180285.0], [98.9, 180295.0], [99.0, 180326.0], [99.1, 180337.0], [99.2, 180348.0], [99.3, 180350.0], [99.4, 180351.0], [99.5, 180369.0], [99.6, 180379.0], [99.7, 180391.0], [99.8, 180393.0], [99.9, 180424.0], [100.0, 180449.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 155.0, "series": [{"data": [[0.0, 11.0], [600.0, 84.0], [700.0, 80.0], [180000.0, 1.0], [180400.0, 2.0], [800.0, 115.0], [900.0, 155.0], [1000.0, 51.0], [1100.0, 67.0], [1200.0, 70.0], [1300.0, 83.0], [1400.0, 72.0], [1500.0, 35.0], [1600.0, 45.0], [1700.0, 43.0], [1800.0, 52.0], [1900.0, 86.0], [2000.0, 93.0], [2100.0, 18.0], [2200.0, 19.0], [2300.0, 52.0], [2400.0, 25.0], [2500.0, 19.0], [2600.0, 21.0], [171300.0, 1.0], [171700.0, 1.0], [2800.0, 21.0], [2700.0, 5.0], [172900.0, 1.0], [178500.0, 3.0], [2900.0, 25.0], [3000.0, 4.0], [3100.0, 2.0], [3300.0, 6.0], [120300.0, 5.0], [180200.0, 3.0], [12100.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [12300.0, 1.0], [13100.0, 1.0], [19300.0, 1.0], [19700.0, 1.0], [20200.0, 2.0], [20100.0, 1.0], [25300.0, 1.0], [25900.0, 1.0], [26200.0, 1.0], [26600.0, 1.0], [100.0, 14.0], [27000.0, 1.0], [27100.0, 1.0], [27300.0, 2.0], [26800.0, 1.0], [26900.0, 1.0], [32200.0, 1.0], [34600.0, 1.0], [34700.0, 1.0], [35000.0, 2.0], [40200.0, 1.0], [41800.0, 2.0], [42100.0, 1.0], [42200.0, 1.0], [178700.0, 1.0], [180300.0, 17.0], [47400.0, 1.0], [49100.0, 2.0], [49700.0, 2.0], [200.0, 58.0], [55700.0, 1.0], [57300.0, 1.0], [57400.0, 1.0], [58200.0, 1.0], [58700.0, 1.0], [60300.0, 5.0], [300.0, 73.0], [400.0, 105.0], [120200.0, 1.0], [500.0, 60.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 180400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 261.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 837.0, "series": [{"data": [[0.0, 261.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 837.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 652.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.03448275862069, "minX": 1.62786061E12, "maxY": 1645.148148148148, "series": [{"data": [[1.62786066E12, 344.9675925925929], [1.62786065E12, 957.8197424892713], [1.62786064E12, 1422.774193548387], [1.62786063E12, 1525.5], [1.62786078E12, 14.03448275862069], [1.62786062E12, 1574.7415730337073], [1.62786061E12, 1645.148148148148], [1.62786077E12, 29.5], [1.62786072E12, 33.5]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786078E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 55.0, "minX": 1.0, "maxY": 180424.0, "series": [{"data": [[2.0, 180424.0], [3.0, 180396.0], [4.0, 180369.0], [5.0, 180391.0], [6.0, 180393.0], [7.0, 180364.0], [8.0, 180391.0], [9.0, 180385.0], [10.0, 180379.0], [11.0, 180351.0], [12.0, 180348.0], [13.0, 180350.0], [14.0, 180337.0], [15.0, 180348.0], [16.0, 180350.0], [17.0, 180326.0], [18.0, 180331.0], [19.0, 180309.0], [20.0, 180295.0], [21.0, 180293.0], [22.0, 180285.0], [23.0, 180080.0], [24.0, 178783.0], [25.0, 178504.0], [26.0, 178569.0], [27.0, 178518.0], [28.0, 172923.0], [29.0, 171760.0], [30.0, 171385.0], [31.0, 120347.0], [33.0, 120356.0], [32.0, 120334.0], [35.0, 120300.0], [34.0, 120361.0], [37.0, 60379.0], [36.0, 120282.0], [39.0, 60345.0], [38.0, 60341.0], [41.0, 60321.0], [40.0, 60329.0], [43.0, 58218.0], [42.0, 58739.0], [45.0, 57388.0], [44.0, 57427.0], [47.0, 1703.0], [46.0, 1707.0], [49.0, 2191.0], [48.0, 2720.0], [50.0, 2197.0], [53.0, 2153.0], [52.0, 2186.5], [55.0, 2191.5], [56.0, 2126.0], [59.0, 1673.0], [61.0, 1662.0], [60.0, 2170.0], [63.0, 1780.0], [62.0, 1928.0], [67.0, 1914.0], [66.0, 2143.0], [65.0, 2476.0], [64.0, 2477.0], [71.0, 2921.0], [70.0, 2345.0], [69.0, 1649.0], [68.0, 3085.0], [75.0, 1733.0], [74.0, 1737.0], [73.0, 2340.0], [72.0, 2655.0], [79.0, 2123.0], [78.0, 2645.0], [77.0, 2650.0], [76.0, 2073.0], [83.0, 2112.0], [82.0, 2104.0], [81.0, 2134.0], [87.0, 2320.0], [86.0, 1716.0], [85.0, 2521.0], [84.0, 1717.0], [91.0, 2470.5], [89.0, 2324.0], [88.0, 2620.0], [95.0, 2627.0], [94.0, 2317.0], [93.0, 2322.0], [99.0, 2526.5], [97.0, 2864.0], [96.0, 2205.5], [103.0, 2006.0], [100.0, 2621.0], [106.0, 2103.5], [104.0, 2308.0], [111.0, 1891.0], [110.0, 2173.0], [108.0, 2244.5], [115.0, 2055.0], [114.0, 2421.5], [112.0, 2086.0], [119.0, 2584.0], [118.0, 2586.0], [117.0, 2074.0], [116.0, 1861.0], [123.0, 2570.0], [122.0, 2548.0], [121.0, 2270.0], [120.0, 1694.0], [127.0, 2424.0], [125.0, 2581.0], [124.0, 2528.0], [135.0, 2838.0], [134.0, 1624.0], [132.0, 1808.0], [131.0, 2589.5], [129.0, 2564.0], [128.0, 2267.0], [142.0, 2457.0], [141.0, 1802.0], [140.0, 1594.0], [139.0, 2971.0], [138.0, 2032.0], [137.0, 3338.0], [136.0, 1813.0], [151.0, 2529.0], [150.0, 1960.0], [149.0, 2426.0], [148.0, 2346.0], [147.0, 3310.0], [146.0, 3359.0], [145.0, 2881.0], [144.0, 2499.0], [158.0, 2511.0], [157.0, 1781.0], [156.0, 1780.0], [154.0, 2792.0], [153.0, 1919.0], [152.0, 2014.0], [167.0, 1421.0], [166.0, 2445.0], [165.0, 1828.0], [164.0, 2438.0], [163.0, 1897.0], [161.0, 1717.0], [160.0, 3147.0], [174.0, 1890.0], [173.0, 2567.0], [172.0, 1653.0], [171.0, 2421.0], [170.0, 2411.0], [169.0, 1923.0], [168.0, 1922.0], [183.0, 1459.0], [182.0, 1759.3333333333333], [180.0, 1883.0], [179.0, 1881.0], [176.0, 1666.5], [191.0, 1761.0], [190.0, 2084.0], [189.0, 1874.0], [187.0, 2838.0], [186.0, 1497.0], [185.0, 1888.0], [184.0, 1882.0], [199.0, 1344.0], [197.0, 1609.0], [196.0, 2174.0], [195.0, 1630.0], [194.0, 3072.0], [193.0, 2276.0], [192.0, 1442.0], [207.0, 2357.0], [206.0, 1825.0], [204.0, 1744.0], [203.0, 1841.0], [202.0, 1823.0], [201.0, 2350.0], [200.0, 2366.0], [215.0, 2064.5], [213.0, 2504.0], [211.0, 1828.0], [210.0, 2331.0], [209.0, 1738.0], [208.0, 2347.0], [223.0, 2200.0], [222.0, 2129.0], [221.0, 1597.5], [219.0, 2326.0], [217.0, 1818.0], [216.0, 1729.0], [231.0, 2081.0], [230.0, 1953.0], [229.0, 1723.0], [228.0, 1963.0], [227.0, 1756.0], [226.0, 1536.0], [225.0, 1521.0], [224.0, 1372.0], [239.0, 1509.0], [238.0, 1489.0], [237.0, 2076.0], [236.0, 1372.0], [235.0, 1521.0], [234.0, 1954.0], [233.0, 2180.0], [232.0, 2080.0], [247.0, 1478.0], [246.0, 1214.0], [245.0, 1342.0], [244.0, 3073.0], [243.0, 2053.0], [242.0, 2055.0], [241.0, 2197.0], [240.0, 1293.0], [255.0, 2965.0], [254.0, 2996.0], [253.0, 2714.0], [252.0, 2515.0], [251.0, 3009.0], [250.0, 2994.0], [249.0, 2525.0], [248.0, 1477.0], [270.0, 2831.0], [271.0, 2930.0], [269.0, 2686.0], [268.0, 2947.0], [267.0, 2969.0], [266.0, 2465.5], [264.0, 2835.0], [263.0, 2685.0], [257.0, 2860.0], [256.0, 2477.0], [259.0, 2505.0], [258.0, 2699.0], [262.0, 2962.0], [261.0, 2955.0], [260.0, 2580.0], [286.0, 2648.0], [287.0, 2465.0], [285.0, 2546.0], [284.0, 2480.0], [283.0, 2934.0], [282.0, 2954.0], [281.0, 2943.0], [280.0, 2659.0], [279.0, 2564.0], [273.0, 2971.0], [272.0, 1257.0], [275.0, 2940.0], [274.0, 1633.0], [278.0, 2474.0], [277.0, 2475.0], [276.0, 2666.0], [302.0, 2880.0], [303.0, 2906.0], [301.0, 2894.0], [300.0, 1158.0], [299.0, 2452.0], [298.0, 2635.0], [297.0, 2902.0], [295.0, 2911.0], [289.0, 2945.0], [288.0, 2813.0], [291.0, 2945.0], [290.0, 2914.0], [294.0, 1932.5], [293.0, 2928.0], [292.0, 1219.0], [318.0, 2396.0], [319.0, 2588.0], [317.0, 2884.0], [316.0, 2876.0], [315.0, 2406.0], [314.0, 2869.0], [313.0, 2622.0], [312.0, 2507.0], [311.0, 2879.0], [305.0, 2949.0], [304.0, 2919.0], [307.0, 1992.0], [306.0, 2782.0], [310.0, 1787.0], [309.0, 2875.0], [308.0, 2036.0], [334.0, 1598.0], [335.0, 1249.0], [333.0, 2442.0], [332.0, 2870.0], [331.0, 2826.0], [330.0, 2794.0], [329.0, 2852.0], [328.0, 1261.0], [327.0, 1075.0], [321.0, 1997.0], [320.0, 2473.0], [323.0, 2380.0], [322.0, 1849.0], [326.0, 1279.0], [325.0, 2852.0], [324.0, 2839.0], [350.0, 1670.0], [351.0, 2024.0], [349.0, 1585.0], [348.0, 2023.0], [347.0, 1933.0], [346.0, 1586.0], [345.0, 1595.0], [344.0, 8696.625], [336.0, 2339.0], [366.0, 1907.0], [367.0, 2022.0], [365.0, 1755.0], [364.0, 1752.0], [363.0, 1649.0], [362.0, 1759.0], [361.0, 2031.0], [360.0, 2017.0], [359.0, 1663.0], [353.0, 2041.0], [352.0, 1516.0], [355.0, 2051.0], [354.0, 1775.0], [358.0, 1541.0], [357.0, 1543.0], [356.0, 1659.0], [380.0, 1658.0], [382.0, 857.0], [383.0, 1690.0], [381.0, 1684.0], [377.0, 419.0], [376.0, 621.0], [375.0, 409.0], [369.0, 1004.0], [368.0, 2019.0], [371.0, 995.0], [370.0, 1129.0], [374.0, 1454.0], [373.0, 412.0], [372.0, 681.0], [396.0, 1540.0], [398.0, 1648.0], [399.0, 1637.0], [397.0, 1638.0], [394.0, 1901.0], [392.0, 823.0], [391.0, 1670.0], [385.0, 1096.0], [384.0, 1193.5], [387.0, 825.0], [386.0, 1312.0], [390.0, 1663.0], [389.0, 375.0], [388.0, 1673.0], [414.0, 1887.0], [415.0, 1772.5], [413.0, 1604.0], [403.0, 1421.0], [402.0, 1638.0], [401.0, 1802.0], [400.0, 1893.0], [411.0, 1639.0], [410.0, 1630.0], [409.0, 1650.0], [408.0, 1799.0], [407.0, 1878.0], [406.0, 1537.0], [405.0, 1862.5], [430.0, 1485.0], [431.0, 1487.0], [429.0, 1025.0], [428.0, 1378.0], [427.0, 1375.0], [426.0, 319.0], [425.0, 317.0], [424.0, 999.0], [423.0, 1782.0], [417.0, 1640.0], [416.0, 1619.0], [419.0, 1039.0], [418.0, 1004.0], [422.0, 1882.0], [421.0, 1046.0], [420.0, 913.0], [446.0, 2080.0], [447.0, 2451.0], [445.0, 1602.0], [444.0, 1688.0], [443.0, 1726.0], [442.0, 1729.0], [441.0, 1832.0], [440.0, 1850.0], [439.0, 1819.0], [433.0, 1485.0], [432.0, 1496.0], [435.0, 1362.0], [434.0, 1344.0], [438.0, 1837.0], [437.0, 1831.0], [436.0, 1008.0], [463.0, 2390.0], [462.0, 2386.0], [461.0, 2389.0], [456.0, 2066.0], [454.0, 2319.0], [449.0, 2051.0], [448.0, 2078.0], [479.0, 2044.0], [478.0, 2031.0], [475.0, 2368.0], [470.0, 2315.0], [469.0, 2187.0], [465.0, 2375.0], [464.0, 2365.0], [494.0, 2291.0], [495.0, 2067.0], [493.0, 2343.0], [492.0, 2287.0], [491.0, 2326.0], [490.0, 2006.0], [489.0, 2348.0], [488.0, 1994.0], [487.0, 2023.0], [481.0, 2008.0], [483.0, 2289.0], [482.0, 2383.0], [486.0, 2212.8421052631575], [485.0, 2004.0], [484.0, 2272.0], [510.0, 796.0], [511.0, 828.0], [509.0, 746.0], [508.0, 482.5], [507.0, 834.0], [506.0, 762.0], [505.0, 487.0], [504.0, 845.0], [503.0, 475.0], [497.0, 1283.9655172413795], [496.0, 1268.333333333333], [499.0, 848.0], [498.0, 777.0], [502.0, 847.0], [501.0, 838.5], [540.0, 745.0], [543.0, 1256.0], [529.0, 605.0], [531.0, 442.0], [530.0, 438.0], [533.0, 783.0], [532.0, 737.0], [542.0, 405.0], [541.0, 402.0], [539.0, 750.0], [538.0, 396.0], [537.0, 656.0], [536.0, 412.0], [527.0, 602.5], [513.0, 808.0], [512.0, 805.0], [515.0, 482.0], [514.0, 815.0], [517.0, 474.0], [516.0, 796.0], [519.0, 760.0], [518.0, 463.0], [525.0, 798.0], [524.0, 456.0], [523.0, 775.0], [522.0, 749.0], [521.0, 474.0], [520.0, 723.0], [535.0, 757.0], [534.0, 424.0], [574.0, 1133.0], [575.0, 1122.0], [560.0, 1149.0], [563.0, 1171.5], [562.0, 1219.6666666666667], [565.0, 1157.0], [564.0, 1183.0], [573.0, 1187.0], [571.0, 1165.0], [570.0, 1201.0], [569.0, 1163.0], [568.0, 1153.0], [549.0, 1156.0], [548.0, 1246.0], [547.0, 1170.0], [546.0, 1216.0], [544.0, 1206.0], [558.0, 1150.0], [557.0, 1159.0], [556.0, 1223.0], [555.0, 1238.0], [567.0, 1146.0], [566.0, 1170.5], [602.0, 2393.0], [606.0, 1102.0], [607.0, 2319.0], [592.0, 2362.0], [595.0, 2328.0], [594.0, 1772.0], [597.0, 1160.0], [596.0, 2420.0], [605.0, 1088.0], [604.0, 1078.0], [603.0, 2333.0], [600.0, 2415.0], [583.0, 1162.0], [582.0, 1136.0], [581.0, 1160.0], [580.0, 2342.0], [579.0, 1187.0], [578.0, 1122.0], [577.0, 1207.0], [576.0, 1179.0], [591.0, 2428.0], [590.0, 2369.0], [589.0, 1145.0], [588.0, 1751.0], [586.0, 1134.0], [584.0, 1117.0], [599.0, 2349.0], [598.0, 2353.0], [632.0, 911.0], [637.0, 963.0], [639.0, 944.0], [624.0, 952.0], [627.0, 956.0], [625.0, 953.5], [636.0, 922.0], [635.0, 933.5], [633.0, 956.0], [623.0, 940.0], [608.0, 1012.0], [611.0, 1026.0], [610.0, 1035.0], [613.0, 971.0], [612.0, 962.0], [615.0, 1019.0], [614.0, 1011.0], [622.0, 958.0], [621.0, 943.0], [620.0, 974.0], [619.0, 955.0], [618.0, 932.0], [617.0, 983.5], [631.0, 1001.0], [630.0, 916.0], [629.0, 916.0], [628.0, 1003.0], [668.0, 2076.0], [671.0, 1978.0], [657.0, 874.0], [659.0, 916.0], [658.0, 858.0], [661.0, 854.0], [660.0, 934.0], [670.0, 774.0], [669.0, 2085.0], [667.0, 2051.0], [666.0, 819.0], [665.0, 2051.0], [664.0, 2063.0], [655.0, 888.0], [640.0, 897.0], [642.0, 904.0], [641.0, 903.0], [644.0, 886.0], [643.0, 956.0], [646.0, 915.0], [645.0, 891.0], [654.0, 858.0], [653.0, 870.0], [652.0, 888.0], [651.0, 873.0], [650.0, 912.0], [649.0, 955.0], [648.0, 917.5], [663.0, 911.0], [662.0, 858.0], [700.0, 1656.0], [703.0, 1482.0], [689.0, 1783.0], [688.0, 1802.0], [691.0, 1660.0], [690.0, 1725.0], [693.0, 1705.0], [692.0, 1735.0], [702.0, 1536.0], [701.0, 2318.0], [699.0, 1542.0], [698.0, 1474.0], [697.0, 1537.0], [696.0, 1717.0], [687.0, 1792.0], [673.0, 1923.0], [672.0, 2011.0], [675.0, 1876.0], [674.0, 2054.0], [677.0, 685.0], [676.0, 2048.0], [679.0, 702.0], [678.0, 1895.0], [685.0, 1838.0], [684.0, 1927.0], [683.0, 689.0], [682.0, 1947.0], [681.0, 1995.0], [680.0, 1958.0], [695.0, 1615.0], [694.0, 1716.0], [724.0, 1468.0], [729.0, 1463.0], [728.0, 1407.0], [711.0, 1909.5], [710.0, 1440.0], [709.0, 1525.0], [708.0, 1525.0], [707.0, 1556.0], [706.0, 1647.0], [705.0, 1474.0], [704.0, 1659.0], [727.0, 1411.0], [726.0, 1396.0], [725.0, 1410.0], [723.0, 1421.0], [722.0, 1383.0], [713.0, 1415.0], [712.0, 1584.0], [761.0, 1266.0], [766.0, 1659.5], [767.0, 1364.5], [753.0, 1299.0], [752.0, 1314.0], [755.0, 1442.0], [754.0, 1364.0], [757.0, 1296.0], [756.0, 1349.0], [764.0, 1337.0], [763.0, 1380.0], [762.0, 1286.0], [760.0, 1290.0], [743.0, 1409.0625000000002], [740.0, 1416.0], [738.0, 1363.0], [737.0, 1378.0], [751.0, 1464.0], [750.0, 1428.0], [749.0, 1325.0], [748.0, 1458.0], [747.0, 1465.0], [746.0, 1456.0], [745.0, 1339.0], [744.0, 1335.0], [759.0, 1301.0], [758.0, 1331.0], [793.0, 1560.5], [797.0, 1933.0], [798.0, 1932.5], [784.0, 1252.0], [796.0, 1947.0], [795.0, 1912.0], [794.0, 1567.5], [783.0, 1169.0], [768.0, 1430.0], [770.0, 1362.0], [769.0, 1317.0], [772.0, 1351.0], [771.0, 1264.0], [774.0, 1293.0], [773.0, 1265.0], [782.0, 1240.0], [781.0, 2036.0], [780.0, 1991.0], [779.0, 1250.0], [778.0, 1368.0], [777.0, 1274.0], [791.0, 1290.0], [790.0, 1549.0], [788.0, 1576.0], [785.0, 1172.0], [830.0, 1142.0], [831.0, 1914.0], [818.0, 1910.5], [816.0, 1609.5], [829.0, 1158.0], [828.0, 1177.5], [826.0, 1260.0], [825.0, 1904.0], [824.0, 1905.0], [807.0, 1908.0], [806.0, 1257.0], [805.0, 1919.0], [804.0, 1903.5], [802.0, 1925.0], [800.0, 1952.0], [815.0, 1613.0], [813.0, 1938.0], [811.0, 1954.0], [809.0, 1608.0], [822.0, 1933.0], [820.0, 1922.0], [860.0, 2019.0], [863.0, 1999.0], [849.0, 2072.0], [848.0, 2088.0], [851.0, 2071.0], [850.0, 2066.0], [853.0, 2037.0], [852.0, 2029.0], [862.0, 2027.0], [861.0, 2047.0], [859.0, 2061.0], [858.0, 2030.0], [857.0, 2081.0], [856.0, 1524.0], [847.0, 2064.0], [834.0, 1554.0], [832.0, 1202.0], [837.0, 1875.0], [835.0, 1855.0], [839.0, 1021.0], [838.0, 1074.0], [846.0, 1550.0], [844.0, 2037.0], [843.0, 1551.0], [842.0, 1551.0], [841.0, 1163.0], [840.0, 1101.0], [855.0, 2057.0], [854.0, 2083.0], [892.0, 1991.0], [895.0, 1472.0], [881.0, 1973.0], [880.0, 2035.0], [883.0, 1493.0], [882.0, 1970.0], [885.0, 2000.0], [884.0, 1978.0], [894.0, 1970.0], [893.0, 1982.0], [891.0, 2026.0], [890.0, 1502.0], [889.0, 1968.0], [888.0, 1993.0], [879.0, 2040.0], [865.0, 2046.0], [864.0, 2009.0], [867.0, 2065.0], [866.0, 2038.0], [869.0, 2048.0], [868.0, 2041.0], [871.0, 2017.0], [870.0, 1996.0], [878.0, 1517.0], [877.0, 2002.0], [876.0, 2043.0], [875.0, 1997.0], [874.0, 2009.0], [873.0, 2002.0], [872.0, 2056.0], [887.0, 1977.0], [886.0, 1962.0], [924.0, 1180.0], [927.0, 1112.0], [913.0, 811.0], [912.0, 814.0], [915.0, 791.0], [914.0, 793.0], [917.0, 1207.0], [916.0, 1250.0], [926.0, 492.0], [925.0, 1195.0], [923.0, 1224.0], [922.0, 1196.0], [921.0, 1190.0], [920.0, 1180.0], [911.0, 1922.0], [897.0, 1466.0], [896.0, 1977.0], [899.0, 2009.0], [898.0, 1496.0], [901.0, 1969.0], [900.0, 2003.0], [903.0, 2006.0], [902.0, 1941.0], [910.0, 1937.0], [909.0, 1990.0], [908.0, 1924.0], [907.0, 1941.0], [906.0, 1956.0], [905.0, 1939.0], [904.0, 1943.0], [919.0, 1223.0], [918.0, 1198.0], [952.0, 1079.0], [956.0, 1278.0], [959.0, 1255.0], [945.0, 939.0], [944.0, 978.0], [947.0, 939.0], [946.0, 936.0], [958.0, 1270.0], [957.0, 1275.0], [955.0, 1283.0], [954.0, 837.0], [953.0, 1364.0], [943.0, 933.0], [929.0, 403.0], [928.0, 402.0], [931.0, 381.0], [930.0, 403.0], [933.0, 384.0], [932.0, 357.0], [935.0, 1035.0], [934.0, 992.0], [942.0, 991.0], [941.0, 957.0], [940.0, 985.0], [939.0, 991.0], [938.0, 985.0], [937.0, 1016.0], [936.0, 363.0], [950.0, 976.0], [949.0, 947.0], [988.0, 1833.0], [991.0, 1609.0], [977.0, 992.0], [976.0, 982.0], [979.0, 982.0], [978.0, 966.0], [981.0, 960.0], [980.0, 976.0], [990.0, 49749.0], [989.0, 1828.0], [987.0, 973.0], [986.0, 972.0], [985.0, 997.0], [984.0, 983.0], [975.0, 49704.0], [961.0, 1252.0], [960.0, 1321.0], [963.0, 1253.0], [962.0, 1252.0], [965.0, 1307.0], [964.0, 1263.0], [967.0, 1181.0], [966.0, 1163.0], [974.0, 1000.0], [973.0, 1149.0], [972.0, 1115.0], [971.0, 1113.0], [970.0, 1131.0], [969.0, 1097.0], [968.0, 1194.0], [983.0, 951.0], [982.0, 958.0], [1020.0, 1313.0], [1023.0, 1305.0], [1008.0, 1342.0], [1011.0, 1384.0], [1009.0, 1307.0], [1013.0, 1301.0], [1012.0, 1327.0], [1022.0, 1289.0], [1021.0, 1366.0], [1019.0, 1357.0], [1018.0, 1264.0], [1017.0, 1370.0], [1016.0, 1273.0], [1007.0, 1365.0], [993.0, 1511.0], [992.0, 1621.0], [995.0, 1533.0], [994.0, 1581.0], [997.0, 1585.0], [996.0, 1527.0], [999.0, 1467.0], [998.0, 1603.0], [1006.0, 1421.0], [1005.0, 1411.0], [1004.0, 1382.0], [1003.0, 1371.0], [1002.0, 1382.0], [1001.0, 1368.0], [1000.0, 1516.0], [1015.0, 1292.5], [1014.0, 1366.0], [1086.0, 811.5], [1056.0, 955.0], [1058.0, 924.0], [1060.0, 909.0], [1062.0, 896.0], [1064.0, 897.0], [1066.0, 882.0], [1068.0, 881.0], [1070.0, 811.0], [1084.0, 727.0], [1082.0, 835.0], [1080.0, 757.0], [1078.0, 760.0], [1076.0, 782.0], [1074.0, 762.0], [1072.0, 870.0], [1038.0, 1079.0], [1036.0, 49126.0], [1032.0, 1224.0], [1030.0, 1189.0], [1028.0, 1275.0], [1026.0, 1301.0], [1024.0, 1338.0], [1054.0, 875.0], [1052.0, 970.0], [1050.0, 950.0], [1048.0, 906.0], [1046.0, 958.0], [1044.0, 985.0], [1042.0, 979.0], [1040.0, 1044.0], [1142.0, 390.0], [1138.0, 445.0], [1120.0, 444.0], [1126.0, 454.5], [1124.0, 457.0], [1128.0, 465.0], [1130.0, 427.0], [1134.0, 432.0], [1148.0, 381.0], [1146.0, 384.0], [1144.0, 408.0], [1140.0, 416.0], [1136.0, 452.0], [1088.0, 737.0], [1090.0, 720.0], [1092.0, 805.0], [1094.0, 788.0], [1096.0, 678.0], [1098.0, 627.0], [1100.0, 622.0], [1102.0, 47433.0], [1118.0, 452.0], [1112.0, 451.0], [1110.0, 478.0], [1104.0, 496.0], [1206.0, 553.0], [1188.0, 615.3333333333334], [1184.0, 620.3333333333334], [1190.0, 596.0], [1192.0, 647.0], [1194.0, 636.0], [1198.0, 600.0], [1210.0, 549.0], [1208.0, 546.0], [1204.0, 576.0], [1200.0, 551.0], [1182.0, 657.5], [1152.0, 361.0], [1154.0, 330.0], [1156.0, 331.0], [1158.0, 624.0], [1164.0, 668.0], [1180.0, 677.0], [1178.0, 664.0], [1176.0, 678.0], [1168.0, 633.0], [1270.0, 224.0], [1252.0, 314.0], [1276.0, 207.0], [1248.0, 305.0], [1250.0, 313.0], [1254.0, 290.0], [1258.0, 290.0], [1262.0, 286.0], [1274.0, 227.0], [1272.0, 224.0], [1268.0, 249.0], [1266.0, 259.0], [1264.0, 256.0], [1228.0, 402.0], [1226.0, 484.0], [1224.0, 482.5], [1222.0, 477.0], [1220.0, 529.0], [1218.0, 491.0], [1216.0, 560.0], [1246.0, 320.0], [1242.0, 297.0], [1240.0, 308.0], [1238.0, 65.0], [1236.0, 87.0], [1234.0, 101.25], [1342.0, 402.0], [1312.0, 667.5], [1314.0, 660.0], [1316.0, 656.0], [1318.0, 628.5], [1320.0, 591.0], [1322.0, 594.0], [1324.0, 620.0], [1326.0, 612.0], [1338.0, 543.0], [1336.0, 560.0], [1332.0, 542.0], [1330.0, 594.0], [1328.0, 591.0], [1310.0, 658.3333333333334], [1286.0, 795.0], [1290.0, 730.0], [1288.0, 772.5], [1294.0, 731.5], [1292.0, 753.3333333333334], [1300.0, 743.5], [1296.0, 748.0], [1396.0, 278.0], [1376.0, 165.0], [1378.0, 348.0], [1386.0, 315.0], [1390.0, 322.5], [1406.0, 348.0], [1402.0, 212.0], [1400.0, 245.0], [1398.0, 269.0], [1392.0, 297.0], [1344.0, 41861.0], [1346.0, 40254.0], [1348.0, 249.0], [1352.0, 341.0], [1354.0, 240.0], [1356.0, 332.0], [1358.0, 341.0], [1374.0, 183.0], [1372.0, 261.0], [1370.0, 164.0], [1368.0, 293.0], [1366.0, 286.0], [1364.0, 292.0], [1362.0, 314.5], [1360.0, 333.0], [1418.0, 64.0], [1466.0, 1009.0], [1436.0, 977.0], [1426.0, 1026.5], [1422.0, 972.0], [1420.0, 34602.0], [1416.0, 133.33333333333334], [1414.0, 141.0], [1412.0, 212.0], [1410.0, 319.0], [1528.0, 25357.0], [1530.0, 1010.0], [1534.0, 946.0], [1506.0, 762.0], [1510.0, 743.0], [1512.0, 807.5], [1514.0, 801.0], [1516.0, 818.0], [1518.0, 737.0], [1526.0, 26654.0], [1524.0, 26930.0], [1522.0, 524.0], [1520.0, 758.0], [1480.0, 971.5], [1478.0, 943.0], [1482.0, 978.6666666666666], [1498.0, 873.0], [1496.0, 856.0], [1494.0, 851.0], [1488.0, 946.5], [1590.0, 728.0], [1596.0, 637.0], [1568.0, 899.6666666666666], [1570.0, 884.0], [1572.0, 833.0], [1574.0, 815.0], [1578.0, 813.0], [1580.0, 690.0], [1598.0, 695.0], [1592.0, 686.0], [1588.0, 647.0], [1586.0, 701.0], [1584.0, 705.0], [1550.0, 973.0], [1542.0, 982.0], [1540.0, 906.0], [1538.0, 963.0], [1536.0, 1006.5], [1566.0, 871.0], [1564.0, 893.0], [1562.0, 872.0], [1560.0, 895.0], [1556.0, 915.0], [1554.0, 910.0], [1552.0, 909.0], [1656.0, 342.0], [1654.0, 382.0], [1632.0, 479.0], [1636.0, 482.5], [1634.0, 479.0], [1638.0, 492.0], [1642.0, 489.0], [1644.0, 448.0], [1646.0, 447.0], [1662.0, 313.0], [1652.0, 418.0], [1650.0, 444.0], [1648.0, 463.0], [1614.0, 27392.0], [1612.0, 447.0], [1610.0, 576.0], [1608.0, 576.0], [1606.0, 592.5], [1604.0, 606.0], [1602.0, 676.5], [1600.0, 671.0], [1630.0, 483.0], [1628.0, 501.0], [1626.0, 476.0], [1624.0, 483.0], [1622.0, 19334.0], [1620.0, 20233.0], [1618.0, 20296.0], [1616.0, 27063.0], [1670.0, 12704.0], [1668.0, 12318.0], [1666.0, 200.0], [1664.0, 229.0], [1079.0, 791.0], [1075.0, 788.0], [1083.0, 798.0], [1087.0, 826.0], [1057.0, 856.0], [1059.0, 886.0], [1061.0, 903.0], [1063.0, 861.0], [1065.0, 883.0], [1067.0, 847.0], [1069.0, 813.0], [1071.0, 869.0], [1081.0, 825.0], [1077.0, 856.0], [1073.0, 787.0], [1039.0, 1019.0], [1037.0, 1125.0], [1035.0, 49145.0], [1033.0, 1227.0], [1031.0, 1255.0], [1029.0, 1220.0], [1027.0, 1262.0], [1025.0, 1347.0], [1055.0, 939.0], [1053.0, 866.0], [1051.0, 929.5], [1049.0, 975.0], [1047.0, 956.0], [1045.0, 897.0], [1043.0, 956.0], [1041.0, 1061.0], [1147.0, 399.0], [1151.0, 375.0], [1123.0, 466.0], [1121.0, 482.0], [1127.0, 443.0], [1129.0, 444.0], [1133.0, 444.5], [1131.0, 433.0], [1135.0, 448.0], [1149.0, 402.0], [1145.0, 387.0], [1141.0, 415.0], [1139.0, 439.0], [1137.0, 435.0], [1119.0, 486.0], [1089.0, 724.0], [1091.0, 718.0], [1093.0, 756.0], [1095.0, 699.0], [1097.0, 608.0], [1099.0, 559.0], [1101.0, 593.0], [1103.0, 481.0], [1117.0, 464.5], [1115.0, 477.3333333333333], [1109.0, 493.6666666666667], [1105.0, 498.0], [1209.0, 515.0], [1191.0, 605.0], [1215.0, 560.0], [1189.0, 642.0], [1193.0, 653.0], [1197.0, 599.9285714285713], [1195.0, 619.0], [1199.0, 561.0], [1211.0, 516.0], [1207.0, 550.0], [1205.0, 534.0], [1203.0, 562.5], [1201.0, 554.0], [1153.0, 346.0], [1155.0, 336.0], [1157.0, 648.0], [1163.0, 673.0], [1181.0, 612.0], [1175.0, 612.0], [1171.0, 672.0], [1269.0, 244.0], [1273.0, 226.5], [1249.0, 291.0], [1251.0, 287.0], [1253.0, 284.0], [1255.0, 287.0], [1259.0, 293.0], [1261.0, 289.5], [1275.0, 222.0], [1271.0, 233.0], [1267.0, 253.0], [1265.0, 243.0], [1227.0, 480.0], [1225.0, 482.0], [1223.0, 500.0], [1221.0, 495.0], [1219.0, 531.0], [1217.0, 521.0], [1247.0, 305.0], [1245.0, 310.0], [1243.0, 323.0], [1241.0, 311.0], [1239.0, 63.0], [1237.0, 69.0], [1235.0, 94.0], [1233.0, 104.0], [1339.0, 42237.0], [1343.0, 42116.0], [1313.0, 676.0], [1315.0, 629.0], [1317.0, 644.0], [1319.0, 655.0], [1321.0, 594.0], [1323.0, 600.5], [1325.0, 570.0], [1327.0, 599.0], [1341.0, 369.0], [1337.0, 539.5], [1335.0, 525.0], [1333.0, 498.0], [1331.0, 598.0], [1329.0, 552.0], [1281.0, 801.0], [1287.0, 761.0], [1293.0, 732.0], [1295.0, 729.0], [1307.0, 684.0], [1305.0, 718.5], [1299.0, 722.5], [1297.0, 730.0], [1395.0, 289.0], [1403.0, 202.0], [1407.0, 341.0], [1377.0, 35058.0], [1385.0, 326.2857142857143], [1387.0, 305.0], [1391.0, 17662.5], [1405.0, 347.5], [1401.0, 236.0], [1399.0, 280.5], [1397.0, 275.0], [1393.0, 295.0], [1375.0, 182.0], [1345.0, 41821.0], [1347.0, 266.0], [1349.0, 257.0], [1351.0, 252.0], [1353.0, 352.0], [1355.0, 343.0], [1357.0, 323.0], [1373.0, 193.0], [1371.0, 261.0], [1369.0, 288.0], [1367.0, 291.0], [1365.0, 295.0], [1363.0, 314.0], [1361.0, 218.0], [1419.0, 64.0], [1423.0, 1026.0], [1467.0, 960.0], [1457.0, 960.0], [1431.0, 1028.0], [1429.0, 1052.0], [1421.0, 1007.0], [1417.0, 55.0], [1413.0, 17430.0], [1411.0, 314.0], [1529.0, 947.0], [1505.0, 789.5], [1507.0, 830.0], [1511.0, 827.0], [1513.0, 760.0], [1517.0, 756.0], [1519.0, 723.0], [1533.0, 1002.0], [1531.0, 1002.0], [1527.0, 26224.0], [1525.0, 26803.0], [1523.0, 32284.0], [1521.0, 604.0], [1503.0, 841.6666666666666], [1475.0, 897.0], [1481.0, 933.0], [1485.0, 968.0], [1483.0, 993.0], [1501.0, 880.0], [1499.0, 871.0], [1497.0, 826.0], [1495.0, 840.0], [1493.0, 912.4358974358975], [1595.0, 670.5], [1587.0, 711.0], [1599.0, 630.0], [1569.0, 833.0], [1571.0, 838.0], [1573.0, 827.0], [1575.0, 815.0], [1577.0, 806.0], [1579.0, 760.0], [1583.0, 716.0], [1581.0, 672.0], [1597.0, 661.0], [1593.0, 640.0], [1591.0, 730.0], [1589.0, 724.0], [1585.0, 710.0], [1551.0, 901.0], [1549.0, 971.0], [1547.0, 904.0], [1545.0, 960.0], [1543.0, 956.0], [1541.0, 918.0], [1539.0, 978.0], [1537.0, 988.0], [1567.0, 865.5], [1565.0, 926.0], [1563.0, 920.0], [1561.0, 949.0], [1559.0, 894.0], [1557.0, 864.0], [1555.0, 928.0], [1553.0, 926.0], [1659.0, 345.0], [1639.0, 470.0], [1663.0, 255.0], [1637.0, 472.0], [1641.0, 478.0], [1643.0, 443.0], [1645.0, 484.0], [1647.0, 466.0], [1661.0, 323.0], [1657.0, 329.0], [1655.0, 356.0], [1653.0, 390.0], [1649.0, 471.0], [1615.0, 27128.0], [1613.0, 27372.0], [1611.0, 528.0], [1609.0, 570.0], [1607.0, 600.0], [1603.0, 597.0], [1601.0, 686.5], [1629.0, 479.0], [1625.0, 491.0], [1623.0, 520.0], [1621.0, 19722.0], [1619.0, 20120.0], [1617.0, 25975.0], [1671.0, 12141.0], [1669.0, 12084.0], [1667.0, 13160.0], [1665.0, 232.0], [1.0, 90253.5]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}, {"data": [[822.7262857142853, 5642.266285714284]], "isOverall": false, "label": "Sunstar Home Japan-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1671.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 25.8, "minX": 1.62786061E12, "maxY": 2464118.4, "series": [{"data": [[1.62786066E12, 2284342.1], [1.62786065E12, 2464118.4], [1.62786064E12, 764976.2], [1.62786063E12, 21156.8], [1.62786078E12, 101608.6], [1.62786062E12, 313749.2], [1.62786061E12, 190366.5], [1.62786077E12, 7051.8], [1.62786072E12, 21164.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62786066E12, 8359.2], [1.62786065E12, 9017.1], [1.62786064E12, 2799.3], [1.62786063E12, 77.4], [1.62786078E12, 374.1], [1.62786062E12, 1148.1], [1.62786061E12, 696.6], [1.62786077E12, 25.8], [1.62786072E12, 77.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786078E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1438.3791130185987, "minX": 1.62786061E12, "maxY": 173631.00000000003, "series": [{"data": [[1.62786066E12, 2687.979938271606], [1.62786065E12, 1438.3791130185987], [1.62786064E12, 2206.838709677419], [1.62786063E12, 27375.333333333332], [1.62786078E12, 173631.00000000003], [1.62786062E12, 2276.157303370784], [1.62786061E12, 3344.259259259259], [1.62786077E12, 171572.5], [1.62786072E12, 120330.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786078E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1432.067238912733, "minX": 1.62786061E12, "maxY": 173627.34482758623, "series": [{"data": [[1.62786066E12, 2678.7839506172822], [1.62786065E12, 1432.067238912733], [1.62786064E12, 2198.9861751152075], [1.62786063E12, 27370.666666666668], [1.62786078E12, 173627.34482758623], [1.62786062E12, 2263.651685393257], [1.62786061E12, 3327.592592592593], [1.62786077E12, 171530.5], [1.62786072E12, 120328.16666666667]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786078E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 112.5, "minX": 1.62786061E12, "maxY": 1714.0663580246915, "series": [{"data": [[1.62786066E12, 1714.0663580246915], [1.62786065E12, 1052.7682403433478], [1.62786064E12, 581.5299539170505], [1.62786063E12, 190.5], [1.62786078E12, 263.4137931034483], [1.62786062E12, 727.6853932584269], [1.62786061E12, 383.0000000000001], [1.62786077E12, 112.5], [1.62786072E12, 292.1666666666667]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786078E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 55.0, "minX": 1.62786061E12, "maxY": 180449.0, "series": [{"data": [[1.62786066E12, 60379.0], [1.62786065E12, 49749.0], [1.62786064E12, 42237.0], [1.62786063E12, 32284.0], [1.62786078E12, 180449.0], [1.62786062E12, 27392.0], [1.62786061E12, 20296.0], [1.62786077E12, 171760.0], [1.62786072E12, 120361.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62786066E12, 317.0], [1.62786065E12, 63.0], [1.62786064E12, 55.0], [1.62786063E12, 25357.0], [1.62786078E12, 58.0], [1.62786062E12, 447.0], [1.62786061E12, 200.0], [1.62786077E12, 171385.0], [1.62786072E12, 120282.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62786066E12, 2835.3], [1.62786065E12, 1970.0], [1.62786064E12, 987.4000000000002], [1.62786063E12, 32284.0], [1.62786078E12, 180396.0], [1.62786062E12, 1002.0], [1.62786061E12, 16247.0], [1.62786077E12, 171760.0], [1.62786072E12, 120361.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62786066E12, 58483.70999999999], [1.62786065E12, 2318.0], [1.62786064E12, 42070.1], [1.62786063E12, 32284.0], [1.62786078E12, 180449.0], [1.62786062E12, 27392.0], [1.62786061E12, 20296.0], [1.62786077E12, 171760.0], [1.62786072E12, 120361.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62786066E12, 2951.75], [1.62786065E12, 2040.0], [1.62786064E12, 1039.3999999999999], [1.62786063E12, 32284.0], [1.62786078E12, 180436.5], [1.62786062E12, 26519.0], [1.62786061E12, 20148.25], [1.62786077E12, 171760.0], [1.62786072E12, 120361.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786078E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 289.5, "minX": 1.0, "maxY": 180350.0, "series": [{"data": [[32.0, 474.0], [2.0, 171572.5], [40.0, 598.5], [41.0, 496.0], [42.0, 620.0], [44.0, 307.5], [3.0, 42159.0], [54.0, 444.0], [4.0, 16213.0], [66.0, 312.0], [64.0, 1172.5], [69.0, 1035.0], [71.0, 2051.0], [5.0, 60341.0], [84.0, 835.5], [6.0, 120340.5], [102.0, 915.5], [104.0, 962.5], [112.0, 1639.5], [153.0, 1935.0], [171.0, 1339.0], [13.0, 324.0], [1.0, 32284.0], [288.0, 2287.5], [24.0, 180350.0], [30.0, 289.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 288.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 287.0, "minX": 1.0, "maxY": 180348.0, "series": [{"data": [[32.0, 469.5], [2.0, 171530.5], [40.0, 597.0], [41.0, 491.0], [42.0, 616.0], [44.0, 291.5], [3.0, 42128.5], [54.0, 442.5], [4.0, 16125.5], [66.0, 311.0], [64.0, 1172.0], [69.0, 1035.0], [71.0, 2051.0], [5.0, 60339.0], [84.0, 830.0], [6.0, 120338.5], [102.0, 909.0], [104.0, 960.5], [112.0, 1639.5], [153.0, 1934.0], [171.0, 1334.0], [13.0, 318.0], [1.0, 32263.0], [288.0, 2287.5], [24.0, 180348.0], [30.0, 287.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 288.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786059E12, "maxY": 72.9, "series": [{"data": [[1.62786066E12, 57.4], [1.62786065E12, 72.9], [1.62786064E12, 23.7], [1.62786078E12, 0.1], [1.62786062E12, 8.4], [1.62786061E12, 4.4], [1.6278606E12, 6.7], [1.62786059E12, 1.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786078E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62786061E12, "maxY": 69.9, "series": [{"data": [[1.62786066E12, 64.8], [1.62786065E12, 69.9], [1.62786064E12, 21.7], [1.62786063E12, 0.6], [1.62786078E12, 2.9], [1.62786062E12, 8.9], [1.62786061E12, 5.4], [1.62786077E12, 0.2], [1.62786072E12, 0.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786078E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62786061E12, "maxY": 69.9, "series": [{"data": [[1.62786066E12, 64.8], [1.62786065E12, 69.9], [1.62786064E12, 21.7], [1.62786063E12, 0.6], [1.62786078E12, 2.9], [1.62786062E12, 8.9], [1.62786061E12, 5.4], [1.62786077E12, 0.2], [1.62786072E12, 0.6]], "isOverall": false, "label": "Sunstar Home Japan-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786078E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62786061E12, "maxY": 69.9, "series": [{"data": [[1.62786066E12, 64.8], [1.62786065E12, 69.9], [1.62786064E12, 21.7], [1.62786063E12, 0.6], [1.62786078E12, 2.9], [1.62786062E12, 8.9], [1.62786061E12, 5.4], [1.62786077E12, 0.2], [1.62786072E12, 0.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786078E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

