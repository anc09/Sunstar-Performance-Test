/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 7925.0, "series": [{"data": [[0.0, 14.0], [0.1, 15.0], [0.2, 16.0], [0.3, 17.0], [0.4, 18.0], [0.5, 20.0], [0.6, 20.0], [0.7, 21.0], [0.8, 21.0], [0.9, 22.0], [1.0, 22.0], [1.1, 22.0], [1.2, 23.0], [1.3, 23.0], [1.4, 23.0], [1.5, 23.0], [1.6, 24.0], [1.7, 24.0], [1.8, 24.0], [1.9, 24.0], [2.0, 24.0], [2.1, 24.0], [2.2, 24.0], [2.3, 24.0], [2.4, 24.0], [2.5, 24.0], [2.6, 25.0], [2.7, 25.0], [2.8, 25.0], [2.9, 25.0], [3.0, 25.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 25.0], [3.5, 25.0], [3.6, 25.0], [3.7, 25.0], [3.8, 25.0], [3.9, 25.0], [4.0, 25.0], [4.1, 25.0], [4.2, 25.0], [4.3, 26.0], [4.4, 26.0], [4.5, 26.0], [4.6, 26.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 26.0], [5.6, 26.0], [5.7, 26.0], [5.8, 26.0], [5.9, 27.0], [6.0, 27.0], [6.1, 27.0], [6.2, 27.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 27.0], [6.8, 27.0], [6.9, 27.0], [7.0, 27.0], [7.1, 27.0], [7.2, 27.0], [7.3, 27.0], [7.4, 27.0], [7.5, 28.0], [7.6, 28.0], [7.7, 28.0], [7.8, 28.0], [7.9, 28.0], [8.0, 28.0], [8.1, 28.0], [8.2, 28.0], [8.3, 28.0], [8.4, 28.0], [8.5, 28.0], [8.6, 28.0], [8.7, 28.0], [8.8, 29.0], [8.9, 29.0], [9.0, 29.0], [9.1, 29.0], [9.2, 29.0], [9.3, 29.0], [9.4, 29.0], [9.5, 29.0], [9.6, 29.0], [9.7, 29.0], [9.8, 29.0], [9.9, 29.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 30.0], [10.4, 30.0], [10.5, 30.0], [10.6, 30.0], [10.7, 30.0], [10.8, 30.0], [10.9, 30.0], [11.0, 30.0], [11.1, 30.0], [11.2, 31.0], [11.3, 31.0], [11.4, 31.0], [11.5, 31.0], [11.6, 31.0], [11.7, 31.0], [11.8, 31.0], [11.9, 31.0], [12.0, 31.0], [12.1, 31.0], [12.2, 31.0], [12.3, 32.0], [12.4, 32.0], [12.5, 32.0], [12.6, 32.0], [12.7, 32.0], [12.8, 32.0], [12.9, 32.0], [13.0, 32.0], [13.1, 32.0], [13.2, 32.0], [13.3, 32.0], [13.4, 32.0], [13.5, 32.0], [13.6, 32.0], [13.7, 32.0], [13.8, 33.0], [13.9, 33.0], [14.0, 33.0], [14.1, 33.0], [14.2, 33.0], [14.3, 33.0], [14.4, 33.0], [14.5, 33.0], [14.6, 33.0], [14.7, 33.0], [14.8, 34.0], [14.9, 34.0], [15.0, 34.0], [15.1, 34.0], [15.2, 34.0], [15.3, 34.0], [15.4, 34.0], [15.5, 34.0], [15.6, 34.0], [15.7, 34.0], [15.8, 35.0], [15.9, 35.0], [16.0, 35.0], [16.1, 35.0], [16.2, 35.0], [16.3, 35.0], [16.4, 35.0], [16.5, 35.0], [16.6, 35.0], [16.7, 35.0], [16.8, 35.0], [16.9, 36.0], [17.0, 36.0], [17.1, 36.0], [17.2, 36.0], [17.3, 36.0], [17.4, 36.0], [17.5, 36.0], [17.6, 36.0], [17.7, 36.0], [17.8, 36.0], [17.9, 37.0], [18.0, 37.0], [18.1, 37.0], [18.2, 37.0], [18.3, 37.0], [18.4, 37.0], [18.5, 37.0], [18.6, 37.0], [18.7, 37.0], [18.8, 37.0], [18.9, 37.0], [19.0, 38.0], [19.1, 38.0], [19.2, 38.0], [19.3, 38.0], [19.4, 38.0], [19.5, 38.0], [19.6, 38.0], [19.7, 38.0], [19.8, 38.0], [19.9, 38.0], [20.0, 39.0], [20.1, 39.0], [20.2, 39.0], [20.3, 39.0], [20.4, 39.0], [20.5, 39.0], [20.6, 39.0], [20.7, 39.0], [20.8, 39.0], [20.9, 40.0], [21.0, 40.0], [21.1, 40.0], [21.2, 40.0], [21.3, 40.0], [21.4, 40.0], [21.5, 40.0], [21.6, 40.0], [21.7, 41.0], [21.8, 41.0], [21.9, 41.0], [22.0, 41.0], [22.1, 41.0], [22.2, 41.0], [22.3, 41.0], [22.4, 41.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 42.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 44.0], [24.0, 44.0], [24.1, 44.0], [24.2, 44.0], [24.3, 44.0], [24.4, 44.0], [24.5, 44.0], [24.6, 44.0], [24.7, 44.0], [24.8, 45.0], [24.9, 45.0], [25.0, 45.0], [25.1, 45.0], [25.2, 45.0], [25.3, 45.0], [25.4, 46.0], [25.5, 46.0], [25.6, 46.0], [25.7, 46.0], [25.8, 46.0], [25.9, 46.0], [26.0, 46.0], [26.1, 46.0], [26.2, 46.0], [26.3, 47.0], [26.4, 47.0], [26.5, 47.0], [26.6, 47.0], [26.7, 47.0], [26.8, 47.0], [26.9, 47.0], [27.0, 47.0], [27.1, 47.0], [27.2, 48.0], [27.3, 48.0], [27.4, 48.0], [27.5, 48.0], [27.6, 48.0], [27.7, 48.0], [27.8, 48.0], [27.9, 49.0], [28.0, 49.0], [28.1, 49.0], [28.2, 49.0], [28.3, 49.0], [28.4, 49.0], [28.5, 49.0], [28.6, 50.0], [28.7, 50.0], [28.8, 50.0], [28.9, 50.0], [29.0, 50.0], [29.1, 50.0], [29.2, 50.0], [29.3, 51.0], [29.4, 51.0], [29.5, 51.0], [29.6, 51.0], [29.7, 51.0], [29.8, 51.0], [29.9, 51.0], [30.0, 52.0], [30.1, 52.0], [30.2, 52.0], [30.3, 52.0], [30.4, 52.0], [30.5, 52.0], [30.6, 53.0], [30.7, 53.0], [30.8, 53.0], [30.9, 53.0], [31.0, 53.0], [31.1, 53.0], [31.2, 53.0], [31.3, 53.0], [31.4, 54.0], [31.5, 54.0], [31.6, 54.0], [31.7, 54.0], [31.8, 54.0], [31.9, 55.0], [32.0, 55.0], [32.1, 55.0], [32.2, 55.0], [32.3, 55.0], [32.4, 55.0], [32.5, 55.0], [32.6, 56.0], [32.7, 56.0], [32.8, 56.0], [32.9, 56.0], [33.0, 56.0], [33.1, 56.0], [33.2, 56.0], [33.3, 57.0], [33.4, 57.0], [33.5, 57.0], [33.6, 57.0], [33.7, 57.0], [33.8, 58.0], [33.9, 58.0], [34.0, 58.0], [34.1, 58.0], [34.2, 59.0], [34.3, 59.0], [34.4, 59.0], [34.5, 59.0], [34.6, 59.0], [34.7, 59.0], [34.8, 59.0], [34.9, 60.0], [35.0, 60.0], [35.1, 60.0], [35.2, 60.0], [35.3, 60.0], [35.4, 60.0], [35.5, 60.0], [35.6, 60.0], [35.7, 61.0], [35.8, 61.0], [35.9, 61.0], [36.0, 61.0], [36.1, 61.0], [36.2, 61.0], [36.3, 62.0], [36.4, 62.0], [36.5, 62.0], [36.6, 62.0], [36.7, 62.0], [36.8, 63.0], [36.9, 63.0], [37.0, 63.0], [37.1, 63.0], [37.2, 63.0], [37.3, 64.0], [37.4, 64.0], [37.5, 64.0], [37.6, 64.0], [37.7, 64.0], [37.8, 65.0], [37.9, 65.0], [38.0, 65.0], [38.1, 65.0], [38.2, 65.0], [38.3, 66.0], [38.4, 66.0], [38.5, 66.0], [38.6, 66.0], [38.7, 67.0], [38.8, 67.0], [38.9, 67.0], [39.0, 67.0], [39.1, 67.0], [39.2, 67.0], [39.3, 68.0], [39.4, 68.0], [39.5, 68.0], [39.6, 68.0], [39.7, 68.0], [39.8, 68.0], [39.9, 69.0], [40.0, 69.0], [40.1, 69.0], [40.2, 69.0], [40.3, 69.0], [40.4, 70.0], [40.5, 70.0], [40.6, 70.0], [40.7, 70.0], [40.8, 71.0], [40.9, 71.0], [41.0, 71.0], [41.1, 72.0], [41.2, 72.0], [41.3, 72.0], [41.4, 73.0], [41.5, 73.0], [41.6, 73.0], [41.7, 74.0], [41.8, 74.0], [41.9, 74.0], [42.0, 75.0], [42.1, 75.0], [42.2, 75.0], [42.3, 76.0], [42.4, 76.0], [42.5, 76.0], [42.6, 77.0], [42.7, 78.0], [42.8, 78.0], [42.9, 78.0], [43.0, 79.0], [43.1, 79.0], [43.2, 79.0], [43.3, 80.0], [43.4, 80.0], [43.5, 81.0], [43.6, 82.0], [43.7, 82.0], [43.8, 83.0], [43.9, 83.0], [44.0, 84.0], [44.1, 84.0], [44.2, 84.0], [44.3, 85.0], [44.4, 85.0], [44.5, 86.0], [44.6, 86.0], [44.7, 87.0], [44.8, 87.0], [44.9, 88.0], [45.0, 88.0], [45.1, 88.0], [45.2, 89.0], [45.3, 89.0], [45.4, 89.0], [45.5, 90.0], [45.6, 91.0], [45.7, 91.0], [45.8, 91.0], [45.9, 92.0], [46.0, 92.0], [46.1, 92.0], [46.2, 93.0], [46.3, 93.0], [46.4, 94.0], [46.5, 95.0], [46.6, 96.0], [46.7, 96.0], [46.8, 97.0], [46.9, 97.0], [47.0, 98.0], [47.1, 98.0], [47.2, 99.0], [47.3, 100.0], [47.4, 101.0], [47.5, 101.0], [47.6, 102.0], [47.7, 102.0], [47.8, 103.0], [47.9, 103.0], [48.0, 104.0], [48.1, 104.0], [48.2, 105.0], [48.3, 106.0], [48.4, 107.0], [48.5, 107.0], [48.6, 108.0], [48.7, 108.0], [48.8, 109.0], [48.9, 110.0], [49.0, 111.0], [49.1, 111.0], [49.2, 113.0], [49.3, 115.0], [49.4, 115.0], [49.5, 116.0], [49.6, 116.0], [49.7, 117.0], [49.8, 117.0], [49.9, 118.0], [50.0, 119.0], [50.1, 120.0], [50.2, 121.0], [50.3, 121.0], [50.4, 122.0], [50.5, 123.0], [50.6, 124.0], [50.7, 125.0], [50.8, 125.0], [50.9, 126.0], [51.0, 126.0], [51.1, 127.0], [51.2, 128.0], [51.3, 129.0], [51.4, 130.0], [51.5, 130.0], [51.6, 132.0], [51.7, 133.0], [51.8, 135.0], [51.9, 136.0], [52.0, 138.0], [52.1, 139.0], [52.2, 140.0], [52.3, 143.0], [52.4, 144.0], [52.5, 145.0], [52.6, 146.0], [52.7, 147.0], [52.8, 147.0], [52.9, 148.0], [53.0, 149.0], [53.1, 150.0], [53.2, 152.0], [53.3, 153.0], [53.4, 154.0], [53.5, 156.0], [53.6, 157.0], [53.7, 158.0], [53.8, 159.0], [53.9, 160.0], [54.0, 162.0], [54.1, 163.0], [54.2, 163.0], [54.3, 165.0], [54.4, 166.0], [54.5, 167.0], [54.6, 169.0], [54.7, 170.0], [54.8, 171.0], [54.9, 172.0], [55.0, 173.0], [55.1, 175.0], [55.2, 175.0], [55.3, 177.0], [55.4, 178.0], [55.5, 179.0], [55.6, 180.0], [55.7, 181.0], [55.8, 182.0], [55.9, 183.0], [56.0, 183.0], [56.1, 184.0], [56.2, 184.0], [56.3, 185.0], [56.4, 186.0], [56.5, 187.0], [56.6, 188.0], [56.7, 190.0], [56.8, 190.0], [56.9, 192.0], [57.0, 193.0], [57.1, 194.0], [57.2, 195.0], [57.3, 197.0], [57.4, 198.0], [57.5, 199.0], [57.6, 200.0], [57.7, 201.0], [57.8, 203.0], [57.9, 204.0], [58.0, 206.0], [58.1, 208.0], [58.2, 209.0], [58.3, 210.0], [58.4, 212.0], [58.5, 214.0], [58.6, 216.0], [58.7, 218.0], [58.8, 220.0], [58.9, 222.0], [59.0, 223.0], [59.1, 224.0], [59.2, 225.0], [59.3, 227.0], [59.4, 228.0], [59.5, 230.0], [59.6, 233.0], [59.7, 235.0], [59.8, 238.0], [59.9, 240.0], [60.0, 243.0], [60.1, 250.0], [60.2, 255.0], [60.3, 259.0], [60.4, 262.0], [60.5, 264.0], [60.6, 268.0], [60.7, 272.0], [60.8, 277.0], [60.9, 280.0], [61.0, 284.0], [61.1, 287.0], [61.2, 291.0], [61.3, 294.0], [61.4, 296.0], [61.5, 298.0], [61.6, 301.0], [61.7, 303.0], [61.8, 305.0], [61.9, 306.0], [62.0, 308.0], [62.1, 310.0], [62.2, 312.0], [62.3, 314.0], [62.4, 316.0], [62.5, 319.0], [62.6, 320.0], [62.7, 322.0], [62.8, 324.0], [62.9, 328.0], [63.0, 330.0], [63.1, 333.0], [63.2, 335.0], [63.3, 339.0], [63.4, 341.0], [63.5, 347.0], [63.6, 348.0], [63.7, 350.0], [63.8, 352.0], [63.9, 354.0], [64.0, 356.0], [64.1, 360.0], [64.2, 362.0], [64.3, 364.0], [64.4, 366.0], [64.5, 368.0], [64.6, 371.0], [64.7, 373.0], [64.8, 376.0], [64.9, 378.0], [65.0, 381.0], [65.1, 384.0], [65.2, 386.0], [65.3, 388.0], [65.4, 390.0], [65.5, 392.0], [65.6, 394.0], [65.7, 396.0], [65.8, 400.0], [65.9, 402.0], [66.0, 407.0], [66.1, 408.0], [66.2, 411.0], [66.3, 415.0], [66.4, 418.0], [66.5, 420.0], [66.6, 422.0], [66.7, 424.0], [66.8, 426.0], [66.9, 432.0], [67.0, 434.0], [67.1, 437.0], [67.2, 439.0], [67.3, 442.0], [67.4, 446.0], [67.5, 449.0], [67.6, 451.0], [67.7, 454.0], [67.8, 456.0], [67.9, 458.0], [68.0, 460.0], [68.1, 464.0], [68.2, 467.0], [68.3, 470.0], [68.4, 473.0], [68.5, 481.0], [68.6, 486.0], [68.7, 490.0], [68.8, 495.0], [68.9, 497.0], [69.0, 502.0], [69.1, 510.0], [69.2, 513.0], [69.3, 515.0], [69.4, 520.0], [69.5, 528.0], [69.6, 533.0], [69.7, 539.0], [69.8, 544.0], [69.9, 549.0], [70.0, 552.0], [70.1, 554.0], [70.2, 560.0], [70.3, 564.0], [70.4, 567.0], [70.5, 569.0], [70.6, 572.0], [70.7, 575.0], [70.8, 576.0], [70.9, 578.0], [71.0, 582.0], [71.1, 585.0], [71.2, 588.0], [71.3, 591.0], [71.4, 592.0], [71.5, 596.0], [71.6, 597.0], [71.7, 599.0], [71.8, 602.0], [71.9, 605.0], [72.0, 611.0], [72.1, 613.0], [72.2, 619.0], [72.3, 621.0], [72.4, 625.0], [72.5, 626.0], [72.6, 629.0], [72.7, 631.0], [72.8, 635.0], [72.9, 638.0], [73.0, 643.0], [73.1, 647.0], [73.2, 651.0], [73.3, 653.0], [73.4, 658.0], [73.5, 661.0], [73.6, 664.0], [73.7, 667.0], [73.8, 672.0], [73.9, 676.0], [74.0, 680.0], [74.1, 686.0], [74.2, 690.0], [74.3, 694.0], [74.4, 700.0], [74.5, 706.0], [74.6, 709.0], [74.7, 713.0], [74.8, 719.0], [74.9, 722.0], [75.0, 728.0], [75.1, 731.0], [75.2, 733.0], [75.3, 738.0], [75.4, 740.0], [75.5, 743.0], [75.6, 747.0], [75.7, 750.0], [75.8, 752.0], [75.9, 757.0], [76.0, 762.0], [76.1, 769.0], [76.2, 772.0], [76.3, 775.0], [76.4, 781.0], [76.5, 784.0], [76.6, 787.0], [76.7, 793.0], [76.8, 796.0], [76.9, 798.0], [77.0, 802.0], [77.1, 805.0], [77.2, 808.0], [77.3, 810.0], [77.4, 813.0], [77.5, 815.0], [77.6, 818.0], [77.7, 822.0], [77.8, 825.0], [77.9, 827.0], [78.0, 831.0], [78.1, 834.0], [78.2, 835.0], [78.3, 837.0], [78.4, 839.0], [78.5, 842.0], [78.6, 844.0], [78.7, 849.0], [78.8, 852.0], [78.9, 857.0], [79.0, 859.0], [79.1, 863.0], [79.2, 868.0], [79.3, 870.0], [79.4, 872.0], [79.5, 876.0], [79.6, 879.0], [79.7, 880.0], [79.8, 883.0], [79.9, 888.0], [80.0, 891.0], [80.1, 893.0], [80.2, 895.0], [80.3, 899.0], [80.4, 903.0], [80.5, 910.0], [80.6, 913.0], [80.7, 915.0], [80.8, 917.0], [80.9, 919.0], [81.0, 924.0], [81.1, 926.0], [81.2, 929.0], [81.3, 934.0], [81.4, 936.0], [81.5, 938.0], [81.6, 939.0], [81.7, 942.0], [81.8, 946.0], [81.9, 949.0], [82.0, 952.0], [82.1, 959.0], [82.2, 962.0], [82.3, 965.0], [82.4, 968.0], [82.5, 971.0], [82.6, 973.0], [82.7, 979.0], [82.8, 981.0], [82.9, 985.0], [83.0, 988.0], [83.1, 993.0], [83.2, 996.0], [83.3, 1001.0], [83.4, 1005.0], [83.5, 1010.0], [83.6, 1013.0], [83.7, 1020.0], [83.8, 1023.0], [83.9, 1024.0], [84.0, 1028.0], [84.1, 1031.0], [84.2, 1036.0], [84.3, 1042.0], [84.4, 1047.0], [84.5, 1049.0], [84.6, 1053.0], [84.7, 1057.0], [84.8, 1059.0], [84.9, 1063.0], [85.0, 1068.0], [85.1, 1072.0], [85.2, 1078.0], [85.3, 1082.0], [85.4, 1085.0], [85.5, 1091.0], [85.6, 1093.0], [85.7, 1098.0], [85.8, 1101.0], [85.9, 1105.0], [86.0, 1107.0], [86.1, 1110.0], [86.2, 1114.0], [86.3, 1116.0], [86.4, 1119.0], [86.5, 1124.0], [86.6, 1125.0], [86.7, 1129.0], [86.8, 1134.0], [86.9, 1137.0], [87.0, 1139.0], [87.1, 1143.0], [87.2, 1147.0], [87.3, 1152.0], [87.4, 1155.0], [87.5, 1157.0], [87.6, 1160.0], [87.7, 1165.0], [87.8, 1169.0], [87.9, 1171.0], [88.0, 1175.0], [88.1, 1178.0], [88.2, 1181.0], [88.3, 1184.0], [88.4, 1188.0], [88.5, 1192.0], [88.6, 1196.0], [88.7, 1198.0], [88.8, 1202.0], [88.9, 1208.0], [89.0, 1213.0], [89.1, 1217.0], [89.2, 1222.0], [89.3, 1226.0], [89.4, 1229.0], [89.5, 1233.0], [89.6, 1239.0], [89.7, 1242.0], [89.8, 1244.0], [89.9, 1251.0], [90.0, 1256.0], [90.1, 1261.0], [90.2, 1266.0], [90.3, 1269.0], [90.4, 1272.0], [90.5, 1279.0], [90.6, 1283.0], [90.7, 1287.0], [90.8, 1288.0], [90.9, 1297.0], [91.0, 1299.0], [91.1, 1301.0], [91.2, 1308.0], [91.3, 1316.0], [91.4, 1318.0], [91.5, 1325.0], [91.6, 1328.0], [91.7, 1333.0], [91.8, 1343.0], [91.9, 1347.0], [92.0, 1352.0], [92.1, 1362.0], [92.2, 1368.0], [92.3, 1374.0], [92.4, 1377.0], [92.5, 1383.0], [92.6, 1388.0], [92.7, 1392.0], [92.8, 1397.0], [92.9, 1401.0], [93.0, 1408.0], [93.1, 1412.0], [93.2, 1416.0], [93.3, 1419.0], [93.4, 1426.0], [93.5, 1433.0], [93.6, 1437.0], [93.7, 1441.0], [93.8, 1445.0], [93.9, 1449.0], [94.0, 1452.0], [94.1, 1459.0], [94.2, 1464.0], [94.3, 1470.0], [94.4, 1475.0], [94.5, 1477.0], [94.6, 1485.0], [94.7, 1491.0], [94.8, 1495.0], [94.9, 1500.0], [95.0, 1505.0], [95.1, 1510.0], [95.2, 1518.0], [95.3, 1524.0], [95.4, 1529.0], [95.5, 1535.0], [95.6, 1545.0], [95.7, 1548.0], [95.8, 1550.0], [95.9, 1555.0], [96.0, 1558.0], [96.1, 1563.0], [96.2, 1566.0], [96.3, 1574.0], [96.4, 1577.0], [96.5, 1582.0], [96.6, 1592.0], [96.7, 1598.0], [96.8, 1600.0], [96.9, 1612.0], [97.0, 1621.0], [97.1, 1630.0], [97.2, 1639.0], [97.3, 1643.0], [97.4, 1652.0], [97.5, 1658.0], [97.6, 1667.0], [97.7, 1683.0], [97.8, 1698.0], [97.9, 1703.0], [98.0, 1710.0], [98.1, 1718.0], [98.2, 1732.0], [98.3, 1744.0], [98.4, 1770.0], [98.5, 1789.0], [98.6, 1803.0], [98.7, 1814.0], [98.8, 1833.0], [98.9, 1842.0], [99.0, 1855.0], [99.1, 1873.0], [99.2, 1903.0], [99.3, 1935.0], [99.4, 1975.0], [99.5, 2000.0], [99.6, 2083.0], [99.7, 2166.0], [99.8, 2240.0], [99.9, 3920.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3933.0, "series": [{"data": [[0.0, 3933.0], [600.0, 222.0], [700.0, 211.0], [800.0, 282.0], [900.0, 247.0], [1000.0, 206.0], [1100.0, 247.0], [1200.0, 191.0], [1300.0, 153.0], [1400.0, 168.0], [1500.0, 155.0], [100.0, 854.0], [1600.0, 90.0], [1700.0, 62.0], [1800.0, 50.0], [1900.0, 26.0], [2000.0, 9.0], [2100.0, 13.0], [2200.0, 7.0], [2300.0, 1.0], [2400.0, 2.0], [200.0, 333.0], [3600.0, 1.0], [3900.0, 1.0], [4300.0, 1.0], [4600.0, 1.0], [300.0, 351.0], [4900.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [6600.0, 1.0], [400.0, 263.0], [7300.0, 1.0], [7900.0, 1.0], [500.0, 231.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 424.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5737.0, "series": [{"data": [[0.0, 5737.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2156.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 424.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.7741007194244585, "minX": 1.62704728E12, "maxY": 498.3788819875775, "series": [{"data": [[1.62704734E12, 291.1102941176472], [1.62704735E12, 498.3788819875775], [1.62704732E12, 30.108736643620368], [1.62704733E12, 135.77640518838805], [1.6270473E12, 6.519927536231891], [1.62704731E12, 9.337810611148422], [1.62704728E12, 8.807692307692307], [1.62704729E12, 4.7741007194244585]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704735E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 2.0, "maxY": 2252.5, "series": [{"data": [[2.0, 956.375], [3.0, 107.06593406593413], [4.0, 65.46351084812626], [5.0, 72.14438502673801], [6.0, 58.56976744186051], [7.0, 54.28779069767439], [8.0, 43.851138353765315], [9.0, 56.489655172413805], [10.0, 62.390243902439025], [11.0, 57.882716049382694], [12.0, 72.8074534161491], [13.0, 90.33333333333333], [14.0, 108.79518072289157], [15.0, 105.0], [16.0, 96.99375], [17.0, 104.44444444444444], [18.0, 112.22012578616354], [19.0, 101.71428571428571], [20.0, 2252.5], [21.0, 135.4683544303797], [23.0, 149.33333333333334], [24.0, 141.33333333333334], [25.0, 147.94011976047895], [26.0, 154.0], [27.0, 155.23529411764707], [28.0, 204.125], [29.0, 192.75], [30.0, 212.25], [31.0, 184.1369047619047], [32.0, 197.0], [33.0, 188.57894736842104], [34.0, 232.0], [35.0, 224.0], [36.0, 277.3333333333333], [37.0, 221.0135135135135], [38.0, 213.5], [39.0, 224.0], [40.0, 221.0], [41.0, 224.0], [42.0, 201.82142857142858], [43.0, 221.37499999999997], [44.0, 158.5], [45.0, 158.0], [48.0, 460.0], [52.0, 359.25], [53.0, 314.09999999999997], [54.0, 310.3055555555555], [58.0, 260.5], [59.0, 287.0], [60.0, 317.25], [61.0, 363.0], [62.0, 315.5], [63.0, 385.58823529411757], [64.0, 507.25], [65.0, 384.37053571428584], [68.0, 414.76923076923083], [69.0, 421.5], [70.0, 380.3333333333333], [71.0, 400.125], [72.0, 386.6363636363637], [73.0, 379.91666666666663], [74.0, 407.25], [75.0, 424.2142857142857], [76.0, 479.42857142857144], [77.0, 427.0], [78.0, 408.2], [79.0, 455.62499999999994], [80.0, 452.3333333333333], [81.0, 463.1428571428571], [82.0, 451.44444444444446], [83.0, 409.21428571428567], [84.0, 569.0], [87.0, 175.0], [93.0, 361.0], [94.0, 352.25], [97.0, 475.875], [98.0, 549.0], [99.0, 633.7800000000001], [100.0, 582.9428571428571], [101.0, 610.8888888888889], [103.0, 635.0], [104.0, 570.7333333333333], [105.0, 583.3333333333333], [106.0, 580.4705882352941], [107.0, 600.7027027027029], [108.0, 582.1428571428572], [129.0, 447.5], [130.0, 434.0], [131.0, 487.1666666666667], [132.0, 617.0], [133.0, 573.5], [134.0, 805.5671641791042], [135.0, 787.4615384615385], [136.0, 825.7500000000001], [137.0, 828.5384615384615], [139.0, 704.375], [140.0, 783.4583333333334], [141.0, 980.0], [143.0, 790.0], [144.0, 883.1000000000001], [145.0, 741.8636363636363], [146.0, 678.6060606060605], [147.0, 795.1], [149.0, 548.0], [150.0, 593.5], [152.0, 930.111111111111], [163.0, 1012.4786324786323], [165.0, 915.740740740741], [166.0, 873.8037383177568], [167.0, 819.6666666666667], [183.0, 460.0], [184.0, 431.0], [185.0, 666.4285714285714], [186.0, 849.6666666666666], [188.0, 1121.7800000000007], [191.0, 1271.2], [192.0, 1219.135135135135], [193.0, 1203.2385321100917], [199.0, 1067.0], [195.0, 871.0588235294117], [194.0, 707.6875000000001], [206.0, 1103.4929577464784], [205.0, 1129.25], [204.0, 1076.25], [202.0, 1119.0], [207.0, 1213.8823529411766], [209.0, 1220.1851851851857], [210.0, 1193.3636363636365], [211.0, 1180.4117647058818], [233.0, 992.0], [235.0, 870.75], [236.0, 1064.4], [237.0, 1388.325242718447], [238.0, 1214.0093457943926], [243.0, 911.0], [248.0, 965.8600000000001], [249.0, 1251.7777777777778], [250.0, 1208.6], [251.0, 1839.25], [252.0, 1653.0], [274.0, 1494.6185567010298], [273.0, 1408.0], [275.0, 1232.2631578947369], [284.0, 1124.0], [285.0, 817.6666666666666], [287.0, 877.2], [276.0, 1188.3658536585363], [277.0, 1374.2608695652177], [278.0, 1613.0660377358488], [279.0, 1693.9285714285716], [280.0, 1417.5344827586205], [281.0, 1226.574074074074], [282.0, 940.3802816901407], [289.0, 707.3125], [288.0, 920.4705882352941], [290.0, 525.939393939394], [291.0, 483.77777777777777], [292.0, 455.0], [293.0, 326.0], [294.0, 402.875], [295.0, 884.4615384615386], [296.0, 278.8333333333333], [303.0, 157.0], [301.0, 427.6363636363636], [302.0, 263.0], [297.0, 245.3333333333333], [298.0, 196.0], [304.0, 168.4], [307.0, 136.0], [317.0, 47.5], [318.0, 698.0], [308.0, 100.77777777777777], [309.0, 61.0], [310.0, 68.6], [311.0, 911.0], [312.0, 911.5], [313.0, 909.0], [315.0, 1291.3333333333333], [324.0, 35.0], [326.0, 1415.0], [328.0, 839.3333333333333], [330.0, 44.0], [331.0, 1516.5], [332.0, 46.0], [333.0, 687.6666666666666], [336.0, 46.666666666666664], [337.0, 36.0], [338.0, 30.0], [339.0, 46.0], [345.0, 30.0], [347.0, 38.5], [351.0, 35.5], [354.0, 47.0], [356.0, 37.5], [359.0, 28.0], [360.0, 46.0], [365.0, 42.0], [379.0, 36.0], [383.0, 46.0], [385.0, 56.0], [387.0, 26.0], [389.0, 52.0], [392.0, 33.0], [394.0, 30.0], [409.0, 37.0], [410.0, 106.0], [412.0, 48.0], [413.0, 41.0], [415.0, 38.5], [419.0, 31.0], [420.0, 30.0], [421.0, 27.0], [422.0, 39.666666666666664], [423.0, 23.333333333333332], [418.0, 32.0], [431.0, 23.0], [425.0, 28.0], [424.0, 16.0], [430.0, 27.0], [429.0, 20.0], [428.0, 28.0], [427.0, 15.0], [426.0, 26.0], [445.0, 38.666666666666664], [432.0, 24.0], [434.0, 16.0], [433.0, 21.0], [436.0, 23.5], [438.0, 25.0], [437.0, 26.0], [439.0, 39.5], [442.0, 34.0], [443.0, 27.333333333333332], [447.0, 30.0], [441.0, 25.0], [440.0, 25.0], [446.0, 21.0], [444.0, 15.0], [435.0, 26.0], [462.0, 23.0], [448.0, 27.5], [453.0, 28.0], [452.0, 30.0], [455.0, 14.0], [454.0, 20.0], [463.0, 20.0], [461.0, 26.0], [460.0, 21.0], [451.0, 29.0], [450.0, 22.0], [449.0, 14.0], [459.0, 15.0], [458.0, 29.0], [457.0, 21.0], [456.0, 15.0], [478.0, 25.5], [465.0, 30.333333333333332], [464.0, 21.0], [467.0, 27.0], [466.0, 21.0], [471.0, 20.0], [470.0, 18.0], [469.0, 21.0], [468.0, 18.0], [479.0, 15.0], [477.0, 21.0], [476.0, 28.0], [475.0, 20.0], [474.0, 23.0], [473.0, 16.0], [472.0, 21.0], [493.0, 27.0], [480.0, 30.5], [483.0, 25.5], [482.0, 15.0], [481.0, 22.0], [486.0, 24.333333333333332], [485.0, 15.0], [484.0, 31.0], [487.0, 22.0], [490.0, 27.333333333333332], [489.0, 20.0], [488.0, 27.0], [495.0, 30.333333333333332], [494.0, 28.0], [492.0, 22.0], [491.0, 23.0], [510.0, 28.0], [503.0, 31.5], [496.0, 28.5], [497.0, 27.0], [499.0, 25.0], [498.0, 28.0], [502.0, 35.5], [501.0, 26.0], [500.0, 28.0], [511.0, 28.0], [505.0, 23.0], [504.0, 28.0], [509.0, 22.0], [508.0, 14.0], [507.0, 22.0], [506.0, 29.0], [537.0, 162.0], [541.0, 88.5], [512.0, 23.5], [513.0, 20.5], [514.0, 23.0], [516.0, 21.0], [515.0, 17.0], [518.0, 32.0], [517.0, 16.0], [538.0, 166.0], [522.0, 98.0], [521.0, 28.0], [520.0, 30.5], [523.0, 175.0], [531.0, 28.0], [535.0, 146.87499999999997], [532.0, 171.5], [543.0, 157.0], [530.0, 169.0], [529.0, 172.0], [542.0, 159.0], [540.0, 163.0], [539.0, 158.0], [573.0, 28.0], [565.0, 35.666666666666664], [564.0, 15.0], [563.0, 17.0], [562.0, 22.0], [561.0, 32.0], [560.0, 27.0], [567.0, 21.0], [566.0, 17.0], [575.0, 16.0], [574.0, 20.0], [572.0, 21.0], [571.0, 21.0], [570.0, 18.0], [569.0, 22.0], [568.0, 28.0], [551.0, 26.0], [550.0, 154.0], [549.0, 157.0], [547.0, 155.0], [546.0, 161.0], [545.0, 157.0], [544.0, 158.0], [559.0, 24.0], [558.0, 29.0], [557.0, 27.0], [556.0, 20.0], [555.0, 21.0], [554.0, 25.0], [553.0, 23.0], [552.0, 28.0], [603.0, 87.0], [579.0, 41.5], [591.0, 27.0], [576.0, 19.0], [578.0, 19.0], [577.0, 32.0], [590.0, 20.0], [589.0, 20.0], [600.0, 68.0], [583.0, 34.0], [582.0, 17.0], [581.0, 24.0], [580.0, 17.0], [585.0, 29.0], [584.0, 26.0], [587.0, 23.0], [586.0, 34.0], [588.0, 37.0], [607.0, 70.0], [593.0, 27.0], [592.0, 17.0], [595.0, 29.0], [594.0, 25.0], [597.0, 25.0], [596.0, 27.0], [599.0, 26.0], [598.0, 35.0], [605.0, 28.0], [604.0, 86.0], [602.0, 39.0], [601.0, 67.0], [634.0, 28.0], [638.0, 34.0], [639.0, 22.0], [624.0, 25.0], [626.0, 31.0], [625.0, 32.0], [628.0, 30.0], [627.0, 27.0], [637.0, 30.0], [636.0, 31.0], [635.0, 34.0], [632.0, 28.0], [615.0, 35.0], [614.0, 51.0], [613.0, 107.0], [612.0, 125.0], [611.0, 61.0], [610.0, 140.0], [608.0, 69.0], [623.0, 26.0], [622.0, 17.0], [621.0, 28.0], [620.0, 28.0], [619.0, 33.0], [618.0, 39.0], [617.0, 41.0], [616.0, 43.0], [631.0, 25.0], [629.0, 24.0], [647.0, 33.0], [659.0, 41.0], [654.0, 72.5], [653.0, 55.0], [652.0, 58.0], [651.0, 35.0], [650.0, 45.0], [649.0, 46.0], [648.0, 24.0], [662.0, 59.5], [661.0, 52.0], [660.0, 74.0], [658.0, 67.0], [657.0, 65.0], [656.0, 46.0], [646.0, 22.0], [645.0, 32.0], [644.0, 23.0], [643.0, 29.0], [642.0, 17.0], [641.0, 22.0], [640.0, 20.0], [655.0, 71.0]], "isOverall": false, "label": "Press Release", "isController": false}, {"data": [[101.28014909222044, 419.09149933870395]], "isOverall": false, "label": "Press Release-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 662.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 429.0, "minX": 1.62704728E12, "maxY": 7675463.2, "series": [{"data": [[1.62704734E12, 7675463.2], [1.62704735E12, 757199.1], [1.62704732E12, 7482632.1], [1.62704733E12, 7614343.6], [1.6270473E12, 5192222.4], [1.62704731E12, 7002915.9], [1.62704728E12, 122283.1], [1.62704729E12, 3268579.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62704734E12, 26928.0], [1.62704735E12, 2656.5], [1.62704732E12, 26251.5], [1.62704733E12, 26713.5], [1.6270473E12, 18216.0], [1.62704731E12, 24568.5], [1.62704728E12, 429.0], [1.62704729E12, 11467.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704735E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 39.30887681159421, "minX": 1.62704728E12, "maxY": 1828.3076923076924, "series": [{"data": [[1.62704734E12, 1080.0294117647059], [1.62704735E12, 48.16149068322981], [1.62704732E12, 178.22501571338768], [1.62704733E12, 758.0988264360717], [1.6270473E12, 39.30887681159421], [1.62704731E12, 50.899932840832754], [1.62704728E12, 1828.3076923076924], [1.62704729E12, 54.07338129496407]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704735E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 36.60778985507248, "minX": 1.62704728E12, "maxY": 1768.8076923076922, "series": [{"data": [[1.62704734E12, 1054.466299019606], [1.62704735E12, 45.975155279503106], [1.62704732E12, 172.54368321810162], [1.62704733E12, 737.9765287214333], [1.6270473E12, 36.60778985507248], [1.62704731E12, 48.33176628609796], [1.62704728E12, 1768.8076923076922], [1.62704729E12, 51.20863309352516]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704735E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 31.818840579710137, "minX": 1.62704728E12, "maxY": 1027.961397058824, "series": [{"data": [[1.62704734E12, 1027.961397058824], [1.62704735E12, 42.080745341614914], [1.62704732E12, 166.2721558768074], [1.62704733E12, 719.7016676961082], [1.6270473E12, 31.818840579710137], [1.62704731E12, 43.16588314304897], [1.62704728E12, 82.73076923076925], [1.62704729E12, 34.601438848920836]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704735E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.62704728E12, "maxY": 7925.0, "series": [{"data": [[1.62704734E12, 2440.0], [1.62704735E12, 175.0], [1.62704732E12, 706.0], [1.62704733E12, 1867.0], [1.6270473E12, 98.0], [1.62704731E12, 124.0], [1.62704728E12, 7383.0], [1.62704729E12, 7925.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62704734E12, 17.0], [1.62704735E12, 14.0], [1.62704732E12, 50.0], [1.62704733E12, 143.0], [1.6270473E12, 21.0], [1.62704731E12, 22.0], [1.62704728E12, 31.0], [1.62704729E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62704734E12, 1680.9000000000003], [1.62704735E12, 162.0], [1.62704732E12, 316.0], [1.62704733E12, 1194.0], [1.6270473E12, 59.0], [1.62704731E12, 73.0], [1.62704728E12, 5665.000000000001], [1.62704729E12, 62.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62704734E12, 2159.0200000000004], [1.62704735E12, 173.14], [1.62704732E12, 460.2399999999998], [1.62704733E12, 1712.9999999999995], [1.6270473E12, 78.95000000000005], [1.62704731E12, 95.0], [1.62704728E12, 7383.0], [1.62704729E12, 104.51999999999953]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62704734E12, 1839.35], [1.62704735E12, 166.9], [1.62704732E12, 364.39999999999986], [1.62704733E12, 1397.0], [1.6270473E12, 65.0], [1.62704731E12, 79.0], [1.62704728E12, 7136.949999999999], [1.62704729E12, 73.19999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704735E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 5040.0, "series": [{"data": [[2.0, 5040.0], [6.0, 132.0], [8.0, 39.5], [18.0, 22.0], [35.0, 21.0], [50.0, 24.0], [52.0, 51.5], [55.0, 41.0], [57.0, 154.0], [59.0, 38.0], [63.0, 39.0], [68.0, 38.0], [69.0, 33.0], [75.0, 45.0], [81.0, 47.0], [86.0, 35.0], [87.0, 30.0], [92.0, 35.5], [94.0, 31.0], [100.0, 39.0], [105.0, 32.0], [111.0, 35.5], [110.0, 1401.0], [113.0, 1177.0], [116.0, 34.0], [121.0, 27.0], [122.0, 1112.5], [123.0, 819.0], [124.0, 40.5], [130.0, 322.5], [137.0, 43.0], [136.0, 168.0], [142.0, 44.0], [147.0, 33.0], [145.0, 39.0], [150.0, 57.0], [151.0, 96.0], [146.0, 586.5], [157.0, 190.5], [158.0, 105.0], [152.0, 184.0], [156.0, 309.0], [164.0, 53.0], [160.0, 65.0], [163.0, 83.0], [162.0, 172.0], [161.0, 1163.0], [173.0, 216.0], [170.0, 424.5], [179.0, 831.0], [196.0, 1477.0], [200.0, 988.0], [217.0, 1001.5], [222.0, 573.5], [1.0, 3675.0], [280.0, 1455.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 280.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19.0, "minX": 1.0, "maxY": 4898.0, "series": [{"data": [[2.0, 4898.0], [6.0, 93.0], [8.0, 37.5], [18.0, 20.0], [35.0, 19.0], [50.0, 23.0], [52.0, 47.5], [55.0, 38.0], [57.0, 151.0], [59.0, 34.0], [63.0, 38.0], [68.0, 35.0], [69.0, 31.0], [75.0, 44.0], [81.0, 45.0], [86.0, 33.5], [87.0, 28.0], [92.0, 32.0], [94.0, 28.5], [100.0, 37.0], [105.0, 30.0], [111.0, 32.0], [110.0, 1296.0], [113.0, 1155.0], [116.0, 31.5], [121.0, 25.0], [122.0, 1084.5], [123.0, 796.0], [124.0, 37.0], [130.0, 312.5], [137.0, 40.0], [136.0, 117.5], [142.0, 41.5], [147.0, 32.0], [145.0, 36.0], [150.0, 54.0], [151.0, 91.0], [146.0, 567.0], [157.0, 170.0], [158.0, 103.0], [152.0, 180.0], [156.0, 297.0], [164.0, 51.0], [160.0, 63.0], [163.0, 79.0], [162.0, 164.5], [161.0, 1159.0], [173.0, 211.0], [170.0, 419.0], [179.0, 815.0], [196.0, 1469.0], [200.0, 938.5], [217.0, 981.0], [222.0, 569.5], [1.0, 3544.0], [280.0, 1444.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 280.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62704727E12, "maxY": 175.9, "series": [{"data": [[1.62704734E12, 142.9], [1.62704735E12, 15.9], [1.62704732E12, 164.4], [1.62704733E12, 175.9], [1.6270473E12, 110.7], [1.62704731E12, 149.5], [1.62704728E12, 2.7], [1.62704729E12, 69.5], [1.62704727E12, 0.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704735E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.6, "minX": 1.62704728E12, "maxY": 163.2, "series": [{"data": [[1.62704734E12, 163.2], [1.62704735E12, 16.1], [1.62704732E12, 159.1], [1.62704733E12, 161.9], [1.6270473E12, 110.4], [1.62704731E12, 148.9], [1.62704728E12, 2.6], [1.62704729E12, 69.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704735E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.6, "minX": 1.62704728E12, "maxY": 163.2, "series": [{"data": [[1.62704734E12, 163.2], [1.62704735E12, 16.1], [1.62704732E12, 159.1], [1.62704733E12, 161.9], [1.6270473E12, 110.4], [1.62704731E12, 148.9], [1.62704728E12, 2.6], [1.62704729E12, 69.5]], "isOverall": false, "label": "Press Release-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704735E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.6, "minX": 1.62704728E12, "maxY": 163.2, "series": [{"data": [[1.62704734E12, 163.2], [1.62704735E12, 16.1], [1.62704732E12, 159.1], [1.62704733E12, 161.9], [1.6270473E12, 110.4], [1.62704731E12, 148.9], [1.62704728E12, 2.6], [1.62704729E12, 69.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704735E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

