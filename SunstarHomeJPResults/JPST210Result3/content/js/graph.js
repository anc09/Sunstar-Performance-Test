/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "maxY": 181058.0, "series": [{"data": [[0.0, 120.0], [0.1, 150.0], [0.2, 175.0], [0.3, 185.0], [0.4, 202.0], [0.5, 203.0], [0.6, 208.0], [0.7, 208.0], [0.8, 209.0], [0.9, 210.0], [1.0, 214.0], [1.1, 219.0], [1.2, 224.0], [1.3, 226.0], [1.4, 230.0], [1.5, 234.0], [1.6, 245.0], [1.7, 249.0], [1.8, 254.0], [1.9, 264.0], [2.0, 282.0], [2.1, 290.0], [2.2, 298.0], [2.3, 305.0], [2.4, 309.0], [2.5, 311.0], [2.6, 314.0], [2.7, 316.0], [2.8, 324.0], [2.9, 329.0], [3.0, 330.0], [3.1, 333.0], [3.2, 336.0], [3.3, 341.0], [3.4, 346.0], [3.5, 351.0], [3.6, 354.0], [3.7, 355.0], [3.8, 361.0], [3.9, 362.0], [4.0, 368.0], [4.1, 370.0], [4.2, 372.0], [4.3, 375.0], [4.4, 380.0], [4.5, 383.0], [4.6, 393.0], [4.7, 394.0], [4.8, 395.0], [4.9, 398.0], [5.0, 400.0], [5.1, 404.0], [5.2, 408.0], [5.3, 409.0], [5.4, 410.0], [5.5, 415.0], [5.6, 424.0], [5.7, 428.0], [5.8, 432.0], [5.9, 433.0], [6.0, 439.0], [6.1, 451.0], [6.2, 453.0], [6.3, 456.0], [6.4, 467.0], [6.5, 472.0], [6.6, 477.0], [6.7, 480.0], [6.8, 483.0], [6.9, 488.0], [7.0, 489.0], [7.1, 489.0], [7.2, 492.0], [7.3, 492.0], [7.4, 494.0], [7.5, 498.0], [7.6, 500.0], [7.7, 503.0], [7.8, 505.0], [7.9, 509.0], [8.0, 510.0], [8.1, 513.0], [8.2, 514.0], [8.3, 515.0], [8.4, 515.0], [8.5, 517.0], [8.6, 518.0], [8.7, 521.0], [8.8, 522.0], [8.9, 524.0], [9.0, 525.0], [9.1, 525.0], [9.2, 526.0], [9.3, 527.0], [9.4, 528.0], [9.5, 528.0], [9.6, 529.0], [9.7, 529.0], [9.8, 532.0], [9.9, 534.0], [10.0, 535.0], [10.1, 536.0], [10.2, 536.0], [10.3, 537.0], [10.4, 537.0], [10.5, 537.0], [10.6, 538.0], [10.7, 539.0], [10.8, 540.0], [10.9, 542.0], [11.0, 544.0], [11.1, 545.0], [11.2, 546.0], [11.3, 547.0], [11.4, 547.0], [11.5, 548.0], [11.6, 548.0], [11.7, 549.0], [11.8, 551.0], [11.9, 551.0], [12.0, 552.0], [12.1, 553.0], [12.2, 554.0], [12.3, 555.0], [12.4, 557.0], [12.5, 558.0], [12.6, 560.0], [12.7, 561.0], [12.8, 562.0], [12.9, 562.0], [13.0, 563.0], [13.1, 564.0], [13.2, 566.0], [13.3, 568.0], [13.4, 573.0], [13.5, 573.0], [13.6, 575.0], [13.7, 576.0], [13.8, 577.0], [13.9, 578.0], [14.0, 580.0], [14.1, 580.0], [14.2, 583.0], [14.3, 584.0], [14.4, 589.0], [14.5, 590.0], [14.6, 590.0], [14.7, 592.0], [14.8, 595.0], [14.9, 596.0], [15.0, 598.0], [15.1, 598.0], [15.2, 599.0], [15.3, 600.0], [15.4, 602.0], [15.5, 603.0], [15.6, 605.0], [15.7, 608.0], [15.8, 609.0], [15.9, 610.0], [16.0, 611.0], [16.1, 612.0], [16.2, 614.0], [16.3, 615.0], [16.4, 616.0], [16.5, 618.0], [16.6, 621.0], [16.7, 621.0], [16.8, 623.0], [16.9, 626.0], [17.0, 626.0], [17.1, 627.0], [17.2, 629.0], [17.3, 631.0], [17.4, 632.0], [17.5, 633.0], [17.6, 636.0], [17.7, 637.0], [17.8, 641.0], [17.9, 643.0], [18.0, 643.0], [18.1, 645.0], [18.2, 645.0], [18.3, 645.0], [18.4, 647.0], [18.5, 648.0], [18.6, 648.0], [18.7, 651.0], [18.8, 653.0], [18.9, 655.0], [19.0, 658.0], [19.1, 659.0], [19.2, 662.0], [19.3, 663.0], [19.4, 665.0], [19.5, 669.0], [19.6, 673.0], [19.7, 675.0], [19.8, 677.0], [19.9, 678.0], [20.0, 679.0], [20.1, 682.0], [20.2, 685.0], [20.3, 685.0], [20.4, 686.0], [20.5, 687.0], [20.6, 688.0], [20.7, 690.0], [20.8, 690.0], [20.9, 693.0], [21.0, 693.0], [21.1, 693.0], [21.2, 693.0], [21.3, 695.0], [21.4, 696.0], [21.5, 697.0], [21.6, 697.0], [21.7, 698.0], [21.8, 698.0], [21.9, 699.0], [22.0, 699.0], [22.1, 701.0], [22.2, 702.0], [22.3, 702.0], [22.4, 703.0], [22.5, 707.0], [22.6, 708.0], [22.7, 710.0], [22.8, 712.0], [22.9, 712.0], [23.0, 713.0], [23.1, 714.0], [23.2, 715.0], [23.3, 716.0], [23.4, 717.0], [23.5, 717.0], [23.6, 719.0], [23.7, 720.0], [23.8, 720.0], [23.9, 721.0], [24.0, 723.0], [24.1, 725.0], [24.2, 726.0], [24.3, 729.0], [24.4, 730.0], [24.5, 730.0], [24.6, 733.0], [24.7, 735.0], [24.8, 736.0], [24.9, 737.0], [25.0, 737.0], [25.1, 738.0], [25.2, 739.0], [25.3, 742.0], [25.4, 743.0], [25.5, 744.0], [25.6, 746.0], [25.7, 746.0], [25.8, 746.0], [25.9, 750.0], [26.0, 751.0], [26.1, 753.0], [26.2, 754.0], [26.3, 757.0], [26.4, 758.0], [26.5, 762.0], [26.6, 765.0], [26.7, 766.0], [26.8, 768.0], [26.9, 769.0], [27.0, 771.0], [27.1, 774.0], [27.2, 777.0], [27.3, 778.0], [27.4, 785.0], [27.5, 792.0], [27.6, 795.0], [27.7, 802.0], [27.8, 805.0], [27.9, 808.0], [28.0, 810.0], [28.1, 811.0], [28.2, 819.0], [28.3, 825.0], [28.4, 829.0], [28.5, 833.0], [28.6, 836.0], [28.7, 836.0], [28.8, 838.0], [28.9, 841.0], [29.0, 843.0], [29.1, 846.0], [29.2, 847.0], [29.3, 852.0], [29.4, 855.0], [29.5, 857.0], [29.6, 860.0], [29.7, 863.0], [29.8, 864.0], [29.9, 872.0], [30.0, 873.0], [30.1, 874.0], [30.2, 877.0], [30.3, 877.0], [30.4, 879.0], [30.5, 880.0], [30.6, 880.0], [30.7, 882.0], [30.8, 884.0], [30.9, 885.0], [31.0, 886.0], [31.1, 887.0], [31.2, 889.0], [31.3, 889.0], [31.4, 891.0], [31.5, 892.0], [31.6, 893.0], [31.7, 895.0], [31.8, 896.0], [31.9, 899.0], [32.0, 900.0], [32.1, 900.0], [32.2, 902.0], [32.3, 903.0], [32.4, 904.0], [32.5, 904.0], [32.6, 904.0], [32.7, 907.0], [32.8, 908.0], [32.9, 909.0], [33.0, 911.0], [33.1, 912.0], [33.2, 914.0], [33.3, 914.0], [33.4, 916.0], [33.5, 917.0], [33.6, 920.0], [33.7, 921.0], [33.8, 922.0], [33.9, 923.0], [34.0, 926.0], [34.1, 927.0], [34.2, 928.0], [34.3, 929.0], [34.4, 931.0], [34.5, 933.0], [34.6, 934.0], [34.7, 936.0], [34.8, 937.0], [34.9, 940.0], [35.0, 940.0], [35.1, 943.0], [35.2, 944.0], [35.3, 944.0], [35.4, 946.0], [35.5, 946.0], [35.6, 947.0], [35.7, 947.0], [35.8, 948.0], [35.9, 950.0], [36.0, 953.0], [36.1, 954.0], [36.2, 955.0], [36.3, 957.0], [36.4, 958.0], [36.5, 960.0], [36.6, 961.0], [36.7, 970.0], [36.8, 972.0], [36.9, 972.0], [37.0, 974.0], [37.1, 977.0], [37.2, 979.0], [37.3, 982.0], [37.4, 984.0], [37.5, 985.0], [37.6, 985.0], [37.7, 988.0], [37.8, 990.0], [37.9, 991.0], [38.0, 993.0], [38.1, 994.0], [38.2, 995.0], [38.3, 995.0], [38.4, 997.0], [38.5, 999.0], [38.6, 1001.0], [38.7, 1005.0], [38.8, 1006.0], [38.9, 1006.0], [39.0, 1011.0], [39.1, 1013.0], [39.2, 1014.0], [39.3, 1015.0], [39.4, 1017.0], [39.5, 1017.0], [39.6, 1018.0], [39.7, 1020.0], [39.8, 1021.0], [39.9, 1022.0], [40.0, 1023.0], [40.1, 1024.0], [40.2, 1026.0], [40.3, 1030.0], [40.4, 1033.0], [40.5, 1036.0], [40.6, 1036.0], [40.7, 1038.0], [40.8, 1039.0], [40.9, 1041.0], [41.0, 1043.0], [41.1, 1046.0], [41.2, 1047.0], [41.3, 1049.0], [41.4, 1050.0], [41.5, 1052.0], [41.6, 1054.0], [41.7, 1056.0], [41.8, 1056.0], [41.9, 1056.0], [42.0, 1058.0], [42.1, 1059.0], [42.2, 1061.0], [42.3, 1062.0], [42.4, 1063.0], [42.5, 1064.0], [42.6, 1065.0], [42.7, 1068.0], [42.8, 1069.0], [42.9, 1070.0], [43.0, 1077.0], [43.1, 1079.0], [43.2, 1083.0], [43.3, 1085.0], [43.4, 1085.0], [43.5, 1086.0], [43.6, 1090.0], [43.7, 1095.0], [43.8, 1096.0], [43.9, 1100.0], [44.0, 1101.0], [44.1, 1101.0], [44.2, 1104.0], [44.3, 1109.0], [44.4, 1113.0], [44.5, 1114.0], [44.6, 1115.0], [44.7, 1118.0], [44.8, 1118.0], [44.9, 1118.0], [45.0, 1119.0], [45.1, 1119.0], [45.2, 1120.0], [45.3, 1121.0], [45.4, 1122.0], [45.5, 1124.0], [45.6, 1125.0], [45.7, 1127.0], [45.8, 1127.0], [45.9, 1129.0], [46.0, 1129.0], [46.1, 1131.0], [46.2, 1131.0], [46.3, 1134.0], [46.4, 1135.0], [46.5, 1137.0], [46.6, 1138.0], [46.7, 1139.0], [46.8, 1143.0], [46.9, 1144.0], [47.0, 1144.0], [47.1, 1145.0], [47.2, 1147.0], [47.3, 1148.0], [47.4, 1150.0], [47.5, 1151.0], [47.6, 1152.0], [47.7, 1155.0], [47.8, 1158.0], [47.9, 1158.0], [48.0, 1161.0], [48.1, 1162.0], [48.2, 1164.0], [48.3, 1165.0], [48.4, 1168.0], [48.5, 1169.0], [48.6, 1172.0], [48.7, 1174.0], [48.8, 1177.0], [48.9, 1180.0], [49.0, 1180.0], [49.1, 1180.0], [49.2, 1182.0], [49.3, 1182.0], [49.4, 1183.0], [49.5, 1185.0], [49.6, 1185.0], [49.7, 1186.0], [49.8, 1186.0], [49.9, 1186.0], [50.0, 1187.0], [50.1, 1191.0], [50.2, 1193.0], [50.3, 1194.0], [50.4, 1194.0], [50.5, 1196.0], [50.6, 1197.0], [50.7, 1199.0], [50.8, 1200.0], [50.9, 1201.0], [51.0, 1203.0], [51.1, 1205.0], [51.2, 1207.0], [51.3, 1208.0], [51.4, 1209.0], [51.5, 1210.0], [51.6, 1212.0], [51.7, 1213.0], [51.8, 1214.0], [51.9, 1216.0], [52.0, 1217.0], [52.1, 1218.0], [52.2, 1219.0], [52.3, 1220.0], [52.4, 1222.0], [52.5, 1223.0], [52.6, 1226.0], [52.7, 1227.0], [52.8, 1227.0], [52.9, 1229.0], [53.0, 1229.0], [53.1, 1231.0], [53.2, 1232.0], [53.3, 1233.0], [53.4, 1235.0], [53.5, 1238.0], [53.6, 1239.0], [53.7, 1243.0], [53.8, 1244.0], [53.9, 1245.0], [54.0, 1245.0], [54.1, 1248.0], [54.2, 1248.0], [54.3, 1251.0], [54.4, 1253.0], [54.5, 1254.0], [54.6, 1255.0], [54.7, 1257.0], [54.8, 1258.0], [54.9, 1258.0], [55.0, 1261.0], [55.1, 1261.0], [55.2, 1263.0], [55.3, 1263.0], [55.4, 1266.0], [55.5, 1266.0], [55.6, 1267.0], [55.7, 1270.0], [55.8, 1273.0], [55.9, 1274.0], [56.0, 1274.0], [56.1, 1276.0], [56.2, 1278.0], [56.3, 1279.0], [56.4, 1280.0], [56.5, 1283.0], [56.6, 1286.0], [56.7, 1288.0], [56.8, 1288.0], [56.9, 1289.0], [57.0, 1292.0], [57.1, 1294.0], [57.2, 1296.0], [57.3, 1297.0], [57.4, 1299.0], [57.5, 1302.0], [57.6, 1306.0], [57.7, 1310.0], [57.8, 1311.0], [57.9, 1312.0], [58.0, 1314.0], [58.1, 1319.0], [58.2, 1321.0], [58.3, 1322.0], [58.4, 1323.0], [58.5, 1326.0], [58.6, 1326.0], [58.7, 1335.0], [58.8, 1337.0], [58.9, 1337.0], [59.0, 1340.0], [59.1, 1341.0], [59.2, 1344.0], [59.3, 1347.0], [59.4, 1349.0], [59.5, 1349.0], [59.6, 1352.0], [59.7, 1352.0], [59.8, 1355.0], [59.9, 1357.0], [60.0, 1358.0], [60.1, 1359.0], [60.2, 1364.0], [60.3, 1367.0], [60.4, 1371.0], [60.5, 1374.0], [60.6, 1376.0], [60.7, 1378.0], [60.8, 1379.0], [60.9, 1387.0], [61.0, 1396.0], [61.1, 1399.0], [61.2, 1403.0], [61.3, 1403.0], [61.4, 1405.0], [61.5, 1408.0], [61.6, 1410.0], [61.7, 1411.0], [61.8, 1412.0], [61.9, 1413.0], [62.0, 1417.0], [62.1, 1421.0], [62.2, 1427.0], [62.3, 1427.0], [62.4, 1430.0], [62.5, 1437.0], [62.6, 1438.0], [62.7, 1445.0], [62.8, 1449.0], [62.9, 1452.0], [63.0, 1455.0], [63.1, 1457.0], [63.2, 1460.0], [63.3, 1464.0], [63.4, 1474.0], [63.5, 1490.0], [63.6, 1490.0], [63.7, 1491.0], [63.8, 1500.0], [63.9, 1504.0], [64.0, 1513.0], [64.1, 1516.0], [64.2, 1518.0], [64.3, 1525.0], [64.4, 1530.0], [64.5, 1533.0], [64.6, 1537.0], [64.7, 1547.0], [64.8, 1549.0], [64.9, 1551.0], [65.0, 1554.0], [65.1, 1554.0], [65.2, 1555.0], [65.3, 1564.0], [65.4, 1577.0], [65.5, 1582.0], [65.6, 1598.0], [65.7, 1604.0], [65.8, 1605.0], [65.9, 1609.0], [66.0, 1614.0], [66.1, 1621.0], [66.2, 1624.0], [66.3, 1626.0], [66.4, 1631.0], [66.5, 1637.0], [66.6, 1638.0], [66.7, 1648.0], [66.8, 1652.0], [66.9, 1656.0], [67.0, 1659.0], [67.1, 1659.0], [67.2, 1661.0], [67.3, 1670.0], [67.4, 1675.0], [67.5, 1678.0], [67.6, 1682.0], [67.7, 1687.0], [67.8, 1698.0], [67.9, 1707.0], [68.0, 1712.0], [68.1, 1715.0], [68.2, 1716.0], [68.3, 1719.0], [68.4, 1725.0], [68.5, 1726.0], [68.6, 1728.0], [68.7, 1729.0], [68.8, 1730.0], [68.9, 1735.0], [69.0, 1737.0], [69.1, 1738.0], [69.2, 1744.0], [69.3, 1746.0], [69.4, 1750.0], [69.5, 1750.0], [69.6, 1755.0], [69.7, 1758.0], [69.8, 1764.0], [69.9, 1772.0], [70.0, 1773.0], [70.1, 1776.0], [70.2, 1782.0], [70.3, 1785.0], [70.4, 1792.0], [70.5, 1796.0], [70.6, 1797.0], [70.7, 1801.0], [70.8, 1802.0], [70.9, 1806.0], [71.0, 1809.0], [71.1, 1811.0], [71.2, 1816.0], [71.3, 1819.0], [71.4, 1821.0], [71.5, 1824.0], [71.6, 1825.0], [71.7, 1827.0], [71.8, 1829.0], [71.9, 1833.0], [72.0, 1840.0], [72.1, 1844.0], [72.2, 1848.0], [72.3, 1853.0], [72.4, 1857.0], [72.5, 1866.0], [72.6, 1873.0], [72.7, 1886.0], [72.8, 1904.0], [72.9, 1919.0], [73.0, 1932.0], [73.1, 1934.0], [73.2, 1945.0], [73.3, 1960.0], [73.4, 1965.0], [73.5, 1968.0], [73.6, 1974.0], [73.7, 1976.0], [73.8, 1976.0], [73.9, 1986.0], [74.0, 1992.0], [74.1, 1996.0], [74.2, 2010.0], [74.3, 2014.0], [74.4, 2020.0], [74.5, 2036.0], [74.6, 2039.0], [74.7, 2058.0], [74.8, 2071.0], [74.9, 2074.0], [75.0, 2116.0], [75.1, 2118.0], [75.2, 2121.0], [75.3, 2132.0], [75.4, 2134.0], [75.5, 2140.0], [75.6, 2144.0], [75.7, 2160.0], [75.8, 2161.0], [75.9, 2168.0], [76.0, 2172.0], [76.1, 2174.0], [76.2, 2178.0], [76.3, 2182.0], [76.4, 2183.0], [76.5, 2186.0], [76.6, 2196.0], [76.7, 2204.0], [76.8, 2210.0], [76.9, 2229.0], [77.0, 2240.0], [77.1, 2269.0], [77.2, 2271.0], [77.3, 2272.0], [77.4, 2274.0], [77.5, 2276.0], [77.6, 2282.0], [77.7, 2284.0], [77.8, 2289.0], [77.9, 2300.0], [78.0, 2321.0], [78.1, 2329.0], [78.2, 2335.0], [78.3, 2339.0], [78.4, 2345.0], [78.5, 2350.0], [78.6, 2353.0], [78.7, 2355.0], [78.8, 2364.0], [78.9, 2369.0], [79.0, 2371.0], [79.1, 2376.0], [79.2, 2378.0], [79.3, 2380.0], [79.4, 2383.0], [79.5, 2389.0], [79.6, 2390.0], [79.7, 2391.0], [79.8, 2394.0], [79.9, 2396.0], [80.0, 2401.0], [80.1, 2402.0], [80.2, 2403.0], [80.3, 2408.0], [80.4, 2409.0], [80.5, 2412.0], [80.6, 2414.0], [80.7, 2416.0], [80.8, 2417.0], [80.9, 2422.0], [81.0, 2423.0], [81.1, 2429.0], [81.2, 2432.0], [81.3, 2434.0], [81.4, 2439.0], [81.5, 2440.0], [81.6, 2440.0], [81.7, 2442.0], [81.8, 2444.0], [81.9, 2449.0], [82.0, 2453.0], [82.1, 2456.0], [82.2, 2461.0], [82.3, 2463.0], [82.4, 2468.0], [82.5, 2470.0], [82.6, 2473.0], [82.7, 2476.0], [82.8, 2479.0], [82.9, 2484.0], [83.0, 2488.0], [83.1, 2492.0], [83.2, 2500.0], [83.3, 2504.0], [83.4, 2515.0], [83.5, 2525.0], [83.6, 2546.0], [83.7, 2565.0], [83.8, 2572.0], [83.9, 2574.0], [84.0, 2600.0], [84.1, 2603.0], [84.2, 2606.0], [84.3, 2617.0], [84.4, 2628.0], [84.5, 2639.0], [84.6, 2648.0], [84.7, 2661.0], [84.8, 2673.0], [84.9, 2683.0], [85.0, 2690.0], [85.1, 2697.0], [85.2, 2701.0], [85.3, 2713.0], [85.4, 2717.0], [85.5, 2718.0], [85.6, 2721.0], [85.7, 2733.0], [85.8, 2740.0], [85.9, 2759.0], [86.0, 2760.0], [86.1, 2761.0], [86.2, 2766.0], [86.3, 2774.0], [86.4, 2775.0], [86.5, 2782.0], [86.6, 2785.0], [86.7, 2789.0], [86.8, 2799.0], [86.9, 2803.0], [87.0, 2808.0], [87.1, 2812.0], [87.2, 2819.0], [87.3, 2826.0], [87.4, 2830.0], [87.5, 2848.0], [87.6, 2857.0], [87.7, 2873.0], [87.8, 2873.0], [87.9, 2885.0], [88.0, 2900.0], [88.1, 2919.0], [88.2, 2927.0], [88.3, 2940.0], [88.4, 2943.0], [88.5, 2947.0], [88.6, 2961.0], [88.7, 2969.0], [88.8, 2972.0], [88.9, 2980.0], [89.0, 2990.0], [89.1, 3001.0], [89.2, 3011.0], [89.3, 3013.0], [89.4, 3024.0], [89.5, 3040.0], [89.6, 3042.0], [89.7, 3046.0], [89.8, 3068.0], [89.9, 3103.0], [90.0, 3118.0], [90.1, 3143.0], [90.2, 3149.0], [90.3, 3169.0], [90.4, 3190.0], [90.5, 3194.0], [90.6, 3222.0], [90.7, 3249.0], [90.8, 3299.0], [90.9, 3359.0], [91.0, 3362.0], [91.1, 3367.0], [91.2, 3372.0], [91.3, 3386.0], [91.4, 3434.0], [91.5, 3461.0], [91.6, 3493.0], [91.7, 3513.0], [91.8, 3514.0], [91.9, 3528.0], [92.0, 3572.0], [92.1, 3622.0], [92.2, 3645.0], [92.3, 3649.0], [92.4, 3680.0], [92.5, 3699.0], [92.6, 3790.0], [92.7, 3824.0], [92.8, 3849.0], [92.9, 3883.0], [93.0, 60051.0], [93.1, 60053.0], [93.2, 60074.0], [93.3, 60291.0], [93.4, 60296.0], [93.5, 60312.0], [93.6, 60320.0], [93.7, 60324.0], [93.8, 60341.0], [93.9, 60378.0], [94.0, 60388.0], [94.1, 60399.0], [94.2, 60411.0], [94.3, 60418.0], [94.4, 60420.0], [94.5, 60424.0], [94.6, 60517.0], [94.7, 61039.0], [94.8, 61088.0], [94.9, 61134.0], [95.0, 61140.0], [95.1, 61167.0], [95.2, 61172.0], [95.3, 61180.0], [95.4, 61223.0], [95.5, 61273.0], [95.6, 61303.0], [95.7, 61345.0], [95.8, 61380.0], [95.9, 61382.0], [96.0, 61391.0], [96.1, 61396.0], [96.2, 61401.0], [96.3, 61404.0], [96.4, 61408.0], [96.5, 61418.0], [96.6, 61431.0], [96.7, 61437.0], [96.8, 61443.0], [96.9, 61451.0], [97.0, 61451.0], [97.1, 61455.0], [97.2, 61459.0], [97.3, 61460.0], [97.4, 61462.0], [97.5, 61464.0], [97.6, 61465.0], [97.7, 61468.0], [97.8, 61471.0], [97.9, 61477.0], [98.0, 61480.0], [98.1, 61488.0], [98.2, 61493.0], [98.3, 61511.0], [98.4, 61517.0], [98.5, 61524.0], [98.6, 61525.0], [98.7, 61528.0], [98.8, 61539.0], [98.9, 61544.0], [99.0, 61545.0], [99.1, 61557.0], [99.2, 61558.0], [99.3, 61564.0], [99.4, 61594.0], [99.5, 61605.0], [99.6, 61610.0], [99.7, 120966.0], [99.8, 180822.0], [99.9, 181038.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 166.0, "series": [{"data": [[600.0, 148.0], [700.0, 123.0], [180800.0, 1.0], [800.0, 92.0], [900.0, 143.0], [1000.0, 117.0], [1100.0, 150.0], [1200.0, 144.0], [1300.0, 81.0], [1400.0, 58.0], [1500.0, 40.0], [1600.0, 47.0], [1700.0, 63.0], [1800.0, 45.0], [1900.0, 29.0], [2000.0, 18.0], [2100.0, 37.0], [2200.0, 27.0], [2300.0, 45.0], [2400.0, 70.0], [2500.0, 18.0], [2600.0, 26.0], [2700.0, 36.0], [2800.0, 24.0], [2900.0, 25.0], [180900.0, 1.0], [3000.0, 17.0], [3100.0, 15.0], [3200.0, 5.0], [3300.0, 12.0], [3400.0, 6.0], [3500.0, 10.0], [3600.0, 9.0], [3700.0, 3.0], [3800.0, 6.0], [120900.0, 1.0], [181000.0, 3.0], [100.0, 7.0], [200.0, 42.0], [60300.0, 15.0], [60700.0, 1.0], [60200.0, 3.0], [60500.0, 1.0], [60100.0, 1.0], [60000.0, 7.0], [60400.0, 10.0], [61000.0, 3.0], [61100.0, 12.0], [61200.0, 5.0], [61300.0, 13.0], [61400.0, 45.0], [61500.0, 27.0], [61600.0, 4.0], [300.0, 59.0], [400.0, 57.0], [121000.0, 1.0], [500.0, 166.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 181000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1222.0, "series": [{"data": [[0.0, 166.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1222.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 785.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.2, "minX": 1.62786188E12, "maxY": 2000.0, "series": [{"data": [[1.62786196E12, 7.0], [1.62786193E12, 1003.9300998573457], [1.62786192E12, 1456.8260869565224], [1.62786194E12, 374.3035935563818], [1.62786189E12, 1971.3500000000001], [1.62786188E12, 2000.0], [1.62786191E12, 1604.8037383177568], [1.6278619E12, 1812.3147540983612], [1.62786206E12, 3.2], [1.627862E12, 6.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786206E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 120.0, "minX": 2.0, "maxY": 181058.0, "series": [{"data": [[2.0, 181039.5], [3.0, 180933.0], [4.0, 181058.0], [5.0, 180822.0], [6.0, 120966.0], [7.0, 121058.0], [18.0, 2488.0], [20.0, 2173.2], [22.0, 1855.0], [23.0, 1968.0], [25.0, 2401.0], [26.0, 1826.5], [27.0, 2339.0], [28.0, 2525.0], [30.0, 1836.5], [31.0, 1816.0], [33.0, 1839.0], [32.0, 2036.0], [35.0, 1932.0], [34.0, 2197.0], [37.0, 2474.0], [36.0, 2484.0], [43.0, 1925.0], [46.0, 2477.0], [51.0, 2330.0], [53.0, 1995.0], [52.0, 2517.0], [54.0, 1976.0], [59.0, 2020.0], [61.0, 1976.0], [63.0, 2467.0], [67.0, 2445.0], [66.0, 2422.0], [65.0, 2071.0], [64.0, 2395.0], [71.0, 1797.0], [69.0, 1782.0], [68.0, 1886.0], [81.0, 2444.0], [94.0, 2442.0], [101.0, 2472.0], [111.0, 2509.0], [108.0, 3024.0], [117.0, 1952.0], [123.0, 1873.0], [142.0, 2424.0], [167.0, 2449.0], [162.0, 2412.0], [175.0, 2288.0], [174.0, 1715.0], [173.0, 2165.0], [172.0, 1671.0], [171.0, 2453.954128440365], [183.0, 2788.0], [182.0, 2830.0], [181.0, 2798.0], [180.0, 1684.0], [179.0, 2241.0], [178.0, 2282.0], [177.0, 2172.0], [176.0, 2137.0], [191.0, 2183.0], [190.0, 2806.0], [189.0, 2808.0], [186.0, 2819.0], [185.0, 2785.0], [184.0, 1659.0], [192.0, 1971.0], [207.0, 2919.0], [206.0, 2532.8125], [215.0, 2718.0], [214.0, 2717.0], [213.0, 2873.0], [212.0, 2697.0], [211.0, 2132.0], [210.0, 2877.0], [209.0, 2740.0], [208.0, 2694.0], [222.0, 2673.0], [221.0, 2177.0], [220.0, 2857.0], [219.0, 2488.0], [218.0, 2683.0], [217.0, 2701.0], [216.0, 2766.0], [231.0, 2630.0], [230.0, 3824.0], [229.0, 3866.0], [228.0, 3513.0], [227.0, 3590.0], [225.0, 2575.0], [239.0, 2419.0], [238.0, 3857.0], [237.0, 2796.0], [236.0, 2573.0], [235.0, 2617.0], [234.0, 2812.0], [233.0, 2116.0], [232.0, 3824.0], [247.0, 2461.0], [246.0, 2462.0], [245.0, 2580.0], [243.0, 2664.0], [242.0, 2785.0], [241.0, 2603.0], [240.0, 2568.0], [255.0, 2621.0], [254.0, 3848.0], [253.0, 2812.0], [252.0, 2058.0], [251.0, 2054.0], [250.0, 2639.0], [249.0, 2064.0], [248.0, 2074.0], [270.0, 2546.0], [271.0, 2500.0], [269.0, 2369.0], [268.0, 2759.0], [267.0, 2699.0], [266.0, 2121.0], [265.0, 2603.0], [264.0, 2014.0], [263.0, 2038.0], [257.0, 2582.0], [256.0, 2572.0], [259.0, 2500.0], [258.0, 2410.0], [262.0, 1976.0], [261.0, 2574.0], [260.0, 2998.6666666666665], [286.0, 3693.0], [287.0, 3299.0], [285.0, 3699.0], [284.0, 3678.0], [283.0, 3362.0], [282.0, 3645.0], [281.0, 3367.0], [280.0, 3701.0], [279.0, 2483.0], [273.0, 3763.0], [272.0, 2690.0], [275.0, 1899.0], [274.0, 2649.0], [278.0, 2648.0], [277.0, 2477.0], [276.0, 2499.0], [301.0, 3555.0], [302.0, 3491.0], [300.0, 3189.0], [299.0, 3528.0], [298.0, 2178.0], [297.0, 3303.0], [294.0, 3642.0], [288.0, 3646.0], [291.0, 2170.0], [290.0, 2416.0], [289.0, 3680.0], [318.0, 3443.0], [319.0, 3523.0], [317.0, 3514.0], [316.0, 2273.0], [315.0, 2434.0], [314.0, 2232.5], [313.0, 2271.0], [312.0, 2294.0], [311.0, 2300.0], [305.0, 3572.0], [304.0, 3514.0], [307.0, 3540.0], [306.0, 3335.5], [310.0, 2280.0], [309.0, 2275.0], [308.0, 2103.0], [334.0, 2345.0], [335.0, 2396.0], [333.0, 1960.0], [332.0, 1964.0], [331.0, 2350.0], [330.0, 2221.0], [329.0, 3326.0], [328.0, 2204.0], [327.0, 3397.0], [321.0, 2189.0], [320.0, 2468.0], [323.0, 2437.5], [322.0, 2423.0], [326.0, 3461.0], [325.0, 3458.5], [324.0, 2072.0], [350.0, 2977.0], [351.0, 2873.0], [349.0, 3269.0], [348.0, 2981.0], [347.0, 3372.0], [346.0, 3359.0], [345.0, 3373.0], [344.0, 3008.0], [343.0, 3386.0], [337.0, 3169.0], [336.0, 2134.0], [339.0, 2178.0], [338.0, 3434.0], [342.0, 3361.0], [341.0, 3368.0], [340.0, 3367.0], [366.0, 1934.0], [367.0, 1656.0], [365.0, 1920.0], [364.0, 1752.0], [363.0, 1933.0], [362.0, 1911.0], [361.0, 1758.0], [360.0, 3190.0], [359.0, 3229.0], [353.0, 1996.0], [352.0, 3222.0], [355.0, 3249.0], [354.0, 2010.0], [358.0, 2088.0], [356.0, 3196.0], [382.0, 3040.0], [383.0, 3118.0], [381.0, 2716.0], [380.0, 3096.0], [379.0, 2827.0], [378.0, 2711.0], [377.0, 3040.0], [376.0, 3068.0], [375.0, 2724.0], [369.0, 1886.0], [368.0, 2071.0], [371.0, 3128.0], [370.0, 2772.0], [374.0, 2717.0], [373.0, 2733.0], [372.0, 3042.0], [397.0, 3042.0], [399.0, 1040.5], [396.0, 3001.0], [387.0, 3013.0], [386.0, 2775.0], [385.0, 2781.0], [384.0, 2695.0], [395.0, 2799.0], [394.0, 3011.0], [393.0, 2684.0], [392.0, 2713.0], [391.0, 3046.0], [390.0, 2803.0], [389.0, 3103.0], [388.0, 3043.0], [414.0, 1518.0], [415.0, 1721.0], [413.0, 1659.0], [412.0, 1729.0], [411.0, 2947.0], [410.0, 2612.0], [409.0, 2972.0], [408.0, 2996.0], [407.0, 2628.0], [401.0, 3064.0], [400.0, 2774.0], [403.0, 2769.0], [402.0, 1945.0], [406.0, 3027.0], [405.0, 1127.0], [404.0, 2673.0], [479.0, 1314.0], [478.0, 1933.587301587302], [494.0, 2204.0], [495.0, 1255.0], [493.0, 2125.0], [492.0, 1456.0], [491.0, 2492.0], [490.0, 2205.0], [489.0, 2507.0], [488.0, 2504.0], [487.0, 1289.0], [481.0, 1349.0], [480.0, 1379.0], [483.0, 1310.0], [482.0, 1516.0], [486.0, 1497.0], [485.0, 1457.0], [484.0, 1525.0], [504.0, 210.0], [508.0, 526.0], [499.0, 1238.0], [498.0, 2161.0], [497.0, 2229.0], [496.0, 2118.0], [507.0, 150.0], [506.0, 176.0], [505.0, 185.0], [503.0, 205.0], [502.0, 205.0], [501.0, 202.0], [500.0, 38980.77142857142], [540.0, 499.0], [543.0, 944.0], [532.0, 521.0], [531.0, 526.0], [542.0, 992.0], [541.0, 972.0], [539.0, 488.0], [538.0, 521.0], [537.0, 515.0], [536.0, 477.0], [527.0, 539.9473684210526], [535.0, 518.0], [533.0, 542.0], [572.0, 917.0], [575.0, 927.0], [560.0, 950.0], [563.0, 905.0], [562.0, 957.0], [565.0, 931.0], [564.0, 897.0], [574.0, 927.0], [573.0, 874.0], [571.0, 889.0], [570.0, 879.0], [569.0, 918.0], [568.0, 942.0], [559.0, 948.0], [544.0, 436.0], [546.0, 991.0], [545.0, 933.0], [548.0, 994.0], [547.0, 984.0], [551.0, 892.0], [550.0, 943.0], [558.0, 956.0], [557.0, 912.0], [556.0, 940.0], [555.0, 927.0], [554.0, 946.0], [553.0, 961.0], [552.0, 899.0], [567.0, 904.0], [566.0, 879.0], [600.0, 857.0], [605.0, 841.0], [607.0, 882.0], [593.0, 922.0], [592.0, 887.0], [595.0, 921.0], [594.0, 900.0], [604.0, 874.0], [603.0, 883.0], [601.0, 916.0], [591.0, 904.0], [578.0, 916.0], [577.0, 918.5], [580.0, 900.0], [579.0, 885.0], [583.0, 937.0], [582.0, 898.0], [590.0, 872.0], [589.0, 889.0], [588.0, 877.0], [587.0, 884.0], [586.0, 861.0], [585.0, 891.0], [584.0, 852.0], [599.0, 853.0], [598.0, 879.0], [597.0, 856.0], [596.0, 846.0], [636.0, 679.0], [639.0, 209.0], [625.0, 696.0], [624.0, 691.0], [627.0, 626.0], [626.0, 627.0], [629.0, 630.0], [628.0, 629.0], [638.0, 209.0], [637.0, 150.0], [635.0, 598.0], [634.0, 598.0], [633.0, 612.0], [632.0, 693.0], [623.0, 622.0], [608.0, 903.0], [611.0, 895.0], [610.0, 836.5], [613.0, 847.0], [612.0, 830.0], [615.0, 825.0], [614.0, 886.0], [622.0, 651.5], [621.0, 687.0], [619.0, 811.0], [618.0, 846.0], [617.0, 813.0], [616.0, 836.0], [631.0, 685.0], [630.0, 618.0], [666.0, 717.0], [670.0, 750.0], [671.0, 765.0], [658.0, 744.5], [656.0, 757.0], [661.0, 750.5], [659.0, 716.0], [669.0, 544.0], [668.0, 744.0], [667.0, 712.0], [665.0, 746.0], [647.0, 761.0], [646.0, 774.0], [644.0, 795.0], [643.0, 783.0], [642.0, 808.0], [640.0, 208.0], [655.0, 746.0], [654.0, 769.0], [653.0, 717.0], [652.0, 771.0], [651.0, 750.5], [649.0, 738.0], [648.0, 795.0], [663.0, 744.0], [662.0, 712.0], [677.0, 752.0], [702.0, 663.5714285714286], [703.0, 674.0], [701.0, 707.0], [679.0, 742.0], [678.0, 730.0], [676.0, 734.0], [675.0, 743.0], [674.0, 737.0], [673.0, 698.0], [672.0, 717.0], [691.0, 699.0], [690.0, 733.0], [689.0, 738.0], [688.0, 725.0], [687.0, 725.0], [686.0, 702.0], [685.0, 540.5], [684.0, 713.0], [683.0, 735.0], [682.0, 729.0], [681.0, 698.0], [680.0, 699.0], [732.0, 555.0], [735.0, 544.0], [720.0, 564.0], [722.0, 537.0], [721.0, 559.0], [724.0, 532.0], [723.0, 561.0], [734.0, 512.0], [733.0, 483.0], [731.0, 505.0], [730.0, 514.0], [729.0, 562.0], [728.0, 576.0], [719.0, 554.0], [705.0, 645.0], [704.0, 639.5], [707.0, 607.0], [706.0, 605.0], [709.0, 645.0], [708.0, 604.0], [711.0, 659.0], [710.0, 595.0], [718.0, 615.0], [717.0, 567.0], [716.0, 621.0], [715.0, 638.0], [714.0, 632.0], [712.0, 596.0], [726.0, 586.0], [725.0, 538.0], [762.0, 693.0], [766.0, 686.0], [767.0, 699.0], [752.0, 737.0], [754.0, 753.0], [753.0, 693.0], [765.0, 700.5], [764.0, 700.0], [763.0, 713.0], [751.0, 725.0], [737.0, 488.0], [736.0, 528.0], [739.0, 757.0], [738.0, 504.5], [742.0, 741.0], [740.0, 710.0], [750.0, 701.0], [748.0, 720.0], [747.0, 697.0], [746.0, 747.0], [745.0, 751.5], [744.0, 742.0], [759.0, 716.0], [758.0, 737.0], [757.0, 716.0], [756.0, 713.5], [792.0, 590.0], [794.0, 597.0], [795.0, 575.0], [793.0, 615.0], [786.0, 614.5], [784.0, 600.0], [783.0, 621.0], [769.0, 704.0], [768.0, 687.0], [771.0, 693.0], [770.0, 717.0], [773.0, 669.0], [772.0, 707.0], [775.0, 649.0], [774.0, 693.0], [782.0, 616.6666666666666], [779.0, 690.0], [778.0, 688.0], [777.0, 653.0], [776.0, 646.0], [830.0, 1748.0], [831.0, 1802.0], [818.0, 500.0], [816.0, 481.0], [820.0, 490.5], [819.0, 465.5], [829.0, 1840.5], [827.0, 395.0], [826.0, 353.0], [825.0, 370.0], [824.0, 382.0], [803.0, 537.0], [801.0, 577.0], [815.0, 464.6666666666667], [814.0, 475.0], [813.0, 479.0], [811.0, 546.6250000000001], [823.0, 397.0], [821.0, 409.0], [838.0, 1832.0], [861.0, 1852.0], [854.0, 1822.0], [852.0, 1785.0], [844.0, 1773.0], [841.0, 1861.0], [837.0, 1783.0], [835.0, 1738.0], [834.0, 1744.0], [833.0, 1825.0], [832.0, 1751.0], [879.0, 1811.0], [894.0, 1712.0], [895.0, 1750.0], [893.0, 1731.7027027027027], [871.0, 1830.0], [867.0, 1829.0], [887.0, 1827.0], [880.0, 1833.0], [878.0, 1821.0], [877.0, 1824.0], [876.0, 1772.0], [875.0, 1824.0], [874.0, 1827.0], [872.0, 1802.0], [920.0, 1675.0], [924.0, 1637.0], [925.0, 1519.0], [913.0, 1650.0], [912.0, 1660.0], [915.0, 1726.0], [914.0, 1735.0], [923.0, 1513.0], [922.0, 1576.0], [921.0, 1590.0], [911.0, 1604.0], [897.0, 1710.0], [896.0, 1725.0], [900.0, 1731.0], [899.0, 1687.0], [903.0, 1706.5], [901.0, 1728.0], [910.0, 1707.0], [909.0, 1612.0], [908.0, 1606.0], [907.0, 1614.0], [906.0, 1635.5], [904.0, 1616.0], [919.0, 1653.0], [918.0, 1670.0], [917.0, 1601.5], [916.0, 1615.0], [952.0, 1262.0], [956.0, 1297.0], [959.0, 1266.0], [945.0, 1369.0], [944.0, 1259.0], [949.0, 1248.0], [948.0, 1262.0], [958.0, 1337.0], [957.0, 1268.0], [955.0, 1338.0], [954.0, 1227.0], [953.0, 1256.5], [943.0, 1326.0], [930.0, 1405.0], [929.0, 1458.0], [932.0, 1357.0], [931.0, 1302.0], [935.0, 1323.0], [933.0, 1419.0], [941.0, 1344.0], [940.0, 1379.5], [938.0, 1298.0], [937.0, 1288.0], [936.0, 1378.0], [951.0, 1353.0], [950.0, 1379.0], [985.0, 1085.0], [989.0, 934.0], [990.0, 1003.0], [976.0, 1005.5], [978.0, 960.0], [977.0, 1022.0], [980.0, 1071.0], [979.0, 1014.0], [988.0, 1018.0], [987.0, 929.0], [986.0, 1008.0], [984.0, 1014.0], [966.0, 1296.0], [965.0, 1244.0], [964.0, 1294.0], [963.0, 1234.0], [962.0, 1276.0], [961.0, 1281.0], [960.0, 1253.0], [975.0, 1017.0], [974.0, 984.0], [973.0, 1034.0], [972.0, 1188.0], [969.0, 913.0], [982.0, 970.0], [981.0, 974.0], [1018.0, 410.0], [1022.0, 404.0], [1023.0, 386.0], [1009.0, 810.0], [1008.0, 836.0], [1011.0, 739.0], [1010.0, 777.0], [1013.0, 596.0], [1012.0, 860.0], [1021.0, 456.0], [1020.0, 407.5], [1019.0, 409.0], [1017.0, 549.0], [999.0, 960.0], [998.0, 1046.0], [997.0, 953.0], [996.0, 958.0], [993.0, 1044.0], [992.0, 1020.0], [1007.0, 837.0], [1006.0, 882.0], [1005.0, 892.0], [1004.0, 940.0], [1003.0, 955.0], [1002.0, 893.0], [1001.0, 908.0], [1000.0, 941.0], [1015.0, 536.0], [1014.0, 511.0], [1028.0, 375.0], [1082.0, 1420.0], [1044.0, 1356.0], [1042.0, 1501.0], [1030.0, 290.0], [1026.0, 361.0], [1024.0, 391.0], [1148.0, 1368.0], [1130.0, 1384.5], [1132.0, 1374.0], [1134.0, 1412.0], [1150.0, 1286.0], [1146.0, 1323.0], [1144.0, 1367.0], [1140.0, 1347.0], [1138.0, 1320.0], [1136.0, 1346.0], [1208.0, 531.0], [1192.0, 985.0], [1214.0, 1161.0], [1184.0, 1110.0], [1186.0, 1145.0], [1188.0, 1055.0], [1190.0, 1083.0], [1194.0, 946.0], [1196.0, 537.0], [1198.0, 538.0], [1210.0, 519.0], [1204.0, 1138.0], [1202.0, 1139.0], [1200.0, 1205.0], [1160.0, 1288.0], [1152.0, 1248.0], [1182.0, 1185.0], [1180.0, 1082.0], [1178.0, 1243.0], [1176.0, 1144.3571428571427], [1174.0, 1263.3636363636365], [1272.0, 1015.0], [1266.0, 1090.0], [1276.0, 1045.0], [1248.0, 1109.0], [1250.0, 1118.0], [1252.0, 988.0], [1254.0, 1047.0], [1258.0, 1085.0], [1262.0, 1056.0], [1278.0, 995.0], [1274.0, 1054.0], [1264.0, 1052.0], [1216.0, 1153.6666666666667], [1218.0, 1115.5], [1220.0, 492.0], [1222.0, 490.0], [1224.0, 1151.0], [1230.0, 816.5], [1246.0, 1047.0], [1244.0, 1062.0], [1240.0, 1063.0], [1238.0, 1154.0], [1236.0, 1139.0], [1234.0, 1097.0], [1232.0, 1182.0], [1336.0, 699.0], [1332.0, 647.0], [1340.0, 579.0], [1312.0, 805.0], [1314.0, 881.0], [1316.0, 820.0], [1318.0, 743.0], [1320.0, 766.0], [1322.0, 753.0], [1326.0, 684.0], [1342.0, 1096.0], [1338.0, 562.0], [1334.0, 626.0], [1330.0, 729.0], [1328.0, 720.0], [1280.0, 984.0], [1282.0, 1000.0], [1284.0, 953.0], [1286.0, 926.0], [1288.0, 901.0], [1290.0, 938.6], [1292.0, 902.0], [1294.0, 954.0], [1310.0, 880.0], [1308.0, 833.5], [1306.0, 846.0], [1304.0, 886.0], [1302.0, 908.0], [1300.0, 889.0], [1352.0, 1100.0], [1382.0, 810.0], [1400.0, 1115.0], [1344.0, 1167.0], [1346.0, 1219.0], [1350.0, 1161.0], [1354.0, 1073.5], [1356.0, 1137.0], [1358.0, 1120.0], [1374.0, 1014.0], [1372.0, 1024.0], [1370.0, 1115.0], [1368.0, 1148.0], [1364.0, 1144.0], [1362.0, 1161.0], [1360.0, 1134.0], [1376.0, 1021.0], [1384.0, 1118.0], [1378.0, 1059.0], [1446.0, 744.0], [1448.0, 689.5], [1440.0, 914.0909090909091], [1442.0, 890.5714285714286], [1444.0, 786.25], [1450.0, 766.0], [1452.0, 616.0], [1454.0, 742.0], [1470.0, 350.0], [1468.0, 328.0], [1466.0, 336.0], [1458.0, 562.0], [1456.0, 685.0], [1416.0, 1040.0], [1438.0, 1066.0], [1436.0, 1016.0], [1428.0, 1043.0], [1526.0, 326.0], [1534.0, 433.0], [1506.0, 557.5], [1504.0, 528.0], [1508.0, 560.0], [1516.0, 537.0], [1518.0, 557.0], [1532.0, 380.0], [1530.0, 333.0], [1528.0, 416.0], [1522.0, 562.0], [1520.0, 547.0], [1474.0, 372.0], [1478.0, 325.0], [1480.0, 355.0], [1482.0, 309.0], [1484.0, 305.0], [1486.0, 298.0], [1502.0, 521.0], [1500.0, 517.0], [1496.0, 534.0], [1494.0, 591.0], [1492.0, 552.0], [1490.0, 272.0], [1488.0, 334.0], [1586.0, 611.0], [1590.0, 510.0], [1574.0, 610.0], [1576.0, 631.0], [1578.0, 617.0], [1584.0, 583.0], [1536.0, 432.0], [1538.0, 428.0], [1540.0, 505.0], [1542.0, 451.0], [1546.0, 515.0], [1548.0, 397.3333333333333], [1550.0, 702.0], [1566.0, 642.0], [1564.0, 665.5], [1560.0, 630.0], [1554.0, 665.0], [1552.0, 682.0], [1582.0, 596.6666666666666], [1580.0, 630.5], [1652.0, 219.5], [1662.0, 746.0], [1632.0, 60353.0], [1636.0, 264.0], [1638.0, 253.0], [1640.0, 246.0], [1644.0, 208.0], [1646.0, 229.0], [1656.0, 653.0], [1654.0, 203.0], [1650.0, 217.5], [1648.0, 224.33333333333334], [1610.0, 60430.0], [1608.0, 527.5], [1604.0, 564.0], [1602.0, 569.7272727272727], [1600.0, 580.0], [1630.0, 60384.0], [1626.0, 60312.0], [1622.0, 60315.0], [1620.0, 60407.5], [1618.0, 60368.0], [1616.0, 60415.0], [1712.0, 513.0], [1704.0, 532.0], [1696.0, 642.0], [1698.0, 645.0], [1702.0, 593.0], [1706.0, 575.0], [1708.0, 551.0], [1716.0, 175.0], [1714.0, 467.0], [1678.0, 711.0], [1676.0, 705.5], [1674.0, 698.0], [1672.0, 712.0], [1670.0, 682.0], [1666.0, 715.0], [1664.0, 695.5], [1692.0, 662.0], [1690.0, 697.0], [1688.0, 695.0], [1686.0, 652.0], [1684.0, 693.0], [1682.0, 731.5], [1680.0, 685.0], [1710.0, 542.0], [1788.0, 1129.0], [1760.0, 1252.0], [1762.0, 1232.0], [1764.0, 1162.0], [1766.0, 1193.0], [1768.0, 1229.0], [1770.0, 1194.0], [1772.0, 1213.0], [1774.0, 1126.0], [1790.0, 1085.0], [1786.0, 1120.0], [1784.0, 1078.0], [1782.0, 1111.0], [1780.0, 1119.0], [1778.0, 1118.0], [1730.0, 1263.0], [1736.0, 1301.0], [1734.0, 1268.2], [1738.0, 1223.0], [1742.0, 1277.0], [1758.0, 1194.0], [1756.0, 1172.0], [1754.0, 1190.5], [1750.0, 1209.0], [1748.0, 1185.0], [1850.0, 60293.0], [1830.0, 548.0], [1852.0, 1085.0], [1824.0, 726.0], [1826.0, 677.0], [1828.0, 610.0], [1832.0, 577.0], [1834.0, 430.5], [1836.0, 546.0], [1838.0, 528.0], [1848.0, 60100.0], [1846.0, 60074.0], [1844.0, 60053.0], [1842.0, 60051.0], [1840.0, 234.0], [1806.0, 1013.0], [1802.0, 1058.0], [1800.0, 1006.0], [1796.0, 1145.0], [1794.0, 1050.0], [1792.0, 1058.0], [1822.0, 713.0], [1820.0, 729.0], [1818.0, 903.0], [1816.0, 952.5], [1814.0, 923.0], [1812.0, 1030.0], [1810.0, 1005.0], [1808.0, 1006.0], [1864.0, 1033.0], [1904.0, 1349.0], [1908.0, 1326.0], [1888.0, 944.5], [1892.0, 1371.0], [1894.0, 932.0], [1896.0, 1410.0], [1898.0, 914.0], [1906.0, 1352.0], [1886.0, 1435.0], [1860.0, 1530.0], [1862.0, 1038.0], [1866.0, 1513.0], [1868.0, 1003.0], [1870.0, 1022.0], [1884.0, 934.0], [1882.0, 947.0], [1880.0, 955.0], [1878.0, 958.0], [1876.0, 984.0], [1874.0, 994.0], [1872.0, 1449.0], [1902.0, 920.0], [1900.0, 1373.0], [1974.0, 354.0], [1980.0, 202.0], [1952.0, 1142.5], [1954.0, 1071.0], [1956.0, 943.0], [1958.0, 909.0], [1960.0, 786.0], [1966.0, 322.0], [1978.0, 329.0], [1976.0, 316.0], [1972.0, 230.0], [1970.0, 408.0], [1968.0, 419.0], [1934.0, 1299.0], [1932.0, 1321.0], [1930.0, 1283.0], [1928.0, 1291.0], [1926.0, 1358.0], [1924.0, 1364.0], [1950.0, 1207.923076923077], [1948.0, 762.0], [1946.0, 1216.0], [1944.0, 1216.0], [1942.0, 1229.0], [1940.0, 1224.0], [1938.0, 1263.0], [1936.0, 1269.5], [2000.0, 1563.6999999999998], [1047.0, 1387.0], [1041.0, 1407.6666666666665], [1029.0, 341.0], [1027.0, 415.0], [1025.0, 432.0], [1123.0, 1425.6], [1151.0, 1354.0], [1125.0, 1349.0], [1131.0, 1379.769230769231], [1133.0, 1337.0], [1135.0, 1384.0], [1149.0, 1282.0], [1147.0, 1279.0], [1145.0, 1361.0], [1143.0, 1274.0], [1141.0, 1357.0], [1139.0, 1352.0], [1137.0, 1341.0], [1109.0, 1490.0], [1101.0, 1396.0], [1189.0, 1048.0], [1185.0, 1194.0], [1191.0, 1012.5], [1193.0, 977.0], [1195.0, 608.0], [1197.0, 430.0], [1199.0, 495.0], [1211.0, 1204.0], [1207.0, 1124.0], [1203.0, 526.0], [1183.0, 1056.0], [1181.0, 1106.5], [1179.0, 1138.0], [1177.0, 1178.0], [1175.0, 1206.75], [1173.0, 1277.388888888889], [1171.0, 1241.0], [1273.0, 1037.0], [1279.0, 997.0], [1249.0, 1131.0], [1251.0, 1108.0], [1253.0, 1134.0], [1255.0, 1124.0], [1257.0, 1104.0], [1263.0, 1122.0], [1277.0, 1079.0], [1275.0, 1062.0], [1271.0, 985.0], [1269.0, 1017.0], [1267.0, 1039.0], [1265.0, 991.0], [1247.0, 1131.0], [1217.0, 1129.0], [1219.0, 1144.0], [1223.0, 1151.0], [1225.0, 1150.0], [1229.0, 1158.0], [1227.0, 1164.0], [1231.0, 1184.5], [1243.0, 1057.0], [1241.0, 1097.6666666666667], [1239.0, 1145.0], [1237.0, 1079.0], [1235.0, 1180.0], [1233.0, 479.0], [1341.0, 643.0], [1343.0, 1148.0], [1313.0, 887.0], [1315.0, 819.0], [1317.0, 853.0], [1319.0, 827.0], [1321.0, 778.0], [1323.0, 808.0], [1325.0, 736.0], [1339.0, 566.0], [1337.0, 646.0], [1335.0, 657.0], [1333.0, 756.0], [1331.0, 684.0], [1329.0, 769.0], [1311.0, 836.0], [1281.0, 1026.0], [1283.0, 990.0], [1285.0, 1018.0], [1287.0, 993.0], [1289.0, 955.0], [1291.0, 940.0], [1293.0, 914.0], [1295.0, 873.0], [1309.0, 839.0], [1307.0, 889.0], [1305.0, 813.0], [1303.0, 836.0], [1301.0, 911.0], [1297.0, 829.0], [1345.0, 1100.0], [1377.0, 1056.0], [1375.0, 1036.0], [1347.0, 1197.0], [1351.0, 1118.0], [1355.0, 682.0], [1359.0, 1118.0], [1373.0, 1104.0], [1371.0, 1170.5], [1369.0, 1041.0], [1367.0, 1114.0], [1365.0, 1177.0], [1363.0, 1165.0], [1361.0, 1180.0], [1385.0, 1069.0], [1383.0, 999.0], [1381.0, 1007.0], [1379.0, 1144.0], [1445.0, 787.0], [1467.0, 375.0], [1471.0, 353.5], [1441.0, 900.2], [1447.0, 678.0], [1449.0, 720.0], [1451.0, 701.0], [1453.0, 698.0], [1455.0, 659.0], [1463.0, 372.3333333333333], [1459.0, 208.0], [1457.0, 672.0], [1439.0, 986.0], [1413.0, 949.0], [1415.0, 1012.0], [1437.0, 1006.0], [1433.0, 1077.0], [1531.0, 400.0], [1509.0, 489.0], [1507.0, 513.0], [1511.0, 545.0], [1515.0, 534.3333333333334], [1513.0, 550.5], [1517.0, 566.0], [1519.0, 548.0], [1533.0, 399.0], [1529.0, 312.0], [1523.0, 577.0], [1521.0, 517.0], [1503.0, 553.0], [1473.0, 324.0], [1475.0, 361.0], [1477.0, 351.0], [1481.0, 341.5], [1483.0, 311.0], [1485.0, 300.0], [1487.0, 298.0], [1499.0, 493.0], [1495.0, 564.0], [1491.0, 299.0], [1489.0, 307.3333333333333], [1587.0, 626.0], [1599.0, 626.0], [1571.0, 636.0], [1573.0, 623.6], [1575.0, 648.0], [1577.0, 622.0], [1585.0, 589.0], [1567.0, 645.0], [1537.0, 432.0], [1539.0, 524.0], [1541.0, 480.0], [1545.0, 494.0], [1543.0, 453.0], [1547.0, 503.0], [1549.0, 688.0], [1551.0, 647.0], [1565.0, 636.0], [1561.0, 664.0], [1559.0, 648.0], [1555.0, 629.0], [1553.0, 695.0], [1583.0, 619.0], [1581.0, 600.0], [1615.0, 60420.5], [1637.0, 256.0], [1655.0, 200.0], [1633.0, 60321.0], [1635.0, 60293.5], [1639.0, 252.0], [1641.0, 245.0], [1647.0, 232.0], [1661.0, 777.0], [1653.0, 214.0], [1613.0, 60421.0], [1611.0, 60341.0], [1607.0, 530.5], [1605.0, 577.0], [1603.0, 574.0], [1631.0, 60324.0], [1629.0, 60355.333333333336], [1625.0, 60397.0], [1623.0, 60320.0], [1621.0, 60324.0], [1617.0, 60418.0], [1713.0, 514.0], [1717.0, 171.0], [1725.0, 1337.0], [1697.0, 643.0], [1701.0, 615.0], [1703.0, 575.0], [1705.0, 566.0], [1707.0, 547.0], [1709.0, 542.0], [1715.0, 120.0], [1677.0, 693.0], [1675.0, 720.0], [1673.0, 696.0], [1671.0, 695.0], [1667.0, 733.0], [1665.0, 750.0], [1695.0, 686.0], [1693.0, 645.0], [1691.0, 677.0], [1689.0, 704.0], [1687.0, 673.0], [1685.0, 689.0], [1683.0, 693.0], [1681.0, 693.5], [1711.0, 529.0], [1789.0, 1101.0], [1791.0, 1174.0], [1761.0, 1158.0], [1763.0, 1189.0], [1765.0, 1220.0], [1767.0, 1204.0], [1769.0, 1158.0], [1771.0, 1163.0], [1773.0, 1183.0], [1775.0, 1168.0], [1787.0, 1157.0], [1785.0, 1136.0], [1783.0, 1118.0], [1779.0, 1120.5], [1777.0, 1163.5], [1759.0, 1177.5], [1739.0, 1232.0], [1741.0, 1219.0], [1757.0, 1209.0], [1755.0, 1255.0], [1753.0, 1263.0], [1751.0, 1186.0], [1749.0, 1230.0], [1747.0, 1239.3636363636363], [1745.0, 1227.0], [1845.0, 60054.0], [1849.0, 60517.0], [1825.0, 771.0], [1827.0, 609.0], [1829.0, 608.0], [1835.0, 525.5], [1837.0, 551.0], [1839.0, 211.0], [1851.0, 60738.0], [1847.0, 60046.0], [1843.0, 60055.0], [1841.0, 60052.0], [1807.0, 1011.0], [1805.0, 1024.0], [1803.0, 1056.0], [1801.0, 1026.0], [1799.0, 1035.0], [1797.0, 1020.0], [1795.0, 1095.0], [1793.0, 1062.0], [1823.0, 722.0], [1821.0, 713.0], [1817.0, 911.0], [1815.0, 982.0], [1813.0, 979.0], [1811.0, 1017.0], [1809.0, 1010.0], [1889.0, 1445.0], [1895.0, 1164.5], [1909.0, 1359.0], [1891.0, 1164.5], [1893.0, 922.0], [1899.0, 947.0], [1907.0, 900.0], [1905.0, 884.0], [1859.0, 1192.7142857142856], [1861.0, 1490.0], [1863.0, 1490.0], [1865.0, 1491.0], [1867.0, 1473.0], [1869.0, 1026.0], [1871.0, 1507.0], [1885.0, 944.0], [1883.0, 1399.0], [1879.0, 972.0], [1877.0, 985.0], [1875.0, 1492.0], [1873.0, 1500.0], [1903.0, 916.0], [1901.0, 1416.0], [1973.0, 370.0], [1957.0, 895.0], [1977.0, 314.0], [1953.0, 1091.0], [1955.0, 990.3333333333334], [1959.0, 796.0], [1965.0, 398.0], [1963.0, 424.0], [1967.0, 394.0], [1979.0, 254.0], [1975.0, 360.0], [1971.0, 404.0], [1969.0, 402.0], [1935.0, 1289.0], [1933.0, 1310.0], [1931.0, 1245.0], [1927.0, 1312.0], [1925.0, 1311.0], [1947.0, 1217.0], [1945.0, 1274.0], [1943.0, 1212.0], [1941.0, 1300.0], [1939.0, 1218.0], [1937.0, 1233.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}, {"data": [[970.3794848206076, 5901.123275069001]], "isOverall": false, "label": "Sunstar Home Japan-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12.9, "minX": 1.62786188E12, "maxY": 2843719.6, "series": [{"data": [[1.62786196E12, 3526.7], [1.62786193E12, 2471235.3], [1.62786192E12, 729744.8], [1.62786194E12, 2843719.6], [1.62786189E12, 70514.4], [1.62786188E12, 70534.0], [1.62786191E12, 377278.4], [1.6278619E12, 1075239.7], [1.62786206E12, 14312.9], [1.627862E12, 3526.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62786196E12, 12.9], [1.62786193E12, 9042.9], [1.62786192E12, 2670.3], [1.62786194E12, 10410.3], [1.62786189E12, 258.0], [1.62786188E12, 258.0], [1.62786191E12, 1380.3], [1.6278619E12, 3934.5], [1.62786206E12, 51.6], [1.627862E12, 12.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786206E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 351.30000000000007, "minX": 1.62786188E12, "maxY": 180978.4, "series": [{"data": [[1.62786196E12, 121058.0], [1.62786193E12, 1052.1497860199709], [1.62786192E12, 728.4975845410627], [1.62786194E12, 10070.275092936796], [1.62786189E12, 351.30000000000007], [1.62786188E12, 1563.6999999999998], [1.62786191E12, 15616.644859813088], [1.6278619E12, 3140.252459016395], [1.62786206E12, 180978.4], [1.627862E12, 120966.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786206E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 327.84999999999997, "minX": 1.62786188E12, "maxY": 144769.8, "series": [{"data": [[1.62786196E12, 121057.0], [1.62786193E12, 1037.9957203994295], [1.62786192E12, 721.7198067632847], [1.62786194E12, 10068.563816604714], [1.62786189E12, 327.84999999999997], [1.62786188E12, 1528.55], [1.62786191E12, 15614.140186915887], [1.6278619E12, 3096.3737704918044], [1.62786206E12, 144769.8], [1.627862E12, 120966.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786206E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 316.15000000000003, "minX": 1.62786188E12, "maxY": 1917.6530359355645, "series": [{"data": [[1.62786196E12, 1039.0], [1.62786193E12, 1011.3166904422254], [1.62786192E12, 699.7971014492756], [1.62786194E12, 1917.6530359355645], [1.62786189E12, 316.15000000000003], [1.62786188E12, 1352.9499999999998], [1.62786191E12, 454.82242990654225], [1.6278619E12, 880.5770491803278], [1.62786206E12, 954.2], [1.627862E12, 940.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786206E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.62786188E12, "maxY": 181058.0, "series": [{"data": [[1.62786196E12, 121058.0], [1.62786193E12, 1861.0], [1.62786192E12, 1219.0], [1.62786194E12, 61622.0], [1.62786189E12, 424.0], [1.62786188E12, 1661.0], [1.62786191E12, 60430.0], [1.6278619E12, 60738.0], [1.62786206E12, 181058.0], [1.627862E12, 120966.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62786196E12, 121058.0], [1.62786193E12, 290.0], [1.62786192E12, 208.0], [1.62786194E12, 150.0], [1.62786189E12, 202.0], [1.62786188E12, 1460.0], [1.62786191E12, 200.0], [1.6278619E12, 120.0], [1.62786206E12, 180822.0], [1.627862E12, 120966.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62786196E12, 121058.0], [1.62786193E12, 1681.6000000000001], [1.62786192E12, 1118.2], [1.62786194E12, 61388.6], [1.62786189E12, 418.1], [1.62786188E12, 1647.6], [1.62786191E12, 60400.0], [1.6278619E12, 1383.400000000001], [1.62786206E12, 181058.0], [1.627862E12, 120966.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62786196E12, 121058.0], [1.62786193E12, 1829.98], [1.62786192E12, 1209.8799999999999], [1.62786194E12, 61569.52], [1.62786189E12, 424.0], [1.62786188E12, 1661.0], [1.62786191E12, 60429.52], [1.6278619E12, 60281.42], [1.62786206E12, 181058.0], [1.627862E12, 120966.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62786196E12, 121058.0], [1.62786193E12, 1754.6], [1.62786192E12, 1161.0], [1.62786194E12, 61472.8], [1.62786189E12, 423.75], [1.62786188E12, 1660.35], [1.62786191E12, 60418.0], [1.6278619E12, 1511.1999999999998], [1.62786206E12, 181058.0], [1.627862E12, 120966.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786206E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 208.5, "minX": 1.0, "maxY": 181038.0, "series": [{"data": [[33.0, 330.0], [41.0, 525.0], [3.0, 234.0], [57.0, 513.0], [60.0, 607.0], [62.0, 700.5], [64.0, 691.5], [4.0, 208.5], [5.0, 60738.0], [82.0, 712.0], [87.0, 920.0], [6.0, 60053.5], [101.0, 1216.0], [120.0, 1140.5], [8.0, 627.5], [129.0, 853.0], [142.0, 989.5], [141.0, 1680.0], [146.0, 61404.5], [155.0, 1266.0], [10.0, 60322.5], [186.0, 2276.5], [14.0, 970.5], [16.0, 61113.0], [1.0, 121012.0], [17.0, 60411.0], [318.0, 2458.0], [20.0, 382.0], [30.0, 1140.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 181038.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 318.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 121011.5, "series": [{"data": [[33.0, 327.0], [41.0, 499.0], [3.0, 233.0], [57.0, 508.0], [60.0, 602.5], [62.0, 690.0], [64.0, 690.5], [4.0, 208.0], [5.0, 60737.0], [82.0, 711.0], [87.0, 919.0], [6.0, 60052.5], [101.0, 1052.0], [120.0, 1128.5], [8.0, 577.0], [129.0, 853.0], [142.0, 979.5], [141.0, 1679.0], [146.0, 61404.0], [155.0, 1260.0], [10.0, 60320.5], [186.0, 2276.5], [14.0, 969.5], [16.0, 61108.5], [1.0, 121011.5], [17.0, 60410.0], [318.0, 2458.0], [20.0, 358.5], [30.0, 1139.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 318.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2, "minX": 1.62786184E12, "maxY": 69.8, "series": [{"data": [[1.62786193E12, 56.6], [1.62786192E12, 34.2], [1.62786194E12, 69.8], [1.62786189E12, 2.0], [1.62786188E12, 13.5], [1.62786191E12, 8.0], [1.6278619E12, 29.4], [1.62786185E12, 2.7], [1.62786184E12, 1.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786194E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786188E12, "maxY": 80.7, "series": [{"data": [[1.62786196E12, 0.1], [1.62786193E12, 70.1], [1.62786192E12, 20.7], [1.62786194E12, 80.7], [1.62786189E12, 2.0], [1.62786188E12, 2.0], [1.62786191E12, 10.7], [1.6278619E12, 30.5], [1.62786206E12, 0.4], [1.627862E12, 0.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62786206E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786206E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786188E12, "maxY": 80.7, "series": [{"data": [[1.62786196E12, 0.1], [1.62786193E12, 70.1], [1.62786192E12, 20.7], [1.62786194E12, 80.7], [1.62786189E12, 2.0], [1.62786188E12, 2.0], [1.62786191E12, 10.7], [1.6278619E12, 30.5], [1.62786206E12, 0.4], [1.627862E12, 0.1]], "isOverall": false, "label": "Sunstar Home Japan-success", "isController": false}, {"data": [[1.62786206E12, 0.1]], "isOverall": false, "label": "Sunstar Home Japan-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786206E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786188E12, "maxY": 80.7, "series": [{"data": [[1.62786196E12, 0.1], [1.62786193E12, 70.1], [1.62786192E12, 20.7], [1.62786194E12, 80.7], [1.62786189E12, 2.0], [1.62786188E12, 2.0], [1.62786191E12, 10.7], [1.6278619E12, 30.5], [1.62786206E12, 0.4], [1.627862E12, 0.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62786206E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786206E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

