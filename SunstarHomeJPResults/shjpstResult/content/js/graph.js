/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "maxY": 23820.0, "series": [{"data": [[0.0, 45.0], [0.1, 66.0], [0.2, 69.0], [0.3, 71.0], [0.4, 74.0], [0.5, 75.0], [0.6, 77.0], [0.7, 78.0], [0.8, 79.0], [0.9, 81.0], [1.0, 82.0], [1.1, 92.0], [1.2, 96.0], [1.3, 108.0], [1.4, 121.0], [1.5, 126.0], [1.6, 131.0], [1.7, 134.0], [1.8, 137.0], [1.9, 139.0], [2.0, 140.0], [2.1, 142.0], [2.2, 144.0], [2.3, 146.0], [2.4, 150.0], [2.5, 152.0], [2.6, 153.0], [2.7, 157.0], [2.8, 159.0], [2.9, 164.0], [3.0, 172.0], [3.1, 184.0], [3.2, 195.0], [3.3, 213.0], [3.4, 234.0], [3.5, 237.0], [3.6, 253.0], [3.7, 262.0], [3.8, 279.0], [3.9, 287.0], [4.0, 294.0], [4.1, 304.0], [4.2, 309.0], [4.3, 314.0], [4.4, 320.0], [4.5, 327.0], [4.6, 330.0], [4.7, 335.0], [4.8, 340.0], [4.9, 344.0], [5.0, 348.0], [5.1, 350.0], [5.2, 354.0], [5.3, 360.0], [5.4, 367.0], [5.5, 379.0], [5.6, 390.0], [5.7, 403.0], [5.8, 444.0], [5.9, 503.0], [6.0, 586.0], [6.1, 650.0], [6.2, 720.0], [6.3, 742.0], [6.4, 758.0], [6.5, 776.0], [6.6, 804.0], [6.7, 818.0], [6.8, 839.0], [6.9, 863.0], [7.0, 882.0], [7.1, 907.0], [7.2, 933.0], [7.3, 952.0], [7.4, 961.0], [7.5, 979.0], [7.6, 984.0], [7.7, 1003.0], [7.8, 1010.0], [7.9, 1030.0], [8.0, 1058.0], [8.1, 1065.0], [8.2, 1079.0], [8.3, 1089.0], [8.4, 1098.0], [8.5, 1111.0], [8.6, 1123.0], [8.7, 1150.0], [8.8, 1176.0], [8.9, 1222.0], [9.0, 1240.0], [9.1, 1254.0], [9.2, 1266.0], [9.3, 1280.0], [9.4, 1291.0], [9.5, 1305.0], [9.6, 1315.0], [9.7, 1322.0], [9.8, 1329.0], [9.9, 1336.0], [10.0, 1345.0], [10.1, 1358.0], [10.2, 1364.0], [10.3, 1375.0], [10.4, 1380.0], [10.5, 1383.0], [10.6, 1386.0], [10.7, 1395.0], [10.8, 1398.0], [10.9, 1402.0], [11.0, 1409.0], [11.1, 1413.0], [11.2, 1417.0], [11.3, 1422.0], [11.4, 1427.0], [11.5, 1435.0], [11.6, 1446.0], [11.7, 1452.0], [11.8, 1461.0], [11.9, 1474.0], [12.0, 1481.0], [12.1, 1489.0], [12.2, 1499.0], [12.3, 1505.0], [12.4, 1510.0], [12.5, 1524.0], [12.6, 1530.0], [12.7, 1536.0], [12.8, 1547.0], [12.9, 1553.0], [13.0, 1560.0], [13.1, 1567.0], [13.2, 1576.0], [13.3, 1580.0], [13.4, 1586.0], [13.5, 1596.0], [13.6, 1612.0], [13.7, 1617.0], [13.8, 1631.0], [13.9, 1643.0], [14.0, 1654.0], [14.1, 1666.0], [14.2, 1678.0], [14.3, 1685.0], [14.4, 1691.0], [14.5, 1700.0], [14.6, 1719.0], [14.7, 1728.0], [14.8, 1733.0], [14.9, 1739.0], [15.0, 1740.0], [15.1, 1756.0], [15.2, 1763.0], [15.3, 1768.0], [15.4, 1773.0], [15.5, 1776.0], [15.6, 1787.0], [15.7, 1799.0], [15.8, 1808.0], [15.9, 1814.0], [16.0, 1818.0], [16.1, 1822.0], [16.2, 1832.0], [16.3, 1838.0], [16.4, 1849.0], [16.5, 1863.0], [16.6, 1871.0], [16.7, 1881.0], [16.8, 1885.0], [16.9, 1892.0], [17.0, 1901.0], [17.1, 1905.0], [17.2, 1920.0], [17.3, 1926.0], [17.4, 1932.0], [17.5, 1938.0], [17.6, 1952.0], [17.7, 1966.0], [17.8, 1974.0], [17.9, 1986.0], [18.0, 1993.0], [18.1, 2002.0], [18.2, 2013.0], [18.3, 2021.0], [18.4, 2033.0], [18.5, 2048.0], [18.6, 2062.0], [18.7, 2081.0], [18.8, 2090.0], [18.9, 2106.0], [19.0, 2116.0], [19.1, 2125.0], [19.2, 2139.0], [19.3, 2149.0], [19.4, 2157.0], [19.5, 2167.0], [19.6, 2169.0], [19.7, 2187.0], [19.8, 2202.0], [19.9, 2213.0], [20.0, 2219.0], [20.1, 2242.0], [20.2, 2252.0], [20.3, 2260.0], [20.4, 2284.0], [20.5, 2307.0], [20.6, 2318.0], [20.7, 2328.0], [20.8, 2340.0], [20.9, 2367.0], [21.0, 2385.0], [21.1, 2395.0], [21.2, 2413.0], [21.3, 2424.0], [21.4, 2439.0], [21.5, 2457.0], [21.6, 2472.0], [21.7, 2493.0], [21.8, 2503.0], [21.9, 2511.0], [22.0, 2521.0], [22.1, 2531.0], [22.2, 2545.0], [22.3, 2555.0], [22.4, 2562.0], [22.5, 2571.0], [22.6, 2584.0], [22.7, 2595.0], [22.8, 2606.0], [22.9, 2619.0], [23.0, 2629.0], [23.1, 2648.0], [23.2, 2660.0], [23.3, 2670.0], [23.4, 2679.0], [23.5, 2690.0], [23.6, 2702.0], [23.7, 2707.0], [23.8, 2736.0], [23.9, 2756.0], [24.0, 2774.0], [24.1, 2800.0], [24.2, 2817.0], [24.3, 2828.0], [24.4, 2841.0], [24.5, 2859.0], [24.6, 2878.0], [24.7, 2891.0], [24.8, 2909.0], [24.9, 2917.0], [25.0, 2945.0], [25.1, 2958.0], [25.2, 2968.0], [25.3, 2985.0], [25.4, 3003.0], [25.5, 3022.0], [25.6, 3033.0], [25.7, 3041.0], [25.8, 3051.0], [25.9, 3059.0], [26.0, 3072.0], [26.1, 3084.0], [26.2, 3092.0], [26.3, 3100.0], [26.4, 3108.0], [26.5, 3117.0], [26.6, 3125.0], [26.7, 3129.0], [26.8, 3139.0], [26.9, 3144.0], [27.0, 3149.0], [27.1, 3163.0], [27.2, 3178.0], [27.3, 3189.0], [27.4, 3211.0], [27.5, 3221.0], [27.6, 3229.0], [27.7, 3238.0], [27.8, 3250.0], [27.9, 3258.0], [28.0, 3274.0], [28.1, 3290.0], [28.2, 3303.0], [28.3, 3328.0], [28.4, 3339.0], [28.5, 3372.0], [28.6, 3392.0], [28.7, 3425.0], [28.8, 3443.0], [28.9, 3472.0], [29.0, 3489.0], [29.1, 3524.0], [29.2, 3552.0], [29.3, 3565.0], [29.4, 3575.0], [29.5, 3590.0], [29.6, 3602.0], [29.7, 3605.0], [29.8, 3616.0], [29.9, 3627.0], [30.0, 3633.0], [30.1, 3655.0], [30.2, 3681.0], [30.3, 3688.0], [30.4, 3699.0], [30.5, 3710.0], [30.6, 3728.0], [30.7, 3745.0], [30.8, 3757.0], [30.9, 3772.0], [31.0, 3782.0], [31.1, 3792.0], [31.2, 3803.0], [31.3, 3818.0], [31.4, 3825.0], [31.5, 3829.0], [31.6, 3838.0], [31.7, 3847.0], [31.8, 3856.0], [31.9, 3871.0], [32.0, 3881.0], [32.1, 3886.0], [32.2, 3898.0], [32.3, 3913.0], [32.4, 3923.0], [32.5, 3932.0], [32.6, 3952.0], [32.7, 3955.0], [32.8, 3970.0], [32.9, 3977.0], [33.0, 3987.0], [33.1, 3997.0], [33.2, 4010.0], [33.3, 4020.0], [33.4, 4023.0], [33.5, 4030.0], [33.6, 4041.0], [33.7, 4042.0], [33.8, 4060.0], [33.9, 4065.0], [34.0, 4069.0], [34.1, 4075.0], [34.2, 4081.0], [34.3, 4086.0], [34.4, 4094.0], [34.5, 4102.0], [34.6, 4110.0], [34.7, 4123.0], [34.8, 4131.0], [34.9, 4142.0], [35.0, 4158.0], [35.1, 4168.0], [35.2, 4183.0], [35.3, 4195.0], [35.4, 4207.0], [35.5, 4228.0], [35.6, 4250.0], [35.7, 4260.0], [35.8, 4281.0], [35.9, 4300.0], [36.0, 4327.0], [36.1, 4341.0], [36.2, 4361.0], [36.3, 4393.0], [36.4, 4408.0], [36.5, 4445.0], [36.6, 4460.0], [36.7, 4479.0], [36.8, 4494.0], [36.9, 4508.0], [37.0, 4526.0], [37.1, 4540.0], [37.2, 4573.0], [37.3, 4580.0], [37.4, 4590.0], [37.5, 4601.0], [37.6, 4617.0], [37.7, 4636.0], [37.8, 4657.0], [37.9, 4670.0], [38.0, 4676.0], [38.1, 4692.0], [38.2, 4724.0], [38.3, 4738.0], [38.4, 4771.0], [38.5, 4787.0], [38.6, 4814.0], [38.7, 4824.0], [38.8, 4830.0], [38.9, 4856.0], [39.0, 4866.0], [39.1, 4885.0], [39.2, 4899.0], [39.3, 4907.0], [39.4, 4920.0], [39.5, 4927.0], [39.6, 4932.0], [39.7, 4941.0], [39.8, 4948.0], [39.9, 4954.0], [40.0, 4966.0], [40.1, 4974.0], [40.2, 4980.0], [40.3, 4990.0], [40.4, 5002.0], [40.5, 5014.0], [40.6, 5023.0], [40.7, 5032.0], [40.8, 5042.0], [40.9, 5050.0], [41.0, 5061.0], [41.1, 5065.0], [41.2, 5078.0], [41.3, 5092.0], [41.4, 5108.0], [41.5, 5120.0], [41.6, 5140.0], [41.7, 5146.0], [41.8, 5159.0], [41.9, 5168.0], [42.0, 5191.0], [42.1, 5200.0], [42.2, 5219.0], [42.3, 5233.0], [42.4, 5257.0], [42.5, 5277.0], [42.6, 5290.0], [42.7, 5311.0], [42.8, 5319.0], [42.9, 5344.0], [43.0, 5359.0], [43.1, 5371.0], [43.2, 5388.0], [43.3, 5406.0], [43.4, 5419.0], [43.5, 5430.0], [43.6, 5442.0], [43.7, 5471.0], [43.8, 5488.0], [43.9, 5500.0], [44.0, 5520.0], [44.1, 5535.0], [44.2, 5547.0], [44.3, 5564.0], [44.4, 5572.0], [44.5, 5579.0], [44.6, 5600.0], [44.7, 5618.0], [44.8, 5631.0], [44.9, 5645.0], [45.0, 5674.0], [45.1, 5690.0], [45.2, 5706.0], [45.3, 5715.0], [45.4, 5727.0], [45.5, 5738.0], [45.6, 5760.0], [45.7, 5775.0], [45.8, 5793.0], [45.9, 5814.0], [46.0, 5823.0], [46.1, 5843.0], [46.2, 5849.0], [46.3, 5855.0], [46.4, 5876.0], [46.5, 5895.0], [46.6, 5912.0], [46.7, 5923.0], [46.8, 5938.0], [46.9, 5948.0], [47.0, 5973.0], [47.1, 5982.0], [47.2, 5993.0], [47.3, 5999.0], [47.4, 6006.0], [47.5, 6016.0], [47.6, 6026.0], [47.7, 6043.0], [47.8, 6074.0], [47.9, 6083.0], [48.0, 6098.0], [48.1, 6112.0], [48.2, 6119.0], [48.3, 6130.0], [48.4, 6136.0], [48.5, 6147.0], [48.6, 6155.0], [48.7, 6161.0], [48.8, 6180.0], [48.9, 6196.0], [49.0, 6206.0], [49.1, 6212.0], [49.2, 6227.0], [49.3, 6245.0], [49.4, 6250.0], [49.5, 6259.0], [49.6, 6269.0], [49.7, 6274.0], [49.8, 6278.0], [49.9, 6287.0], [50.0, 6298.0], [50.1, 6323.0], [50.2, 6328.0], [50.3, 6338.0], [50.4, 6348.0], [50.5, 6359.0], [50.6, 6371.0], [50.7, 6379.0], [50.8, 6391.0], [50.9, 6400.0], [51.0, 6413.0], [51.1, 6422.0], [51.2, 6432.0], [51.3, 6439.0], [51.4, 6450.0], [51.5, 6456.0], [51.6, 6466.0], [51.7, 6472.0], [51.8, 6478.0], [51.9, 6486.0], [52.0, 6490.0], [52.1, 6494.0], [52.2, 6498.0], [52.3, 6510.0], [52.4, 6518.0], [52.5, 6521.0], [52.6, 6526.0], [52.7, 6536.0], [52.8, 6542.0], [52.9, 6549.0], [53.0, 6559.0], [53.1, 6569.0], [53.2, 6577.0], [53.3, 6586.0], [53.4, 6594.0], [53.5, 6610.0], [53.6, 6616.0], [53.7, 6634.0], [53.8, 6644.0], [53.9, 6655.0], [54.0, 6667.0], [54.1, 6679.0], [54.2, 6690.0], [54.3, 6701.0], [54.4, 6716.0], [54.5, 6723.0], [54.6, 6731.0], [54.7, 6742.0], [54.8, 6746.0], [54.9, 6758.0], [55.0, 6767.0], [55.1, 6773.0], [55.2, 6781.0], [55.3, 6794.0], [55.4, 6806.0], [55.5, 6811.0], [55.6, 6821.0], [55.7, 6841.0], [55.8, 6850.0], [55.9, 6863.0], [56.0, 6871.0], [56.1, 6882.0], [56.2, 6888.0], [56.3, 6896.0], [56.4, 6899.0], [56.5, 6904.0], [56.6, 6910.0], [56.7, 6915.0], [56.8, 6921.0], [56.9, 6926.0], [57.0, 6933.0], [57.1, 6938.0], [57.2, 6944.0], [57.3, 6955.0], [57.4, 6965.0], [57.5, 6967.0], [57.6, 6970.0], [57.7, 6979.0], [57.8, 6983.0], [57.9, 6991.0], [58.0, 6999.0], [58.1, 7007.0], [58.2, 7016.0], [58.3, 7023.0], [58.4, 7029.0], [58.5, 7040.0], [58.6, 7046.0], [58.7, 7062.0], [58.8, 7076.0], [58.9, 7083.0], [59.0, 7093.0], [59.1, 7100.0], [59.2, 7116.0], [59.3, 7123.0], [59.4, 7134.0], [59.5, 7139.0], [59.6, 7145.0], [59.7, 7152.0], [59.8, 7156.0], [59.9, 7161.0], [60.0, 7173.0], [60.1, 7178.0], [60.2, 7186.0], [60.3, 7194.0], [60.4, 7198.0], [60.5, 7210.0], [60.6, 7222.0], [60.7, 7230.0], [60.8, 7236.0], [60.9, 7241.0], [61.0, 7252.0], [61.1, 7273.0], [61.2, 7284.0], [61.3, 7299.0], [61.4, 7312.0], [61.5, 7336.0], [61.6, 7364.0], [61.7, 7378.0], [61.8, 7399.0], [61.9, 7416.0], [62.0, 7436.0], [62.1, 7447.0], [62.2, 7464.0], [62.3, 7476.0], [62.4, 7488.0], [62.5, 7502.0], [62.6, 7524.0], [62.7, 7542.0], [62.8, 7549.0], [62.9, 7558.0], [63.0, 7568.0], [63.1, 7592.0], [63.2, 7600.0], [63.3, 7607.0], [63.4, 7623.0], [63.5, 7634.0], [63.6, 7652.0], [63.7, 7661.0], [63.8, 7680.0], [63.9, 7694.0], [64.0, 7701.0], [64.1, 7713.0], [64.2, 7720.0], [64.3, 7742.0], [64.4, 7750.0], [64.5, 7760.0], [64.6, 7781.0], [64.7, 7791.0], [64.8, 7806.0], [64.9, 7825.0], [65.0, 7839.0], [65.1, 7844.0], [65.2, 7851.0], [65.3, 7860.0], [65.4, 7874.0], [65.5, 7885.0], [65.6, 7893.0], [65.7, 7902.0], [65.8, 7913.0], [65.9, 7923.0], [66.0, 7934.0], [66.1, 7950.0], [66.2, 7964.0], [66.3, 7982.0], [66.4, 7993.0], [66.5, 7999.0], [66.6, 8009.0], [66.7, 8017.0], [66.8, 8025.0], [66.9, 8038.0], [67.0, 8046.0], [67.1, 8066.0], [67.2, 8072.0], [67.3, 8076.0], [67.4, 8082.0], [67.5, 8092.0], [67.6, 8104.0], [67.7, 8118.0], [67.8, 8131.0], [67.9, 8140.0], [68.0, 8149.0], [68.1, 8159.0], [68.2, 8164.0], [68.3, 8170.0], [68.4, 8191.0], [68.5, 8204.0], [68.6, 8213.0], [68.7, 8226.0], [68.8, 8231.0], [68.9, 8240.0], [69.0, 8249.0], [69.1, 8255.0], [69.2, 8262.0], [69.3, 8280.0], [69.4, 8303.0], [69.5, 8315.0], [69.6, 8331.0], [69.7, 8341.0], [69.8, 8356.0], [69.9, 8363.0], [70.0, 8372.0], [70.1, 8380.0], [70.2, 8386.0], [70.3, 8402.0], [70.4, 8407.0], [70.5, 8416.0], [70.6, 8419.0], [70.7, 8430.0], [70.8, 8443.0], [70.9, 8452.0], [71.0, 8462.0], [71.1, 8473.0], [71.2, 8486.0], [71.3, 8498.0], [71.4, 8508.0], [71.5, 8517.0], [71.6, 8531.0], [71.7, 8545.0], [71.8, 8558.0], [71.9, 8566.0], [72.0, 8571.0], [72.1, 8579.0], [72.2, 8588.0], [72.3, 8599.0], [72.4, 8610.0], [72.5, 8618.0], [72.6, 8625.0], [72.7, 8634.0], [72.8, 8640.0], [72.9, 8648.0], [73.0, 8659.0], [73.1, 8672.0], [73.2, 8691.0], [73.3, 8702.0], [73.4, 8709.0], [73.5, 8718.0], [73.6, 8737.0], [73.7, 8755.0], [73.8, 8767.0], [73.9, 8801.0], [74.0, 8825.0], [74.1, 8837.0], [74.2, 8856.0], [74.3, 8876.0], [74.4, 8897.0], [74.5, 8915.0], [74.6, 8940.0], [74.7, 8956.0], [74.8, 8961.0], [74.9, 8987.0], [75.0, 8997.0], [75.1, 9015.0], [75.2, 9025.0], [75.3, 9037.0], [75.4, 9047.0], [75.5, 9061.0], [75.6, 9094.0], [75.7, 9124.0], [75.8, 9136.0], [75.9, 9158.0], [76.0, 9175.0], [76.1, 9195.0], [76.2, 9216.0], [76.3, 9225.0], [76.4, 9239.0], [76.5, 9256.0], [76.6, 9272.0], [76.7, 9295.0], [76.8, 9309.0], [76.9, 9330.0], [77.0, 9352.0], [77.1, 9360.0], [77.2, 9378.0], [77.3, 9391.0], [77.4, 9406.0], [77.5, 9419.0], [77.6, 9440.0], [77.7, 9476.0], [77.8, 9488.0], [77.9, 9499.0], [78.0, 9512.0], [78.1, 9538.0], [78.2, 9574.0], [78.3, 9595.0], [78.4, 9623.0], [78.5, 9646.0], [78.6, 9667.0], [78.7, 9679.0], [78.8, 9691.0], [78.9, 9705.0], [79.0, 9736.0], [79.1, 9755.0], [79.2, 9772.0], [79.3, 9793.0], [79.4, 9816.0], [79.5, 9847.0], [79.6, 9866.0], [79.7, 9878.0], [79.8, 9898.0], [79.9, 9942.0], [80.0, 9955.0], [80.1, 9989.0], [80.2, 10010.0], [80.3, 10023.0], [80.4, 10050.0], [80.5, 10060.0], [80.6, 10066.0], [80.7, 10083.0], [80.8, 10111.0], [80.9, 10131.0], [81.0, 10144.0], [81.1, 10155.0], [81.2, 10176.0], [81.3, 10195.0], [81.4, 10204.0], [81.5, 10217.0], [81.6, 10234.0], [81.7, 10240.0], [81.8, 10252.0], [81.9, 10260.0], [82.0, 10272.0], [82.1, 10290.0], [82.2, 10297.0], [82.3, 10306.0], [82.4, 10314.0], [82.5, 10324.0], [82.6, 10337.0], [82.7, 10349.0], [82.8, 10373.0], [82.9, 10395.0], [83.0, 10408.0], [83.1, 10431.0], [83.2, 10445.0], [83.3, 10467.0], [83.4, 10477.0], [83.5, 10495.0], [83.6, 10510.0], [83.7, 10520.0], [83.8, 10538.0], [83.9, 10554.0], [84.0, 10564.0], [84.1, 10579.0], [84.2, 10586.0], [84.3, 10607.0], [84.4, 10629.0], [84.5, 10646.0], [84.6, 10666.0], [84.7, 10692.0], [84.8, 10712.0], [84.9, 10728.0], [85.0, 10759.0], [85.1, 10788.0], [85.2, 10814.0], [85.3, 10828.0], [85.4, 10848.0], [85.5, 10864.0], [85.6, 10874.0], [85.7, 10898.0], [85.8, 10911.0], [85.9, 10927.0], [86.0, 10958.0], [86.1, 10974.0], [86.2, 10995.0], [86.3, 11035.0], [86.4, 11044.0], [86.5, 11070.0], [86.6, 11100.0], [86.7, 11108.0], [86.8, 11124.0], [86.9, 11146.0], [87.0, 11166.0], [87.1, 11190.0], [87.2, 11212.0], [87.3, 11230.0], [87.4, 11247.0], [87.5, 11272.0], [87.6, 11293.0], [87.7, 11315.0], [87.8, 11342.0], [87.9, 11369.0], [88.0, 11401.0], [88.1, 11423.0], [88.2, 11434.0], [88.3, 11467.0], [88.4, 11492.0], [88.5, 11521.0], [88.6, 11541.0], [88.7, 11568.0], [88.8, 11586.0], [88.9, 11625.0], [89.0, 11668.0], [89.1, 11680.0], [89.2, 11694.0], [89.3, 11713.0], [89.4, 11734.0], [89.5, 11770.0], [89.6, 11803.0], [89.7, 11834.0], [89.8, 11853.0], [89.9, 11874.0], [90.0, 11913.0], [90.1, 11939.0], [90.2, 11960.0], [90.3, 12001.0], [90.4, 12019.0], [90.5, 12053.0], [90.6, 12073.0], [90.7, 12102.0], [90.8, 12125.0], [90.9, 12135.0], [91.0, 12164.0], [91.1, 12197.0], [91.2, 12239.0], [91.3, 12249.0], [91.4, 12263.0], [91.5, 12284.0], [91.6, 12328.0], [91.7, 12338.0], [91.8, 12348.0], [91.9, 12383.0], [92.0, 12419.0], [92.1, 12462.0], [92.2, 12479.0], [92.3, 12520.0], [92.4, 12536.0], [92.5, 12562.0], [92.6, 12587.0], [92.7, 12619.0], [92.8, 12647.0], [92.9, 12659.0], [93.0, 12686.0], [93.1, 12719.0], [93.2, 12759.0], [93.3, 12788.0], [93.4, 12809.0], [93.5, 12829.0], [93.6, 12843.0], [93.7, 12880.0], [93.8, 12889.0], [93.9, 12924.0], [94.0, 12964.0], [94.1, 12994.0], [94.2, 13015.0], [94.3, 13064.0], [94.4, 13083.0], [94.5, 13112.0], [94.6, 13133.0], [94.7, 13169.0], [94.8, 13193.0], [94.9, 13219.0], [95.0, 13242.0], [95.1, 13265.0], [95.2, 13302.0], [95.3, 13330.0], [95.4, 13362.0], [95.5, 13400.0], [95.6, 13457.0], [95.7, 13474.0], [95.8, 13529.0], [95.9, 13544.0], [96.0, 13595.0], [96.1, 13658.0], [96.2, 13768.0], [96.3, 13798.0], [96.4, 13871.0], [96.5, 14012.0], [96.6, 14092.0], [96.7, 14139.0], [96.8, 14168.0], [96.9, 14238.0], [97.0, 14265.0], [97.1, 14320.0], [97.2, 14403.0], [97.3, 14461.0], [97.4, 14702.0], [97.5, 14819.0], [97.6, 14919.0], [97.7, 15068.0], [97.8, 15152.0], [97.9, 15299.0], [98.0, 15522.0], [98.1, 15575.0], [98.2, 15632.0], [98.3, 15784.0], [98.4, 15917.0], [98.5, 16132.0], [98.6, 16252.0], [98.7, 16348.0], [98.8, 16565.0], [98.9, 16839.0], [99.0, 17399.0], [99.1, 17639.0], [99.2, 17696.0], [99.3, 18145.0], [99.4, 18364.0], [99.5, 18760.0], [99.6, 19774.0], [99.7, 20483.0], [99.8, 20661.0], [99.9, 21580.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 130.0, "series": [{"data": [[0.0, 84.0], [100.0, 130.0], [200.0, 53.0], [300.0, 107.0], [400.0, 13.0], [500.0, 8.0], [600.0, 9.0], [700.0, 28.0], [800.0, 31.0], [900.0, 39.0], [1000.0, 50.0], [1100.0, 29.0], [1200.0, 42.0], [1300.0, 88.0], [1400.0, 91.0], [1500.0, 88.0], [1600.0, 60.0], [1700.0, 81.0], [1800.0, 84.0], [1900.0, 72.0], [2000.0, 52.0], [2100.0, 59.0], [2300.0, 46.0], [2200.0, 44.0], [2400.0, 42.0], [2500.0, 63.0], [2600.0, 53.0], [2800.0, 43.0], [2700.0, 36.0], [2900.0, 42.0], [3000.0, 59.0], [3100.0, 71.0], [3200.0, 52.0], [3300.0, 31.0], [3400.0, 24.0], [3500.0, 38.0], [3600.0, 55.0], [3700.0, 50.0], [3800.0, 68.0], [3900.0, 60.0], [4000.0, 88.0], [4200.0, 35.0], [4100.0, 58.0], [4300.0, 31.0], [4600.0, 43.0], [4500.0, 43.0], [4400.0, 31.0], [4700.0, 25.0], [4800.0, 45.0], [4900.0, 77.0], [5000.0, 62.0], [5100.0, 49.0], [5200.0, 37.0], [5300.0, 41.0], [5600.0, 41.0], [5500.0, 44.0], [5400.0, 42.0], [5700.0, 40.0], [5800.0, 48.0], [5900.0, 51.0], [6000.0, 46.0], [6100.0, 61.0], [6300.0, 57.0], [6200.0, 70.0], [6400.0, 87.0], [6600.0, 54.0], [6500.0, 80.0], [6800.0, 69.0], [6900.0, 106.0], [6700.0, 73.0], [7100.0, 87.0], [7000.0, 70.0], [7200.0, 59.0], [7300.0, 33.0], [7400.0, 44.0], [7500.0, 44.0], [7600.0, 55.0], [7700.0, 50.0], [7800.0, 62.0], [7900.0, 53.0], [8100.0, 59.0], [8000.0, 68.0], [8200.0, 62.0], [8300.0, 59.0], [8400.0, 67.0], [8500.0, 66.0], [8600.0, 65.0], [8700.0, 39.0], [8800.0, 35.0], [8900.0, 38.0], [9100.0, 30.0], [9200.0, 40.0], [9000.0, 42.0], [9300.0, 45.0], [9400.0, 34.0], [9700.0, 31.0], [9600.0, 34.0], [9500.0, 28.0], [9900.0, 22.0], [10000.0, 40.0], [10200.0, 57.0], [10100.0, 39.0], [9800.0, 31.0], [10700.0, 29.0], [10600.0, 28.0], [10500.0, 48.0], [10400.0, 40.0], [10300.0, 48.0], [10800.0, 37.0], [10900.0, 34.0], [11100.0, 37.0], [11000.0, 24.0], [11200.0, 31.0], [11400.0, 29.0], [11300.0, 24.0], [11500.0, 27.0], [11600.0, 23.0], [11700.0, 24.0], [11900.0, 21.0], [12000.0, 26.0], [11800.0, 27.0], [12100.0, 27.0], [12200.0, 30.0], [12500.0, 26.0], [12300.0, 24.0], [12400.0, 21.0], [12600.0, 27.0], [12700.0, 18.0], [13000.0, 20.0], [13100.0, 24.0], [12800.0, 33.0], [13200.0, 25.0], [13300.0, 20.0], [12900.0, 20.0], [13700.0, 13.0], [13400.0, 19.0], [13800.0, 7.0], [13500.0, 15.0], [13600.0, 7.0], [14300.0, 9.0], [14200.0, 14.0], [14100.0, 15.0], [14000.0, 8.0], [13900.0, 5.0], [14400.0, 7.0], [14600.0, 2.0], [14800.0, 9.0], [14500.0, 4.0], [14700.0, 4.0], [15000.0, 8.0], [15200.0, 4.0], [15100.0, 6.0], [15300.0, 4.0], [14900.0, 3.0], [15500.0, 10.0], [15600.0, 8.0], [15800.0, 3.0], [15700.0, 5.0], [15400.0, 1.0], [16200.0, 7.0], [16000.0, 3.0], [15900.0, 4.0], [16300.0, 4.0], [16100.0, 3.0], [16600.0, 1.0], [16800.0, 4.0], [16400.0, 2.0], [17200.0, 2.0], [17400.0, 1.0], [17600.0, 11.0], [18400.0, 4.0], [17800.0, 1.0], [18000.0, 2.0], [18200.0, 2.0], [18600.0, 1.0], [19200.0, 1.0], [18800.0, 1.0], [20400.0, 3.0], [19600.0, 1.0], [19800.0, 1.0], [21000.0, 1.0], [20800.0, 1.0], [20600.0, 2.0], [22200.0, 1.0], [23800.0, 1.0], [16500.0, 5.0], [16700.0, 1.0], [17100.0, 3.0], [17300.0, 2.0], [18100.0, 3.0], [18300.0, 4.0], [17500.0, 2.0], [17900.0, 1.0], [19100.0, 2.0], [18700.0, 1.0], [19700.0, 2.0], [19900.0, 1.0], [20300.0, 2.0], [21500.0, 2.0], [20500.0, 4.0], [20900.0, 1.0], [20700.0, 1.0], [22100.0, 1.0], [22300.0, 1.0], [22900.0, 2.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 387.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5763.0, "series": [{"data": [[0.0, 387.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 415.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5763.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.5, "minX": 1.62624979E12, "maxY": 1000.0, "series": [{"data": [[1.62624983E12, 1000.0], [1.62624982E12, 746.575722543353], [1.62624981E12, 274.81728880157175], [1.6262498E12, 44.926565874730024], [1.62624979E12, 15.5], [1.62624986E12, 999.8639760837071], [1.62624985E12, 1000.0], [1.62624984E12, 1000.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62624986E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 148.2, "minX": 5.0, "maxY": 14418.0, "series": [{"data": [[5.0, 5214.666666666666], [6.0, 7366.0], [7.0, 14418.0], [8.0, 14397.0], [9.0, 13743.0], [10.0, 243.45833333333323], [11.0, 993.2500000000001], [12.0, 5476.5], [13.0, 5067.0], [14.0, 9902.0], [15.0, 7787.0], [16.0, 7196.0], [17.0, 6490.0], [18.0, 5803.0], [19.0, 5727.0], [20.0, 350.14018691588785], [21.0, 182.5], [23.0, 195.75], [25.0, 148.2], [26.0, 151.5], [27.0, 163.0], [29.0, 302.0], [30.0, 177.66666666666666], [32.0, 204.0], [34.0, 204.0], [35.0, 12167.333333333332], [36.0, 229.71428571428572], [37.0, 247.66666666666666], [38.0, 264.0], [39.0, 275.5], [40.0, 272.0], [41.0, 280.0], [42.0, 293.6666666666667], [43.0, 3315.0], [44.0, 340.0], [45.0, 309.0], [46.0, 330.2857142857143], [47.0, 333.6666666666667], [48.0, 369.5], [49.0, 355.3333333333333], [50.0, 350.75], [51.0, 364.8888888888889], [52.0, 388.3333333333333], [53.0, 398.0], [54.0, 1296.0], [55.0, 525.1666666666667], [56.0, 314.0], [57.0, 310.5], [58.0, 226.0], [59.0, 250.0], [60.0, 262.0], [62.0, 253.0], [63.0, 258.0], [64.0, 294.0], [65.0, 288.0], [66.0, 293.4], [67.0, 311.8], [68.0, 317.5], [69.0, 323.3333333333333], [70.0, 333.0], [71.0, 333.0], [73.0, 335.30000000000007], [74.0, 341.14285714285717], [75.0, 346.375], [76.0, 369.5], [77.0, 1101.8750000000002], [107.0, 1088.3076923076924], [108.0, 792.5], [109.0, 840.0], [110.0, 1034.6666666666663], [111.0, 1125.4], [112.0, 887.1666666666666], [113.0, 1023.5749999999999], [116.0, 814.0], [121.0, 785.0], [124.0, 439.0], [130.0, 876.0], [133.0, 618.0], [135.0, 639.0], [151.0, 881.0], [160.0, 873.0], [165.0, 906.0], [166.0, 979.0], [171.0, 996.9166666666665], [202.0, 1504.0], [203.0, 1371.375], [204.0, 1381.4927536231883], [205.0, 1446.1764705882351], [206.0, 1477.1250000000002], [207.0, 1644.0], [208.0, 1605.181818181818], [209.0, 2409.0], [219.0, 1689.7222222222222], [220.0, 2385.0], [221.0, 2219.0], [222.0, 2188.5], [227.0, 1712.415841584158], [228.0, 1773.446236559139], [229.0, 1233.217391304348], [232.0, 1184.0], [235.0, 1094.0], [236.0, 846.5], [237.0, 1146.0], [265.0, 1897.0], [267.0, 1926.0], [323.0, 1898.4615384615386], [324.0, 2027.9666666666662], [361.0, 2081.3333333333335], [363.0, 2779.0], [365.0, 2186.1398963730576], [367.0, 2926.24], [366.0, 2885.285714285714], [369.0, 3242.041666666666], [368.0, 3557.0], [370.0, 3191.144444444444], [371.0, 4059.9999999999995], [372.0, 3443.0], [373.0, 3608.0], [374.0, 3610.0], [375.0, 2827.422712933751], [377.0, 2042.0], [382.0, 2055.0], [385.0, 1838.0], [387.0, 1115.0], [389.0, 1908.5], [391.0, 1277.0], [393.0, 2735.0], [395.0, 2528.0], [399.0, 2963.0], [405.0, 2316.0], [409.0, 2313.5], [410.0, 2368.0], [412.0, 3045.5], [634.0, 3131.0], [899.0, 3596.25], [900.0, 3128.0], [901.0, 3690.0], [991.0, 6201.0], [990.0, 4479.0], [989.0, 8321.0], [988.0, 8128.0], [987.0, 2457.0], [996.0, 5781.0], [998.0, 3300.913043478261], [1000.0, 8162.696153846148], [999.0, 4930.0], [997.0, 4455.0], [995.0, 8407.0], [994.0, 7950.0], [993.0, 4826.0], [992.0, 4868.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}, {"data": [[784.8315308453913, 6358.852246763142]], "isOverall": false, "label": "Sunstar Home Japan-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 129.0, "minX": 1.62624979E12, "maxY": 6680613.0, "series": [{"data": [[1.62624983E12, 6680613.0], [1.62624982E12, 4021385.0], [1.62624981E12, 4732639.7], [1.6262498E12, 2152457.9], [1.62624979E12, 46500.5], [1.62624986E12, 3110181.0], [1.62624985E12, 6127382.0], [1.62624984E12, 3649465.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62624983E12, 18537.3], [1.62624982E12, 11158.5], [1.62624981E12, 13132.2], [1.6262498E12, 5972.7], [1.62624979E12, 129.0], [1.62624986E12, 8630.1], [1.62624985E12, 17002.2], [1.62624984E12, 10126.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62624986E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 673.2224622030236, "minX": 1.62624979E12, "maxY": 9200.392261001512, "series": [{"data": [[1.62624983E12, 8342.672233820453], [1.62624982E12, 4316.70289017341], [1.62624981E12, 1942.8447937131632], [1.6262498E12, 673.2224622030236], [1.62624979E12, 7937.4], [1.62624986E12, 7383.2750373692115], [1.62624985E12, 9200.392261001512], [1.62624984E12, 8393.728662420383]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62624986E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 657.1814254859618, "minX": 1.62624979E12, "maxY": 9127.421092564498, "series": [{"data": [[1.62624983E12, 8303.619345859408], [1.62624982E12, 4267.798843930639], [1.62624981E12, 1858.405697445972], [1.6262498E12, 657.1814254859618], [1.62624979E12, 7815.3], [1.62624986E12, 7349.781763826607], [1.62624985E12, 9127.421092564498], [1.62624984E12, 8287.043312101901]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62624986E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 235.4, "minX": 1.62624979E12, "maxY": 8940.539453717756, "series": [{"data": [[1.62624983E12, 8115.821155184412], [1.62624982E12, 4187.301734104046], [1.62624981E12, 1806.4204322200396], [1.6262498E12, 310.1555075593951], [1.62624979E12, 235.4], [1.62624986E12, 7306.518684603893], [1.62624985E12, 8940.539453717756], [1.62624984E12, 8113.008917197454]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62624986E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.62624979E12, "maxY": 23820.0, "series": [{"data": [[1.62624983E12, 15659.0], [1.62624982E12, 8839.0], [1.62624981E12, 5333.0], [1.6262498E12, 18410.0], [1.62624979E12, 10870.0], [1.62624986E12, 18263.0], [1.62624985E12, 23820.0], [1.62624984E12, 19220.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62624983E12, 823.0], [1.62624982E12, 806.0], [1.62624981E12, 439.0], [1.6262498E12, 45.0], [1.62624979E12, 4661.0], [1.62624986E12, 1313.0], [1.62624985E12, 1381.0], [1.62624984E12, 1079.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62624983E12, 12352.2], [1.62624982E12, 7156.4], [1.62624981E12, 3044.2], [1.6262498E12, 1003.0], [1.62624979E12, 10870.0], [1.62624986E12, 11146.0], [1.62624985E12, 14680.400000000003], [1.62624984E12, 12238.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62624983E12, 14131.019999999997], [1.62624982E12, 8600.7], [1.62624981E12, 4258.91], [1.6262498E12, 16311.560000000029], [1.62624979E12, 10870.0], [1.62624986E12, 13547.599999999997], [1.62624985E12, 20679.629999999997], [1.62624984E12, 18208.32]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62624983E12, 13077.4], [1.62624982E12, 8376.199999999999], [1.62624981E12, 3241.4999999999995], [1.6262498E12, 1336.3999999999999], [1.62624979E12, 10870.0], [1.62624986E12, 11844.0], [1.62624985E12, 16523.6], [1.62624984E12, 13299.799999999992]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62624986E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 78.0, "minX": 1.0, "maxY": 12307.0, "series": [{"data": [[2.0, 8549.0], [3.0, 12307.0], [4.0, 11359.5], [7.0, 8143.0], [9.0, 3914.0], [11.0, 80.0], [14.0, 4899.0], [17.0, 2316.0], [33.0, 4924.0], [35.0, 6145.0], [39.0, 9195.0], [42.0, 9455.0], [48.0, 1858.5], [49.0, 1778.0], [52.0, 3285.5], [56.0, 9447.0], [61.0, 9772.0], [67.0, 5052.0], [70.0, 996.0], [68.0, 10074.5], [71.0, 7707.0], [76.0, 78.0], [77.0, 6874.0], [80.0, 2232.0], [83.0, 6087.0], [82.0, 6385.5], [87.0, 1451.0], [86.0, 6502.0], [90.0, 11168.0], [88.0, 7871.0], [99.0, 3133.0], [97.0, 7844.0], [102.0, 282.5], [100.0, 330.0], [111.0, 4013.0], [109.0, 6113.0], [125.0, 1817.0], [131.0, 1396.0], [128.0, 2313.5], [133.0, 8144.0], [137.0, 8133.0], [143.0, 5042.0], [146.0, 7194.5], [159.0, 1547.0], [155.0, 10519.0], [157.0, 8889.0], [166.0, 6426.5], [178.0, 7062.5], [177.0, 9493.0], [184.0, 8420.5], [249.0, 7920.0], [1.0, 7787.0], [265.0, 11960.0], [285.0, 3118.0], [360.0, 7629.5], [362.0, 7729.0], [380.0, 6898.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 380.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 74.5, "minX": 1.0, "maxY": 12242.0, "series": [{"data": [[2.0, 8442.5], [3.0, 12242.0], [4.0, 10626.0], [7.0, 8143.0], [9.0, 3914.0], [11.0, 76.0], [14.0, 4847.0], [17.0, 1911.0], [33.0, 4900.0], [35.0, 6080.0], [39.0, 9194.0], [42.0, 9452.5], [48.0, 1715.5], [49.0, 1733.0], [52.0, 2758.0], [56.0, 9442.5], [61.0, 9025.0], [67.0, 5052.0], [70.0, 984.0], [68.0, 10058.0], [71.0, 7461.0], [76.0, 74.5], [77.0, 6874.0], [80.0, 2216.5], [83.0, 6086.0], [82.0, 6335.0], [87.0, 1437.0], [86.0, 6500.5], [90.0, 11165.0], [88.0, 7717.5], [99.0, 3128.0], [97.0, 7844.0], [102.0, 267.5], [100.0, 314.5], [111.0, 4009.0], [109.0, 6095.0], [125.0, 1786.0], [131.0, 1153.0], [128.0, 2255.5], [133.0, 8143.0], [137.0, 8131.0], [143.0, 4992.0], [146.0, 7167.0], [159.0, 1517.0], [155.0, 10485.0], [157.0, 8792.0], [166.0, 6425.5], [178.0, 7036.0], [177.0, 9493.0], [184.0, 8417.0], [249.0, 7920.0], [1.0, 7674.0], [265.0, 11845.0], [285.0, 3039.0], [360.0, 7627.0], [362.0, 7572.0], [380.0, 6895.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 380.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.62624978E12, "maxY": 149.5, "series": [{"data": [[1.62624983E12, 143.7], [1.62624982E12, 149.5], [1.62624981E12, 127.8], [1.6262498E12, 56.3], [1.62624978E12, 2.0], [1.62624986E12, 3.0], [1.62624985E12, 96.1], [1.62624984E12, 78.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62624986E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62624979E12, "maxY": 143.7, "series": [{"data": [[1.62624983E12, 143.7], [1.62624982E12, 86.5], [1.62624981E12, 101.8], [1.6262498E12, 46.3], [1.62624979E12, 1.0], [1.62624986E12, 66.9], [1.62624985E12, 131.8], [1.62624984E12, 78.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62624986E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62624979E12, "maxY": 143.7, "series": [{"data": [[1.62624983E12, 143.7], [1.62624982E12, 86.5], [1.62624981E12, 101.8], [1.6262498E12, 46.3], [1.62624979E12, 1.0], [1.62624986E12, 66.9], [1.62624985E12, 131.8], [1.62624984E12, 78.5]], "isOverall": false, "label": "Sunstar Home Japan-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62624986E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62624979E12, "maxY": 143.7, "series": [{"data": [[1.62624983E12, 143.7], [1.62624982E12, 86.5], [1.62624981E12, 101.8], [1.6262498E12, 46.3], [1.62624979E12, 1.0], [1.62624986E12, 66.9], [1.62624985E12, 131.8], [1.62624984E12, 78.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62624986E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

