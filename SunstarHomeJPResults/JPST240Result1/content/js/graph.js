/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 59.0, "minX": 0.0, "maxY": 30938.0, "series": [{"data": [[0.0, 59.0], [0.1, 63.0], [0.2, 70.0], [0.3, 73.0], [0.4, 78.0], [0.5, 82.0], [0.6, 94.0], [0.7, 139.0], [0.8, 152.0], [0.9, 156.0], [1.0, 164.0], [1.1, 168.0], [1.2, 172.0], [1.3, 178.0], [1.4, 180.0], [1.5, 182.0], [1.6, 185.0], [1.7, 186.0], [1.8, 191.0], [1.9, 193.0], [2.0, 193.0], [2.1, 194.0], [2.2, 198.0], [2.3, 201.0], [2.4, 204.0], [2.5, 207.0], [2.6, 209.0], [2.7, 214.0], [2.8, 215.0], [2.9, 220.0], [3.0, 224.0], [3.1, 227.0], [3.2, 232.0], [3.3, 234.0], [3.4, 237.0], [3.5, 240.0], [3.6, 243.0], [3.7, 247.0], [3.8, 249.0], [3.9, 254.0], [4.0, 255.0], [4.1, 259.0], [4.2, 259.0], [4.3, 265.0], [4.4, 267.0], [4.5, 269.0], [4.6, 272.0], [4.7, 274.0], [4.8, 278.0], [4.9, 280.0], [5.0, 283.0], [5.1, 287.0], [5.2, 290.0], [5.3, 293.0], [5.4, 295.0], [5.5, 297.0], [5.6, 299.0], [5.7, 300.0], [5.8, 302.0], [5.9, 305.0], [6.0, 307.0], [6.1, 308.0], [6.2, 312.0], [6.3, 313.0], [6.4, 315.0], [6.5, 320.0], [6.6, 322.0], [6.7, 327.0], [6.8, 328.0], [6.9, 330.0], [7.0, 332.0], [7.1, 336.0], [7.2, 339.0], [7.3, 344.0], [7.4, 348.0], [7.5, 350.0], [7.6, 356.0], [7.7, 358.0], [7.8, 362.0], [7.9, 365.0], [8.0, 369.0], [8.1, 372.0], [8.2, 372.0], [8.3, 375.0], [8.4, 377.0], [8.5, 379.0], [8.6, 383.0], [8.7, 385.0], [8.8, 389.0], [8.9, 391.0], [9.0, 393.0], [9.1, 395.0], [9.2, 399.0], [9.3, 402.0], [9.4, 404.0], [9.5, 404.0], [9.6, 406.0], [9.7, 410.0], [9.8, 412.0], [9.9, 413.0], [10.0, 415.0], [10.1, 417.0], [10.2, 421.0], [10.3, 423.0], [10.4, 427.0], [10.5, 428.0], [10.6, 430.0], [10.7, 432.0], [10.8, 434.0], [10.9, 435.0], [11.0, 436.0], [11.1, 439.0], [11.2, 442.0], [11.3, 442.0], [11.4, 444.0], [11.5, 446.0], [11.6, 448.0], [11.7, 449.0], [11.8, 453.0], [11.9, 454.0], [12.0, 457.0], [12.1, 459.0], [12.2, 463.0], [12.3, 468.0], [12.4, 469.0], [12.5, 472.0], [12.6, 476.0], [12.7, 482.0], [12.8, 484.0], [12.9, 488.0], [13.0, 489.0], [13.1, 490.0], [13.2, 492.0], [13.3, 494.0], [13.4, 499.0], [13.5, 503.0], [13.6, 504.0], [13.7, 508.0], [13.8, 510.0], [13.9, 511.0], [14.0, 512.0], [14.1, 515.0], [14.2, 516.0], [14.3, 518.0], [14.4, 519.0], [14.5, 521.0], [14.6, 523.0], [14.7, 526.0], [14.8, 527.0], [14.9, 531.0], [15.0, 532.0], [15.1, 535.0], [15.2, 539.0], [15.3, 541.0], [15.4, 544.0], [15.5, 549.0], [15.6, 551.0], [15.7, 552.0], [15.8, 554.0], [15.9, 556.0], [16.0, 563.0], [16.1, 566.0], [16.2, 570.0], [16.3, 571.0], [16.4, 576.0], [16.5, 579.0], [16.6, 582.0], [16.7, 587.0], [16.8, 589.0], [16.9, 592.0], [17.0, 599.0], [17.1, 600.0], [17.2, 605.0], [17.3, 611.0], [17.4, 616.0], [17.5, 619.0], [17.6, 623.0], [17.7, 627.0], [17.8, 630.0], [17.9, 633.0], [18.0, 635.0], [18.1, 643.0], [18.2, 646.0], [18.3, 648.0], [18.4, 653.0], [18.5, 656.0], [18.6, 658.0], [18.7, 665.0], [18.8, 670.0], [18.9, 680.0], [19.0, 688.0], [19.1, 691.0], [19.2, 699.0], [19.3, 707.0], [19.4, 712.0], [19.5, 718.0], [19.6, 723.0], [19.7, 736.0], [19.8, 744.0], [19.9, 747.0], [20.0, 754.0], [20.1, 767.0], [20.2, 775.0], [20.3, 779.0], [20.4, 785.0], [20.5, 789.0], [20.6, 795.0], [20.7, 802.0], [20.8, 809.0], [20.9, 817.0], [21.0, 819.0], [21.1, 829.0], [21.2, 834.0], [21.3, 840.0], [21.4, 843.0], [21.5, 848.0], [21.6, 851.0], [21.7, 857.0], [21.8, 866.0], [21.9, 883.0], [22.0, 892.0], [22.1, 903.0], [22.2, 910.0], [22.3, 925.0], [22.4, 938.0], [22.5, 950.0], [22.6, 956.0], [22.7, 966.0], [22.8, 973.0], [22.9, 980.0], [23.0, 988.0], [23.1, 999.0], [23.2, 1012.0], [23.3, 1018.0], [23.4, 1021.0], [23.5, 1024.0], [23.6, 1030.0], [23.7, 1033.0], [23.8, 1039.0], [23.9, 1043.0], [24.0, 1050.0], [24.1, 1054.0], [24.2, 1056.0], [24.3, 1062.0], [24.4, 1067.0], [24.5, 1073.0], [24.6, 1081.0], [24.7, 1087.0], [24.8, 1096.0], [24.9, 1102.0], [25.0, 1109.0], [25.1, 1113.0], [25.2, 1117.0], [25.3, 1120.0], [25.4, 1124.0], [25.5, 1128.0], [25.6, 1132.0], [25.7, 1136.0], [25.8, 1141.0], [25.9, 1145.0], [26.0, 1147.0], [26.1, 1153.0], [26.2, 1162.0], [26.3, 1164.0], [26.4, 1167.0], [26.5, 1171.0], [26.6, 1183.0], [26.7, 1185.0], [26.8, 1189.0], [26.9, 1196.0], [27.0, 1197.0], [27.1, 1203.0], [27.2, 1206.0], [27.3, 1209.0], [27.4, 1215.0], [27.5, 1219.0], [27.6, 1225.0], [27.7, 1229.0], [27.8, 1235.0], [27.9, 1238.0], [28.0, 1240.0], [28.1, 1243.0], [28.2, 1253.0], [28.3, 1261.0], [28.4, 1263.0], [28.5, 1271.0], [28.6, 1274.0], [28.7, 1278.0], [28.8, 1284.0], [28.9, 1287.0], [29.0, 1295.0], [29.1, 1296.0], [29.2, 1303.0], [29.3, 1309.0], [29.4, 1312.0], [29.5, 1314.0], [29.6, 1317.0], [29.7, 1324.0], [29.8, 1331.0], [29.9, 1335.0], [30.0, 1340.0], [30.1, 1345.0], [30.2, 1350.0], [30.3, 1352.0], [30.4, 1357.0], [30.5, 1365.0], [30.6, 1375.0], [30.7, 1379.0], [30.8, 1386.0], [30.9, 1393.0], [31.0, 1397.0], [31.1, 1399.0], [31.2, 1402.0], [31.3, 1407.0], [31.4, 1415.0], [31.5, 1418.0], [31.6, 1426.0], [31.7, 1431.0], [31.8, 1437.0], [31.9, 1443.0], [32.0, 1445.0], [32.1, 1451.0], [32.2, 1454.0], [32.3, 1459.0], [32.4, 1463.0], [32.5, 1471.0], [32.6, 1474.0], [32.7, 1481.0], [32.8, 1482.0], [32.9, 1490.0], [33.0, 1494.0], [33.1, 1499.0], [33.2, 1501.0], [33.3, 1508.0], [33.4, 1520.0], [33.5, 1523.0], [33.6, 1528.0], [33.7, 1535.0], [33.8, 1538.0], [33.9, 1541.0], [34.0, 1545.0], [34.1, 1549.0], [34.2, 1552.0], [34.3, 1554.0], [34.4, 1558.0], [34.5, 1562.0], [34.6, 1565.0], [34.7, 1572.0], [34.8, 1575.0], [34.9, 1580.0], [35.0, 1584.0], [35.1, 1590.0], [35.2, 1593.0], [35.3, 1596.0], [35.4, 1597.0], [35.5, 1603.0], [35.6, 1611.0], [35.7, 1620.0], [35.8, 1624.0], [35.9, 1626.0], [36.0, 1629.0], [36.1, 1632.0], [36.2, 1637.0], [36.3, 1639.0], [36.4, 1642.0], [36.5, 1650.0], [36.6, 1652.0], [36.7, 1657.0], [36.8, 1663.0], [36.9, 1667.0], [37.0, 1668.0], [37.1, 1673.0], [37.2, 1682.0], [37.3, 1685.0], [37.4, 1690.0], [37.5, 1695.0], [37.6, 1700.0], [37.7, 1704.0], [37.8, 1710.0], [37.9, 1716.0], [38.0, 1718.0], [38.1, 1730.0], [38.2, 1734.0], [38.3, 1741.0], [38.4, 1744.0], [38.5, 1753.0], [38.6, 1759.0], [38.7, 1762.0], [38.8, 1773.0], [38.9, 1778.0], [39.0, 1786.0], [39.1, 1796.0], [39.2, 1799.0], [39.3, 1803.0], [39.4, 1804.0], [39.5, 1807.0], [39.6, 1809.0], [39.7, 1813.0], [39.8, 1817.0], [39.9, 1820.0], [40.0, 1827.0], [40.1, 1833.0], [40.2, 1837.0], [40.3, 1843.0], [40.4, 1851.0], [40.5, 1855.0], [40.6, 1865.0], [40.7, 1867.0], [40.8, 1870.0], [40.9, 1875.0], [41.0, 1882.0], [41.1, 1884.0], [41.2, 1886.0], [41.3, 1892.0], [41.4, 1892.0], [41.5, 1901.0], [41.6, 1913.0], [41.7, 1915.0], [41.8, 1918.0], [41.9, 1920.0], [42.0, 1924.0], [42.1, 1934.0], [42.2, 1941.0], [42.3, 1944.0], [42.4, 1949.0], [42.5, 1951.0], [42.6, 1954.0], [42.7, 1957.0], [42.8, 1959.0], [42.9, 1961.0], [43.0, 1964.0], [43.1, 1971.0], [43.2, 1974.0], [43.3, 1980.0], [43.4, 1982.0], [43.5, 1985.0], [43.6, 1987.0], [43.7, 1990.0], [43.8, 1992.0], [43.9, 1996.0], [44.0, 1997.0], [44.1, 2000.0], [44.2, 2004.0], [44.3, 2008.0], [44.4, 2011.0], [44.5, 2013.0], [44.6, 2018.0], [44.7, 2020.0], [44.8, 2023.0], [44.9, 2027.0], [45.0, 2036.0], [45.1, 2040.0], [45.2, 2043.0], [45.3, 2052.0], [45.4, 2059.0], [45.5, 2062.0], [45.6, 2065.0], [45.7, 2068.0], [45.8, 2070.0], [45.9, 2073.0], [46.0, 2081.0], [46.1, 2084.0], [46.2, 2088.0], [46.3, 2091.0], [46.4, 2096.0], [46.5, 2099.0], [46.6, 2099.0], [46.7, 2102.0], [46.8, 2104.0], [46.9, 2112.0], [47.0, 2115.0], [47.1, 2122.0], [47.2, 2128.0], [47.3, 2133.0], [47.4, 2138.0], [47.5, 2143.0], [47.6, 2150.0], [47.7, 2152.0], [47.8, 2154.0], [47.9, 2157.0], [48.0, 2160.0], [48.1, 2164.0], [48.2, 2166.0], [48.3, 2170.0], [48.4, 2176.0], [48.5, 2177.0], [48.6, 2182.0], [48.7, 2186.0], [48.8, 2190.0], [48.9, 2197.0], [49.0, 2198.0], [49.1, 2202.0], [49.2, 2205.0], [49.3, 2206.0], [49.4, 2209.0], [49.5, 2213.0], [49.6, 2215.0], [49.7, 2220.0], [49.8, 2222.0], [49.9, 2228.0], [50.0, 2230.0], [50.1, 2234.0], [50.2, 2235.0], [50.3, 2239.0], [50.4, 2243.0], [50.5, 2245.0], [50.6, 2250.0], [50.7, 2252.0], [50.8, 2258.0], [50.9, 2261.0], [51.0, 2263.0], [51.1, 2268.0], [51.2, 2269.0], [51.3, 2275.0], [51.4, 2279.0], [51.5, 2283.0], [51.6, 2290.0], [51.7, 2291.0], [51.8, 2298.0], [51.9, 2301.0], [52.0, 2303.0], [52.1, 2306.0], [52.2, 2309.0], [52.3, 2315.0], [52.4, 2321.0], [52.5, 2326.0], [52.6, 2328.0], [52.7, 2334.0], [52.8, 2341.0], [52.9, 2345.0], [53.0, 2346.0], [53.1, 2352.0], [53.2, 2358.0], [53.3, 2365.0], [53.4, 2369.0], [53.5, 2371.0], [53.6, 2375.0], [53.7, 2378.0], [53.8, 2381.0], [53.9, 2386.0], [54.0, 2392.0], [54.1, 2399.0], [54.2, 2401.0], [54.3, 2404.0], [54.4, 2409.0], [54.5, 2413.0], [54.6, 2425.0], [54.7, 2437.0], [54.8, 2443.0], [54.9, 2445.0], [55.0, 2450.0], [55.1, 2456.0], [55.2, 2467.0], [55.3, 2472.0], [55.4, 2475.0], [55.5, 2482.0], [55.6, 2485.0], [55.7, 2489.0], [55.8, 2496.0], [55.9, 2498.0], [56.0, 2503.0], [56.1, 2506.0], [56.2, 2511.0], [56.3, 2520.0], [56.4, 2524.0], [56.5, 2528.0], [56.6, 2532.0], [56.7, 2537.0], [56.8, 2541.0], [56.9, 2543.0], [57.0, 2547.0], [57.1, 2550.0], [57.2, 2557.0], [57.3, 2566.0], [57.4, 2573.0], [57.5, 2579.0], [57.6, 2584.0], [57.7, 2586.0], [57.8, 2595.0], [57.9, 2598.0], [58.0, 2601.0], [58.1, 2606.0], [58.2, 2610.0], [58.3, 2619.0], [58.4, 2623.0], [58.5, 2632.0], [58.6, 2642.0], [58.7, 2644.0], [58.8, 2648.0], [58.9, 2653.0], [59.0, 2658.0], [59.1, 2667.0], [59.2, 2679.0], [59.3, 2684.0], [59.4, 2689.0], [59.5, 2691.0], [59.6, 2698.0], [59.7, 2711.0], [59.8, 2713.0], [59.9, 2718.0], [60.0, 2724.0], [60.1, 2733.0], [60.2, 2742.0], [60.3, 2745.0], [60.4, 2754.0], [60.5, 2762.0], [60.6, 2768.0], [60.7, 2779.0], [60.8, 2784.0], [60.9, 2794.0], [61.0, 2801.0], [61.1, 2811.0], [61.2, 2816.0], [61.3, 2835.0], [61.4, 2840.0], [61.5, 2849.0], [61.6, 2855.0], [61.7, 2863.0], [61.8, 2875.0], [61.9, 2882.0], [62.0, 2891.0], [62.1, 2896.0], [62.2, 2903.0], [62.3, 2909.0], [62.4, 2915.0], [62.5, 2923.0], [62.6, 2928.0], [62.7, 2933.0], [62.8, 2939.0], [62.9, 2947.0], [63.0, 2956.0], [63.1, 2959.0], [63.2, 2965.0], [63.3, 2976.0], [63.4, 2984.0], [63.5, 2988.0], [63.6, 2994.0], [63.7, 3004.0], [63.8, 3008.0], [63.9, 3015.0], [64.0, 3022.0], [64.1, 3032.0], [64.2, 3038.0], [64.3, 3050.0], [64.4, 3057.0], [64.5, 3069.0], [64.6, 3075.0], [64.7, 3081.0], [64.8, 3095.0], [64.9, 3098.0], [65.0, 3106.0], [65.1, 3112.0], [65.2, 3119.0], [65.3, 3128.0], [65.4, 3134.0], [65.5, 3142.0], [65.6, 3152.0], [65.7, 3156.0], [65.8, 3165.0], [65.9, 3173.0], [66.0, 3181.0], [66.1, 3187.0], [66.2, 3195.0], [66.3, 3211.0], [66.4, 3217.0], [66.5, 3223.0], [66.6, 3234.0], [66.7, 3239.0], [66.8, 3243.0], [66.9, 3249.0], [67.0, 3264.0], [67.1, 3269.0], [67.2, 3276.0], [67.3, 3281.0], [67.4, 3292.0], [67.5, 3300.0], [67.6, 3305.0], [67.7, 3307.0], [67.8, 3315.0], [67.9, 3325.0], [68.0, 3336.0], [68.1, 3345.0], [68.2, 3353.0], [68.3, 3362.0], [68.4, 3368.0], [68.5, 3373.0], [68.6, 3381.0], [68.7, 3394.0], [68.8, 3402.0], [68.9, 3411.0], [69.0, 3430.0], [69.1, 3435.0], [69.2, 3443.0], [69.3, 3455.0], [69.4, 3460.0], [69.5, 3473.0], [69.6, 3484.0], [69.7, 3493.0], [69.8, 3512.0], [69.9, 3521.0], [70.0, 3526.0], [70.1, 3539.0], [70.2, 3552.0], [70.3, 3559.0], [70.4, 3572.0], [70.5, 3590.0], [70.6, 3602.0], [70.7, 3624.0], [70.8, 3633.0], [70.9, 3642.0], [71.0, 3683.0], [71.1, 3714.0], [71.2, 3724.0], [71.3, 3745.0], [71.4, 3792.0], [71.5, 3832.0], [71.6, 3851.0], [71.7, 3875.0], [71.8, 3900.0], [71.9, 3915.0], [72.0, 3945.0], [72.1, 3959.0], [72.2, 3978.0], [72.3, 3987.0], [72.4, 4009.0], [72.5, 4025.0], [72.6, 4055.0], [72.7, 4064.0], [72.8, 4095.0], [72.9, 4112.0], [73.0, 4127.0], [73.1, 4139.0], [73.2, 4153.0], [73.3, 4163.0], [73.4, 4175.0], [73.5, 4191.0], [73.6, 4205.0], [73.7, 4225.0], [73.8, 4258.0], [73.9, 4284.0], [74.0, 4304.0], [74.1, 4330.0], [74.2, 4344.0], [74.3, 4360.0], [74.4, 4383.0], [74.5, 4401.0], [74.6, 4407.0], [74.7, 4420.0], [74.8, 4460.0], [74.9, 4488.0], [75.0, 4494.0], [75.1, 4504.0], [75.2, 4509.0], [75.3, 4520.0], [75.4, 4534.0], [75.5, 4552.0], [75.6, 4563.0], [75.7, 4576.0], [75.8, 4582.0], [75.9, 4588.0], [76.0, 4595.0], [76.1, 4602.0], [76.2, 4622.0], [76.3, 4648.0], [76.4, 4654.0], [76.5, 4683.0], [76.6, 4694.0], [76.7, 4717.0], [76.8, 4727.0], [76.9, 4746.0], [77.0, 4762.0], [77.1, 4770.0], [77.2, 4779.0], [77.3, 4799.0], [77.4, 4819.0], [77.5, 4828.0], [77.6, 4841.0], [77.7, 4855.0], [77.8, 4876.0], [77.9, 4908.0], [78.0, 4925.0], [78.1, 4945.0], [78.2, 4949.0], [78.3, 4961.0], [78.4, 4973.0], [78.5, 4981.0], [78.6, 4991.0], [78.7, 5007.0], [78.8, 5025.0], [78.9, 5042.0], [79.0, 5058.0], [79.1, 5067.0], [79.2, 5098.0], [79.3, 5115.0], [79.4, 5129.0], [79.5, 5149.0], [79.6, 5164.0], [79.7, 5173.0], [79.8, 5194.0], [79.9, 5208.0], [80.0, 5219.0], [80.1, 5233.0], [80.2, 5259.0], [80.3, 5272.0], [80.4, 5280.0], [80.5, 5289.0], [80.6, 5322.0], [80.7, 5338.0], [80.8, 5367.0], [80.9, 5393.0], [81.0, 5401.0], [81.1, 5414.0], [81.2, 5428.0], [81.3, 5438.0], [81.4, 5472.0], [81.5, 5479.0], [81.6, 5496.0], [81.7, 5514.0], [81.8, 5537.0], [81.9, 5560.0], [82.0, 5602.0], [82.1, 5625.0], [82.2, 5639.0], [82.3, 5659.0], [82.4, 5686.0], [82.5, 5706.0], [82.6, 5715.0], [82.7, 5751.0], [82.8, 5763.0], [82.9, 5797.0], [83.0, 5834.0], [83.1, 5878.0], [83.2, 5897.0], [83.3, 5941.0], [83.4, 5971.0], [83.5, 5985.0], [83.6, 6023.0], [83.7, 6051.0], [83.8, 6098.0], [83.9, 6127.0], [84.0, 6155.0], [84.1, 6236.0], [84.2, 6265.0], [84.3, 6331.0], [84.4, 6375.0], [84.5, 6404.0], [84.6, 6460.0], [84.7, 6472.0], [84.8, 6500.0], [84.9, 6516.0], [85.0, 6554.0], [85.1, 6597.0], [85.2, 6630.0], [85.3, 6675.0], [85.4, 6714.0], [85.5, 6750.0], [85.6, 6778.0], [85.7, 6822.0], [85.8, 6873.0], [85.9, 6921.0], [86.0, 6955.0], [86.1, 6992.0], [86.2, 7099.0], [86.3, 7142.0], [86.4, 7170.0], [86.5, 7209.0], [86.6, 7257.0], [86.7, 7333.0], [86.8, 7358.0], [86.9, 7394.0], [87.0, 7468.0], [87.1, 7538.0], [87.2, 7596.0], [87.3, 7674.0], [87.4, 7726.0], [87.5, 7746.0], [87.6, 7796.0], [87.7, 7825.0], [87.8, 7875.0], [87.9, 7962.0], [88.0, 7974.0], [88.1, 8027.0], [88.2, 8054.0], [88.3, 8109.0], [88.4, 8149.0], [88.5, 8197.0], [88.6, 8226.0], [88.7, 8257.0], [88.8, 8293.0], [88.9, 8347.0], [89.0, 8386.0], [89.1, 8448.0], [89.2, 8469.0], [89.3, 8510.0], [89.4, 8559.0], [89.5, 8622.0], [89.6, 8653.0], [89.7, 8680.0], [89.8, 8705.0], [89.9, 8754.0], [90.0, 8803.0], [90.1, 8825.0], [90.2, 8921.0], [90.3, 8934.0], [90.4, 8964.0], [90.5, 9006.0], [90.6, 9061.0], [90.7, 9131.0], [90.8, 9156.0], [90.9, 9214.0], [91.0, 9254.0], [91.1, 9363.0], [91.2, 9411.0], [91.3, 9491.0], [91.4, 9525.0], [91.5, 9556.0], [91.6, 9641.0], [91.7, 9653.0], [91.8, 9729.0], [91.9, 9764.0], [92.0, 9805.0], [92.1, 9827.0], [92.2, 9917.0], [92.3, 9943.0], [92.4, 9995.0], [92.5, 10114.0], [92.6, 10142.0], [92.7, 10198.0], [92.8, 10203.0], [92.9, 10272.0], [93.0, 10321.0], [93.1, 10357.0], [93.2, 10424.0], [93.3, 10463.0], [93.4, 10491.0], [93.5, 10521.0], [93.6, 10557.0], [93.7, 10627.0], [93.8, 10728.0], [93.9, 10792.0], [94.0, 10803.0], [94.1, 10842.0], [94.2, 10862.0], [94.3, 10898.0], [94.4, 10943.0], [94.5, 10990.0], [94.6, 11059.0], [94.7, 11074.0], [94.8, 11095.0], [94.9, 11149.0], [95.0, 11219.0], [95.1, 11281.0], [95.2, 11295.0], [95.3, 11341.0], [95.4, 11382.0], [95.5, 11392.0], [95.6, 11416.0], [95.7, 11442.0], [95.8, 11503.0], [95.9, 11602.0], [96.0, 11661.0], [96.1, 11671.0], [96.2, 11697.0], [96.3, 11721.0], [96.4, 11776.0], [96.5, 11853.0], [96.6, 11894.0], [96.7, 11943.0], [96.8, 11990.0], [96.9, 12034.0], [97.0, 12049.0], [97.1, 12097.0], [97.2, 12126.0], [97.3, 12198.0], [97.4, 12381.0], [97.5, 12419.0], [97.6, 12533.0], [97.7, 12604.0], [97.8, 12803.0], [97.9, 13125.0], [98.0, 13260.0], [98.1, 13340.0], [98.2, 13435.0], [98.3, 13496.0], [98.4, 13674.0], [98.5, 13717.0], [98.6, 13806.0], [98.7, 13861.0], [98.8, 13960.0], [98.9, 14013.0], [99.0, 14104.0], [99.1, 14196.0], [99.2, 14312.0], [99.3, 14608.0], [99.4, 14682.0], [99.5, 14985.0], [99.6, 15165.0], [99.7, 15363.0], [99.8, 21931.0], [99.9, 29811.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 193.0, "series": [{"data": [[0.0, 29.0], [100.0, 74.0], [200.0, 155.0], [300.0, 163.0], [400.0, 193.0], [500.0, 166.0], [600.0, 98.0], [700.0, 67.0], [800.0, 63.0], [900.0, 48.0], [1000.0, 78.0], [1100.0, 102.0], [1200.0, 95.0], [1300.0, 91.0], [1400.0, 91.0], [1500.0, 106.0], [1600.0, 97.0], [1700.0, 76.0], [1800.0, 103.0], [1900.0, 118.0], [2000.0, 118.0], [2100.0, 109.0], [2200.0, 128.0], [2300.0, 106.0], [2400.0, 83.0], [2500.0, 92.0], [2600.0, 75.0], [2800.0, 55.0], [2700.0, 62.0], [2900.0, 69.0], [3000.0, 56.0], [3100.0, 63.0], [3200.0, 55.0], [3300.0, 60.0], [3400.0, 43.0], [3500.0, 39.0], [3600.0, 21.0], [3700.0, 17.0], [3800.0, 17.0], [3900.0, 26.0], [4000.0, 20.0], [4200.0, 21.0], [4100.0, 33.0], [4300.0, 23.0], [4400.0, 26.0], [4600.0, 27.0], [4500.0, 44.0], [4700.0, 32.0], [4800.0, 27.0], [5000.0, 26.0], [4900.0, 35.0], [5100.0, 28.0], [5200.0, 30.0], [5300.0, 22.0], [5500.0, 17.0], [5400.0, 29.0], [5600.0, 23.0], [5700.0, 20.0], [5800.0, 13.0], [5900.0, 15.0], [6100.0, 11.0], [6000.0, 12.0], [6300.0, 12.0], [6200.0, 8.0], [6500.0, 15.0], [6400.0, 14.0], [6600.0, 11.0], [6700.0, 14.0], [6800.0, 8.0], [6900.0, 13.0], [7100.0, 13.0], [7000.0, 4.0], [7300.0, 13.0], [7200.0, 6.0], [7400.0, 6.0], [7600.0, 6.0], [7500.0, 8.0], [7700.0, 12.0], [7800.0, 11.0], [7900.0, 8.0], [8100.0, 11.0], [8000.0, 12.0], [8300.0, 11.0], [8500.0, 9.0], [8200.0, 13.0], [8400.0, 10.0], [8600.0, 13.0], [8700.0, 11.0], [8800.0, 6.0], [8900.0, 16.0], [9000.0, 7.0], [9100.0, 12.0], [9200.0, 7.0], [9300.0, 5.0], [9600.0, 10.0], [9500.0, 10.0], [9700.0, 10.0], [9400.0, 8.0], [9800.0, 9.0], [9900.0, 10.0], [10200.0, 10.0], [10000.0, 4.0], [10100.0, 11.0], [10500.0, 11.0], [10400.0, 12.0], [10600.0, 4.0], [10700.0, 10.0], [10300.0, 10.0], [10900.0, 10.0], [11100.0, 8.0], [11000.0, 13.0], [10800.0, 15.0], [11200.0, 11.0], [11700.0, 10.0], [11600.0, 15.0], [11300.0, 13.0], [11400.0, 12.0], [11500.0, 5.0], [11800.0, 8.0], [11900.0, 10.0], [12000.0, 13.0], [12100.0, 9.0], [12200.0, 1.0], [12300.0, 6.0], [12500.0, 5.0], [12700.0, 1.0], [12600.0, 4.0], [12400.0, 5.0], [13300.0, 6.0], [13200.0, 2.0], [12900.0, 1.0], [12800.0, 3.0], [13000.0, 1.0], [13100.0, 3.0], [13400.0, 8.0], [13600.0, 7.0], [13700.0, 4.0], [13800.0, 6.0], [13500.0, 1.0], [14100.0, 5.0], [13900.0, 7.0], [14000.0, 6.0], [14300.0, 2.0], [14200.0, 3.0], [14400.0, 3.0], [14600.0, 5.0], [14700.0, 3.0], [14500.0, 1.0], [14800.0, 1.0], [15300.0, 3.0], [15200.0, 1.0], [15100.0, 2.0], [14900.0, 1.0], [15000.0, 3.0], [15400.0, 1.0], [16000.0, 1.0], [16400.0, 1.0], [21900.0, 1.0], [22600.0, 1.0], [23000.0, 1.0], [23500.0, 1.0], [23600.0, 1.0], [29800.0, 1.0], [30000.0, 2.0], [30900.0, 1.0], [30800.0, 1.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3051.0, "series": [{"data": [[0.0, 615.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 901.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3051.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.62773879E12, "maxY": 962.5821545157779, "series": [{"data": [[1.62773883E12, 178.3567839195981], [1.62773882E12, 49.68302945301545], [1.62773881E12, 8.0], [1.6277388E12, 13.0], [1.62773886E12, 962.5821545157779], [1.62773885E12, 742.2074175824171], [1.62773884E12, 329.46083333333337], [1.62773879E12, 18.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773886E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 198.29999999999998, "minX": 5.0, "maxY": 23698.0, "series": [{"data": [[5.0, 3066.1999999999994], [6.0, 5947.25], [7.0, 23698.0], [8.0, 23043.0], [9.0, 22662.0], [10.0, 21931.0], [11.0, 15363.0], [12.0, 15333.0], [13.0, 14682.0], [14.0, 14426.0], [15.0, 14104.0], [16.0, 8813.0], [17.0, 8500.0], [18.0, 8375.0], [19.0, 8138.0], [20.0, 1102.1392405063286], [21.0, 198.29999999999998], [29.0, 219.0], [30.0, 278.69565217391283], [31.0, 268.5], [32.0, 224.5], [33.0, 241.0], [35.0, 256.5], [36.0, 294.0], [37.0, 231.66666666666666], [38.0, 272.0], [39.0, 301.3333333333333], [40.0, 302.0], [41.0, 308.2], [42.0, 352.0], [43.0, 381.58333333333337], [44.0, 371.0], [45.0, 376.3], [47.0, 416.75], [48.0, 386.75], [49.0, 386.7], [50.0, 381.5], [51.0, 418.3333333333333], [52.0, 415.0], [53.0, 419.3333333333333], [54.0, 438.4], [55.0, 418.25], [56.0, 409.3333333333333], [57.0, 438.3333333333333], [58.0, 447.8], [59.0, 432.42857142857144], [60.0, 515.7], [61.0, 520.0], [62.0, 486.0], [63.0, 516.5], [64.0, 578.0], [66.0, 545.7647058823529], [67.0, 378.0], [68.0, 542.1268656716421], [69.0, 467.7777777777779], [70.0, 511.95833333333337], [71.0, 503.59999999999997], [73.0, 459.5], [74.0, 559.0], [75.0, 394.0], [76.0, 549.2105263157896], [77.0, 477.3333333333333], [78.0, 561.8148148148147], [79.0, 600.6428571428571], [81.0, 459.2857142857143], [82.0, 572.0], [83.0, 430.0], [85.0, 592.0], [86.0, 518.0], [88.0, 752.8888888888889], [89.0, 722.3478260869565], [90.0, 683.75], [92.0, 868.391304347826], [93.0, 915.0714285714287], [94.0, 816.75], [143.0, 957.2651515151512], [145.0, 1039.0], [148.0, 1038.8125000000002], [149.0, 1138.6363636363637], [150.0, 1199.1333333333334], [151.0, 1224.3999999999999], [152.0, 1247.8888888888887], [162.0, 789.5], [163.0, 769.0], [164.0, 789.0], [166.0, 750.4285714285714], [170.0, 1532.0], [171.0, 1671.25], [172.0, 1416.5957446808507], [169.0, 1400.0], [173.0, 1468.217391304348], [174.0, 1509.4375], [175.0, 1473.888888888889], [177.0, 1117.0], [178.0, 812.0], [180.0, 1043.0], [181.0, 1049.1764705882351], [182.0, 688.4], [183.0, 683.6], [184.0, 522.0], [185.0, 400.1666666666667], [186.0, 427.75], [187.0, 380.2], [188.0, 488.0], [189.0, 376.0], [190.0, 388.0], [191.0, 412.0], [192.0, 388.8333333333333], [193.0, 406.83333333333337], [194.0, 411.6666666666667], [195.0, 422.875], [196.0, 431.6666666666667], [197.0, 445.5], [198.0, 432.5], [199.0, 451.0], [200.0, 907.25], [201.0, 860.0], [202.0, 619.2222222222222], [203.0, 492.08333333333337], [204.0, 739.5], [205.0, 524.0999999999999], [206.0, 719.6666666666667], [208.0, 3026.5], [209.0, 2388.7868852459014], [210.0, 2341.6666666666665], [211.0, 2526.401960784314], [212.0, 2144.08], [213.0, 1306.75], [214.0, 1825.4782608695652], [215.0, 1977.6666666666667], [216.0, 2159.75], [217.0, 1516.857142857143], [218.0, 2377.5], [221.0, 1218.0], [232.0, 3934.0], [237.0, 1471.857142857143], [238.0, 856.0], [239.0, 4032.0], [240.0, 1163.0], [241.0, 1845.0], [242.0, 1884.0], [243.0, 1794.166666666667], [244.0, 1641.6666666666667], [245.0, 1810.3333333333335], [274.0, 1382.6666666666667], [276.0, 1492.0], [277.0, 1526.0], [281.0, 1892.8181818181818], [282.0, 2039.4891304347827], [284.0, 1850.4285714285713], [298.0, 1633.6666666666667], [299.0, 1917.2407407407404], [312.0, 1829.0], [314.0, 2063.5], [315.0, 2201.9931506849307], [316.0, 2145.2], [317.0, 2430.4999999999995], [318.0, 2599.7499999999995], [333.0, 3008.5], [334.0, 2956.0], [335.0, 2951.230769230769], [338.0, 2896.0], [336.0, 2296.8], [339.0, 2435.7422680412387], [349.0, 1344.6], [350.0, 1597.3157894736842], [351.0, 2632.4375], [340.0, 2110.2000000000003], [341.0, 1689.263157894737], [342.0, 1975.9999999999998], [343.0, 2626.181818181818], [344.0, 2205.2173913043475], [345.0, 1426.0], [346.0, 1280.75], [347.0, 1400.6], [352.0, 3240.0478087649426], [353.0, 3379.904761904762], [354.0, 2878.3333333333335], [362.0, 2097.0], [363.0, 2494.0], [364.0, 2759.0736842105275], [365.0, 3119.505882352941], [462.0, 2600.0], [470.0, 5715.0], [495.0, 8916.0], [494.0, 4579.0], [489.0, 4392.0], [510.0, 2170.0], [504.0, 8954.0], [503.0, 5686.0], [501.0, 5697.0], [499.0, 10898.0], [497.0, 5652.0], [496.0, 5402.0], [534.0, 6567.5], [533.0, 3517.0], [529.0, 3214.5], [528.0, 3997.0], [525.0, 5696.0], [517.0, 3376.0], [544.0, 14196.0], [551.0, 8329.6], [549.0, 8696.0], [550.0, 8907.0], [631.0, 9156.0], [927.0, 6460.0], [923.0, 6955.0], [918.0, 9242.36744186047], [911.0, 10054.260869565214], [903.0, 3736.0], [917.0, 9992.0], [928.0, 6470.0], [941.0, 13141.5], [942.0, 9126.5], [954.0, 9310.5], [966.0, 7985.0], [971.0, 11450.666666666666], [972.0, 8966.083333333334], [982.0, 13973.0], [1000.0, 6649.508196721312], [998.0, 6455.666666666667], [995.0, 16009.0], [994.0, 6472.0]], "isOverall": false, "label": "Press Release", "isController": false}, {"data": [[443.47571115973716, 3395.726695842452]], "isOverall": false, "label": "Press Release-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 82.5, "minX": 1.62773879E12, "maxY": 5007480.0, "series": [{"data": [[1.62773883E12, 4152007.8], [1.62773882E12, 2975204.5], [1.62773881E12, 20872.7], [1.6277388E12, 20873.0], [1.62773886E12, 3823357.5], [1.62773885E12, 3037874.8], [1.62773884E12, 5007480.0], [1.62773879E12, 20872.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62773883E12, 16417.5], [1.62773882E12, 11764.5], [1.62773881E12, 82.5], [1.6277388E12, 82.5], [1.62773886E12, 15114.0], [1.62773885E12, 12012.0], [1.62773884E12, 19800.0], [1.62773879E12, 82.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773886E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 599.7152875175316, "minX": 1.62773879E12, "maxY": 22982.4, "series": [{"data": [[1.62773883E12, 1372.421105527639], [1.62773882E12, 599.7152875175316], [1.62773881E12, 22982.4], [1.6277388E12, 14781.6], [1.62773886E12, 8617.610446137096], [1.62773885E12, 3641.328296703301], [1.62773884E12, 2436.0824999999995], [1.62773879E12, 8545.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773886E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 593.2650771388498, "minX": 1.62773879E12, "maxY": 22869.6, "series": [{"data": [[1.62773883E12, 1333.8060301507523], [1.62773882E12, 593.2650771388498], [1.62773881E12, 22869.6], [1.6277388E12, 14710.0], [1.62773886E12, 8536.813928182804], [1.62773885E12, 3604.009615384613], [1.62773884E12, 2394.0916666666662], [1.62773879E12, 8401.2]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773886E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 190.0, "minX": 1.62773879E12, "maxY": 8348.566920565838, "series": [{"data": [[1.62773883E12, 1283.1145728643226], [1.62773882E12, 358.51192145862564], [1.62773881E12, 199.8], [1.6277388E12, 190.0], [1.62773886E12, 8348.566920565838], [1.62773885E12, 3519.5576923076924], [1.62773884E12, 2318.299166666666], [1.62773879E12, 206.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773886E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 59.0, "minX": 1.62773879E12, "maxY": 30938.0, "series": [{"data": [[1.62773883E12, 4420.0], [1.62773882E12, 30938.0], [1.62773881E12, 23698.0], [1.6277388E12, 15363.0], [1.62773886E12, 16487.0], [1.62773885E12, 8153.0], [1.62773884E12, 6554.0], [1.62773879E12, 8899.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62773883E12, 165.0], [1.62773882E12, 59.0], [1.62773881E12, 21931.0], [1.6277388E12, 14104.0], [1.62773886E12, 1561.0], [1.62773885E12, 180.0], [1.62773884E12, 753.0], [1.62773879E12, 8138.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62773883E12, 2954.0], [1.62773882E12, 626.0], [1.62773881E12, 23698.0], [1.6277388E12, 15363.0], [1.62773886E12, 12546.000000000002], [1.62773885E12, 5313.1], [1.62773884E12, 3523.2000000000007], [1.62773879E12, 8899.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62773883E12, 3564.12], [1.62773882E12, 849.58], [1.62773881E12, 23698.0], [1.6277388E12, 15363.0], [1.62773886E12, 15040.390000000001], [1.62773885E12, 7841.370000000002], [1.62773884E12, 5844.320000000001], [1.62773879E12, 8899.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62773883E12, 3279.3999999999996], [1.62773882E12, 684.4999999999998], [1.62773881E12, 23698.0], [1.6277388E12, 15363.0], [1.62773886E12, 13834.15], [1.62773885E12, 5857.399999999996], [1.62773884E12, 5005.350000000001], [1.62773879E12, 8899.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773886E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 82.5, "minX": 1.0, "maxY": 18017.5, "series": [{"data": [[2.0, 15348.0], [32.0, 2159.5], [35.0, 5272.0], [38.0, 1983.5], [39.0, 2346.0], [3.0, 8500.0], [50.0, 2603.5], [59.0, 6037.0], [60.0, 181.0], [64.0, 8702.5], [69.0, 1243.0], [73.0, 1411.0], [87.0, 206.0], [86.0, 784.5], [91.0, 2197.0], [96.0, 1223.0], [98.0, 2941.0], [104.0, 409.0], [107.0, 1104.0], [108.0, 527.0], [111.0, 490.0], [7.0, 3490.0], [119.0, 2160.5], [120.0, 439.5], [135.0, 523.0], [131.0, 1055.0], [130.0, 1431.0], [143.0, 9087.0], [151.0, 2215.0], [11.0, 3292.0], [188.0, 2513.0], [12.0, 82.5], [193.0, 2117.0], [202.0, 2019.0], [245.0, 2470.0], [255.0, 8446.0], [1.0, 18017.5], [279.0, 4397.0], [20.0, 4009.0], [334.0, 9444.0], [26.0, 3166.0], [29.0, 3992.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[334.0, 13931.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 334.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 17957.5, "series": [{"data": [[2.0, 15295.5], [32.0, 2158.0], [35.0, 5255.0], [38.0, 1960.5], [39.0, 2234.0], [3.0, 8350.0], [50.0, 2566.5], [59.0, 6036.0], [60.0, 168.5], [64.0, 8701.0], [69.0, 1197.0], [73.0, 1405.0], [87.0, 205.0], [86.0, 771.0], [91.0, 2042.0], [96.0, 1222.0], [98.0, 2923.0], [104.0, 408.0], [107.0, 1063.0], [108.0, 525.0], [111.0, 488.0], [7.0, 3453.0], [119.0, 2145.0], [120.0, 431.0], [135.0, 517.0], [131.0, 1035.0], [130.0, 1416.5], [143.0, 9062.0], [151.0, 2164.0], [11.0, 3096.0], [188.0, 2496.0], [12.0, 80.0], [193.0, 2072.0], [202.0, 1970.0], [245.0, 2455.0], [255.0, 8445.0], [1.0, 17957.5], [279.0, 4359.0], [20.0, 4004.5], [334.0, 9443.0], [26.0, 3165.0], [29.0, 3982.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[334.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 334.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62773878E12, "maxY": 129.7, "series": [{"data": [[1.62773883E12, 116.5], [1.62773882E12, 79.4], [1.62773886E12, 12.4], [1.62773885E12, 117.0], [1.62773884E12, 129.7], [1.62773879E12, 1.5], [1.62773878E12, 0.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773886E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62773879E12, "maxY": 120.0, "series": [{"data": [[1.62773886E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62773883E12, 99.5], [1.62773882E12, 71.3], [1.62773881E12, 0.5], [1.6277388E12, 0.5], [1.62773886E12, 91.6], [1.62773885E12, 72.8], [1.62773884E12, 120.0], [1.62773879E12, 0.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62773886E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: java.io.InterruptedIOException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773886E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62773879E12, "maxY": 120.0, "series": [{"data": [[1.62773886E12, 0.3]], "isOverall": false, "label": "Press Release-failure", "isController": false}, {"data": [[1.62773883E12, 99.5], [1.62773882E12, 71.3], [1.62773881E12, 0.5], [1.6277388E12, 0.5], [1.62773886E12, 91.6], [1.62773885E12, 72.8], [1.62773884E12, 120.0], [1.62773879E12, 0.5]], "isOverall": false, "label": "Press Release-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773886E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62773879E12, "maxY": 120.0, "series": [{"data": [[1.62773883E12, 99.5], [1.62773882E12, 71.3], [1.62773881E12, 0.5], [1.6277388E12, 0.5], [1.62773886E12, 91.6], [1.62773885E12, 72.8], [1.62773884E12, 120.0], [1.62773879E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62773886E12, 0.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773886E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

