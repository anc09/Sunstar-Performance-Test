/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 65.0, "minX": 0.0, "maxY": 180299.0, "series": [{"data": [[0.0, 65.0], [0.1, 68.0], [0.2, 78.0], [0.3, 177.0], [0.4, 178.0], [0.5, 190.0], [0.6, 193.0], [0.7, 198.0], [0.8, 203.0], [0.9, 206.0], [1.0, 211.0], [1.1, 213.0], [1.2, 213.0], [1.3, 215.0], [1.4, 220.0], [1.5, 224.0], [1.6, 228.0], [1.7, 241.0], [1.8, 246.0], [1.9, 250.0], [2.0, 278.0], [2.1, 305.0], [2.2, 321.0], [2.3, 326.0], [2.4, 348.0], [2.5, 351.0], [2.6, 352.0], [2.7, 358.0], [2.8, 360.0], [2.9, 362.0], [3.0, 369.0], [3.1, 375.0], [3.2, 380.0], [3.3, 382.0], [3.4, 384.0], [3.5, 386.0], [3.6, 391.0], [3.7, 396.0], [3.8, 400.0], [3.9, 407.0], [4.0, 410.0], [4.1, 427.0], [4.2, 430.0], [4.3, 433.0], [4.4, 441.0], [4.5, 443.0], [4.6, 451.0], [4.7, 454.0], [4.8, 457.0], [4.9, 464.0], [5.0, 467.0], [5.1, 471.0], [5.2, 477.0], [5.3, 486.0], [5.4, 489.0], [5.5, 489.0], [5.6, 493.0], [5.7, 494.0], [5.8, 502.0], [5.9, 504.0], [6.0, 504.0], [6.1, 514.0], [6.2, 515.0], [6.3, 519.0], [6.4, 526.0], [6.5, 530.0], [6.6, 533.0], [6.7, 536.0], [6.8, 545.0], [6.9, 549.0], [7.0, 553.0], [7.1, 554.0], [7.2, 557.0], [7.3, 569.0], [7.4, 570.0], [7.5, 576.0], [7.6, 580.0], [7.7, 582.0], [7.8, 584.0], [7.9, 589.0], [8.0, 598.0], [8.1, 599.0], [8.2, 601.0], [8.3, 602.0], [8.4, 602.0], [8.5, 603.0], [8.6, 604.0], [8.7, 608.0], [8.8, 609.0], [8.9, 613.0], [9.0, 614.0], [9.1, 616.0], [9.2, 620.0], [9.3, 623.0], [9.4, 624.0], [9.5, 625.0], [9.6, 627.0], [9.7, 629.0], [9.8, 630.0], [9.9, 634.0], [10.0, 634.0], [10.1, 636.0], [10.2, 636.0], [10.3, 637.0], [10.4, 638.0], [10.5, 639.0], [10.6, 641.0], [10.7, 644.0], [10.8, 646.0], [10.9, 648.0], [11.0, 648.0], [11.1, 650.0], [11.2, 650.0], [11.3, 652.0], [11.4, 653.0], [11.5, 654.0], [11.6, 655.0], [11.7, 655.0], [11.8, 655.0], [11.9, 656.0], [12.0, 656.0], [12.1, 656.0], [12.2, 656.0], [12.3, 657.0], [12.4, 657.0], [12.5, 660.0], [12.6, 661.0], [12.7, 661.0], [12.8, 662.0], [12.9, 662.0], [13.0, 663.0], [13.1, 663.0], [13.2, 663.0], [13.3, 664.0], [13.4, 665.0], [13.5, 667.0], [13.6, 667.0], [13.7, 670.0], [13.8, 672.0], [13.9, 672.0], [14.0, 673.0], [14.1, 675.0], [14.2, 675.0], [14.3, 675.0], [14.4, 675.0], [14.5, 676.0], [14.6, 677.0], [14.7, 678.0], [14.8, 679.0], [14.9, 679.0], [15.0, 681.0], [15.1, 682.0], [15.2, 682.0], [15.3, 682.0], [15.4, 683.0], [15.5, 683.0], [15.6, 683.0], [15.7, 685.0], [15.8, 685.0], [15.9, 686.0], [16.0, 687.0], [16.1, 687.0], [16.2, 688.0], [16.3, 689.0], [16.4, 690.0], [16.5, 690.0], [16.6, 692.0], [16.7, 692.0], [16.8, 692.0], [16.9, 693.0], [17.0, 693.0], [17.1, 694.0], [17.2, 694.0], [17.3, 695.0], [17.4, 695.0], [17.5, 695.0], [17.6, 696.0], [17.7, 697.0], [17.8, 698.0], [17.9, 698.0], [18.0, 698.0], [18.1, 698.0], [18.2, 699.0], [18.3, 700.0], [18.4, 700.0], [18.5, 701.0], [18.6, 702.0], [18.7, 702.0], [18.8, 703.0], [18.9, 703.0], [19.0, 705.0], [19.1, 705.0], [19.2, 705.0], [19.3, 706.0], [19.4, 707.0], [19.5, 709.0], [19.6, 710.0], [19.7, 710.0], [19.8, 711.0], [19.9, 711.0], [20.0, 712.0], [20.1, 714.0], [20.2, 715.0], [20.3, 715.0], [20.4, 715.0], [20.5, 718.0], [20.6, 719.0], [20.7, 719.0], [20.8, 721.0], [20.9, 721.0], [21.0, 722.0], [21.1, 722.0], [21.2, 722.0], [21.3, 722.0], [21.4, 723.0], [21.5, 724.0], [21.6, 724.0], [21.7, 726.0], [21.8, 726.0], [21.9, 726.0], [22.0, 726.0], [22.1, 728.0], [22.2, 729.0], [22.3, 730.0], [22.4, 731.0], [22.5, 732.0], [22.6, 734.0], [22.7, 735.0], [22.8, 735.0], [22.9, 737.0], [23.0, 737.0], [23.1, 739.0], [23.2, 739.0], [23.3, 742.0], [23.4, 743.0], [23.5, 743.0], [23.6, 747.0], [23.7, 748.0], [23.8, 750.0], [23.9, 750.0], [24.0, 750.0], [24.1, 752.0], [24.2, 755.0], [24.3, 756.0], [24.4, 756.0], [24.5, 757.0], [24.6, 758.0], [24.7, 759.0], [24.8, 761.0], [24.9, 762.0], [25.0, 764.0], [25.1, 765.0], [25.2, 766.0], [25.3, 767.0], [25.4, 768.0], [25.5, 769.0], [25.6, 769.0], [25.7, 770.0], [25.8, 772.0], [25.9, 772.0], [26.0, 773.0], [26.1, 774.0], [26.2, 774.0], [26.3, 775.0], [26.4, 775.0], [26.5, 776.0], [26.6, 778.0], [26.7, 780.0], [26.8, 782.0], [26.9, 783.0], [27.0, 788.0], [27.1, 789.0], [27.2, 793.0], [27.3, 793.0], [27.4, 794.0], [27.5, 795.0], [27.6, 795.0], [27.7, 799.0], [27.8, 799.0], [27.9, 809.0], [28.0, 809.0], [28.1, 813.0], [28.2, 815.0], [28.3, 819.0], [28.4, 827.0], [28.5, 827.0], [28.6, 828.0], [28.7, 831.0], [28.8, 833.0], [28.9, 835.0], [29.0, 835.0], [29.1, 845.0], [29.2, 847.0], [29.3, 849.0], [29.4, 851.0], [29.5, 853.0], [29.6, 856.0], [29.7, 857.0], [29.8, 858.0], [29.9, 861.0], [30.0, 862.0], [30.1, 865.0], [30.2, 866.0], [30.3, 867.0], [30.4, 870.0], [30.5, 871.0], [30.6, 873.0], [30.7, 875.0], [30.8, 878.0], [30.9, 879.0], [31.0, 879.0], [31.1, 882.0], [31.2, 883.0], [31.3, 885.0], [31.4, 887.0], [31.5, 889.0], [31.6, 890.0], [31.7, 891.0], [31.8, 892.0], [31.9, 893.0], [32.0, 894.0], [32.1, 895.0], [32.2, 896.0], [32.3, 899.0], [32.4, 899.0], [32.5, 902.0], [32.6, 903.0], [32.7, 906.0], [32.8, 907.0], [32.9, 908.0], [33.0, 910.0], [33.1, 911.0], [33.2, 911.0], [33.3, 914.0], [33.4, 915.0], [33.5, 920.0], [33.6, 920.0], [33.7, 921.0], [33.8, 921.0], [33.9, 923.0], [34.0, 923.0], [34.1, 923.0], [34.2, 925.0], [34.3, 925.0], [34.4, 927.0], [34.5, 927.0], [34.6, 928.0], [34.7, 929.0], [34.8, 929.0], [34.9, 930.0], [35.0, 930.0], [35.1, 930.0], [35.2, 931.0], [35.3, 931.0], [35.4, 932.0], [35.5, 932.0], [35.6, 934.0], [35.7, 934.0], [35.8, 934.0], [35.9, 935.0], [36.0, 935.0], [36.1, 939.0], [36.2, 941.0], [36.3, 943.0], [36.4, 943.0], [36.5, 944.0], [36.6, 946.0], [36.7, 946.0], [36.8, 948.0], [36.9, 949.0], [37.0, 950.0], [37.1, 952.0], [37.2, 955.0], [37.3, 956.0], [37.4, 957.0], [37.5, 957.0], [37.6, 958.0], [37.7, 958.0], [37.8, 959.0], [37.9, 959.0], [38.0, 960.0], [38.1, 960.0], [38.2, 960.0], [38.3, 962.0], [38.4, 965.0], [38.5, 965.0], [38.6, 967.0], [38.7, 967.0], [38.8, 969.0], [38.9, 970.0], [39.0, 972.0], [39.1, 972.0], [39.2, 973.0], [39.3, 973.0], [39.4, 973.0], [39.5, 975.0], [39.6, 976.0], [39.7, 977.0], [39.8, 977.0], [39.9, 977.0], [40.0, 980.0], [40.1, 981.0], [40.2, 983.0], [40.3, 984.0], [40.4, 984.0], [40.5, 985.0], [40.6, 987.0], [40.7, 988.0], [40.8, 989.0], [40.9, 989.0], [41.0, 990.0], [41.1, 991.0], [41.2, 992.0], [41.3, 992.0], [41.4, 996.0], [41.5, 997.0], [41.6, 997.0], [41.7, 998.0], [41.8, 999.0], [41.9, 1006.0], [42.0, 1006.0], [42.1, 1008.0], [42.2, 1008.0], [42.3, 1009.0], [42.4, 1011.0], [42.5, 1011.0], [42.6, 1013.0], [42.7, 1014.0], [42.8, 1015.0], [42.9, 1016.0], [43.0, 1016.0], [43.1, 1016.0], [43.2, 1016.0], [43.3, 1020.0], [43.4, 1020.0], [43.5, 1021.0], [43.6, 1022.0], [43.7, 1024.0], [43.8, 1025.0], [43.9, 1026.0], [44.0, 1027.0], [44.1, 1028.0], [44.2, 1029.0], [44.3, 1031.0], [44.4, 1032.0], [44.5, 1036.0], [44.6, 1036.0], [44.7, 1038.0], [44.8, 1040.0], [44.9, 1041.0], [45.0, 1043.0], [45.1, 1043.0], [45.2, 1044.0], [45.3, 1045.0], [45.4, 1045.0], [45.5, 1045.0], [45.6, 1046.0], [45.7, 1048.0], [45.8, 1048.0], [45.9, 1048.0], [46.0, 1050.0], [46.1, 1050.0], [46.2, 1051.0], [46.3, 1051.0], [46.4, 1052.0], [46.5, 1052.0], [46.6, 1053.0], [46.7, 1055.0], [46.8, 1056.0], [46.9, 1058.0], [47.0, 1058.0], [47.1, 1059.0], [47.2, 1061.0], [47.3, 1061.0], [47.4, 1062.0], [47.5, 1063.0], [47.6, 1064.0], [47.7, 1065.0], [47.8, 1065.0], [47.9, 1068.0], [48.0, 1068.0], [48.1, 1073.0], [48.2, 1073.0], [48.3, 1074.0], [48.4, 1076.0], [48.5, 1076.0], [48.6, 1080.0], [48.7, 1080.0], [48.8, 1083.0], [48.9, 1083.0], [49.0, 1084.0], [49.1, 1088.0], [49.2, 1089.0], [49.3, 1089.0], [49.4, 1093.0], [49.5, 1093.0], [49.6, 1096.0], [49.7, 1097.0], [49.8, 1100.0], [49.9, 1100.0], [50.0, 1102.0], [50.1, 1102.0], [50.2, 1104.0], [50.3, 1105.0], [50.4, 1105.0], [50.5, 1106.0], [50.6, 1107.0], [50.7, 1107.0], [50.8, 1107.0], [50.9, 1107.0], [51.0, 1108.0], [51.1, 1109.0], [51.2, 1109.0], [51.3, 1115.0], [51.4, 1117.0], [51.5, 1118.0], [51.6, 1119.0], [51.7, 1124.0], [51.8, 1125.0], [51.9, 1126.0], [52.0, 1131.0], [52.1, 1132.0], [52.2, 1132.0], [52.3, 1132.0], [52.4, 1132.0], [52.5, 1136.0], [52.6, 1139.0], [52.7, 1145.0], [52.8, 1146.0], [52.9, 1149.0], [53.0, 1150.0], [53.1, 1150.0], [53.2, 1152.0], [53.3, 1153.0], [53.4, 1154.0], [53.5, 1156.0], [53.6, 1157.0], [53.7, 1159.0], [53.8, 1159.0], [53.9, 1160.0], [54.0, 1161.0], [54.1, 1162.0], [54.2, 1163.0], [54.3, 1166.0], [54.4, 1170.0], [54.5, 1172.0], [54.6, 1174.0], [54.7, 1176.0], [54.8, 1176.0], [54.9, 1178.0], [55.0, 1179.0], [55.1, 1183.0], [55.2, 1188.0], [55.3, 1190.0], [55.4, 1192.0], [55.5, 1192.0], [55.6, 1194.0], [55.7, 1194.0], [55.8, 1195.0], [55.9, 1196.0], [56.0, 1196.0], [56.1, 1198.0], [56.2, 1200.0], [56.3, 1202.0], [56.4, 1203.0], [56.5, 1204.0], [56.6, 1207.0], [56.7, 1213.0], [56.8, 1215.0], [56.9, 1216.0], [57.0, 1221.0], [57.1, 1223.0], [57.2, 1226.0], [57.3, 1228.0], [57.4, 1230.0], [57.5, 1232.0], [57.6, 1233.0], [57.7, 1234.0], [57.8, 1236.0], [57.9, 1237.0], [58.0, 1239.0], [58.1, 1239.0], [58.2, 1246.0], [58.3, 1247.0], [58.4, 1248.0], [58.5, 1251.0], [58.6, 1252.0], [58.7, 1256.0], [58.8, 1257.0], [58.9, 1257.0], [59.0, 1259.0], [59.1, 1260.0], [59.2, 1260.0], [59.3, 1261.0], [59.4, 1261.0], [59.5, 1261.0], [59.6, 1262.0], [59.7, 1266.0], [59.8, 1266.0], [59.9, 1268.0], [60.0, 1268.0], [60.1, 1269.0], [60.2, 1270.0], [60.3, 1270.0], [60.4, 1272.0], [60.5, 1272.0], [60.6, 1273.0], [60.7, 1274.0], [60.8, 1274.0], [60.9, 1279.0], [61.0, 1282.0], [61.1, 1283.0], [61.2, 1284.0], [61.3, 1284.0], [61.4, 1286.0], [61.5, 1286.0], [61.6, 1297.0], [61.7, 1302.0], [61.8, 1303.0], [61.9, 1303.0], [62.0, 1304.0], [62.1, 1306.0], [62.2, 1306.0], [62.3, 1315.0], [62.4, 1316.0], [62.5, 1320.0], [62.6, 1322.0], [62.7, 1322.0], [62.8, 1325.0], [62.9, 1326.0], [63.0, 1328.0], [63.1, 1333.0], [63.2, 1333.0], [63.3, 1336.0], [63.4, 1337.0], [63.5, 1338.0], [63.6, 1339.0], [63.7, 1339.0], [63.8, 1340.0], [63.9, 1341.0], [64.0, 1342.0], [64.1, 1342.0], [64.2, 1344.0], [64.3, 1345.0], [64.4, 1345.0], [64.5, 1347.0], [64.6, 1347.0], [64.7, 1348.0], [64.8, 1348.0], [64.9, 1349.0], [65.0, 1351.0], [65.1, 1351.0], [65.2, 1353.0], [65.3, 1353.0], [65.4, 1355.0], [65.5, 1358.0], [65.6, 1359.0], [65.7, 1359.0], [65.8, 1360.0], [65.9, 1363.0], [66.0, 1364.0], [66.1, 1364.0], [66.2, 1365.0], [66.3, 1365.0], [66.4, 1368.0], [66.5, 1370.0], [66.6, 1370.0], [66.7, 1372.0], [66.8, 1372.0], [66.9, 1375.0], [67.0, 1375.0], [67.1, 1376.0], [67.2, 1378.0], [67.3, 1378.0], [67.4, 1379.0], [67.5, 1379.0], [67.6, 1380.0], [67.7, 1380.0], [67.8, 1383.0], [67.9, 1385.0], [68.0, 1385.0], [68.1, 1388.0], [68.2, 1388.0], [68.3, 1392.0], [68.4, 1392.0], [68.5, 1393.0], [68.6, 1398.0], [68.7, 1398.0], [68.8, 1399.0], [68.9, 1401.0], [69.0, 1403.0], [69.1, 1404.0], [69.2, 1404.0], [69.3, 1408.0], [69.4, 1408.0], [69.5, 1412.0], [69.6, 1414.0], [69.7, 1416.0], [69.8, 1417.0], [69.9, 1417.0], [70.0, 1418.0], [70.1, 1420.0], [70.2, 1421.0], [70.3, 1421.0], [70.4, 1422.0], [70.5, 1423.0], [70.6, 1424.0], [70.7, 1426.0], [70.8, 1427.0], [70.9, 1429.0], [71.0, 1430.0], [71.1, 1430.0], [71.2, 1432.0], [71.3, 1435.0], [71.4, 1435.0], [71.5, 1439.0], [71.6, 1439.0], [71.7, 1442.0], [71.8, 1443.0], [71.9, 1447.0], [72.0, 1453.0], [72.1, 1454.0], [72.2, 1458.0], [72.3, 1462.0], [72.4, 1473.0], [72.5, 1478.0], [72.6, 1479.0], [72.7, 1480.0], [72.8, 1482.0], [72.9, 1492.0], [73.0, 1495.0], [73.1, 1498.0], [73.2, 1498.0], [73.3, 1498.0], [73.4, 1500.0], [73.5, 1501.0], [73.6, 1505.0], [73.7, 1505.0], [73.8, 1506.0], [73.9, 1508.0], [74.0, 1509.0], [74.1, 1511.0], [74.2, 1519.0], [74.3, 1526.0], [74.4, 1528.0], [74.5, 1532.0], [74.6, 1536.0], [74.7, 1537.0], [74.8, 1541.0], [74.9, 1550.0], [75.0, 1553.0], [75.1, 1556.0], [75.2, 1557.0], [75.3, 1560.0], [75.4, 1560.0], [75.5, 1565.0], [75.6, 1566.0], [75.7, 1567.0], [75.8, 1567.0], [75.9, 1567.0], [76.0, 1568.0], [76.1, 1568.0], [76.2, 1569.0], [76.3, 1573.0], [76.4, 1575.0], [76.5, 1582.0], [76.6, 1583.0], [76.7, 1584.0], [76.8, 1586.0], [76.9, 1587.0], [77.0, 1591.0], [77.1, 1591.0], [77.2, 1596.0], [77.3, 1598.0], [77.4, 1603.0], [77.5, 1607.0], [77.6, 1609.0], [77.7, 1610.0], [77.8, 1612.0], [77.9, 1619.0], [78.0, 1625.0], [78.1, 1628.0], [78.2, 1641.0], [78.3, 1652.0], [78.4, 1654.0], [78.5, 1660.0], [78.6, 1661.0], [78.7, 1681.0], [78.8, 1686.0], [78.9, 1711.0], [79.0, 1712.0], [79.1, 1741.0], [79.2, 1748.0], [79.3, 1749.0], [79.4, 1759.0], [79.5, 1759.0], [79.6, 1764.0], [79.7, 1777.0], [79.8, 1788.0], [79.9, 1811.0], [80.0, 1814.0], [80.1, 1818.0], [80.2, 1825.0], [80.3, 1827.0], [80.4, 1828.0], [80.5, 1841.0], [80.6, 1878.0], [80.7, 1880.0], [80.8, 1889.0], [80.9, 1897.0], [81.0, 1903.0], [81.1, 1927.0], [81.2, 1945.0], [81.3, 1960.0], [81.4, 1963.0], [81.5, 1978.0], [81.6, 1978.0], [81.7, 1980.0], [81.8, 1989.0], [81.9, 1992.0], [82.0, 1994.0], [82.1, 1997.0], [82.2, 1998.0], [82.3, 2003.0], [82.4, 2005.0], [82.5, 2008.0], [82.6, 2009.0], [82.7, 2016.0], [82.8, 2018.0], [82.9, 2023.0], [83.0, 2028.0], [83.1, 2035.0], [83.2, 2041.0], [83.3, 2045.0], [83.4, 2046.0], [83.5, 2047.0], [83.6, 2057.0], [83.7, 2060.0], [83.8, 2062.0], [83.9, 2065.0], [84.0, 2065.0], [84.1, 2066.0], [84.2, 2067.0], [84.3, 2068.0], [84.4, 2069.0], [84.5, 2070.0], [84.6, 2072.0], [84.7, 2072.0], [84.8, 2077.0], [84.9, 2079.0], [85.0, 2082.0], [85.1, 2084.0], [85.2, 2085.0], [85.3, 2085.0], [85.4, 2087.0], [85.5, 2091.0], [85.6, 2091.0], [85.7, 2093.0], [85.8, 2093.0], [85.9, 2094.0], [86.0, 2094.0], [86.1, 2095.0], [86.2, 2096.0], [86.3, 2098.0], [86.4, 2107.0], [86.5, 2107.0], [86.6, 2114.0], [86.7, 2117.0], [86.8, 2123.0], [86.9, 2124.0], [87.0, 2124.0], [87.1, 2129.0], [87.2, 2131.0], [87.3, 2131.0], [87.4, 2133.0], [87.5, 2137.0], [87.6, 2148.0], [87.7, 2151.0], [87.8, 2156.0], [87.9, 2163.0], [88.0, 2174.0], [88.1, 2174.0], [88.2, 2177.0], [88.3, 2181.0], [88.4, 2184.0], [88.5, 2190.0], [88.6, 2192.0], [88.7, 2194.0], [88.8, 2199.0], [88.9, 2204.0], [89.0, 2209.0], [89.1, 2211.0], [89.2, 2213.0], [89.3, 2218.0], [89.4, 2219.0], [89.5, 2223.0], [89.6, 2225.0], [89.7, 2238.0], [89.8, 2241.0], [89.9, 2249.0], [90.0, 2275.0], [90.1, 2276.0], [90.2, 2304.0], [90.3, 2355.0], [90.4, 2411.0], [90.5, 2416.0], [90.6, 2418.0], [90.7, 2432.0], [90.8, 2467.0], [90.9, 2514.0], [91.0, 2550.0], [91.1, 2555.0], [91.2, 2566.0], [91.3, 2569.0], [91.4, 2571.0], [91.5, 2573.0], [91.6, 2576.0], [91.7, 2576.0], [91.8, 2578.0], [91.9, 2588.0], [92.0, 2639.0], [92.1, 2645.0], [92.2, 2654.0], [92.3, 2654.0], [92.4, 2671.0], [92.5, 2675.0], [92.6, 2691.0], [92.7, 2692.0], [92.8, 2708.0], [92.9, 2716.0], [93.0, 2722.0], [93.1, 2728.0], [93.2, 2730.0], [93.3, 2751.0], [93.4, 2751.0], [93.5, 2768.0], [93.6, 2781.0], [93.7, 2787.0], [93.8, 2804.0], [93.9, 2807.0], [94.0, 2811.0], [94.1, 2813.0], [94.2, 2816.0], [94.3, 2823.0], [94.4, 2828.0], [94.5, 2867.0], [94.6, 2870.0], [94.7, 2872.0], [94.8, 2900.0], [94.9, 2909.0], [95.0, 2948.0], [95.1, 2965.0], [95.2, 2981.0], [95.3, 3005.0], [95.4, 3012.0], [95.5, 3024.0], [95.6, 3027.0], [95.7, 3106.0], [95.8, 3112.0], [95.9, 3130.0], [96.0, 3185.0], [96.1, 3212.0], [96.2, 3226.0], [96.3, 3227.0], [96.4, 3257.0], [96.5, 3264.0], [96.6, 3279.0], [96.7, 3289.0], [96.8, 3295.0], [96.9, 3297.0], [97.0, 3304.0], [97.1, 3310.0], [97.2, 3327.0], [97.3, 3336.0], [97.4, 3346.0], [97.5, 3360.0], [97.6, 3387.0], [97.7, 3405.0], [97.8, 3690.0], [97.9, 3754.0], [98.0, 3793.0], [98.1, 60185.0], [98.2, 60185.0], [98.3, 60195.0], [98.4, 60231.0], [98.5, 60240.0], [98.6, 60327.0], [98.7, 60330.0], [98.8, 60350.0], [98.9, 60425.0], [99.0, 60439.0], [99.1, 60661.0], [99.2, 60866.0], [99.3, 60950.0], [99.4, 60958.0], [99.5, 60963.0], [99.6, 120295.0], [99.7, 120322.0], [99.8, 152271.0], [99.9, 180168.0], [100.0, 180299.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 144.0, "series": [{"data": [[0.0, 3.0], [600.0, 144.0], [700.0, 135.0], [800.0, 65.0], [900.0, 133.0], [1000.0, 112.0], [1100.0, 91.0], [1200.0, 78.0], [1300.0, 102.0], [1400.0, 63.0], [1500.0, 57.0], [1600.0, 21.0], [1700.0, 14.0], [1800.0, 16.0], [1900.0, 19.0], [2000.0, 58.0], [2100.0, 35.0], [2200.0, 19.0], [2300.0, 3.0], [2400.0, 7.0], [2500.0, 15.0], [2600.0, 11.0], [2700.0, 15.0], [2800.0, 14.0], [180100.0, 1.0], [2900.0, 7.0], [3000.0, 6.0], [3100.0, 5.0], [3200.0, 13.0], [3300.0, 10.0], [3400.0, 1.0], [3700.0, 2.0], [3600.0, 2.0], [120300.0, 1.0], [152200.0, 1.0], [180200.0, 1.0], [100.0, 7.0], [200.0, 19.0], [60400.0, 3.0], [60200.0, 3.0], [61200.0, 1.0], [60600.0, 1.0], [60800.0, 1.0], [60000.0, 1.0], [60300.0, 5.0], [60900.0, 4.0], [60100.0, 3.0], [300.0, 24.0], [400.0, 28.0], [120200.0, 1.0], [120600.0, 1.0], [500.0, 34.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 180200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 959.0, "series": [{"data": [[0.0, 81.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 959.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 365.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.62786307E12, "maxY": 1210.607142857143, "series": [{"data": [[1.62786324E12, 3.0], [1.62786309E12, 1155.257731958763], [1.62786325E12, 1.6666666666666667], [1.6278631E12, 967.1925925925929], [1.62786311E12, 705.5943775100405], [1.62786322E12, 4.0], [1.62786307E12, 1210.607142857143], [1.62786318E12, 5.5], [1.62786312E12, 295.81554677206816], [1.62786313E12, 9.5]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786325E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 65.0, "minX": 1.0, "maxY": 180299.0, "series": [{"data": [[2.0, 166219.5], [3.0, 180299.0], [4.0, 120639.0], [5.0, 120322.0], [6.0, 120295.0], [7.0, 60425.0], [8.0, 60439.0], [9.0, 60231.0], [10.0, 60195.0], [11.0, 60185.0], [12.0, 60185.0], [13.0, 899.0], [14.0, 1080.0], [15.0, 778.0], [16.0, 778.0], [18.0, 764.0], [19.0, 1058.0], [20.0, 1057.0], [22.0, 766.0], [23.0, 866.0], [25.0, 958.5], [27.0, 755.5], [29.0, 1044.0], [30.0, 1046.0], [31.0, 742.0], [33.0, 795.0], [32.0, 828.0], [35.0, 788.0], [34.0, 687.0], [37.0, 955.0], [36.0, 787.0], [38.0, 650.0], [40.0, 1978.0], [69.0, 1609.0], [73.0, 739.0], [72.0, 738.0], [86.0, 620.0], [99.0, 722.0], [97.0, 724.0], [103.0, 1333.0], [111.0, 602.0], [109.0, 603.0], [123.0, 1927.0], [122.0, 598.0], [121.0, 604.0], [127.0, 1828.0], [126.0, 1132.0], [125.0, 1757.0], [124.0, 892.0], [135.0, 1818.0], [134.0, 1803.6666666666667], [133.0, 554.0], [132.0, 1825.0], [131.0, 1748.0], [130.0, 1827.0], [129.0, 1906.0], [128.0, 1132.0], [143.0, 1615.0], [142.0, 1887.0], [141.0, 1430.0], [140.0, 1726.0], [139.0, 1827.0], [138.0, 1444.0], [137.0, 1841.0], [136.0, 682.0], [147.0, 1303.0], [145.0, 1587.0], [144.0, 1712.0], [159.0, 713.0], [158.0, 1010.1944444444441], [153.0, 1759.0], [167.0, 3690.0], [166.0, 2767.0], [164.0, 2683.0], [163.0, 1061.0], [162.0, 1310.0], [161.0, 1399.5], [160.0, 1511.0], [175.0, 1234.0], [174.0, 2193.5], [172.0, 3793.0], [171.0, 3212.0], [170.0, 3177.0], [169.0, 3024.0], [168.0, 1586.0], [182.0, 60950.0], [181.0, 60958.0], [180.0, 60963.0], [179.0, 60946.0], [177.0, 1404.0], [176.0, 1353.0], [199.0, 2811.0], [197.0, 1051.0], [207.0, 2576.0], [206.0, 2645.0], [205.0, 2817.5], [204.0, 2573.0], [203.0, 3296.0], [202.0, 2576.0], [201.0, 3360.0], [200.0, 2587.0], [215.0, 2555.0], [214.0, 3387.0], [213.0, 2820.0], [212.0, 3279.0], [211.0, 3405.0], [210.0, 3326.0], [209.0, 2571.0], [208.0, 2569.0], [223.0, 3304.0], [222.0, 2566.0], [221.0, 2566.0], [220.0, 2588.0], [219.0, 2578.0], [218.0, 2823.0], [216.0, 2550.0], [231.0, 3295.0], [230.0, 2808.0], [229.0, 3381.0], [228.0, 3257.0], [227.0, 2924.0], [225.0, 2773.0], [224.0, 3297.0], [239.0, 3346.0], [238.0, 3336.0], [237.0, 3240.0], [236.0, 3283.0], [235.0, 2804.0], [234.0, 2654.0], [233.0, 2570.0], [232.0, 3327.0], [247.0, 2560.3333333333335], [246.0, 4736.893203883496], [245.0, 2492.0], [244.0, 3340.0], [243.0, 3185.0], [242.0, 2514.0], [241.0, 2998.0], [253.0, 2097.0], [250.0, 2337.6], [249.0, 2639.0], [270.0, 2218.0], [271.0, 2212.0], [269.0, 2177.0], [268.0, 2181.0], [267.0, 2060.0], [266.0, 2077.0], [265.0, 2068.0], [264.0, 2124.5], [263.0, 2249.0], [256.0, 2068.0], [260.0, 2241.0], [286.0, 957.0], [287.0, 1009.0], [285.0, 1818.0], [284.0, 1764.0], [283.0, 1903.0], [282.0, 1870.0], [281.0, 1089.0], [280.0, 1889.0], [279.0, 1936.5483870967741], [272.0, 2197.0], [275.0, 1785.5], [273.0, 2123.0], [278.0, 2209.0], [277.0, 2115.0], [291.0, 1681.0], [302.0, 1594.5], [300.0, 1619.0], [299.0, 1654.0], [298.0, 1576.5], [295.0, 877.0], [294.0, 1088.0], [293.0, 1109.0], [292.0, 1555.0], [290.0, 1741.0], [289.0, 933.0], [288.0, 1159.0], [318.0, 1558.0], [319.0, 1500.0], [317.0, 1618.5], [307.0, 1596.0], [306.0, 1554.5], [305.0, 1675.0], [315.0, 1541.0], [314.0, 1604.0], [313.0, 1661.0], [312.0, 935.0], [311.0, 1508.0], [310.0, 1625.0], [309.0, 1652.0], [308.0, 1619.0], [334.0, 730.0], [335.0, 794.0], [333.0, 1610.0], [332.0, 908.0], [331.0, 850.0], [330.0, 932.0], [329.0, 1605.0], [327.0, 1582.0], [323.0, 1536.0], [322.0, 1591.0], [321.0, 1591.0], [320.0, 1498.0], [326.0, 1577.5], [350.0, 1174.0], [351.0, 1136.0], [349.0, 1260.0], [348.0, 1274.0], [347.0, 1300.0], [345.0, 1347.0], [344.0, 1273.0], [343.0, 1458.0], [337.0, 650.0], [336.0, 651.0], [339.0, 1396.0], [338.0, 1283.0], [342.0, 1398.0], [341.0, 1416.0], [340.0, 1381.0], [355.0, 793.0], [366.0, 774.0], [367.0, 729.0], [364.0, 596.0], [362.0, 748.5], [360.0, 738.0], [358.0, 763.0], [357.0, 722.0], [354.0, 1261.0], [353.0, 1132.0], [352.0, 1216.0], [371.0, 714.0], [383.0, 737.0], [380.0, 737.0], [369.0, 774.0], [368.0, 733.0], [379.0, 714.0], [378.0, 744.0], [376.0, 711.5], [375.0, 705.0], [374.0, 766.0], [373.0, 728.0], [372.0, 762.0], [397.0, 747.0], [399.0, 694.0], [396.0, 735.0], [387.0, 752.0], [386.0, 744.0], [385.0, 742.0], [384.0, 703.0], [395.0, 703.5], [394.0, 709.0], [393.0, 726.0], [392.0, 735.0], [391.0, 681.0], [390.0, 728.0], [389.0, 716.0], [388.0, 711.0], [414.0, 695.0], [415.0, 703.0], [413.0, 704.0], [412.0, 663.0], [411.0, 662.0], [410.0, 708.0], [408.0, 712.0], [406.0, 661.0], [401.0, 708.0], [400.0, 694.0], [403.0, 698.0], [402.0, 707.0], [405.0, 676.0], [404.0, 698.0], [430.0, 644.0], [431.0, 662.0], [429.0, 654.0], [428.0, 651.0], [426.0, 700.0], [425.0, 656.0], [424.0, 693.0], [423.0, 656.0], [417.0, 655.0], [416.0, 695.0], [419.0, 657.0], [418.0, 671.0], [422.0, 646.0], [421.0, 686.6666666666666], [446.0, 636.0], [447.0, 636.0], [445.0, 637.0], [444.0, 657.0], [443.0, 637.0], [442.0, 657.0], [441.0, 662.0], [440.0, 624.0], [439.0, 661.0], [433.0, 627.0], [432.0, 634.0], [435.0, 701.0], [434.0, 670.0], [438.0, 655.0], [437.0, 675.0], [436.0, 638.0], [460.0, 1282.0], [462.0, 1272.0], [463.0, 1287.0], [461.0, 1262.0], [457.0, 1269.0], [456.0, 1083.0], [455.0, 1283.0], [449.0, 628.0], [448.0, 601.0], [451.0, 629.0], [450.0, 652.0], [454.0, 609.0], [453.0, 584.0], [452.0, 608.0], [478.0, 1052.0], [476.0, 1027.0], [475.0, 1033.5], [474.0, 1187.3333333333333], [472.0, 1260.0], [471.0, 1270.0], [469.0, 1265.0], [466.0, 1251.0], [465.0, 1259.0], [492.0, 1071.0], [494.0, 1202.0], [495.0, 984.0], [493.0, 967.0], [491.0, 1194.0], [488.0, 1154.0], [487.0, 1008.0], [480.0, 1232.0], [483.0, 1006.0], [481.0, 985.0], [485.0, 980.0], [484.0, 1024.0], [510.0, 931.0], [511.0, 1159.0], [509.0, 944.5], [508.0, 1162.0], [507.0, 960.0], [506.0, 1033.5], [504.0, 940.5], [503.0, 970.0], [497.0, 1065.5], [496.0, 1159.0], [499.0, 973.0], [498.0, 1203.0], [502.0, 934.0], [501.0, 949.0], [500.0, 1140.0], [537.0, 1107.0], [542.0, 719.0], [543.0, 698.0], [531.0, 930.0], [530.0, 1019.5], [533.0, 1128.0], [532.0, 1139.0], [540.0, 759.0], [539.0, 768.0], [538.0, 1006.0], [536.0, 1010.0], [519.0, 1016.0], [517.0, 1147.0], [516.0, 1161.0], [514.0, 931.5], [513.0, 1125.0], [512.0, 934.0], [527.0, 952.0], [526.0, 934.0], [525.0, 935.0], [524.0, 955.0], [523.0, 887.0], [522.0, 946.0], [521.0, 943.0], [520.0, 928.0], [535.0, 916.0], [534.0, 882.0], [569.0, 536.0], [574.0, 697.0], [575.0, 705.0], [560.0, 551.0], [562.0, 580.0], [561.0, 756.0], [564.0, 545.0], [563.0, 748.0], [572.0, 501.0], [571.0, 489.0], [570.0, 486.0], [568.0, 489.0], [551.0, 780.0], [550.0, 629.5], [548.0, 599.0], [547.0, 650.0], [546.0, 691.0], [545.0, 686.0], [544.0, 658.0], [559.0, 570.0], [558.0, 581.0], [557.0, 576.0], [556.0, 541.0], [555.0, 602.0], [554.0, 827.0], [553.0, 582.0], [552.0, 830.0], [567.0, 30461.5], [565.0, 569.0], [606.0, 211.0], [596.0, 224.0], [607.0, 203.0], [593.0, 206.0], [592.0, 213.0], [595.0, 220.0], [594.0, 228.0], [605.0, 190.0], [604.0, 193.0], [603.0, 211.33333333333334], [583.0, 60586.66666666667], [577.0, 651.5], [576.0, 428.5], [591.0, 241.0], [590.0, 246.0], [589.0, 254.0], [588.0, 145.0], [587.0, 250.0], [586.0, 305.0], [585.0, 232.0], [584.0, 316.0], [599.0, 215.0], [598.0, 200.0], [597.0, 221.0], [632.0, 1080.5], [636.0, 1097.0], [638.0, 1043.0], [625.0, 1054.0], [624.0, 1045.0], [635.0, 1065.0], [634.0, 1102.0], [633.0, 1079.5], [622.0, 1077.0], [609.0, 191.0], [608.0, 177.0], [611.0, 1064.0], [610.0, 178.0], [614.0, 1084.5], [613.0, 1080.0], [620.0, 1102.0], [619.0, 1107.0], [618.0, 789.0], [617.0, 1082.0], [616.0, 783.0], [630.0, 1104.0], [629.0, 1119.0], [628.0, 1053.0], [626.0, 775.0], [664.0, 1050.0], [668.0, 1034.0], [671.0, 962.0], [659.0, 1062.0], [657.0, 1043.0], [661.0, 698.0], [660.0, 1063.0], [670.0, 690.0], [669.0, 1010.0], [667.0, 692.0], [666.0, 1016.0], [665.0, 702.0], [655.0, 1020.0], [643.0, 1025.5], [641.0, 1094.0], [645.0, 917.0], [644.0, 1105.0], [647.0, 1073.0], [646.0, 1093.0], [654.0, 1035.0], [653.0, 721.0], [652.0, 1046.0], [650.0, 1083.0], [648.0, 992.0], [663.0, 957.0], [662.0, 1032.0], [677.0, 972.0], [688.0, 631.0], [703.0, 571.0], [679.0, 667.0], [678.0, 802.5], [676.0, 841.5], [674.0, 996.0], [673.0, 687.0], [672.0, 775.3333333333334], [691.0, 915.0], [690.0, 873.0], [689.0, 879.0], [687.0, 624.0], [686.0, 896.0], [684.0, 941.0], [683.0, 653.0], [682.0, 654.0], [681.0, 930.0], [680.0, 826.0], [728.0, 960.0], [732.0, 1022.0], [735.0, 972.0], [721.0, 1048.0], [720.0, 1021.0], [734.0, 854.0], [733.0, 1020.0], [731.0, 862.0], [730.0, 958.0], [729.0, 1030.0], [719.0, 990.0], [704.0, 763.0], [706.0, 695.0], [705.0, 773.5], [708.0, 733.0], [707.0, 761.5], [710.0, 723.0], [709.0, 705.0], [718.0, 351.0], [717.0, 65.0], [716.0, 68.0], [715.0, 278.0], [714.0, 655.0], [713.0, 512.0], [712.0, 684.4166666666667], [724.0, 917.0], [722.0, 860.0], [761.0, 957.0], [766.0, 905.0], [767.0, 965.0], [755.0, 940.5], [753.0, 962.0], [765.0, 943.0], [764.0, 795.0], [763.0, 973.0], [760.0, 960.5], [743.0, 997.0], [741.0, 944.0], [740.0, 956.0], [739.0, 835.0], [738.0, 1027.0], [737.0, 835.0], [736.0, 1008.0], [751.0, 909.5], [749.0, 977.0], [747.0, 968.5], [746.0, 975.0], [745.0, 983.0], [744.0, 833.0], [757.0, 998.0], [756.0, 971.0], [792.0, 823.5], [798.0, 911.0], [799.0, 889.0], [785.0, 958.0], [784.0, 775.0], [797.0, 871.0], [796.0, 750.0], [795.0, 873.0], [783.0, 952.0], [769.0, 876.5], [771.0, 977.0], [770.0, 921.0], [773.0, 927.0], [772.0, 911.0], [782.0, 906.0], [781.0, 918.5], [780.0, 930.0], [778.0, 931.0], [779.0, 934.0], [777.0, 862.0], [790.0, 890.0], [789.0, 762.5], [787.0, 907.0], [786.0, 769.0], [824.0, 360.0], [828.0, 1239.0], [829.0, 1358.0], [817.0, 794.0], [816.0, 772.0], [819.0, 678.0], [818.0, 858.0], [827.0, 1269.0], [826.0, 386.0], [825.0, 352.0], [815.0, 779.5], [800.0, 743.0], [803.0, 865.0], [802.0, 878.0], [805.0, 873.0], [804.0, 737.0], [807.0, 892.0], [806.0, 894.0], [814.0, 848.5], [813.0, 841.0], [812.0, 813.0], [811.0, 851.0], [810.0, 857.0], [808.0, 853.5], [823.0, 410.0], [822.0, 553.0], [821.0, 679.0], [820.0, 682.0], [857.0, 1207.0], [861.0, 1478.0], [862.0, 1246.0], [849.0, 1196.0], [848.0, 1221.5], [851.0, 1180.0], [850.0, 885.0], [853.0, 1284.0], [852.0, 1204.0], [860.0, 1150.0], [859.0, 1157.0], [858.0, 1192.0], [856.0, 1213.0], [839.0, 1568.0], [838.0, 1161.0], [836.0, 1231.0], [835.0, 1270.0], [832.0, 920.0], [847.0, 1200.0], [846.0, 1192.0], [845.0, 893.0], [844.0, 1239.0], [843.0, 1526.0], [842.0, 1196.0], [841.0, 1189.0], [840.0, 1231.0], [855.0, 1213.0], [854.0, 1173.0], [864.0, 1443.0], [916.0, 975.0], [923.0, 795.0], [922.0, 899.0], [900.0, 1439.0], [899.0, 1421.0], [911.0, 1365.0], [910.0, 1015.0], [909.0, 1026.0], [908.0, 1056.0], [907.0, 1388.0], [906.0, 1364.0], [905.0, 1096.0], [904.0, 1215.7631578947373], [919.0, 1160.0], [918.0, 1024.0], [917.0, 1337.0], [915.0, 1187.0], [914.0, 1338.0], [913.0, 1146.0], [912.0, 1043.0], [956.0, 616.0], [959.0, 746.6666666666666], [945.0, 852.0], [944.0, 839.5], [947.0, 994.0], [946.0, 702.0], [949.0, 988.5], [948.0, 972.0], [958.0, 947.0], [957.0, 910.0], [955.0, 601.0], [954.0, 641.0], [953.0, 696.5], [952.0, 647.5], [942.0, 851.0], [933.0, 876.5], [930.0, 715.0], [935.0, 1021.0], [934.0, 672.0], [940.0, 740.5], [938.0, 881.0], [936.0, 992.0], [951.0, 973.0], [950.0, 647.0], [984.0, 1387.0], [978.0, 1414.5], [988.0, 1432.0], [987.0, 1417.0], [986.0, 1400.6666666666667], [973.0, 1447.0], [961.0, 526.0], [960.0, 914.0], [963.0, 770.0], [962.0, 448.0], [965.0, 471.0], [964.0, 799.0], [967.0, 457.0], [966.0, 569.0], [972.0, 1426.0], [971.0, 685.0], [970.0, 757.0], [969.0, 467.0], [968.0, 458.0], [983.0, 1363.0], [982.0, 1386.0], [979.0, 1413.5], [977.0, 1408.0], [1020.0, 1355.3333333333335], [1022.0, 1340.0], [1023.0, 1324.0], [1021.0, 1326.0], [1018.0, 1392.0], [996.0, 1356.5], [995.0, 1377.0], [994.0, 1370.0], [1013.0, 1345.0], [1009.0, 1351.0], [1005.0, 1399.0], [1001.0, 1403.0], [1084.0, 988.0], [1056.0, 1176.0], [1058.0, 1163.0], [1060.0, 1114.0], [1062.0, 1140.0], [1064.0, 1108.0], [1066.0, 1152.0], [1068.0, 1149.0], [1070.0, 1062.0], [1086.0, 1085.0], [1082.0, 1104.0], [1080.0, 1045.0], [1078.0, 1118.0], [1076.0, 1133.0], [1074.0, 1073.0], [1072.0, 1064.0], [1038.0, 1227.0], [1036.0, 1267.0], [1032.0, 1322.0], [1028.0, 1273.0], [1026.0, 1342.0], [1024.0, 1304.0], [1052.0, 1228.0], [1050.0, 1248.0], [1048.0, 1213.5], [1046.0, 1242.3333333333333], [1144.0, 1499.0], [1124.0, 1572.0], [1148.0, 1417.0], [1146.0, 1429.0], [1142.0, 1525.6], [1140.0, 1567.0], [1138.0, 1515.5], [1088.0, 1028.0], [1090.0, 999.0], [1092.0, 935.0], [1096.0, 923.0], [1098.0, 1603.0], [1108.0, 1510.0], [1202.0, 739.0], [1206.0, 694.0], [1212.0, 692.0], [1184.0, 1093.0], [1188.0, 991.0], [1190.0, 965.0], [1196.0, 721.0], [1214.0, 697.0], [1210.0, 680.0], [1208.0, 698.0], [1152.0, 1377.0], [1154.0, 1463.0], [1156.0, 1372.0], [1158.0, 1359.0], [1160.0, 1347.0], [1162.0, 1345.0], [1164.0, 1380.0], [1166.0, 1354.5], [1182.0, 1038.0], [1180.0, 1128.0], [1178.0, 1166.0], [1174.0, 1257.0], [1172.0, 1234.0], [1170.0, 1284.0], [1168.0, 1274.0], [1198.0, 683.0], [1218.0, 675.0], [1216.0, 666.3333333333334], [1085.0, 1032.0], [1087.0, 989.0], [1057.0, 1132.0], [1059.0, 1118.0], [1061.0, 1105.0], [1063.0, 1145.0], [1065.0, 1076.0], [1067.0, 1156.0], [1069.0, 1150.0], [1071.0, 1061.0], [1083.0, 1042.0], [1081.0, 1014.0], [1079.0, 1100.0], [1077.0, 1068.0], [1073.0, 1107.0], [1037.0, 1317.0], [1035.0, 1281.5], [1027.0, 1303.0], [1025.0, 1272.0], [1055.0, 1203.5], [1051.0, 1153.0], [1049.0, 1257.5], [1143.0, 1494.5454545454545], [1141.0, 1557.5714285714287], [1147.0, 1441.0], [1151.0, 1410.0], [1149.0, 1480.0], [1145.0, 1440.875], [1139.0, 1567.0], [1117.0, 1565.0], [1089.0, 963.5], [1091.0, 973.0], [1095.0, 961.0], [1093.0, 929.0], [1097.0, 1589.0], [1107.0, 1584.0], [1203.0, 702.0], [1189.0, 989.0], [1215.0, 685.3333333333334], [1185.0, 1052.0], [1193.0, 849.5], [1191.0, 1045.0], [1197.0, 710.0], [1213.0, 696.0], [1207.0, 698.0], [1183.0, 1048.0], [1153.0, 1432.5], [1157.0, 1414.0], [1159.0, 1345.5], [1161.0, 1329.6666666666667], [1163.0, 1339.0], [1165.0, 1303.0], [1167.0, 1370.0], [1181.0, 1067.0], [1179.0, 1162.0], [1177.0, 1076.0], [1173.0, 1178.0], [1171.0, 1237.0], [1199.0, 719.0], [1221.0, 653.25], [1.0, 78.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}, {"data": [[570.1574858757065, 2789.0755649717516]], "isOverall": false, "label": "Sunstar Home Japan-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1221.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12.9, "minX": 1.62786307E12, "maxY": 2189195.9, "series": [{"data": [[1.62786324E12, 3526.1], [1.62786309E12, 282509.3], [1.62786325E12, 4178.3], [1.6278631E12, 785511.0], [1.62786311E12, 717161.3], [1.62786322E12, 3526.1], [1.62786307E12, 95400.6], [1.62786318E12, 7053.0], [1.62786312E12, 2189195.9], [1.62786313E12, 14703.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62786324E12, 12.9], [1.62786309E12, 1251.3], [1.62786325E12, 12.9], [1.6278631E12, 3483.0], [1.62786311E12, 3173.4], [1.62786322E12, 12.9], [1.62786307E12, 361.2], [1.62786318E12, 25.8], [1.62786312E12, 9739.5], [1.62786313E12, 51.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786325E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 687.75, "minX": 1.62786307E12, "maxY": 180299.0, "series": [{"data": [[1.62786324E12, 180299.0], [1.62786309E12, 1354.0206185567008], [1.62786325E12, 110839.0], [1.6278631E12, 1140.4259259259259], [1.62786311E12, 2233.8232931726902], [1.62786322E12, 120639.0], [1.62786307E12, 687.75], [1.62786318E12, 120308.5], [1.62786312E12, 2238.2938076416326], [1.62786313E12, 60276.666666666664]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786325E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 632.8928571428572, "minX": 1.62786307E12, "maxY": 180298.0, "series": [{"data": [[1.62786324E12, 180298.0], [1.62786309E12, 1304.639175257732], [1.62786325E12, 60081.0], [1.6278631E12, 1137.8777777777775], [1.62786311E12, 2230.3413654618475], [1.62786322E12, 120639.0], [1.62786307E12, 632.8928571428572], [1.62786318E12, 120308.5], [1.62786312E12, 2227.7009222661413], [1.62786313E12, 60276.0]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786325E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 250.83333333333331, "minX": 1.62786307E12, "maxY": 1394.9604743083007, "series": [{"data": [[1.62786324E12, 284.0], [1.62786309E12, 1245.896907216495], [1.62786325E12, 302.6666666666667], [1.6278631E12, 1105.796296296295], [1.62786311E12, 757.9678714859436], [1.62786322E12, 626.0], [1.62786307E12, 452.17857142857144], [1.62786318E12, 287.5], [1.62786312E12, 1394.9604743083007], [1.62786313E12, 250.83333333333331]], "isOverall": false, "label": "Sunstar Home Japan", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786325E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 65.0, "minX": 1.62786307E12, "maxY": 180299.0, "series": [{"data": [[1.62786324E12, 180299.0], [1.62786309E12, 1603.0], [1.62786325E12, 78.0], [1.6278631E12, 1568.0], [1.62786311E12, 60661.0], [1.62786322E12, 120639.0], [1.62786307E12, 739.0], [1.62786318E12, 120322.0], [1.62786312E12, 60350.0], [1.62786313E12, 60425.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62786324E12, 180299.0], [1.62786309E12, 715.0], [1.62786325E12, 78.0], [1.6278631E12, 448.0], [1.62786311E12, 65.0], [1.62786322E12, 120639.0], [1.62786307E12, 634.0], [1.62786318E12, 120295.0], [1.62786312E12, 321.0], [1.62786313E12, 60185.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62786324E12, 180299.0], [1.62786309E12, 1567.0], [1.62786325E12, 78.0], [1.6278631E12, 1400.8], [1.62786311E12, 1064.3], [1.62786322E12, 120639.0], [1.62786307E12, 719.2], [1.62786318E12, 120322.0], [1.62786312E12, 2728.8], [1.62786313E12, 60425.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62786324E12, 180299.0], [1.62786309E12, 1603.0], [1.62786325E12, 78.0], [1.6278631E12, 1535.8600000000006], [1.62786311E12, 60272.4], [1.62786322E12, 120639.0], [1.62786307E12, 739.0], [1.62786318E12, 120322.0], [1.62786312E12, 3771.1599999999976], [1.62786313E12, 60425.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62786324E12, 180299.0], [1.62786309E12, 1573.2], [1.62786325E12, 78.0], [1.6278631E12, 1422.45], [1.62786311E12, 1100.0], [1.62786322E12, 120639.0], [1.62786307E12, 730.9], [1.62786318E12, 120322.0], [1.62786312E12, 3115.5999999999985], [1.62786313E12, 60425.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786325E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 212.0, "minX": 1.0, "maxY": 166219.5, "series": [{"data": [[32.0, 791.5], [2.0, 120308.5], [140.0, 1676.0], [145.0, 1089.0], [144.0, 2188.0], [11.0, 310.5], [12.0, 966.0], [3.0, 351.0], [220.0, 1415.5], [56.0, 1365.5], [1.0, 150469.0], [69.0, 1133.0], [85.0, 1439.0], [22.0, 212.0], [97.0, 698.0], [6.0, 60213.0], [105.0, 941.0], [108.0, 893.0], [28.0, 686.5], [123.0, 952.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 60866.0], [6.0, 60312.0], [3.0, 166219.5], [220.0, 60954.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 220.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 211.0, "minX": 1.0, "maxY": 150468.5, "series": [{"data": [[32.0, 790.5], [2.0, 120308.5], [140.0, 1675.5], [145.0, 1074.0], [144.0, 2180.0], [11.0, 310.0], [12.0, 935.0], [3.0, 350.0], [220.0, 1388.5], [56.0, 1365.5], [1.0, 150468.5], [69.0, 1132.0], [85.0, 1378.0], [22.0, 211.0], [97.0, 697.0], [6.0, 60213.0], [105.0, 937.0], [108.0, 889.5], [28.0, 631.5], [123.0, 949.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 60866.0], [6.0, 60312.0], [3.0, 90083.5], [220.0, 60345.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 220.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786305E12, "maxY": 62.7, "series": [{"data": [[1.62786309E12, 9.7], [1.62786325E12, 0.1], [1.6278631E12, 27.2], [1.62786311E12, 36.5], [1.62786305E12, 0.6], [1.62786306E12, 1.3], [1.62786307E12, 3.5], [1.62786312E12, 62.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786325E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786307E12, "maxY": 75.5, "series": [{"data": [[1.62786325E12, 0.2], [1.62786311E12, 0.3], [1.62786312E12, 0.4], [1.62786313E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62786324E12, 0.1], [1.62786309E12, 9.7], [1.62786325E12, 0.1], [1.6278631E12, 27.0], [1.62786311E12, 24.6], [1.62786322E12, 0.1], [1.62786307E12, 2.8], [1.62786318E12, 0.2], [1.62786312E12, 75.5], [1.62786313E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62786325E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786307E12, "maxY": 75.5, "series": [{"data": [[1.62786324E12, 0.1], [1.62786309E12, 9.7], [1.62786325E12, 0.1], [1.6278631E12, 27.0], [1.62786311E12, 24.6], [1.62786322E12, 0.1], [1.62786307E12, 2.8], [1.62786318E12, 0.2], [1.62786312E12, 75.5], [1.62786313E12, 0.4]], "isOverall": false, "label": "Sunstar Home Japan-success", "isController": false}, {"data": [[1.62786325E12, 0.2], [1.62786311E12, 0.3], [1.62786312E12, 0.4], [1.62786313E12, 0.2]], "isOverall": false, "label": "Sunstar Home Japan-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786325E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62786307E12, "maxY": 75.5, "series": [{"data": [[1.62786324E12, 0.1], [1.62786309E12, 9.7], [1.62786325E12, 0.1], [1.6278631E12, 27.0], [1.62786311E12, 24.6], [1.62786322E12, 0.1], [1.62786307E12, 2.8], [1.62786318E12, 0.2], [1.62786312E12, 75.5], [1.62786313E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62786325E12, 0.2], [1.62786311E12, 0.3], [1.62786312E12, 0.4], [1.62786313E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62786325E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

