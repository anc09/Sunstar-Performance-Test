/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 7509.0, "series": [{"data": [[0.0, 9.0], [0.1, 10.0], [0.2, 10.0], [0.3, 10.0], [0.4, 10.0], [0.5, 11.0], [0.6, 11.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 11.0], [1.2, 11.0], [1.3, 11.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 12.0], [1.8, 12.0], [1.9, 12.0], [2.0, 12.0], [2.1, 12.0], [2.2, 12.0], [2.3, 13.0], [2.4, 13.0], [2.5, 13.0], [2.6, 13.0], [2.7, 13.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 14.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 15.0], [4.1, 15.0], [4.2, 15.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 16.0], [4.7, 16.0], [4.8, 16.0], [4.9, 16.0], [5.0, 16.0], [5.1, 16.0], [5.2, 16.0], [5.3, 16.0], [5.4, 16.0], [5.5, 17.0], [5.6, 17.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 17.0], [6.1, 17.0], [6.2, 17.0], [6.3, 17.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 19.0], [7.3, 19.0], [7.4, 19.0], [7.5, 19.0], [7.6, 19.0], [7.7, 19.0], [7.8, 19.0], [7.9, 20.0], [8.0, 20.0], [8.1, 20.0], [8.2, 20.0], [8.3, 20.0], [8.4, 20.0], [8.5, 20.0], [8.6, 20.0], [8.7, 20.0], [8.8, 20.0], [8.9, 20.0], [9.0, 20.0], [9.1, 21.0], [9.2, 21.0], [9.3, 21.0], [9.4, 21.0], [9.5, 21.0], [9.6, 21.0], [9.7, 21.0], [9.8, 21.0], [9.9, 21.0], [10.0, 21.0], [10.1, 21.0], [10.2, 21.0], [10.3, 21.0], [10.4, 21.0], [10.5, 21.0], [10.6, 22.0], [10.7, 22.0], [10.8, 22.0], [10.9, 22.0], [11.0, 22.0], [11.1, 22.0], [11.2, 22.0], [11.3, 22.0], [11.4, 22.0], [11.5, 22.0], [11.6, 22.0], [11.7, 22.0], [11.8, 22.0], [11.9, 22.0], [12.0, 22.0], [12.1, 22.0], [12.2, 22.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 23.0], [13.1, 23.0], [13.2, 23.0], [13.3, 23.0], [13.4, 23.0], [13.5, 23.0], [13.6, 23.0], [13.7, 23.0], [13.8, 23.0], [13.9, 23.0], [14.0, 23.0], [14.1, 24.0], [14.2, 24.0], [14.3, 24.0], [14.4, 24.0], [14.5, 24.0], [14.6, 24.0], [14.7, 24.0], [14.8, 24.0], [14.9, 24.0], [15.0, 24.0], [15.1, 24.0], [15.2, 24.0], [15.3, 24.0], [15.4, 24.0], [15.5, 25.0], [15.6, 25.0], [15.7, 25.0], [15.8, 25.0], [15.9, 25.0], [16.0, 25.0], [16.1, 25.0], [16.2, 25.0], [16.3, 25.0], [16.4, 25.0], [16.5, 25.0], [16.6, 25.0], [16.7, 26.0], [16.8, 26.0], [16.9, 26.0], [17.0, 26.0], [17.1, 26.0], [17.2, 26.0], [17.3, 26.0], [17.4, 26.0], [17.5, 26.0], [17.6, 26.0], [17.7, 26.0], [17.8, 26.0], [17.9, 26.0], [18.0, 27.0], [18.1, 27.0], [18.2, 27.0], [18.3, 27.0], [18.4, 27.0], [18.5, 27.0], [18.6, 27.0], [18.7, 27.0], [18.8, 27.0], [18.9, 27.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 28.0], [19.5, 28.0], [19.6, 28.0], [19.7, 28.0], [19.8, 28.0], [19.9, 28.0], [20.0, 28.0], [20.1, 28.0], [20.2, 28.0], [20.3, 28.0], [20.4, 28.0], [20.5, 28.0], [20.6, 28.0], [20.7, 28.0], [20.8, 29.0], [20.9, 29.0], [21.0, 29.0], [21.1, 29.0], [21.2, 29.0], [21.3, 29.0], [21.4, 29.0], [21.5, 29.0], [21.6, 29.0], [21.7, 29.0], [21.8, 29.0], [21.9, 29.0], [22.0, 29.0], [22.1, 30.0], [22.2, 30.0], [22.3, 30.0], [22.4, 30.0], [22.5, 30.0], [22.6, 30.0], [22.7, 30.0], [22.8, 30.0], [22.9, 30.0], [23.0, 30.0], [23.1, 30.0], [23.2, 31.0], [23.3, 31.0], [23.4, 31.0], [23.5, 31.0], [23.6, 31.0], [23.7, 31.0], [23.8, 31.0], [23.9, 31.0], [24.0, 31.0], [24.1, 32.0], [24.2, 32.0], [24.3, 32.0], [24.4, 32.0], [24.5, 32.0], [24.6, 32.0], [24.7, 32.0], [24.8, 33.0], [24.9, 33.0], [25.0, 33.0], [25.1, 33.0], [25.2, 33.0], [25.3, 33.0], [25.4, 34.0], [25.5, 34.0], [25.6, 34.0], [25.7, 34.0], [25.8, 34.0], [25.9, 34.0], [26.0, 35.0], [26.1, 35.0], [26.2, 35.0], [26.3, 35.0], [26.4, 35.0], [26.5, 36.0], [26.6, 36.0], [26.7, 36.0], [26.8, 36.0], [26.9, 37.0], [27.0, 37.0], [27.1, 37.0], [27.2, 38.0], [27.3, 38.0], [27.4, 38.0], [27.5, 39.0], [27.6, 39.0], [27.7, 39.0], [27.8, 40.0], [27.9, 40.0], [28.0, 40.0], [28.1, 41.0], [28.2, 41.0], [28.3, 42.0], [28.4, 42.0], [28.5, 42.0], [28.6, 43.0], [28.7, 43.0], [28.8, 44.0], [28.9, 44.0], [29.0, 44.0], [29.1, 45.0], [29.2, 45.0], [29.3, 45.0], [29.4, 45.0], [29.5, 45.0], [29.6, 45.0], [29.7, 45.0], [29.8, 45.0], [29.9, 45.0], [30.0, 45.0], [30.1, 46.0], [30.2, 46.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 46.0], [30.7, 46.0], [30.8, 46.0], [30.9, 46.0], [31.0, 46.0], [31.1, 46.0], [31.2, 46.0], [31.3, 46.0], [31.4, 46.0], [31.5, 46.0], [31.6, 47.0], [31.7, 47.0], [31.8, 47.0], [31.9, 47.0], [32.0, 47.0], [32.1, 47.0], [32.2, 47.0], [32.3, 47.0], [32.4, 47.0], [32.5, 47.0], [32.6, 47.0], [32.7, 47.0], [32.8, 47.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 48.0], [33.8, 48.0], [33.9, 48.0], [34.0, 48.0], [34.1, 48.0], [34.2, 48.0], [34.3, 48.0], [34.4, 48.0], [34.5, 48.0], [34.6, 48.0], [34.7, 48.0], [34.8, 48.0], [34.9, 48.0], [35.0, 48.0], [35.1, 48.0], [35.2, 48.0], [35.3, 48.0], [35.4, 48.0], [35.5, 48.0], [35.6, 48.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 48.0], [36.1, 48.0], [36.2, 48.0], [36.3, 48.0], [36.4, 48.0], [36.5, 48.0], [36.6, 48.0], [36.7, 48.0], [36.8, 49.0], [36.9, 49.0], [37.0, 49.0], [37.1, 49.0], [37.2, 49.0], [37.3, 49.0], [37.4, 49.0], [37.5, 49.0], [37.6, 49.0], [37.7, 49.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 49.0], [38.5, 49.0], [38.6, 49.0], [38.7, 49.0], [38.8, 49.0], [38.9, 49.0], [39.0, 49.0], [39.1, 49.0], [39.2, 49.0], [39.3, 49.0], [39.4, 49.0], [39.5, 49.0], [39.6, 49.0], [39.7, 49.0], [39.8, 49.0], [39.9, 49.0], [40.0, 49.0], [40.1, 49.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 49.0], [40.6, 49.0], [40.7, 50.0], [40.8, 50.0], [40.9, 50.0], [41.0, 50.0], [41.1, 50.0], [41.2, 50.0], [41.3, 50.0], [41.4, 50.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 50.0], [43.2, 50.0], [43.3, 50.0], [43.4, 50.0], [43.5, 50.0], [43.6, 50.0], [43.7, 50.0], [43.8, 50.0], [43.9, 50.0], [44.0, 50.0], [44.1, 50.0], [44.2, 50.0], [44.3, 50.0], [44.4, 50.0], [44.5, 50.0], [44.6, 50.0], [44.7, 50.0], [44.8, 50.0], [44.9, 50.0], [45.0, 51.0], [45.1, 51.0], [45.2, 51.0], [45.3, 51.0], [45.4, 51.0], [45.5, 51.0], [45.6, 51.0], [45.7, 51.0], [45.8, 51.0], [45.9, 51.0], [46.0, 51.0], [46.1, 51.0], [46.2, 51.0], [46.3, 51.0], [46.4, 51.0], [46.5, 51.0], [46.6, 51.0], [46.7, 51.0], [46.8, 51.0], [46.9, 51.0], [47.0, 51.0], [47.1, 51.0], [47.2, 51.0], [47.3, 51.0], [47.4, 51.0], [47.5, 51.0], [47.6, 51.0], [47.7, 51.0], [47.8, 51.0], [47.9, 51.0], [48.0, 51.0], [48.1, 51.0], [48.2, 51.0], [48.3, 51.0], [48.4, 51.0], [48.5, 51.0], [48.6, 51.0], [48.7, 51.0], [48.8, 51.0], [48.9, 51.0], [49.0, 51.0], [49.1, 51.0], [49.2, 51.0], [49.3, 51.0], [49.4, 51.0], [49.5, 51.0], [49.6, 52.0], [49.7, 52.0], [49.8, 52.0], [49.9, 52.0], [50.0, 52.0], [50.1, 52.0], [50.2, 52.0], [50.3, 52.0], [50.4, 52.0], [50.5, 52.0], [50.6, 52.0], [50.7, 52.0], [50.8, 52.0], [50.9, 52.0], [51.0, 52.0], [51.1, 52.0], [51.2, 52.0], [51.3, 52.0], [51.4, 52.0], [51.5, 52.0], [51.6, 52.0], [51.7, 52.0], [51.8, 52.0], [51.9, 52.0], [52.0, 52.0], [52.1, 52.0], [52.2, 52.0], [52.3, 52.0], [52.4, 52.0], [52.5, 52.0], [52.6, 52.0], [52.7, 52.0], [52.8, 52.0], [52.9, 52.0], [53.0, 52.0], [53.1, 52.0], [53.2, 52.0], [53.3, 52.0], [53.4, 52.0], [53.5, 52.0], [53.6, 52.0], [53.7, 52.0], [53.8, 52.0], [53.9, 52.0], [54.0, 52.0], [54.1, 52.0], [54.2, 52.0], [54.3, 52.0], [54.4, 52.0], [54.5, 52.0], [54.6, 52.0], [54.7, 52.0], [54.8, 53.0], [54.9, 53.0], [55.0, 53.0], [55.1, 53.0], [55.2, 53.0], [55.3, 53.0], [55.4, 53.0], [55.5, 53.0], [55.6, 53.0], [55.7, 53.0], [55.8, 53.0], [55.9, 53.0], [56.0, 53.0], [56.1, 53.0], [56.2, 53.0], [56.3, 53.0], [56.4, 53.0], [56.5, 53.0], [56.6, 53.0], [56.7, 53.0], [56.8, 53.0], [56.9, 53.0], [57.0, 53.0], [57.1, 53.0], [57.2, 53.0], [57.3, 53.0], [57.4, 53.0], [57.5, 53.0], [57.6, 53.0], [57.7, 53.0], [57.8, 53.0], [57.9, 53.0], [58.0, 53.0], [58.1, 53.0], [58.2, 53.0], [58.3, 53.0], [58.4, 53.0], [58.5, 53.0], [58.6, 53.0], [58.7, 53.0], [58.8, 53.0], [58.9, 53.0], [59.0, 53.0], [59.1, 53.0], [59.2, 53.0], [59.3, 53.0], [59.4, 54.0], [59.5, 54.0], [59.6, 54.0], [59.7, 54.0], [59.8, 54.0], [59.9, 54.0], [60.0, 54.0], [60.1, 54.0], [60.2, 54.0], [60.3, 54.0], [60.4, 54.0], [60.5, 54.0], [60.6, 54.0], [60.7, 54.0], [60.8, 54.0], [60.9, 54.0], [61.0, 54.0], [61.1, 54.0], [61.2, 54.0], [61.3, 54.0], [61.4, 54.0], [61.5, 54.0], [61.6, 54.0], [61.7, 54.0], [61.8, 54.0], [61.9, 54.0], [62.0, 54.0], [62.1, 54.0], [62.2, 54.0], [62.3, 54.0], [62.4, 54.0], [62.5, 54.0], [62.6, 54.0], [62.7, 54.0], [62.8, 54.0], [62.9, 54.0], [63.0, 54.0], [63.1, 54.0], [63.2, 54.0], [63.3, 54.0], [63.4, 54.0], [63.5, 54.0], [63.6, 54.0], [63.7, 54.0], [63.8, 54.0], [63.9, 54.0], [64.0, 55.0], [64.1, 55.0], [64.2, 55.0], [64.3, 55.0], [64.4, 55.0], [64.5, 55.0], [64.6, 55.0], [64.7, 55.0], [64.8, 55.0], [64.9, 55.0], [65.0, 55.0], [65.1, 55.0], [65.2, 55.0], [65.3, 55.0], [65.4, 55.0], [65.5, 55.0], [65.6, 55.0], [65.7, 55.0], [65.8, 55.0], [65.9, 55.0], [66.0, 55.0], [66.1, 55.0], [66.2, 55.0], [66.3, 55.0], [66.4, 55.0], [66.5, 55.0], [66.6, 55.0], [66.7, 55.0], [66.8, 55.0], [66.9, 55.0], [67.0, 55.0], [67.1, 55.0], [67.2, 55.0], [67.3, 55.0], [67.4, 55.0], [67.5, 55.0], [67.6, 55.0], [67.7, 55.0], [67.8, 55.0], [67.9, 55.0], [68.0, 55.0], [68.1, 55.0], [68.2, 56.0], [68.3, 56.0], [68.4, 56.0], [68.5, 56.0], [68.6, 56.0], [68.7, 56.0], [68.8, 56.0], [68.9, 56.0], [69.0, 56.0], [69.1, 56.0], [69.2, 56.0], [69.3, 56.0], [69.4, 56.0], [69.5, 56.0], [69.6, 56.0], [69.7, 56.0], [69.8, 56.0], [69.9, 56.0], [70.0, 56.0], [70.1, 56.0], [70.2, 56.0], [70.3, 56.0], [70.4, 56.0], [70.5, 56.0], [70.6, 56.0], [70.7, 56.0], [70.8, 56.0], [70.9, 56.0], [71.0, 56.0], [71.1, 56.0], [71.2, 56.0], [71.3, 56.0], [71.4, 56.0], [71.5, 56.0], [71.6, 56.0], [71.7, 56.0], [71.8, 56.0], [71.9, 56.0], [72.0, 57.0], [72.1, 57.0], [72.2, 57.0], [72.3, 57.0], [72.4, 57.0], [72.5, 57.0], [72.6, 57.0], [72.7, 57.0], [72.8, 57.0], [72.9, 57.0], [73.0, 57.0], [73.1, 57.0], [73.2, 57.0], [73.3, 57.0], [73.4, 57.0], [73.5, 57.0], [73.6, 57.0], [73.7, 57.0], [73.8, 57.0], [73.9, 57.0], [74.0, 57.0], [74.1, 57.0], [74.2, 57.0], [74.3, 57.0], [74.4, 57.0], [74.5, 57.0], [74.6, 57.0], [74.7, 57.0], [74.8, 57.0], [74.9, 57.0], [75.0, 57.0], [75.1, 57.0], [75.2, 57.0], [75.3, 57.0], [75.4, 58.0], [75.5, 58.0], [75.6, 58.0], [75.7, 58.0], [75.8, 58.0], [75.9, 58.0], [76.0, 58.0], [76.1, 58.0], [76.2, 58.0], [76.3, 58.0], [76.4, 58.0], [76.5, 58.0], [76.6, 58.0], [76.7, 58.0], [76.8, 58.0], [76.9, 58.0], [77.0, 58.0], [77.1, 58.0], [77.2, 58.0], [77.3, 58.0], [77.4, 58.0], [77.5, 58.0], [77.6, 58.0], [77.7, 58.0], [77.8, 58.0], [77.9, 58.0], [78.0, 58.0], [78.1, 58.0], [78.2, 58.0], [78.3, 58.0], [78.4, 59.0], [78.5, 59.0], [78.6, 59.0], [78.7, 59.0], [78.8, 59.0], [78.9, 59.0], [79.0, 59.0], [79.1, 59.0], [79.2, 59.0], [79.3, 59.0], [79.4, 59.0], [79.5, 59.0], [79.6, 59.0], [79.7, 59.0], [79.8, 59.0], [79.9, 59.0], [80.0, 59.0], [80.1, 59.0], [80.2, 59.0], [80.3, 59.0], [80.4, 59.0], [80.5, 59.0], [80.6, 59.0], [80.7, 59.0], [80.8, 59.0], [80.9, 59.0], [81.0, 59.0], [81.1, 59.0], [81.2, 60.0], [81.3, 60.0], [81.4, 60.0], [81.5, 60.0], [81.6, 60.0], [81.7, 60.0], [81.8, 60.0], [81.9, 60.0], [82.0, 60.0], [82.1, 60.0], [82.2, 60.0], [82.3, 60.0], [82.4, 60.0], [82.5, 60.0], [82.6, 60.0], [82.7, 60.0], [82.8, 60.0], [82.9, 60.0], [83.0, 60.0], [83.1, 60.0], [83.2, 60.0], [83.3, 60.0], [83.4, 60.0], [83.5, 61.0], [83.6, 61.0], [83.7, 61.0], [83.8, 61.0], [83.9, 61.0], [84.0, 61.0], [84.1, 61.0], [84.2, 61.0], [84.3, 61.0], [84.4, 61.0], [84.5, 61.0], [84.6, 61.0], [84.7, 61.0], [84.8, 61.0], [84.9, 61.0], [85.0, 61.0], [85.1, 61.0], [85.2, 61.0], [85.3, 61.0], [85.4, 62.0], [85.5, 62.0], [85.6, 62.0], [85.7, 62.0], [85.8, 62.0], [85.9, 62.0], [86.0, 62.0], [86.1, 62.0], [86.2, 62.0], [86.3, 62.0], [86.4, 62.0], [86.5, 62.0], [86.6, 62.0], [86.7, 62.0], [86.8, 62.0], [86.9, 62.0], [87.0, 62.0], [87.1, 63.0], [87.2, 63.0], [87.3, 63.0], [87.4, 63.0], [87.5, 63.0], [87.6, 63.0], [87.7, 63.0], [87.8, 63.0], [87.9, 63.0], [88.0, 63.0], [88.1, 63.0], [88.2, 63.0], [88.3, 63.0], [88.4, 63.0], [88.5, 64.0], [88.6, 64.0], [88.7, 64.0], [88.8, 64.0], [88.9, 64.0], [89.0, 64.0], [89.1, 64.0], [89.2, 64.0], [89.3, 64.0], [89.4, 64.0], [89.5, 64.0], [89.6, 64.0], [89.7, 64.0], [89.8, 65.0], [89.9, 65.0], [90.0, 65.0], [90.1, 65.0], [90.2, 65.0], [90.3, 65.0], [90.4, 65.0], [90.5, 65.0], [90.6, 65.0], [90.7, 65.0], [90.8, 66.0], [90.9, 66.0], [91.0, 66.0], [91.1, 66.0], [91.2, 66.0], [91.3, 66.0], [91.4, 66.0], [91.5, 66.0], [91.6, 66.0], [91.7, 67.0], [91.8, 67.0], [91.9, 67.0], [92.0, 67.0], [92.1, 67.0], [92.2, 67.0], [92.3, 67.0], [92.4, 68.0], [92.5, 68.0], [92.6, 68.0], [92.7, 68.0], [92.8, 68.0], [92.9, 68.0], [93.0, 68.0], [93.1, 69.0], [93.2, 69.0], [93.3, 69.0], [93.4, 69.0], [93.5, 69.0], [93.6, 70.0], [93.7, 70.0], [93.8, 70.0], [93.9, 70.0], [94.0, 71.0], [94.1, 71.0], [94.2, 71.0], [94.3, 71.0], [94.4, 72.0], [94.5, 72.0], [94.6, 72.0], [94.7, 73.0], [94.8, 73.0], [94.9, 73.0], [95.0, 74.0], [95.1, 74.0], [95.2, 74.0], [95.3, 75.0], [95.4, 75.0], [95.5, 75.0], [95.6, 76.0], [95.7, 76.0], [95.8, 77.0], [95.9, 77.0], [96.0, 78.0], [96.1, 78.0], [96.2, 79.0], [96.3, 79.0], [96.4, 80.0], [96.5, 81.0], [96.6, 82.0], [96.7, 82.0], [96.8, 83.0], [96.9, 84.0], [97.0, 85.0], [97.1, 86.0], [97.2, 87.0], [97.3, 88.0], [97.4, 90.0], [97.5, 91.0], [97.6, 93.0], [97.7, 95.0], [97.8, 96.0], [97.9, 99.0], [98.0, 101.0], [98.1, 104.0], [98.2, 109.0], [98.3, 116.0], [98.4, 129.0], [98.5, 160.0], [98.6, 300.0], [98.7, 430.0], [98.8, 506.0], [98.9, 551.0], [99.0, 598.0], [99.1, 666.0], [99.2, 753.0], [99.3, 939.0], [99.4, 1059.0], [99.5, 1148.0], [99.6, 1269.0], [99.7, 1410.0], [99.8, 1517.0], [99.9, 1633.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 81846.0, "series": [{"data": [[0.0, 81846.0], [600.0, 116.0], [700.0, 78.0], [800.0, 39.0], [900.0, 54.0], [1000.0, 83.0], [1100.0, 79.0], [1200.0, 67.0], [1300.0, 63.0], [1400.0, 73.0], [1500.0, 82.0], [100.0, 492.0], [1600.0, 29.0], [1700.0, 35.0], [1800.0, 22.0], [1900.0, 1.0], [2000.0, 2.0], [200.0, 55.0], [4300.0, 2.0], [300.0, 72.0], [4800.0, 1.0], [5100.0, 1.0], [5000.0, 2.0], [5300.0, 2.0], [5500.0, 1.0], [5900.0, 1.0], [400.0, 86.0], [7500.0, 1.0], [500.0, 179.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 180.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 82552.0, "series": [{"data": [[0.0, 82552.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 832.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 180.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.6258433E12, "maxY": 1064.0666666666668, "series": [{"data": [[1.62584392E12, 6.109552438209753], [1.62584409E12, 11.0], [1.62584366E12, 2.7838827838827847], [1.62584383E12, 3.0], [1.62584349E12, 4.416184971098265], [1.62584418E12, 3.0], [1.62584384E12, 3.0], [1.62584401E12, 3.0], [1.62584358E12, 16.0], [1.62584375E12, 15.306181818181823], [1.62584341E12, 8.356946354883089], [1.62584331E12, 1044.8333333333335], [1.62584408E12, 11.0], [1.62584382E12, 3.0], [1.62584399E12, 4.7090909090909125], [1.62584348E12, 2.389705882352943], [1.62584365E12, 2.0], [1.625844E12, 3.0], [1.62584417E12, 4.995967741935484], [1.62584374E12, 13.784235136940552], [1.62584391E12, 8.035999999999992], [1.6258434E12, 7.844474761255097], [1.62584357E12, 16.0], [1.6258433E12, 1064.0666666666668], [1.62584347E12, 2.0], [1.62584398E12, 6.0], [1.62584415E12, 9.041330645161286], [1.62584364E12, 2.5800000000000014], [1.62584381E12, 3.0], [1.62584339E12, 8.221923335574985], [1.62584416E12, 6.0], [1.6258439E12, 7.168749999999995], [1.62584407E12, 10.589952477936173], [1.62584356E12, 16.0], [1.62584373E12, 12.08299866131191], [1.62584346E12, 2.0], [1.62584363E12, 4.0], [1.62584414E12, 13.0], [1.6258438E12, 3.0], [1.62584397E12, 6.0], [1.62584338E12, 15.0], [1.62584355E12, 16.0], [1.62584406E12, 9.0], [1.62584372E12, 11.784235136940552], [1.62584389E12, 5.027662517289079], [1.62584362E12, 6.960863697705802], [1.62584379E12, 3.0], [1.62584345E12, 2.0], [1.62584396E12, 5.087776866283844], [1.62584413E12, 13.0], [1.62584354E12, 16.0], [1.62584371E12, 10.488737201365181], [1.62584337E12, 12.714681440443231], [1.62584388E12, 4.7911392405063244], [1.62584405E12, 8.040473840078974], [1.62584378E12, 9.809791332263245], [1.62584395E12, 5.0], [1.62584344E12, 2.6811188811188846], [1.62584361E12, 8.0], [1.62584335E12, 498.6494023904382], [1.62584412E12, 12.066309444072324], [1.6258437E12, 8.081422924901192], [1.62584387E12, 4.720197044334969], [1.62584336E12, 124.6010733452594], [1.62584353E12, 10.485393258426974], [1.62584404E12, 7.411764705882351], [1.62584394E12, 5.0], [1.62584411E12, 11.0], [1.6258436E12, 8.035426731078912], [1.62584377E12, 12.0], [1.62584334E12, 730.4558823529411], [1.62584351E12, 6.74161735700197], [1.62584386E12, 3.0], [1.62584403E12, 5.136094674556216], [1.62584352E12, 8.716323296355005], [1.62584369E12, 6.897536945812805], [1.62584343E12, 4.14242424242424], [1.6258441E12, 11.0], [1.62584376E12, 11.990006662225191], [1.62584393E12, 5.0], [1.6258435E12, 6.0], [1.62584367E12, 3.846153846153848], [1.62584333E12, 951.2993197278918], [1.62584402E12, 3.0], [1.62584419E12, 2.96875], [1.62584368E12, 5.318537859007828], [1.62584385E12, 3.0], [1.62584342E12, 6.0], [1.62584359E12, 16.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584419E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 24.999999999999996, "minX": 1.0, "maxY": 7509.0, "series": [{"data": [[2.0, 27.47632794457276], [3.0, 25.88121387283239], [4.0, 38.2510853835021], [5.0, 29.103068679980574], [6.0, 44.55792546026031], [7.0, 52.380374862182954], [8.0, 46.56818181818185], [9.0, 53.08596938775504], [10.0, 62.44556536359807], [11.0, 57.23654661016953], [12.0, 57.9812536613943], [13.0, 58.25062771056839], [14.0, 66.02678945165327], [15.0, 56.099513250405614], [16.0, 59.28880308880288], [17.0, 103.99595141700405], [18.0, 824.5], [19.0, 785.5], [20.0, 567.0], [21.0, 807.5], [22.0, 819.5], [23.0, 70.77235772357717], [24.0, 1565.0], [25.0, 1579.0], [27.0, 1540.5], [28.0, 1572.0], [29.0, 1056.0], [31.0, 1299.5], [33.0, 1042.0], [35.0, 1050.0], [34.0, 1524.0], [39.0, 1493.0], [38.0, 1520.0], [41.0, 1551.0], [40.0, 1011.0], [43.0, 1291.0], [45.0, 1546.0], [44.0, 1265.0], [47.0, 1263.0], [49.0, 1550.0], [48.0, 1528.0], [51.0, 1542.0], [50.0, 1527.0], [53.0, 1491.0], [52.0, 1536.0], [55.0, 1557.0], [54.0, 1549.0], [56.0, 1551.0], [58.0, 1279.5], [60.0, 1261.0], [62.0, 1510.5], [67.0, 985.0], [66.0, 1279.5], [65.0, 989.0], [64.0, 1013.0], [71.0, 1463.0], [70.0, 980.0], [69.0, 993.0], [68.0, 1021.0], [75.0, 1526.0], [74.0, 1535.0], [73.0, 1508.5], [79.0, 1019.0], [78.0, 1523.0], [77.0, 1502.0], [76.0, 1479.0], [83.0, 962.0], [82.0, 1487.5], [81.0, 1452.0], [80.0, 1480.0], [87.0, 1447.0], [86.0, 1001.0], [85.0, 1459.0], [84.0, 1461.0], [91.0, 960.0], [90.0, 1480.0], [89.0, 1515.0], [88.0, 1483.0], [95.0, 1445.0], [94.0, 987.0], [93.0, 1460.0], [92.0, 957.0], [99.0, 1498.0], [98.0, 973.0], [97.0, 953.0], [96.0, 1438.0], [103.0, 938.0], [102.0, 1446.0], [101.0, 983.0], [100.0, 970.0], [107.0, 958.0], [106.0, 946.0], [105.0, 946.0], [104.0, 981.0], [111.0, 1481.0], [110.0, 939.0], [109.0, 933.0], [108.0, 1483.0], [115.0, 1395.0], [113.0, 949.0], [112.0, 937.0], [119.0, 1405.0], [118.0, 910.0], [117.0, 1408.5], [116.0, 1426.0], [123.0, 815.0], [122.0, 822.0], [121.0, 1417.0], [120.0, 910.0], [126.0, 796.0], [125.0, 1329.0], [124.0, 808.0], [135.0, 1247.0], [134.0, 1244.0], [133.0, 762.0], [132.0, 1268.0], [131.0, 1273.0], [130.0, 1252.0], [129.0, 1024.0], [128.0, 779.0], [143.0, 1142.0], [142.0, 1192.0], [141.0, 684.0], [140.0, 1232.0], [139.0, 736.0], [138.0, 1234.0], [137.0, 1192.0], [136.0, 1188.0], [151.0, 1142.0], [150.0, 1132.0], [149.0, 1123.0], [148.0, 1177.0], [147.0, 1118.0], [146.0, 1120.0], [145.0, 1194.0], [144.0, 1194.0], [159.0, 1140.0], [158.0, 1135.0], [157.0, 1113.0], [156.0, 1142.0], [155.0, 1109.0], [154.0, 1133.0], [152.0, 1127.0], [167.0, 1135.0], [166.0, 1107.0], [165.0, 1100.0], [164.0, 1094.0], [163.0, 1097.0], [162.0, 1158.0], [161.0, 1145.0], [160.0, 1161.0], [175.0, 1103.0], [174.0, 1070.0], [173.0, 1082.0], [172.0, 1149.0], [171.0, 1102.0], [170.0, 1147.0], [169.0, 1148.0], [168.0, 1105.0], [183.0, 1025.0], [182.0, 1084.0], [181.0, 1092.0], [180.0, 1095.0], [179.0, 1090.0], [178.0, 1092.0], [177.0, 1104.0], [176.0, 1100.0], [191.0, 1061.0], [190.0, 1057.0], [189.0, 1016.0], [188.0, 1074.0], [187.0, 1061.0], [186.0, 1065.0], [185.0, 1059.0], [184.0, 1036.0], [199.0, 1017.0], [198.0, 1046.0], [197.0, 1049.0], [196.0, 551.0], [195.0, 1047.5], [193.0, 1069.0], [192.0, 1058.0], [207.0, 860.0], [206.0, 855.0], [205.0, 397.0], [204.0, 381.0], [203.0, 898.0], [202.0, 906.0], [201.0, 1013.0], [200.0, 1011.0], [215.0, 559.0], [213.0, 345.0], [212.0, 852.0], [211.0, 870.0], [210.0, 868.0], [209.0, 880.0], [208.0, 881.0], [223.0, 553.0], [221.0, 581.0], [220.0, 586.0], [219.0, 358.0], [218.0, 550.0], [217.0, 824.0], [216.0, 811.0], [230.0, 560.0], [229.0, 533.0], [228.0, 577.0], [226.0, 548.0], [225.0, 558.0], [239.0, 540.0], [238.0, 513.0], [237.0, 543.0], [236.0, 528.0], [235.0, 544.0], [233.0, 535.0], [232.0, 554.0], [247.0, 505.0], [246.0, 530.5], [245.0, 512.5], [242.0, 509.0], [241.0, 505.0], [240.0, 524.0], [255.0, 508.0], [254.0, 498.0], [253.0, 506.0], [252.0, 528.0], [251.0, 537.0], [250.0, 526.0], [249.0, 528.0], [248.0, 517.0], [270.0, 503.0], [271.0, 481.0], [269.0, 496.0], [268.0, 512.0], [266.0, 483.0], [265.0, 489.0], [264.0, 514.0], [263.0, 493.0], [257.0, 514.0], [256.0, 505.0], [259.0, 520.0], [258.0, 505.0], [262.0, 513.0], [260.0, 509.0], [285.0, 474.0], [287.0, 477.5], [284.0, 458.0], [275.0, 491.0], [274.0, 484.0], [273.0, 508.0], [272.0, 494.0], [283.0, 466.0], [282.0, 483.0], [281.0, 496.0], [280.0, 461.0], [279.0, 470.0], [278.0, 502.0], [277.0, 472.5], [276.0, 507.0], [301.0, 566.0], [303.0, 583.0], [300.0, 546.0], [291.0, 595.0], [290.0, 456.0], [289.0, 450.0], [288.0, 451.0], [299.0, 566.5], [298.0, 585.0], [296.0, 549.0], [295.0, 588.0], [293.0, 589.0], [292.0, 579.0], [318.0, 567.0], [319.0, 519.0], [317.0, 566.0], [316.0, 563.0], [315.0, 551.0], [314.0, 567.0], [313.0, 577.0], [311.0, 564.0], [307.0, 538.0], [306.0, 569.0], [305.0, 569.0], [304.0, 568.0], [310.0, 565.0], [334.0, 535.0], [335.0, 517.0], [333.0, 524.0], [332.0, 516.0], [331.0, 543.0], [330.0, 511.0], [329.0, 510.0], [328.0, 529.5], [327.0, 534.0], [321.0, 554.0], [323.0, 542.0], [322.0, 546.5], [325.0, 540.0], [324.0, 544.0], [350.0, 348.0], [351.0, 348.0], [349.0, 350.0], [348.0, 379.0], [347.0, 385.0], [346.0, 458.0], [345.0, 479.0], [344.0, 478.0], [343.0, 469.0], [337.0, 498.0], [336.0, 498.0], [339.0, 482.0], [338.0, 499.0], [342.0, 476.0], [341.0, 486.0], [340.0, 479.0], [366.0, 304.0], [367.0, 279.0], [365.0, 279.0], [364.0, 281.0], [363.0, 292.0], [362.0, 297.0], [361.0, 293.0], [360.0, 297.0], [359.0, 306.0], [353.0, 340.0], [352.0, 328.0], [355.0, 313.0], [354.0, 326.0], [358.0, 283.0], [357.0, 322.0], [356.0, 293.0], [371.0, 619.0], [383.0, 709.0], [381.0, 681.0], [379.0, 698.5], [377.0, 599.0], [376.0, 633.0], [375.0, 614.0], [373.0, 626.0], [372.0, 702.0], [370.0, 34.0], [369.0, 39.0], [368.0, 51.0], [396.0, 602.0], [399.0, 613.0], [398.0, 676.0], [397.0, 589.0], [391.0, 615.0], [385.0, 705.0], [390.0, 673.0], [389.0, 682.0], [387.0, 597.0], [386.0, 612.0], [414.0, 638.0], [415.0, 629.0], [413.0, 662.0], [412.0, 642.0], [411.0, 602.5], [410.0, 661.0], [409.0, 654.0], [408.0, 674.5], [406.0, 643.5], [403.0, 585.0], [402.0, 663.0], [401.0, 670.0], [400.0, 589.5], [404.0, 607.0], [430.0, 539.0], [431.0, 515.0], [429.0, 518.0], [428.0, 523.0], [427.0, 521.0], [426.0, 592.0], [424.0, 550.0], [423.0, 626.0], [416.0, 570.0], [419.0, 608.5], [417.0, 658.0], [422.0, 612.5], [420.0, 633.0], [446.0, 556.0], [447.0, 562.0], [445.0, 462.0], [444.0, 572.0], [443.0, 591.0], [442.0, 581.0], [441.0, 494.0], [440.0, 489.0], [439.0, 550.5], [433.0, 580.0], [435.0, 518.0], [434.0, 627.0], [437.0, 495.0], [436.0, 512.3333333333334], [451.0, 529.0], [462.0, 610.0], [463.0, 591.0], [461.0, 613.5], [458.0, 636.0], [457.0, 605.0], [454.0, 618.0], [453.0, 463.0], [452.0, 468.0], [450.0, 522.0], [449.0, 478.0], [448.0, 544.0], [478.0, 583.0], [479.0, 579.0], [477.0, 611.0], [476.0, 610.0], [475.0, 595.0], [473.0, 556.0], [472.0, 612.0], [471.0, 626.0], [465.0, 624.0], [467.0, 590.0], [466.0, 616.0], [470.0, 611.0], [469.0, 618.0], [494.0, 562.5], [495.0, 574.0], [493.0, 583.0], [492.0, 568.0], [491.0, 562.0], [490.0, 527.0], [489.0, 595.0], [488.0, 576.0], [487.0, 573.0], [483.0, 564.0], [481.0, 587.5], [486.0, 569.0], [485.0, 581.0], [484.0, 592.5], [510.0, 522.0], [511.0, 514.0], [509.0, 500.0], [508.0, 507.0], [507.0, 527.5], [505.0, 518.0], [504.0, 523.0], [503.0, 534.0], [497.0, 548.0], [496.0, 541.0], [499.0, 542.0], [498.0, 528.0], [502.0, 528.0], [501.0, 555.0], [500.0, 551.0], [541.0, 734.5], [543.0, 761.0], [540.0, 767.0], [536.0, 751.0], [530.0, 793.0], [529.0, 243.5], [528.0, 286.0], [527.0, 321.0], [512.0, 499.0], [514.0, 437.0], [513.0, 485.0], [516.0, 409.0], [515.0, 429.0], [526.0, 312.0], [525.0, 309.0], [524.0, 309.0], [523.0, 312.0], [522.0, 343.0], [521.0, 335.0], [520.0, 333.0], [570.0, 674.0], [574.0, 731.0], [575.0, 730.0], [561.0, 792.0], [560.0, 693.0], [563.0, 764.0], [562.0, 751.0], [565.0, 760.0], [564.0, 734.0], [573.0, 728.0], [572.0, 703.0], [571.0, 699.0], [569.0, 699.5], [551.0, 744.5], [549.0, 737.5], [548.0, 774.0], [547.0, 716.0], [545.0, 731.0], [559.0, 706.0], [558.0, 737.5], [557.0, 761.0], [556.0, 758.0], [555.0, 735.0], [554.0, 729.0], [553.0, 783.0], [552.0, 734.0], [567.0, 729.5], [566.0, 753.0], [602.0, 646.0], [606.0, 676.0], [607.0, 610.0], [593.0, 644.0], [592.0, 692.0], [595.0, 667.0], [594.0, 670.5], [597.0, 688.0], [596.0, 634.0], [605.0, 607.0], [604.0, 650.0], [603.0, 607.0], [601.0, 661.5], [583.0, 710.0], [582.0, 662.0], [581.0, 691.0], [580.0, 672.0], [579.0, 712.5], [578.0, 722.0], [577.0, 674.0], [576.0, 703.0], [591.0, 647.0], [590.0, 703.0], [589.0, 686.0], [588.0, 677.0], [586.0, 662.0], [585.0, 676.0], [584.0, 650.0], [599.0, 638.0], [598.0, 666.0], [615.0, 312.0], [635.0, 1224.0], [639.0, 1243.0], [637.0, 1512.0], [636.0, 1141.0], [634.0, 1790.0], [633.0, 1808.0], [632.0, 1630.5], [614.0, 400.0], [612.0, 430.0], [611.0, 409.0], [610.0, 423.0], [609.0, 642.0], [608.0, 600.0], [624.0, 1624.0], [621.0, 357.0], [620.0, 359.0], [619.0, 368.0], [617.0, 381.0], [616.0, 294.0], [669.0, 1593.0], [670.0, 1806.0], [656.0, 1693.5], [658.0, 1787.0], [657.0, 1540.0], [668.0, 1596.0], [667.0, 1516.5], [665.0, 1865.0], [664.0, 1888.0], [654.0, 1711.0], [641.0, 1327.5], [647.0, 1569.5], [642.0, 1221.0], [653.0, 1773.0], [652.0, 1293.0], [650.0, 1123.0], [649.0, 1850.0], [663.0, 1778.0], [662.0, 1829.0], [661.0, 1559.5], [659.0, 1255.0], [696.0, 1168.0], [701.0, 1353.5], [703.0, 1466.5], [688.0, 1782.0], [690.0, 1558.0], [689.0, 1199.0], [699.0, 1255.0], [698.0, 1661.0], [697.0, 1618.5], [687.0, 1783.0], [673.0, 1302.0], [676.0, 1844.5], [674.0, 1780.0], [679.0, 1651.5], [678.0, 1772.5], [686.0, 1821.0], [684.0, 1589.6666666666667], [683.0, 1683.0], [682.0, 1801.0], [681.0, 1581.0], [680.0, 1847.0], [695.0, 1783.0], [694.0, 1789.0], [693.0, 1842.0], [692.0, 1202.0], [732.0, 1574.0], [735.0, 1270.0], [721.0, 1242.0], [720.0, 1346.5], [723.0, 1434.0], [722.0, 1750.5], [725.0, 1486.0], [724.0, 1488.0], [734.0, 1309.0], [733.0, 1630.0], [731.0, 1634.0], [730.0, 1677.0], [729.0, 1044.0], [728.0, 1707.0], [717.0, 1317.0], [704.0, 1793.0], [706.0, 1712.0], [705.0, 1518.0], [708.0, 1404.0], [707.0, 1530.0], [711.0, 1656.6666666666667], [709.0, 1755.0], [716.0, 1513.0], [715.0, 1538.0], [713.0, 1478.5], [727.0, 1336.0], [726.0, 1716.5], [761.0, 1614.0], [766.0, 1615.0], [767.0, 1634.0], [752.0, 1626.0], [754.0, 1637.0], [753.0, 1562.0], [757.0, 1064.0], [755.0, 1583.0], [765.0, 1625.0], [764.0, 1294.0], [763.0, 1479.5], [760.0, 1582.0], [743.0, 1411.0], [742.0, 1373.0], [741.0, 1013.0], [740.0, 1430.5], [739.0, 1375.0], [738.0, 1352.0], [736.0, 1395.0], [751.0, 1439.0], [750.0, 1586.0], [749.0, 1584.0], [748.0, 1591.0], [747.0, 934.0], [746.0, 936.0], [745.0, 1603.0], [744.0, 1359.0], [759.0, 1488.0], [758.0, 996.0], [796.0, 1471.0], [799.0, 1480.0], [785.0, 1496.0], [784.0, 1549.0], [787.0, 1498.0], [786.0, 1601.0], [789.0, 1535.0], [788.0, 1523.0], [798.0, 1467.0], [797.0, 1456.0], [795.0, 1461.0], [794.0, 1436.0], [793.0, 1529.0], [792.0, 1510.0], [783.0, 1607.0], [770.0, 1538.0], [769.0, 1556.0], [773.0, 1616.0], [771.0, 1583.0], [775.0, 1596.0], [774.0, 1511.0], [782.0, 1548.0], [781.0, 1570.0], [780.0, 1509.0], [779.0, 1615.0], [778.0, 1516.0], [777.0, 1596.0], [776.0, 1588.0], [791.0, 1469.0], [790.0, 1482.0], [825.0, 1187.0], [829.0, 456.0], [831.0, 475.0], [817.0, 1320.0], [816.0, 1312.0], [819.0, 1156.0], [818.0, 1204.0], [821.0, 1212.0], [820.0, 1131.0], [828.0, 464.0], [827.0, 464.0], [826.0, 464.0], [824.0, 1168.0], [807.0, 1338.0], [806.0, 677.0], [805.0, 1359.0], [804.0, 1386.0], [803.0, 1047.0], [802.0, 837.0], [801.0, 1467.0], [800.0, 1202.0], [815.0, 1369.0], [814.0, 1367.0], [813.0, 1317.0], [812.0, 919.0], [811.0, 1384.0], [810.0, 1338.0], [809.0, 917.0], [808.0, 1308.0], [823.0, 1190.0], [822.0, 1129.0], [860.0, 772.0], [863.0, 814.0], [849.0, 440.0], [848.0, 434.0], [851.0, 415.0], [850.0, 422.0], [853.0, 887.0], [852.0, 409.0], [862.0, 1000.0], [861.0, 407.0], [859.0, 415.0], [858.0, 416.0], [857.0, 833.0], [856.0, 893.0], [847.0, 459.0], [833.0, 460.0], [832.0, 456.0], [837.0, 488.0], [835.0, 458.0], [839.0, 452.0], [838.0, 473.5], [846.0, 444.0], [845.0, 437.5], [844.0, 439.0], [843.0, 452.0], [842.0, 465.0], [841.0, 451.0], [840.0, 485.0], [855.0, 849.0], [854.0, 879.0], [889.0, 868.0], [894.0, 1118.0], [895.0, 1177.0], [881.0, 963.0], [880.0, 966.0], [884.0, 1087.5], [882.0, 898.0], [893.0, 1107.0], [891.0, 1166.0], [890.0, 1134.0], [888.0, 1176.0], [871.0, 945.0], [870.0, 971.0], [869.0, 801.0], [868.0, 801.0], [867.0, 1080.0], [866.0, 812.0], [864.0, 978.0], [879.0, 983.0], [872.0, 1321.0], [886.0, 951.0], [885.0, 956.0], [923.0, 1097.0], [915.0, 1763.5], [925.0, 1435.0], [912.0, 1204.0], [922.0, 1255.0], [921.0, 1102.0], [911.0, 1208.0], [897.0, 1184.0], [896.0, 1265.375], [899.0, 1205.0], [898.0, 999.0], [901.0, 1122.0], [900.0, 1207.0], [903.0, 921.0], [902.0, 1006.0], [910.0, 1217.0], [909.0, 1739.0], [908.0, 1218.0], [907.0, 1218.0], [906.0, 1227.0], [905.0, 1706.0], [904.0, 1218.0], [919.0, 987.0], [918.0, 1149.0], [916.0, 1647.0], [914.0, 998.0], [913.0, 1208.0], [952.0, 1274.0], [958.0, 1373.0], [959.0, 1245.0], [944.0, 1431.0], [946.0, 1284.0], [945.0, 1135.5], [957.0, 1296.0], [956.0, 1304.0], [955.0, 1405.6666666666667], [943.0, 641.0], [929.0, 1049.0], [928.0, 1534.0], [931.0, 992.0], [930.0, 1177.0], [933.0, 1615.0], [932.0, 1320.0], [935.0, 1047.0], [934.0, 1263.0], [942.0, 838.0], [941.0, 1305.0], [940.0, 1254.0], [939.0, 1030.0], [937.0, 1474.0], [950.0, 1415.0], [949.0, 984.0], [948.0, 810.0], [947.0, 905.5], [985.0, 1262.0], [989.0, 1463.0], [990.0, 1278.0], [978.0, 1269.0], [981.0, 1266.0], [980.0, 1264.0], [988.0, 1221.0], [987.0, 1247.0], [986.0, 1188.0], [984.0, 1266.0], [967.0, 1209.0], [966.0, 903.0], [965.0, 1305.0], [964.0, 1417.0], [963.0, 1343.5], [962.0, 1361.0], [961.0, 1440.0], [960.0, 1370.0], [975.0, 1339.0], [974.0, 1308.0], [973.0, 1306.0], [972.0, 1351.0], [971.0, 1308.0], [970.0, 1329.0], [969.0, 1321.0], [968.0, 1246.0], [983.0, 1284.5], [982.0, 1290.0], [1017.0, 618.0], [1022.0, 603.0], [1023.0, 597.0], [1008.0, 709.0], [1011.0, 634.0], [1009.0, 700.0], [1013.0, 639.0], [1012.0, 666.0], [1021.0, 604.0], [1020.0, 557.0], [1019.0, 637.0], [1016.0, 625.0], [999.0, 1236.223529411765], [998.0, 1723.0], [997.0, 1164.0], [996.0, 1124.5], [995.0, 1289.0], [994.0, 1270.3333333333333], [993.0, 1226.0], [992.0, 1155.0], [1007.0, 737.0], [1006.0, 731.0], [1005.0, 724.5], [1004.0, 758.0], [1002.0, 735.0], [1001.0, 730.0], [1000.0, 739.5], [1015.0, 663.0], [1014.0, 666.0], [1056.0, 134.0], [1064.0, 143.5], [1068.0, 5906.0], [1070.0, 5008.0], [1066.0, 138.0], [1062.0, 149.0], [1060.0, 152.0], [1058.0, 5399.0], [1036.0, 341.0], [1034.0, 291.0], [1032.0, 301.0], [1030.0, 419.0], [1024.0, 577.0], [1052.0, 230.0], [1050.0, 314.0], [1048.0, 298.0], [1046.0, 317.0], [1044.0, 319.0], [1042.0, 294.3333333333333], [1039.0, 280.0], [1071.0, 5104.0], [1069.0, 5057.0], [1067.0, 132.0], [1065.0, 145.0], [1061.0, 149.0], [1059.0, 152.0], [1057.0, 7509.0], [1037.0, 283.0], [1035.0, 287.0], [1033.0, 300.0], [1031.0, 330.0], [1029.0, 417.6666666666667], [1027.0, 569.5], [1055.0, 206.0], [1053.0, 244.0], [1051.0, 260.0], [1049.0, 286.0], [1047.0, 315.0], [1045.0, 314.0], [1043.0, 325.0], [1041.0, 336.0], [1.0, 24.999999999999996]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}, {"data": [[16.852939064668924, 60.662067397443565]], "isOverall": false, "label": "Healthy Thinking CN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1071.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 342.0, "minX": 1.6258433E12, "maxY": 6891476.4, "series": [{"data": [[1.62584392E12, 6868385.7], [1.62584409E12, 6882300.0], [1.62584366E12, 1252578.6], [1.62584383E12, 316585.8], [1.62584349E12, 2381276.6], [1.62584418E12, 1137873.6], [1.62584384E12, 1234225.8], [1.62584401E12, 311997.6], [1.62584358E12, 6882300.0], [1.62584375E12, 6308775.0], [1.62584341E12, 6671242.8], [1.62584331E12, 110118.9], [1.62584408E12, 6873123.6], [1.62584382E12, 1137873.6], [1.62584399E12, 2271109.5], [1.62584348E12, 1248005.0], [1.62584365E12, 334938.6], [1.625844E12, 1142438.2], [1.62584417E12, 2275747.2], [1.62584374E12, 6868535.4], [1.62584391E12, 6882025.4], [1.6258434E12, 6726301.2], [1.62584357E12, 6863947.2], [1.6258433E12, 68827.4], [1.62584347E12, 334938.6], [1.62584398E12, 3408958.3], [1.62584415E12, 4551494.4], [1.62584364E12, 1147050.0], [1.62584381E12, 2261982.6], [1.62584339E12, 6822504.7], [1.62584416E12, 3418209.0], [1.6258439E12, 3670538.2], [1.62584407E12, 6758418.6], [1.62584356E12, 6859359.0], [1.62584373E12, 6854770.8], [1.62584346E12, 1142461.8], [1.62584363E12, 2284923.6], [1.62584414E12, 5671015.2], [1.6258438E12, 3418209.0], [1.62584397E12, 4560571.4], [1.62584338E12, 6877561.9], [1.62584355E12, 6891476.4], [1.62584406E12, 5794896.6], [1.62584372E12, 6868535.4], [1.62584389E12, 6634537.2], [1.62584362E12, 3399856.2], [1.62584379E12, 4546906.2], [1.62584345E12, 2284923.6], [1.62584396E12, 5592900.2], [1.62584413E12, 6712536.6], [1.62584354E12, 6854770.8], [1.62584371E12, 6721713.0], [1.62584337E12, 6625216.4], [1.62584388E12, 5799484.8], [1.62584405E12, 4647846.6], [1.62584378E12, 5716897.2], [1.62584395E12, 6707802.2], [1.62584344E12, 3280563.0], [1.62584361E12, 4551494.4], [1.62584335E12, 1151613.1], [1.62584412E12, 6850182.6], [1.6258437E12, 5804073.0], [1.62584387E12, 4657023.0], [1.62584336E12, 2564747.9], [1.62584353E12, 6125247.0], [1.62584404E12, 3353974.2], [1.62584394E12, 6891326.2], [1.62584411E12, 6886888.2], [1.6258436E12, 5698544.4], [1.62584377E12, 6698772.0], [1.62584334E12, 935972.4], [1.62584351E12, 4652434.8], [1.62584386E12, 3519149.4], [1.62584403E12, 2326217.4], [1.62584352E12, 5790308.4], [1.62584369E12, 4657023.0], [1.62584343E12, 4542318.0], [1.6258441E12, 6868535.4], [1.62584376E12, 6886888.2], [1.62584393E12, 6868385.7], [1.6258435E12, 3523737.6], [1.62584367E12, 2385864.0], [1.62584333E12, 1348911.8], [1.62584402E12, 1243402.2], [1.62584419E12, 146822.4], [1.62584368E12, 3514561.2], [1.62584385E12, 2385864.0], [1.62584342E12, 5689392.9], [1.62584359E12, 6712536.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62584392E12, 34131.6], [1.62584409E12, 34200.0], [1.62584366E12, 6224.4], [1.62584383E12, 1573.2], [1.62584349E12, 11833.2], [1.62584418E12, 5654.4], [1.62584384E12, 6133.2], [1.62584401E12, 1550.4], [1.62584358E12, 34200.0], [1.62584375E12, 31350.0], [1.62584341E12, 33151.2], [1.62584331E12, 547.2], [1.62584408E12, 34154.4], [1.62584382E12, 5654.4], [1.62584399E12, 11286.0], [1.62584348E12, 6201.6], [1.62584365E12, 1664.4], [1.625844E12, 5677.2], [1.62584417E12, 11308.8], [1.62584374E12, 34131.6], [1.62584391E12, 34200.0], [1.6258434E12, 33424.8], [1.62584357E12, 34108.8], [1.6258433E12, 342.0], [1.62584347E12, 1664.4], [1.62584398E12, 16940.4], [1.62584415E12, 22617.6], [1.62584364E12, 5700.0], [1.62584381E12, 11240.4], [1.62584339E12, 33903.6], [1.62584416E12, 16986.0], [1.6258439E12, 18240.0], [1.62584407E12, 33584.4], [1.62584356E12, 34086.0], [1.62584373E12, 34063.2], [1.62584346E12, 5677.2], [1.62584363E12, 11354.4], [1.62584414E12, 28180.8], [1.6258438E12, 16986.0], [1.62584397E12, 22663.2], [1.62584338E12, 34177.2], [1.62584355E12, 34245.6], [1.62584406E12, 28796.4], [1.62584372E12, 34131.6], [1.62584389E12, 32968.8], [1.62584362E12, 16894.8], [1.62584379E12, 22594.8], [1.62584345E12, 11354.4], [1.62584396E12, 27793.2], [1.62584413E12, 33356.4], [1.62584354E12, 34063.2], [1.62584371E12, 33402.0], [1.62584337E12, 32923.2], [1.62584388E12, 28819.2], [1.62584405E12, 23096.4], [1.62584378E12, 28408.8], [1.62584395E12, 33333.6], [1.62584344E12, 16302.0], [1.62584361E12, 22617.6], [1.62584335E12, 5722.8], [1.62584412E12, 34040.4], [1.6258437E12, 28842.0], [1.62584387E12, 23142.0], [1.62584336E12, 12745.2], [1.62584353E12, 30438.0], [1.62584404E12, 16666.8], [1.62584394E12, 34245.6], [1.62584411E12, 34222.8], [1.6258436E12, 28317.6], [1.62584377E12, 33288.0], [1.62584334E12, 4651.2], [1.62584351E12, 23119.2], [1.62584386E12, 17487.6], [1.62584403E12, 11559.6], [1.62584352E12, 28773.6], [1.62584369E12, 23142.0], [1.62584343E12, 22572.0], [1.6258441E12, 34131.6], [1.62584376E12, 34222.8], [1.62584393E12, 34131.6], [1.6258435E12, 17510.4], [1.62584367E12, 11856.0], [1.62584333E12, 6703.2], [1.62584402E12, 6178.8], [1.62584419E12, 729.6], [1.62584368E12, 17464.8], [1.62584385E12, 11856.0], [1.62584342E12, 28272.0], [1.62584359E12, 33356.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584419E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12.126174496644294, "minX": 1.6258433E12, "maxY": 2352.4666666666662, "series": [{"data": [[1.62584392E12, 26.314629258517048], [1.62584409E12, 57.462666666666706], [1.62584366E12, 49.74725274725276], [1.62584383E12, 13.550724637681162], [1.62584349E12, 50.5703275529865], [1.62584418E12, 49.16532258064517], [1.62584384E12, 17.788104089219342], [1.62584401E12, 51.08823529411765], [1.62584358E12, 58.40333333333333], [1.62584375E12, 70.9745454545454], [1.62584341E12, 44.64649243466298], [1.62584331E12, 279.0416666666667], [1.62584408E12, 57.47863818424572], [1.62584382E12, 12.991935483870966], [1.62584399E12, 50.34141414141415], [1.62584348E12, 35.713235294117624], [1.62584365E12, 49.178082191780824], [1.625844E12, 49.11244979919679], [1.62584417E12, 50.14717741935486], [1.62584374E12, 60.72344689378758], [1.62584391E12, 27.406666666666656], [1.6258434E12, 43.9229195088676], [1.62584357E12, 58.76737967914446], [1.6258433E12, 2352.4666666666662], [1.62584347E12, 21.493150684931514], [1.62584398E12, 51.678331090174936], [1.62584415E12, 52.6199596774194], [1.62584364E12, 49.40400000000002], [1.62584381E12, 13.286004056795123], [1.62584339E12, 45.05245460659046], [1.62584416E12, 51.112751677852344], [1.6258439E12, 60.74125000000001], [1.62584407E12, 56.92192803801771], [1.62584356E12, 58.64080267558528], [1.62584373E12, 58.01673360107097], [1.62584346E12, 21.710843373493965], [1.62584363E12, 49.65662650602408], [1.62584414E12, 54.92637540453076], [1.6258438E12, 12.126174496644294], [1.62584397E12, 52.259557344064355], [1.62584338E12, 53.506337558372195], [1.62584355E12, 59.438082556591176], [1.62584406E12, 54.27157561361839], [1.62584372E12, 58.50434201736808], [1.62584389E12, 25.737206085753826], [1.62584362E12, 51.75573549257762], [1.62584379E12, 12.948536831483342], [1.62584345E12, 21.514056224899598], [1.62584396E12, 28.035274815422518], [1.62584413E12, 58.37457279562541], [1.62584354E12, 59.59973226238289], [1.62584371E12, 57.28532423208191], [1.62584337E12, 73.77839335180073], [1.62584388E12, 24.080696202531684], [1.62584405E12, 52.49160908193488], [1.62584378E12, 41.09871589085076], [1.62584395E12, 25.626538987688107], [1.62584344E12, 26.920279720279687], [1.62584361E12, 52.256048387096804], [1.62584335E12, 596.6454183266932], [1.62584412E12, 57.736101808439436], [1.6258437E12, 54.166007905138386], [1.62584387E12, 23.26502463054188], [1.62584336E12, 599.2719141323789], [1.62584353E12, 65.9198501872659], [1.62584404E12, 55.358413132694906], [1.62584394E12, 25.98868175765646], [1.62584411E12, 57.85409726848767], [1.6258436E12, 53.658615136876016], [1.62584377E12, 57.852054794520534], [1.62584334E12, 1488.475490196079], [1.62584351E12, 52.19723865877712], [1.62584386E12, 21.13298565840938], [1.62584403E12, 55.53057199211046], [1.62584352E12, 54.97543581616482], [1.62584369E12, 51.7694581280788], [1.62584343E12, 24.515151515151512], [1.6258441E12, 57.22311289245156], [1.62584376E12, 58.23317788141237], [1.62584393E12, 25.95591182364735], [1.6258435E12, 51.947916666666664], [1.62584367E12, 49.855769230769205], [1.62584333E12, 1056.6700680272115], [1.62584402E12, 49.328413284132886], [1.62584419E12, 49.40624999999999], [1.62584368E12, 52.0718015665797], [1.62584385E12, 21.001923076923077], [1.62584342E12, 29.483064516129023], [1.62584359E12, 58.64935064935069]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584419E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11.906040268456383, "minX": 1.6258433E12, "maxY": 2292.3333333333335, "series": [{"data": [[1.62584392E12, 23.994655978623936], [1.62584409E12, 50.5546666666666], [1.62584366E12, 42.410256410256416], [1.62584383E12, 13.30434782608696], [1.62584349E12, 43.35260115606934], [1.62584418E12, 41.875], [1.62584384E12, 16.684014869888475], [1.62584401E12, 43.57352941176471], [1.62584358E12, 51.537333333333315], [1.62584375E12, 63.38909090909095], [1.62584341E12, 44.19119669876205], [1.62584331E12, 272.9583333333333], [1.62584408E12, 50.5246995994659], [1.62584382E12, 12.74596774193549], [1.62584399E12, 43.11111111111115], [1.62584348E12, 30.94485294117647], [1.62584365E12, 41.93150684931508], [1.625844E12, 41.8835341365462], [1.62584417E12, 42.96572580645162], [1.62584374E12, 54.02471609886438], [1.62584391E12, 25.05933333333333], [1.6258434E12, 43.49863574351981], [1.62584357E12, 51.88903743315495], [1.6258433E12, 2292.3333333333335], [1.62584347E12, 19.589041095890412], [1.62584398E12, 44.37281292059219], [1.62584415E12, 45.335685483871], [1.62584364E12, 42.15200000000001], [1.62584381E12, 13.056795131845854], [1.62584339E12, 44.661062542030976], [1.62584416E12, 43.755704697986545], [1.6258439E12, 54.782499999999935], [1.62584407E12, 49.99253224711477], [1.62584356E12, 51.78595317725754], [1.62584373E12, 51.15930388219535], [1.62584346E12, 19.64257028112451], [1.62584363E12, 42.44979919678716], [1.62584414E12, 47.82847896440131], [1.6258438E12, 11.906040268456383], [1.62584397E12, 45.012072434607646], [1.62584338E12, 53.08872581721143], [1.62584355E12, 52.72303595206399], [1.62584406E12, 47.193190815518555], [1.62584372E12, 51.60721442885773], [1.62584389E12, 23.47026279391425], [1.62584362E12, 44.52091767881243], [1.62584379E12, 12.69424823410696], [1.62584345E12, 19.463855421686763], [1.62584396E12, 25.191140278917164], [1.62584413E12, 51.49145591250858], [1.62584354E12, 52.81392235609102], [1.62584371E12, 50.345392491467535], [1.62584337E12, 73.30055401662037], [1.62584388E12, 21.970727848101244], [1.62584405E12, 45.37216189536029], [1.62584378E12, 36.3756019261637], [1.62584395E12, 23.455540355677154], [1.62584344E12, 24.727272727272716], [1.62584361E12, 45.01612903225807], [1.62584335E12, 587.2629482071712], [1.62584412E12, 50.85800401875419], [1.6258437E12, 47.11699604743087], [1.62584387E12, 21.142857142857135], [1.62584336E12, 598.5670840787124], [1.62584353E12, 57.78127340823966], [1.62584404E12, 47.97537619699039], [1.62584394E12, 23.725033288948094], [1.62584411E12, 51.0286475682877], [1.6258436E12, 46.509661835748815], [1.62584377E12, 50.95958904109582], [1.62584334E12, 1463.8774509803916], [1.62584351E12, 45.00394477317554], [1.62584386E12, 19.031290743155154], [1.62584403E12, 47.29980276134123], [1.62584352E12, 47.956418383518276], [1.62584369E12, 44.590147783251254], [1.62584343E12, 22.35656565656567], [1.6258441E12, 50.295257181028624], [1.62584376E12, 51.35842771485682], [1.62584393E12, 23.666666666666664], [1.6258435E12, 44.75520833333331], [1.62584367E12, 42.64038461538463], [1.62584333E12, 1027.1326530612243], [1.62584402E12, 42.07749077490777], [1.62584419E12, 42.124999999999986], [1.62584368E12, 44.77415143603133], [1.62584385E12, 18.861538461538466], [1.62584342E12, 28.400806451612866], [1.62584359E12, 51.77375256322631]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584419E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.383892617449657, "minX": 1.6258433E12, "maxY": 1375.2303921568619, "series": [{"data": [[1.62584392E12, 20.25250501002006], [1.62584409E12, 39.866666666666674], [1.62584366E12, 33.04029304029304], [1.62584383E12, 11.927536231884057], [1.62584349E12, 33.759152215799645], [1.62584418E12, 32.399193548387096], [1.62584384E12, 14.304832713754646], [1.62584401E12, 34.05882352941177], [1.62584358E12, 40.73599999999989], [1.62584375E12, 51.407272727272755], [1.62584341E12, 40.35350756533695], [1.62584331E12, 256.5833333333333], [1.62584408E12, 39.99599465954603], [1.62584382E12, 11.133064516129032], [1.62584399E12, 33.535353535353536], [1.62584348E12, 24.16176470588235], [1.62584365E12, 32.34246575342467], [1.625844E12, 32.50200803212853], [1.62584417E12, 33.520161290322584], [1.62584374E12, 43.09686038744151], [1.62584391E12, 21.124], [1.6258434E12, 39.17462482946789], [1.62584357E12, 41.019385026738014], [1.6258433E12, 208.6], [1.62584347E12, 16.10958904109589], [1.62584398E12, 34.88963660834455], [1.62584415E12, 35.543346774193616], [1.62584364E12, 32.812], [1.62584381E12, 11.401622718052739], [1.62584339E12, 40.46402151983861], [1.62584416E12, 34.21208053691271], [1.6258439E12, 21.45750000000003], [1.62584407E12, 39.48879837067214], [1.62584356E12, 40.99933110367901], [1.62584373E12, 40.35609103078981], [1.62584346E12, 16.349397590361463], [1.62584363E12, 32.90763052208836], [1.62584414E12, 37.661812297734635], [1.6258438E12, 10.383892617449657], [1.62584397E12, 35.24547283702216], [1.62584338E12, 48.74916611074042], [1.62584355E12, 41.703728362183796], [1.62584406E12, 37.12905779889155], [1.62584372E12, 40.83099532398122], [1.62584389E12, 19.747579529737198], [1.62584362E12, 34.786774628879925], [1.62584379E12, 11.06155398587287], [1.62584345E12, 16.006024096385556], [1.62584396E12, 20.622641509433947], [1.62584413E12, 40.73274094326724], [1.62584354E12, 41.84069611780463], [1.62584371E12, 39.66006825938561], [1.62584337E12, 68.3850415512467], [1.62584388E12, 18.49446202531644], [1.62584405E12, 35.502467917078], [1.62584378E12, 28.911717495987205], [1.62584395E12, 19.670314637482882], [1.62584344E12, 21.058741258741257], [1.62584361E12, 35.28427419354834], [1.62584335E12, 566.362549800797], [1.62584412E12, 40.16811788345611], [1.6258437E12, 36.92015810276682], [1.62584387E12, 17.689655172413822], [1.62584336E12, 587.97137745975], [1.62584353E12, 46.24719101123594], [1.62584404E12, 37.243502051983576], [1.62584394E12, 19.98202396804259], [1.62584411E12, 40.423051299133945], [1.6258436E12, 36.533011272141714], [1.62584377E12, 40.34041095890408], [1.62584334E12, 1375.2303921568619], [1.62584351E12, 35.18441814595662], [1.62584386E12, 15.906127770534544], [1.62584403E12, 37.03944773175542], [1.62584352E12, 37.68462757527737], [1.62584369E12, 34.832512315270925], [1.62584343E12, 18.830303030303007], [1.6258441E12, 39.804943219772895], [1.62584376E12, 40.55696202531654], [1.62584393E12, 19.873079492317967], [1.6258435E12, 35.059895833333336], [1.62584367E12, 33.180769230769194], [1.62584333E12, 988.6734693877548], [1.62584402E12, 32.597785977859765], [1.62584419E12, 32.84375000000001], [1.62584368E12, 35.17101827676238], [1.62584385E12, 15.711538461538451], [1.62584342E12, 24.682258064516116], [1.62584359E12, 40.893369788106675]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584419E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.6258433E12, "maxY": 7509.0, "series": [{"data": [[1.62584392E12, 95.0], [1.62584409E12, 189.0], [1.62584366E12, 100.0], [1.62584383E12, 28.0], [1.62584349E12, 86.0], [1.62584418E12, 75.0], [1.62584384E12, 105.0], [1.62584401E12, 70.0], [1.62584358E12, 125.0], [1.62584375E12, 614.0], [1.62584341E12, 273.0], [1.62584331E12, 341.0], [1.62584408E12, 114.0], [1.62584382E12, 28.0], [1.62584399E12, 105.0], [1.62584348E12, 81.0], [1.62584365E12, 62.0], [1.625844E12, 67.0], [1.62584417E12, 105.0], [1.62584374E12, 230.0], [1.62584391E12, 84.0], [1.6258434E12, 180.0], [1.62584357E12, 105.0], [1.6258433E12, 7509.0], [1.62584347E12, 34.0], [1.62584398E12, 135.0], [1.62584415E12, 146.0], [1.62584364E12, 65.0], [1.62584381E12, 105.0], [1.62584339E12, 141.0], [1.62584416E12, 82.0], [1.6258439E12, 5599.0], [1.62584407E12, 142.0], [1.62584356E12, 166.0], [1.62584373E12, 135.0], [1.62584346E12, 110.0], [1.62584363E12, 88.0], [1.62584414E12, 88.0], [1.6258438E12, 98.0], [1.62584397E12, 93.0], [1.62584338E12, 151.0], [1.62584355E12, 193.0], [1.62584406E12, 145.0], [1.62584372E12, 131.0], [1.62584389E12, 70.0], [1.62584362E12, 150.0], [1.62584379E12, 153.0], [1.62584345E12, 114.0], [1.62584396E12, 124.0], [1.62584413E12, 247.0], [1.62584354E12, 138.0], [1.62584371E12, 147.0], [1.62584337E12, 195.0], [1.62584388E12, 135.0], [1.62584405E12, 101.0], [1.62584378E12, 117.0], [1.62584395E12, 80.0], [1.62584344E12, 107.0], [1.62584361E12, 127.0], [1.62584335E12, 793.0], [1.62584412E12, 127.0], [1.6258437E12, 417.0], [1.62584387E12, 104.0], [1.62584336E12, 1589.0], [1.62584353E12, 808.0], [1.62584404E12, 581.0], [1.62584394E12, 78.0], [1.62584411E12, 112.0], [1.6258436E12, 195.0], [1.62584377E12, 155.0], [1.62584334E12, 1888.0], [1.62584351E12, 105.0], [1.62584386E12, 42.0], [1.62584403E12, 602.0], [1.62584352E12, 221.0], [1.62584369E12, 116.0], [1.62584343E12, 83.0], [1.6258441E12, 106.0], [1.62584376E12, 115.0], [1.62584393E12, 92.0], [1.6258435E12, 99.0], [1.62584367E12, 117.0], [1.62584333E12, 2048.0], [1.62584402E12, 76.0], [1.62584419E12, 58.0], [1.62584368E12, 192.0], [1.62584385E12, 65.0], [1.62584342E12, 125.0], [1.62584359E12, 166.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62584392E12, 15.0], [1.62584409E12, 45.0], [1.62584366E12, 44.0], [1.62584383E12, 9.0], [1.62584349E12, 45.0], [1.62584418E12, 44.0], [1.62584384E12, 10.0], [1.62584401E12, 45.0], [1.62584358E12, 46.0], [1.62584375E12, 46.0], [1.62584341E12, 12.0], [1.62584331E12, 123.0], [1.62584408E12, 45.0], [1.62584382E12, 10.0], [1.62584399E12, 44.0], [1.62584348E12, 14.0], [1.62584365E12, 45.0], [1.625844E12, 44.0], [1.62584417E12, 44.0], [1.62584374E12, 46.0], [1.62584391E12, 15.0], [1.6258434E12, 13.0], [1.62584357E12, 46.0], [1.6258433E12, 132.0], [1.62584347E12, 13.0], [1.62584398E12, 45.0], [1.62584415E12, 44.0], [1.62584364E12, 44.0], [1.62584381E12, 9.0], [1.62584339E12, 13.0], [1.62584416E12, 44.0], [1.6258439E12, 15.0], [1.62584407E12, 46.0], [1.62584356E12, 45.0], [1.62584373E12, 45.0], [1.62584346E12, 13.0], [1.62584363E12, 44.0], [1.62584414E12, 45.0], [1.6258438E12, 9.0], [1.62584397E12, 45.0], [1.62584338E12, 14.0], [1.62584355E12, 46.0], [1.62584406E12, 45.0], [1.62584372E12, 45.0], [1.62584389E12, 15.0], [1.62584362E12, 44.0], [1.62584379E12, 10.0], [1.62584345E12, 13.0], [1.62584396E12, 14.0], [1.62584413E12, 46.0], [1.62584354E12, 46.0], [1.62584371E12, 46.0], [1.62584337E12, 20.0], [1.62584388E12, 14.0], [1.62584405E12, 44.0], [1.62584378E12, 10.0], [1.62584395E12, 14.0], [1.62584344E12, 14.0], [1.62584361E12, 45.0], [1.62584335E12, 214.0], [1.62584412E12, 46.0], [1.6258437E12, 45.0], [1.62584387E12, 14.0], [1.62584336E12, 15.0], [1.62584353E12, 45.0], [1.62584404E12, 44.0], [1.62584394E12, 15.0], [1.62584411E12, 46.0], [1.6258436E12, 45.0], [1.62584377E12, 46.0], [1.62584334E12, 677.0], [1.62584351E12, 45.0], [1.62584386E12, 13.0], [1.62584403E12, 44.0], [1.62584352E12, 45.0], [1.62584369E12, 45.0], [1.62584343E12, 14.0], [1.6258441E12, 46.0], [1.62584376E12, 46.0], [1.62584393E12, 15.0], [1.6258435E12, 44.0], [1.62584367E12, 44.0], [1.62584333E12, 261.0], [1.62584402E12, 44.0], [1.62584419E12, 44.0], [1.62584368E12, 44.0], [1.62584385E12, 13.0], [1.62584342E12, 11.0], [1.62584359E12, 46.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62584392E12, 34.0], [1.62584409E12, 66.0], [1.62584366E12, 53.0], [1.62584383E12, 16.0], [1.62584349E12, 55.0], [1.62584418E12, 53.0], [1.62584384E12, 26.0], [1.62584401E12, 55.0], [1.62584358E12, 67.0], [1.62584375E12, 88.0], [1.62584341E12, 67.0], [1.62584331E12, 334.0], [1.62584408E12, 66.0], [1.62584382E12, 17.0], [1.62584399E12, 54.0], [1.62584348E12, 53.0], [1.62584365E12, 53.60000000000001], [1.625844E12, 52.0], [1.62584417E12, 54.0], [1.62584374E12, 72.0], [1.62584391E12, 35.0], [1.6258434E12, 66.0], [1.62584357E12, 67.0], [1.6258433E12, 6547.200000000001], [1.62584347E12, 28.0], [1.62584398E12, 56.0], [1.62584415E12, 58.0], [1.62584364E12, 53.0], [1.62584381E12, 16.0], [1.62584339E12, 61.0], [1.62584416E12, 55.0], [1.6258439E12, 36.0], [1.62584407E12, 66.0], [1.62584356E12, 67.0], [1.62584373E12, 67.0], [1.62584346E12, 27.0], [1.62584363E12, 53.0], [1.62584414E12, 61.0], [1.6258438E12, 14.0], [1.62584397E12, 57.0], [1.62584338E12, 83.0], [1.62584355E12, 68.0], [1.62584406E12, 61.0], [1.62584372E12, 67.0], [1.62584389E12, 33.0], [1.62584362E12, 56.0], [1.62584379E12, 15.0], [1.62584345E12, 27.0], [1.62584396E12, 51.0], [1.62584413E12, 66.0], [1.62584354E12, 69.0], [1.62584371E12, 65.0], [1.62584337E12, 100.0], [1.62584388E12, 31.0], [1.62584405E12, 58.0], [1.62584378E12, 60.299999999999955], [1.62584395E12, 32.0], [1.62584344E12, 41.0], [1.62584361E12, 57.0], [1.62584335E12, 730.8], [1.62584412E12, 66.0], [1.6258437E12, 59.0], [1.62584387E12, 30.0], [1.62584336E12, 1452.0], [1.62584353E12, 73.0], [1.62584404E12, 58.0], [1.62584394E12, 33.0], [1.62584411E12, 67.0], [1.6258436E12, 60.0], [1.62584377E12, 66.0], [1.62584334E12, 1798.5], [1.62584351E12, 58.0], [1.62584386E12, 27.0], [1.62584403E12, 56.0], [1.62584352E12, 62.0], [1.62584369E12, 56.0], [1.62584343E12, 32.0], [1.6258441E12, 65.0], [1.62584376E12, 68.0], [1.62584393E12, 33.0], [1.6258435E12, 56.0], [1.62584367E12, 54.0], [1.62584333E12, 1462.5], [1.62584402E12, 53.0], [1.62584419E12, 53.7], [1.62584368E12, 56.0], [1.62584385E12, 27.0], [1.62584342E12, 46.0], [1.62584359E12, 68.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62584392E12, 45.0], [1.62584409E12, 80.99000000000001], [1.62584366E12, 96.03999999999996], [1.62584383E12, 28.0], [1.62584349E12, 73.0], [1.62584418E12, 65.07999999999993], [1.62584384E12, 62.100000000000534], [1.62584401E12, 70.0], [1.62584358E12, 80.0], [1.62584375E12, 362.20000000000005], [1.62584341E12, 96.0], [1.62584331E12, 341.0], [1.62584408E12, 87.00999999999999], [1.62584382E12, 22.0], [1.62584399E12, 75.32000000000016], [1.62584348E12, 67.15999999999985], [1.62584365E12, 62.0], [1.625844E12, 62.0], [1.62584417E12, 68.08999999999992], [1.62584374E12, 115.01999999999998], [1.62584391E12, 52.99000000000001], [1.6258434E12, 96.32999999999993], [1.62584357E12, 84.05999999999995], [1.6258433E12, 7509.0], [1.62584347E12, 34.0], [1.62584398E12, 75.55999999999995], [1.62584415E12, 72.06999999999994], [1.62584364E12, 63.49000000000001], [1.62584381E12, 41.48000000000002], [1.62584339E12, 86.11999999999989], [1.62584416E12, 67.53999999999996], [1.6258439E12, 203.87000000000012], [1.62584407E12, 79.25999999999999], [1.62584356E12, 82.03999999999996], [1.62584373E12, 92.0], [1.62584346E12, 65.5], [1.62584363E12, 66.04999999999995], [1.62584414E12, 76.62999999999988], [1.6258438E12, 27.159999999999854], [1.62584397E12, 70.04999999999995], [1.62584338E12, 118.0], [1.62584355E12, 93.94000000000005], [1.62584406E12, 72.0], [1.62584372E12, 89.0], [1.62584389E12, 42.0], [1.62584362E12, 74.16000000000008], [1.62584379E12, 33.0], [1.62584345E12, 37.01999999999998], [1.62584396E12, 63.59999999999991], [1.62584413E12, 89.0], [1.62584354E12, 88.04999999999995], [1.62584371E12, 89.0], [1.62584337E12, 136.54999999999995], [1.62584388E12, 39.34999999999991], [1.62584405E12, 70.86000000000001], [1.62584378E12, 73.0], [1.62584395E12, 43.36999999999989], [1.62584344E12, 73.5200000000001], [1.62584361E12, 73.13999999999987], [1.62584335E12, 787.3199999999999], [1.62584412E12, 82.05999999999995], [1.6258437E12, 79.0], [1.62584387E12, 41.0], [1.62584336E12, 1572.0], [1.62584353E12, 288.5200000000068], [1.62584404E12, 207.3599999999999], [1.62584394E12, 44.0], [1.62584411E12, 88.98000000000002], [1.6258436E12, 74.0], [1.62584377E12, 80.3900000000001], [1.62584334E12, 1877.35], [1.62584351E12, 74.0], [1.62584386E12, 33.95999999999981], [1.62584403E12, 280.76000000000244], [1.62584352E12, 86.36999999999989], [1.62584369E12, 75.84000000000003], [1.62584343E12, 47.0], [1.6258441E12, 79.0], [1.62584376E12, 86.98000000000002], [1.62584393E12, 45.0], [1.6258435E12, 74.30999999999995], [1.62584367E12, 65.15999999999985], [1.62584333E12, 1935.6500000000008], [1.62584402E12, 68.67999999999984], [1.62584419E12, 58.0], [1.62584368E12, 71.66000000000008], [1.62584385E12, 32.0], [1.62584342E12, 71.0], [1.62584359E12, 85.7199999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62584392E12, 37.0], [1.62584409E12, 70.0], [1.62584366E12, 54.0], [1.62584383E12, 17.5], [1.62584349E12, 58.0], [1.62584418E12, 54.54999999999998], [1.62584384E12, 28.0], [1.62584401E12, 60.19999999999999], [1.62584358E12, 70.0], [1.62584375E12, 101.0], [1.62584341E12, 77.25], [1.62584331E12, 339.75], [1.62584408E12, 70.0], [1.62584382E12, 18.549999999999983], [1.62584399E12, 56.0], [1.62584348E12, 54.0], [1.62584365E12, 57.0], [1.625844E12, 53.5], [1.62584417E12, 55.0], [1.62584374E12, 82.09999999999991], [1.62584391E12, 39.0], [1.6258434E12, 73.0], [1.62584357E12, 72.0], [1.6258433E12, 7509.0], [1.62584347E12, 29.299999999999997], [1.62584398E12, 59.0], [1.62584415E12, 61.0], [1.62584364E12, 54.44999999999999], [1.62584381E12, 20.0], [1.62584339E12, 67.0], [1.62584416E12, 57.0], [1.6258439E12, 58.94999999999993], [1.62584407E12, 69.0], [1.62584356E12, 71.0], [1.62584373E12, 71.0], [1.62584346E12, 29.0], [1.62584363E12, 56.0], [1.62584414E12, 65.0], [1.6258438E12, 16.0], [1.62584397E12, 60.0], [1.62584338E12, 96.0], [1.62584355E12, 74.0], [1.62584406E12, 64.0], [1.62584372E12, 73.0], [1.62584389E12, 35.0], [1.62584362E12, 60.0], [1.62584379E12, 19.0], [1.62584345E12, 28.0], [1.62584396E12, 54.0], [1.62584413E12, 72.0], [1.62584354E12, 74.0], [1.62584371E12, 69.0], [1.62584337E12, 112.75], [1.62584388E12, 32.0], [1.62584405E12, 62.0], [1.62584378E12, 64.0], [1.62584395E12, 34.0], [1.62584344E12, 52.0], [1.62584361E12, 61.0], [1.62584335E12, 753.8], [1.62584412E12, 70.0], [1.6258437E12, 63.0], [1.62584387E12, 32.0], [1.62584336E12, 1523.0], [1.62584353E12, 88.20000000000005], [1.62584404E12, 62.0], [1.62584394E12, 35.0], [1.62584411E12, 73.0], [1.6258436E12, 63.0], [1.62584377E12, 70.0], [1.62584334E12, 1831.25], [1.62584351E12, 60.25], [1.62584386E12, 28.0], [1.62584403E12, 61.0], [1.62584352E12, 69.0], [1.62584369E12, 59.19999999999993], [1.62584343E12, 36.0], [1.6258441E12, 70.0], [1.62584376E12, 73.0], [1.62584393E12, 35.0], [1.6258435E12, 60.549999999999955], [1.62584367E12, 55.0], [1.62584333E12, 1657.75], [1.62584402E12, 56.39999999999998], [1.62584419E12, 56.05], [1.62584368E12, 59.0], [1.62584385E12, 28.0], [1.62584342E12, 52.0], [1.62584359E12, 73.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584419E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 1521.5, "series": [{"data": [[2.0, 315.5], [3.0, 39.0], [4.0, 36.5], [5.0, 53.0], [6.0, 25.5], [7.0, 50.0], [8.0, 38.5], [9.0, 36.0], [10.0, 30.0], [11.0, 36.5], [12.0, 35.5], [13.0, 48.0], [14.0, 36.0], [16.0, 48.0], [17.0, 44.5], [18.0, 37.0], [19.0, 49.0], [21.0, 49.0], [22.0, 15.0], [23.0, 44.0], [24.0, 50.0], [26.0, 15.0], [27.0, 48.0], [28.0, 45.5], [29.0, 47.0], [30.0, 44.5], [31.0, 48.0], [32.0, 15.0], [33.0, 52.0], [34.0, 48.0], [35.0, 49.0], [36.0, 44.0], [37.0, 15.5], [39.0, 48.0], [38.0, 49.0], [41.0, 48.0], [40.0, 46.0], [43.0, 49.0], [44.0, 268.5], [45.0, 49.0], [46.0, 28.5], [49.0, 49.0], [48.0, 40.0], [50.0, 43.0], [51.0, 47.0], [53.0, 49.0], [52.0, 49.0], [55.0, 49.0], [54.0, 46.0], [56.0, 51.0], [58.0, 49.0], [59.0, 48.0], [61.0, 48.0], [60.0, 22.0], [62.0, 20.0], [63.0, 47.0], [65.0, 48.0], [64.0, 50.0], [66.0, 43.0], [67.0, 54.0], [68.0, 49.0], [69.0, 35.0], [71.0, 50.0], [70.0, 43.5], [72.0, 31.0], [73.0, 51.0], [75.0, 49.0], [74.0, 48.0], [79.0, 21.0], [78.0, 50.0], [77.0, 52.0], [83.0, 49.0], [81.0, 51.0], [80.0, 50.0], [84.0, 50.0], [85.0, 50.0], [87.0, 44.5], [86.0, 32.5], [90.0, 48.0], [88.0, 49.0], [89.0, 51.0], [91.0, 48.0], [95.0, 23.0], [94.0, 52.0], [93.0, 50.0], [96.0, 50.0], [98.0, 50.0], [97.0, 50.0], [103.0, 44.5], [100.0, 45.0], [101.0, 49.0], [102.0, 52.0], [104.0, 28.0], [105.0, 50.0], [107.0, 51.0], [106.0, 52.0], [110.0, 54.0], [108.0, 49.0], [111.0, 50.0], [109.0, 46.0], [113.0, 16.0], [115.0, 46.0], [112.0, 50.0], [114.0, 50.0], [119.0, 50.0], [117.0, 52.0], [118.0, 40.5], [116.0, 46.0], [123.0, 51.0], [120.0, 47.5], [122.0, 26.0], [121.0, 45.5], [126.0, 47.0], [127.0, 54.0], [125.0, 49.0], [124.0, 54.0], [129.0, 55.0], [132.0, 54.0], [134.0, 41.0], [133.0, 51.0], [128.0, 47.0], [131.0, 29.0], [135.0, 53.0], [130.0, 52.0], [141.0, 56.0], [140.0, 39.0], [143.0, 51.0], [138.0, 50.0], [136.0, 45.0], [139.0, 51.0], [137.0, 53.0], [142.0, 57.0], [150.0, 54.0], [147.0, 56.0], [144.0, 57.0], [151.0, 54.0], [149.0, 54.0], [145.0, 50.0], [148.0, 56.0], [146.0, 54.0], [154.0, 56.0], [157.0, 63.0], [153.0, 56.0], [152.0, 54.0], [156.0, 54.0], [155.0, 56.0], [158.0, 58.0], [204.0, 1521.5], [209.0, 1108.0], [1.0, 50.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 209.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 1509.0, "series": [{"data": [[2.0, 314.0], [3.0, 38.0], [4.0, 32.0], [5.0, 47.0], [6.0, 23.0], [7.0, 42.0], [8.0, 34.5], [9.0, 32.5], [10.0, 27.0], [11.0, 32.0], [12.0, 31.0], [13.0, 41.0], [14.0, 32.0], [16.0, 41.0], [17.0, 38.0], [18.0, 32.5], [19.0, 41.0], [21.0, 41.0], [22.0, 14.0], [23.0, 38.0], [24.0, 43.0], [26.0, 15.0], [27.0, 41.0], [28.0, 39.0], [29.0, 40.0], [30.0, 38.0], [31.0, 41.0], [32.0, 15.0], [33.0, 44.0], [34.0, 41.0], [35.0, 42.0], [36.0, 37.5], [37.0, 15.0], [39.0, 41.0], [38.0, 42.0], [41.0, 40.0], [40.0, 39.0], [43.0, 42.0], [44.0, 266.0], [45.0, 41.0], [46.0, 25.0], [49.0, 42.0], [48.0, 36.5], [50.0, 38.0], [51.0, 40.0], [53.0, 42.0], [52.0, 42.0], [55.0, 42.0], [54.0, 39.0], [56.0, 43.0], [58.0, 42.0], [59.0, 41.0], [61.0, 41.0], [60.0, 20.0], [62.0, 18.0], [63.0, 41.0], [65.0, 41.0], [64.0, 43.0], [66.0, 37.5], [67.0, 46.0], [68.0, 42.0], [69.0, 31.0], [71.0, 43.0], [70.0, 38.0], [72.0, 27.0], [73.0, 43.0], [75.0, 42.0], [74.0, 41.0], [79.0, 19.0], [78.0, 43.0], [77.0, 44.0], [83.0, 42.0], [81.0, 44.0], [80.0, 43.0], [84.0, 42.0], [85.0, 43.0], [87.0, 39.0], [86.0, 29.0], [90.0, 42.0], [88.0, 42.0], [89.0, 44.0], [91.0, 42.0], [95.0, 21.0], [94.0, 44.0], [93.0, 43.0], [96.0, 43.0], [98.0, 43.0], [97.0, 43.0], [103.0, 39.0], [100.0, 38.5], [101.0, 42.0], [102.0, 45.0], [104.0, 25.0], [105.0, 43.0], [107.0, 44.0], [106.0, 45.0], [110.0, 46.0], [108.0, 42.0], [111.0, 43.0], [109.0, 40.0], [113.0, 15.0], [115.0, 40.0], [112.0, 43.0], [114.0, 43.0], [119.0, 43.0], [117.0, 45.5], [118.0, 35.5], [116.0, 39.0], [123.0, 44.0], [120.0, 42.0], [122.0, 24.0], [121.0, 39.0], [126.0, 41.0], [127.0, 46.0], [125.0, 42.0], [124.0, 46.0], [129.0, 49.0], [132.0, 48.0], [134.0, 41.0], [133.0, 44.0], [128.0, 41.0], [131.0, 26.0], [135.0, 46.0], [130.0, 45.0], [141.0, 49.0], [140.0, 38.0], [143.0, 47.0], [138.0, 44.0], [136.0, 43.0], [139.0, 44.0], [137.0, 46.0], [142.0, 49.0], [150.0, 47.0], [147.0, 50.0], [144.0, 51.0], [151.0, 47.0], [149.0, 47.0], [145.0, 47.0], [148.0, 49.0], [146.0, 47.0], [154.0, 50.0], [157.0, 62.0], [153.0, 49.0], [152.0, 47.0], [156.0, 50.0], [155.0, 50.0], [158.0, 51.0], [204.0, 1509.0], [209.0, 1107.0], [1.0, 43.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 209.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.62584329E12, "maxY": 150.0, "series": [{"data": [[1.62584392E12, 149.6], [1.62584409E12, 149.9], [1.62584366E12, 27.4], [1.62584383E12, 7.0], [1.62584349E12, 52.0], [1.62584418E12, 24.7], [1.62584384E12, 26.9], [1.62584401E12, 6.8], [1.62584358E12, 149.8], [1.62584375E12, 137.7], [1.62584341E12, 145.0], [1.62584331E12, 2.4], [1.62584408E12, 150.0], [1.62584382E12, 24.6], [1.62584399E12, 49.4], [1.62584348E12, 27.3], [1.62584365E12, 7.3], [1.625844E12, 24.7], [1.62584417E12, 49.4], [1.62584374E12, 149.7], [1.62584391E12, 150.0], [1.6258434E12, 146.5], [1.62584357E12, 149.7], [1.6258433E12, 0.9], [1.62584347E12, 7.3], [1.62584398E12, 74.2], [1.62584415E12, 98.9], [1.62584364E12, 24.9], [1.62584381E12, 49.4], [1.62584339E12, 149.0], [1.62584416E12, 74.3], [1.6258439E12, 80.0], [1.62584407E12, 147.4], [1.62584356E12, 149.6], [1.62584373E12, 149.3], [1.62584346E12, 25.0], [1.62584363E12, 49.7], [1.62584329E12, 0.6], [1.62584414E12, 123.7], [1.6258438E12, 74.5], [1.62584397E12, 99.2], [1.62584338E12, 149.6], [1.62584355E12, 149.9], [1.62584406E12, 126.3], [1.62584372E12, 149.8], [1.62584389E12, 144.7], [1.62584362E12, 74.0], [1.62584379E12, 99.1], [1.62584345E12, 49.6], [1.62584396E12, 122.2], [1.62584413E12, 146.0], [1.62584354E12, 149.7], [1.62584371E12, 146.8], [1.62584337E12, 144.5], [1.62584388E12, 126.4], [1.62584405E12, 101.4], [1.62584378E12, 123.9], [1.62584395E12, 146.2], [1.62584344E12, 71.6], [1.62584361E12, 99.0], [1.62584335E12, 25.1], [1.62584412E12, 149.5], [1.6258437E12, 126.4], [1.62584387E12, 101.6], [1.62584336E12, 56.6], [1.62584353E12, 133.5], [1.62584404E12, 73.3], [1.62584394E12, 150.0], [1.62584411E12, 150.0], [1.6258436E12, 124.1], [1.62584377E12, 145.9], [1.62584334E12, 20.4], [1.62584351E12, 101.6], [1.62584386E12, 76.7], [1.62584403E12, 50.8], [1.62584352E12, 126.4], [1.62584369E12, 101.7], [1.62584343E12, 98.8], [1.6258441E12, 149.8], [1.62584376E12, 149.9], [1.62584393E12, 149.9], [1.6258435E12, 76.9], [1.62584367E12, 52.1], [1.62584333E12, 29.4], [1.62584402E12, 27.3], [1.62584419E12, 3.2], [1.62584368E12, 76.8], [1.62584385E12, 52.1], [1.62584342E12, 124.0], [1.62584359E12, 146.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584419E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.6258433E12, "maxY": 150.2, "series": [{"data": [[1.62584392E12, 149.7], [1.62584409E12, 150.0], [1.62584366E12, 27.3], [1.62584383E12, 6.9], [1.62584349E12, 51.9], [1.62584418E12, 24.8], [1.62584384E12, 26.9], [1.62584401E12, 6.8], [1.62584358E12, 150.0], [1.62584375E12, 137.5], [1.62584341E12, 145.4], [1.62584331E12, 2.4], [1.62584408E12, 149.8], [1.62584382E12, 24.8], [1.62584399E12, 49.5], [1.62584348E12, 27.2], [1.62584365E12, 7.3], [1.625844E12, 24.9], [1.62584417E12, 49.6], [1.62584374E12, 149.7], [1.62584391E12, 150.0], [1.6258434E12, 146.6], [1.62584357E12, 149.6], [1.6258433E12, 1.5], [1.62584347E12, 7.3], [1.62584398E12, 74.3], [1.62584415E12, 99.2], [1.62584364E12, 25.0], [1.62584381E12, 49.3], [1.62584339E12, 148.7], [1.62584416E12, 74.5], [1.6258439E12, 80.0], [1.62584407E12, 147.3], [1.62584356E12, 149.5], [1.62584373E12, 149.4], [1.62584346E12, 24.9], [1.62584363E12, 49.8], [1.62584414E12, 123.6], [1.6258438E12, 74.5], [1.62584397E12, 99.4], [1.62584338E12, 149.9], [1.62584355E12, 150.2], [1.62584406E12, 126.3], [1.62584372E12, 149.7], [1.62584389E12, 144.6], [1.62584362E12, 74.1], [1.62584379E12, 99.1], [1.62584345E12, 49.8], [1.62584396E12, 121.9], [1.62584413E12, 146.3], [1.62584354E12, 149.4], [1.62584371E12, 146.5], [1.62584337E12, 144.4], [1.62584388E12, 126.4], [1.62584405E12, 101.3], [1.62584378E12, 124.6], [1.62584395E12, 146.2], [1.62584344E12, 71.5], [1.62584361E12, 99.2], [1.62584335E12, 25.1], [1.62584412E12, 149.3], [1.6258437E12, 126.5], [1.62584387E12, 101.5], [1.62584336E12, 55.9], [1.62584353E12, 133.5], [1.62584404E12, 73.1], [1.62584394E12, 150.2], [1.62584411E12, 150.1], [1.6258436E12, 124.2], [1.62584377E12, 146.0], [1.62584334E12, 20.4], [1.62584351E12, 101.4], [1.62584386E12, 76.7], [1.62584403E12, 50.7], [1.62584352E12, 126.2], [1.62584369E12, 101.5], [1.62584343E12, 99.0], [1.6258441E12, 149.7], [1.62584376E12, 150.1], [1.62584393E12, 149.7], [1.6258435E12, 76.8], [1.62584367E12, 52.0], [1.62584333E12, 29.4], [1.62584402E12, 27.1], [1.62584419E12, 3.2], [1.62584368E12, 76.6], [1.62584385E12, 52.0], [1.62584342E12, 124.0], [1.62584359E12, 146.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584419E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.6258433E12, "maxY": 150.2, "series": [{"data": [[1.62584392E12, 149.7], [1.62584409E12, 150.0], [1.62584366E12, 27.3], [1.62584383E12, 6.9], [1.62584349E12, 51.9], [1.62584418E12, 24.8], [1.62584384E12, 26.9], [1.62584401E12, 6.8], [1.62584358E12, 150.0], [1.62584375E12, 137.5], [1.62584341E12, 145.4], [1.62584331E12, 2.4], [1.62584408E12, 149.8], [1.62584382E12, 24.8], [1.62584399E12, 49.5], [1.62584348E12, 27.2], [1.62584365E12, 7.3], [1.625844E12, 24.9], [1.62584417E12, 49.6], [1.62584374E12, 149.7], [1.62584391E12, 150.0], [1.6258434E12, 146.6], [1.62584357E12, 149.6], [1.6258433E12, 1.5], [1.62584347E12, 7.3], [1.62584398E12, 74.3], [1.62584415E12, 99.2], [1.62584364E12, 25.0], [1.62584381E12, 49.3], [1.62584339E12, 148.7], [1.62584416E12, 74.5], [1.6258439E12, 80.0], [1.62584407E12, 147.3], [1.62584356E12, 149.5], [1.62584373E12, 149.4], [1.62584346E12, 24.9], [1.62584363E12, 49.8], [1.62584414E12, 123.6], [1.6258438E12, 74.5], [1.62584397E12, 99.4], [1.62584338E12, 149.9], [1.62584355E12, 150.2], [1.62584406E12, 126.3], [1.62584372E12, 149.7], [1.62584389E12, 144.6], [1.62584362E12, 74.1], [1.62584379E12, 99.1], [1.62584345E12, 49.8], [1.62584396E12, 121.9], [1.62584413E12, 146.3], [1.62584354E12, 149.4], [1.62584371E12, 146.5], [1.62584337E12, 144.4], [1.62584388E12, 126.4], [1.62584405E12, 101.3], [1.62584378E12, 124.6], [1.62584395E12, 146.2], [1.62584344E12, 71.5], [1.62584361E12, 99.2], [1.62584335E12, 25.1], [1.62584412E12, 149.3], [1.6258437E12, 126.5], [1.62584387E12, 101.5], [1.62584336E12, 55.9], [1.62584353E12, 133.5], [1.62584404E12, 73.1], [1.62584394E12, 150.2], [1.62584411E12, 150.1], [1.6258436E12, 124.2], [1.62584377E12, 146.0], [1.62584334E12, 20.4], [1.62584351E12, 101.4], [1.62584386E12, 76.7], [1.62584403E12, 50.7], [1.62584352E12, 126.2], [1.62584369E12, 101.5], [1.62584343E12, 99.0], [1.6258441E12, 149.7], [1.62584376E12, 150.1], [1.62584393E12, 149.7], [1.6258435E12, 76.8], [1.62584367E12, 52.0], [1.62584333E12, 29.4], [1.62584402E12, 27.1], [1.62584419E12, 3.2], [1.62584368E12, 76.6], [1.62584385E12, 52.0], [1.62584342E12, 124.0], [1.62584359E12, 146.3]], "isOverall": false, "label": "Healthy Thinking CN-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584419E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.6258433E12, "maxY": 150.2, "series": [{"data": [[1.62584392E12, 149.7], [1.62584409E12, 150.0], [1.62584366E12, 27.3], [1.62584383E12, 6.9], [1.62584349E12, 51.9], [1.62584418E12, 24.8], [1.62584384E12, 26.9], [1.62584401E12, 6.8], [1.62584358E12, 150.0], [1.62584375E12, 137.5], [1.62584341E12, 145.4], [1.62584331E12, 2.4], [1.62584408E12, 149.8], [1.62584382E12, 24.8], [1.62584399E12, 49.5], [1.62584348E12, 27.2], [1.62584365E12, 7.3], [1.625844E12, 24.9], [1.62584417E12, 49.6], [1.62584374E12, 149.7], [1.62584391E12, 150.0], [1.6258434E12, 146.6], [1.62584357E12, 149.6], [1.6258433E12, 1.5], [1.62584347E12, 7.3], [1.62584398E12, 74.3], [1.62584415E12, 99.2], [1.62584364E12, 25.0], [1.62584381E12, 49.3], [1.62584339E12, 148.7], [1.62584416E12, 74.5], [1.6258439E12, 80.0], [1.62584407E12, 147.3], [1.62584356E12, 149.5], [1.62584373E12, 149.4], [1.62584346E12, 24.9], [1.62584363E12, 49.8], [1.62584414E12, 123.6], [1.6258438E12, 74.5], [1.62584397E12, 99.4], [1.62584338E12, 149.9], [1.62584355E12, 150.2], [1.62584406E12, 126.3], [1.62584372E12, 149.7], [1.62584389E12, 144.6], [1.62584362E12, 74.1], [1.62584379E12, 99.1], [1.62584345E12, 49.8], [1.62584396E12, 121.9], [1.62584413E12, 146.3], [1.62584354E12, 149.4], [1.62584371E12, 146.5], [1.62584337E12, 144.4], [1.62584388E12, 126.4], [1.62584405E12, 101.3], [1.62584378E12, 124.6], [1.62584395E12, 146.2], [1.62584344E12, 71.5], [1.62584361E12, 99.2], [1.62584335E12, 25.1], [1.62584412E12, 149.3], [1.6258437E12, 126.5], [1.62584387E12, 101.5], [1.62584336E12, 55.9], [1.62584353E12, 133.5], [1.62584404E12, 73.1], [1.62584394E12, 150.2], [1.62584411E12, 150.1], [1.6258436E12, 124.2], [1.62584377E12, 146.0], [1.62584334E12, 20.4], [1.62584351E12, 101.4], [1.62584386E12, 76.7], [1.62584403E12, 50.7], [1.62584352E12, 126.2], [1.62584369E12, 101.5], [1.62584343E12, 99.0], [1.6258441E12, 149.7], [1.62584376E12, 150.1], [1.62584393E12, 149.7], [1.6258435E12, 76.8], [1.62584367E12, 52.0], [1.62584333E12, 29.4], [1.62584402E12, 27.1], [1.62584419E12, 3.2], [1.62584368E12, 76.6], [1.62584385E12, 52.0], [1.62584342E12, 124.0], [1.62584359E12, 146.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584419E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

