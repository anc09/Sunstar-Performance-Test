/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 7914.0, "series": [{"data": [[0.0, 14.0], [0.1, 15.0], [0.2, 16.0], [0.3, 16.0], [0.4, 16.0], [0.5, 17.0], [0.6, 17.0], [0.7, 17.0], [0.8, 17.0], [0.9, 17.0], [1.0, 17.0], [1.1, 18.0], [1.2, 18.0], [1.3, 18.0], [1.4, 18.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 21.0], [2.9, 21.0], [3.0, 21.0], [3.1, 21.0], [3.2, 21.0], [3.3, 22.0], [3.4, 22.0], [3.5, 22.0], [3.6, 22.0], [3.7, 22.0], [3.8, 22.0], [3.9, 22.0], [4.0, 22.0], [4.1, 23.0], [4.2, 23.0], [4.3, 23.0], [4.4, 23.0], [4.5, 23.0], [4.6, 23.0], [4.7, 23.0], [4.8, 23.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 24.0], [5.4, 24.0], [5.5, 24.0], [5.6, 24.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 24.0], [6.3, 24.0], [6.4, 24.0], [6.5, 24.0], [6.6, 24.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 25.0], [7.1, 25.0], [7.2, 25.0], [7.3, 25.0], [7.4, 25.0], [7.5, 25.0], [7.6, 25.0], [7.7, 25.0], [7.8, 25.0], [7.9, 26.0], [8.0, 26.0], [8.1, 26.0], [8.2, 26.0], [8.3, 26.0], [8.4, 26.0], [8.5, 26.0], [8.6, 26.0], [8.7, 26.0], [8.8, 27.0], [8.9, 27.0], [9.0, 27.0], [9.1, 27.0], [9.2, 27.0], [9.3, 27.0], [9.4, 27.0], [9.5, 27.0], [9.6, 27.0], [9.7, 27.0], [9.8, 27.0], [9.9, 27.0], [10.0, 28.0], [10.1, 28.0], [10.2, 28.0], [10.3, 28.0], [10.4, 28.0], [10.5, 28.0], [10.6, 28.0], [10.7, 28.0], [10.8, 28.0], [10.9, 28.0], [11.0, 28.0], [11.1, 28.0], [11.2, 29.0], [11.3, 29.0], [11.4, 29.0], [11.5, 29.0], [11.6, 29.0], [11.7, 29.0], [11.8, 29.0], [11.9, 29.0], [12.0, 29.0], [12.1, 29.0], [12.2, 29.0], [12.3, 29.0], [12.4, 30.0], [12.5, 30.0], [12.6, 30.0], [12.7, 30.0], [12.8, 30.0], [12.9, 30.0], [13.0, 30.0], [13.1, 30.0], [13.2, 30.0], [13.3, 30.0], [13.4, 30.0], [13.5, 30.0], [13.6, 30.0], [13.7, 30.0], [13.8, 30.0], [13.9, 30.0], [14.0, 30.0], [14.1, 30.0], [14.2, 31.0], [14.3, 31.0], [14.4, 31.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 31.0], [14.9, 31.0], [15.0, 31.0], [15.1, 31.0], [15.2, 31.0], [15.3, 31.0], [15.4, 31.0], [15.5, 31.0], [15.6, 32.0], [15.7, 32.0], [15.8, 32.0], [15.9, 32.0], [16.0, 32.0], [16.1, 32.0], [16.2, 32.0], [16.3, 32.0], [16.4, 32.0], [16.5, 32.0], [16.6, 32.0], [16.7, 32.0], [16.8, 33.0], [16.9, 33.0], [17.0, 33.0], [17.1, 33.0], [17.2, 33.0], [17.3, 33.0], [17.4, 33.0], [17.5, 33.0], [17.6, 33.0], [17.7, 33.0], [17.8, 33.0], [17.9, 34.0], [18.0, 34.0], [18.1, 34.0], [18.2, 34.0], [18.3, 34.0], [18.4, 34.0], [18.5, 34.0], [18.6, 34.0], [18.7, 34.0], [18.8, 34.0], [18.9, 34.0], [19.0, 35.0], [19.1, 35.0], [19.2, 35.0], [19.3, 35.0], [19.4, 35.0], [19.5, 35.0], [19.6, 35.0], [19.7, 35.0], [19.8, 35.0], [19.9, 35.0], [20.0, 36.0], [20.1, 36.0], [20.2, 36.0], [20.3, 36.0], [20.4, 36.0], [20.5, 36.0], [20.6, 36.0], [20.7, 36.0], [20.8, 36.0], [20.9, 36.0], [21.0, 36.0], [21.1, 36.0], [21.2, 37.0], [21.3, 37.0], [21.4, 37.0], [21.5, 37.0], [21.6, 37.0], [21.7, 37.0], [21.8, 37.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 38.0], [22.5, 38.0], [22.6, 38.0], [22.7, 38.0], [22.8, 38.0], [22.9, 38.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 39.0], [23.5, 39.0], [23.6, 39.0], [23.7, 39.0], [23.8, 39.0], [23.9, 39.0], [24.0, 39.0], [24.1, 39.0], [24.2, 39.0], [24.3, 40.0], [24.4, 40.0], [24.5, 40.0], [24.6, 40.0], [24.7, 40.0], [24.8, 40.0], [24.9, 40.0], [25.0, 40.0], [25.1, 40.0], [25.2, 41.0], [25.3, 41.0], [25.4, 41.0], [25.5, 41.0], [25.6, 41.0], [25.7, 41.0], [25.8, 41.0], [25.9, 41.0], [26.0, 41.0], [26.1, 42.0], [26.2, 42.0], [26.3, 42.0], [26.4, 42.0], [26.5, 42.0], [26.6, 42.0], [26.7, 42.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 44.0], [27.7, 44.0], [27.8, 44.0], [27.9, 44.0], [28.0, 44.0], [28.1, 44.0], [28.2, 45.0], [28.3, 45.0], [28.4, 45.0], [28.5, 45.0], [28.6, 45.0], [28.7, 45.0], [28.8, 46.0], [28.9, 46.0], [29.0, 46.0], [29.1, 46.0], [29.2, 46.0], [29.3, 46.0], [29.4, 47.0], [29.5, 47.0], [29.6, 47.0], [29.7, 47.0], [29.8, 47.0], [29.9, 47.0], [30.0, 48.0], [30.1, 48.0], [30.2, 48.0], [30.3, 48.0], [30.4, 48.0], [30.5, 48.0], [30.6, 48.0], [30.7, 49.0], [30.8, 49.0], [30.9, 49.0], [31.0, 49.0], [31.1, 49.0], [31.2, 50.0], [31.3, 50.0], [31.4, 50.0], [31.5, 50.0], [31.6, 50.0], [31.7, 50.0], [31.8, 50.0], [31.9, 51.0], [32.0, 51.0], [32.1, 51.0], [32.2, 51.0], [32.3, 51.0], [32.4, 52.0], [32.5, 52.0], [32.6, 52.0], [32.7, 52.0], [32.8, 52.0], [32.9, 53.0], [33.0, 53.0], [33.1, 53.0], [33.2, 54.0], [33.3, 54.0], [33.4, 54.0], [33.5, 54.0], [33.6, 54.0], [33.7, 55.0], [33.8, 55.0], [33.9, 55.0], [34.0, 55.0], [34.1, 56.0], [34.2, 56.0], [34.3, 56.0], [34.4, 56.0], [34.5, 56.0], [34.6, 56.0], [34.7, 57.0], [34.8, 57.0], [34.9, 57.0], [35.0, 57.0], [35.1, 57.0], [35.2, 58.0], [35.3, 58.0], [35.4, 58.0], [35.5, 58.0], [35.6, 59.0], [35.7, 59.0], [35.8, 59.0], [35.9, 59.0], [36.0, 60.0], [36.1, 60.0], [36.2, 60.0], [36.3, 60.0], [36.4, 60.0], [36.5, 60.0], [36.6, 61.0], [36.7, 61.0], [36.8, 61.0], [36.9, 61.0], [37.0, 62.0], [37.1, 62.0], [37.2, 62.0], [37.3, 62.0], [37.4, 63.0], [37.5, 63.0], [37.6, 63.0], [37.7, 63.0], [37.8, 63.0], [37.9, 63.0], [38.0, 64.0], [38.1, 64.0], [38.2, 64.0], [38.3, 64.0], [38.4, 64.0], [38.5, 65.0], [38.6, 65.0], [38.7, 65.0], [38.8, 65.0], [38.9, 66.0], [39.0, 66.0], [39.1, 66.0], [39.2, 66.0], [39.3, 67.0], [39.4, 67.0], [39.5, 67.0], [39.6, 67.0], [39.7, 68.0], [39.8, 68.0], [39.9, 68.0], [40.0, 68.0], [40.1, 68.0], [40.2, 69.0], [40.3, 69.0], [40.4, 69.0], [40.5, 69.0], [40.6, 70.0], [40.7, 70.0], [40.8, 70.0], [40.9, 70.0], [41.0, 70.0], [41.1, 71.0], [41.2, 71.0], [41.3, 71.0], [41.4, 72.0], [41.5, 72.0], [41.6, 72.0], [41.7, 72.0], [41.8, 73.0], [41.9, 73.0], [42.0, 73.0], [42.1, 73.0], [42.2, 73.0], [42.3, 74.0], [42.4, 74.0], [42.5, 74.0], [42.6, 74.0], [42.7, 75.0], [42.8, 75.0], [42.9, 75.0], [43.0, 75.0], [43.1, 76.0], [43.2, 76.0], [43.3, 76.0], [43.4, 76.0], [43.5, 76.0], [43.6, 77.0], [43.7, 77.0], [43.8, 77.0], [43.9, 78.0], [44.0, 78.0], [44.1, 78.0], [44.2, 78.0], [44.3, 79.0], [44.4, 79.0], [44.5, 79.0], [44.6, 79.0], [44.7, 80.0], [44.8, 80.0], [44.9, 80.0], [45.0, 81.0], [45.1, 81.0], [45.2, 81.0], [45.3, 81.0], [45.4, 82.0], [45.5, 82.0], [45.6, 82.0], [45.7, 82.0], [45.8, 83.0], [45.9, 83.0], [46.0, 84.0], [46.1, 84.0], [46.2, 84.0], [46.3, 84.0], [46.4, 84.0], [46.5, 85.0], [46.6, 85.0], [46.7, 85.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 87.0], [47.2, 87.0], [47.3, 87.0], [47.4, 88.0], [47.5, 88.0], [47.6, 88.0], [47.7, 89.0], [47.8, 89.0], [47.9, 89.0], [48.0, 90.0], [48.1, 90.0], [48.2, 91.0], [48.3, 91.0], [48.4, 91.0], [48.5, 92.0], [48.6, 93.0], [48.7, 93.0], [48.8, 93.0], [48.9, 94.0], [49.0, 94.0], [49.1, 95.0], [49.2, 95.0], [49.3, 95.0], [49.4, 96.0], [49.5, 96.0], [49.6, 96.0], [49.7, 97.0], [49.8, 97.0], [49.9, 98.0], [50.0, 98.0], [50.1, 99.0], [50.2, 99.0], [50.3, 99.0], [50.4, 100.0], [50.5, 100.0], [50.6, 101.0], [50.7, 101.0], [50.8, 102.0], [50.9, 102.0], [51.0, 103.0], [51.1, 103.0], [51.2, 103.0], [51.3, 104.0], [51.4, 105.0], [51.5, 106.0], [51.6, 107.0], [51.7, 107.0], [51.8, 109.0], [51.9, 109.0], [52.0, 110.0], [52.1, 111.0], [52.2, 111.0], [52.3, 112.0], [52.4, 112.0], [52.5, 114.0], [52.6, 115.0], [52.7, 115.0], [52.8, 116.0], [52.9, 117.0], [53.0, 118.0], [53.1, 119.0], [53.2, 119.0], [53.3, 120.0], [53.4, 121.0], [53.5, 122.0], [53.6, 122.0], [53.7, 123.0], [53.8, 123.0], [53.9, 124.0], [54.0, 125.0], [54.1, 126.0], [54.2, 127.0], [54.3, 128.0], [54.4, 128.0], [54.5, 130.0], [54.6, 131.0], [54.7, 132.0], [54.8, 133.0], [54.9, 134.0], [55.0, 135.0], [55.1, 136.0], [55.2, 137.0], [55.3, 139.0], [55.4, 140.0], [55.5, 141.0], [55.6, 142.0], [55.7, 143.0], [55.8, 144.0], [55.9, 146.0], [56.0, 149.0], [56.1, 149.0], [56.2, 150.0], [56.3, 151.0], [56.4, 152.0], [56.5, 153.0], [56.6, 154.0], [56.7, 156.0], [56.8, 157.0], [56.9, 158.0], [57.0, 159.0], [57.1, 160.0], [57.2, 160.0], [57.3, 162.0], [57.4, 162.0], [57.5, 163.0], [57.6, 164.0], [57.7, 164.0], [57.8, 166.0], [57.9, 167.0], [58.0, 168.0], [58.1, 169.0], [58.2, 170.0], [58.3, 172.0], [58.4, 173.0], [58.5, 174.0], [58.6, 175.0], [58.7, 178.0], [58.8, 179.0], [58.9, 180.0], [59.0, 182.0], [59.1, 183.0], [59.2, 185.0], [59.3, 186.0], [59.4, 187.0], [59.5, 188.0], [59.6, 190.0], [59.7, 191.0], [59.8, 192.0], [59.9, 195.0], [60.0, 196.0], [60.1, 198.0], [60.2, 199.0], [60.3, 201.0], [60.4, 203.0], [60.5, 206.0], [60.6, 207.0], [60.7, 209.0], [60.8, 210.0], [60.9, 211.0], [61.0, 212.0], [61.1, 215.0], [61.2, 217.0], [61.3, 219.0], [61.4, 222.0], [61.5, 224.0], [61.6, 226.0], [61.7, 227.0], [61.8, 229.0], [61.9, 231.0], [62.0, 233.0], [62.1, 235.0], [62.2, 237.0], [62.3, 239.0], [62.4, 241.0], [62.5, 242.0], [62.6, 243.0], [62.7, 245.0], [62.8, 246.0], [62.9, 248.0], [63.0, 249.0], [63.1, 251.0], [63.2, 252.0], [63.3, 254.0], [63.4, 256.0], [63.5, 259.0], [63.6, 262.0], [63.7, 264.0], [63.8, 266.0], [63.9, 268.0], [64.0, 269.0], [64.1, 271.0], [64.2, 273.0], [64.3, 274.0], [64.4, 275.0], [64.5, 277.0], [64.6, 280.0], [64.7, 282.0], [64.8, 283.0], [64.9, 284.0], [65.0, 286.0], [65.1, 288.0], [65.2, 290.0], [65.3, 292.0], [65.4, 294.0], [65.5, 296.0], [65.6, 298.0], [65.7, 300.0], [65.8, 303.0], [65.9, 304.0], [66.0, 307.0], [66.1, 308.0], [66.2, 312.0], [66.3, 314.0], [66.4, 316.0], [66.5, 317.0], [66.6, 320.0], [66.7, 322.0], [66.8, 323.0], [66.9, 325.0], [67.0, 327.0], [67.1, 328.0], [67.2, 329.0], [67.3, 331.0], [67.4, 334.0], [67.5, 335.0], [67.6, 336.0], [67.7, 337.0], [67.8, 338.0], [67.9, 340.0], [68.0, 341.0], [68.1, 342.0], [68.2, 344.0], [68.3, 345.0], [68.4, 346.0], [68.5, 348.0], [68.6, 349.0], [68.7, 350.0], [68.8, 353.0], [68.9, 354.0], [69.0, 355.0], [69.1, 356.0], [69.2, 358.0], [69.3, 359.0], [69.4, 361.0], [69.5, 362.0], [69.6, 363.0], [69.7, 365.0], [69.8, 368.0], [69.9, 370.0], [70.0, 371.0], [70.1, 374.0], [70.2, 375.0], [70.3, 377.0], [70.4, 380.0], [70.5, 383.0], [70.6, 384.0], [70.7, 385.0], [70.8, 387.0], [70.9, 389.0], [71.0, 391.0], [71.1, 393.0], [71.2, 395.0], [71.3, 398.0], [71.4, 401.0], [71.5, 403.0], [71.6, 406.0], [71.7, 409.0], [71.8, 414.0], [71.9, 416.0], [72.0, 419.0], [72.1, 421.0], [72.2, 425.0], [72.3, 430.0], [72.4, 433.0], [72.5, 438.0], [72.6, 444.0], [72.7, 449.0], [72.8, 454.0], [72.9, 462.0], [73.0, 466.0], [73.1, 471.0], [73.2, 479.0], [73.3, 486.0], [73.4, 491.0], [73.5, 494.0], [73.6, 498.0], [73.7, 501.0], [73.8, 506.0], [73.9, 511.0], [74.0, 517.0], [74.1, 522.0], [74.2, 527.0], [74.3, 529.0], [74.4, 532.0], [74.5, 535.0], [74.6, 538.0], [74.7, 542.0], [74.8, 545.0], [74.9, 551.0], [75.0, 553.0], [75.1, 555.0], [75.2, 558.0], [75.3, 561.0], [75.4, 564.0], [75.5, 568.0], [75.6, 574.0], [75.7, 577.0], [75.8, 581.0], [75.9, 584.0], [76.0, 591.0], [76.1, 595.0], [76.2, 603.0], [76.3, 607.0], [76.4, 611.0], [76.5, 615.0], [76.6, 618.0], [76.7, 621.0], [76.8, 628.0], [76.9, 634.0], [77.0, 636.0], [77.1, 642.0], [77.2, 649.0], [77.3, 653.0], [77.4, 658.0], [77.5, 667.0], [77.6, 669.0], [77.7, 673.0], [77.8, 675.0], [77.9, 680.0], [78.0, 686.0], [78.1, 695.0], [78.2, 700.0], [78.3, 704.0], [78.4, 708.0], [78.5, 714.0], [78.6, 721.0], [78.7, 728.0], [78.8, 731.0], [78.9, 736.0], [79.0, 740.0], [79.1, 745.0], [79.2, 748.0], [79.3, 753.0], [79.4, 757.0], [79.5, 766.0], [79.6, 769.0], [79.7, 771.0], [79.8, 774.0], [79.9, 778.0], [80.0, 781.0], [80.1, 786.0], [80.2, 792.0], [80.3, 796.0], [80.4, 801.0], [80.5, 806.0], [80.6, 811.0], [80.7, 815.0], [80.8, 817.0], [80.9, 823.0], [81.0, 826.0], [81.1, 832.0], [81.2, 834.0], [81.3, 836.0], [81.4, 838.0], [81.5, 842.0], [81.6, 844.0], [81.7, 846.0], [81.8, 850.0], [81.9, 854.0], [82.0, 858.0], [82.1, 861.0], [82.2, 865.0], [82.3, 868.0], [82.4, 872.0], [82.5, 877.0], [82.6, 880.0], [82.7, 882.0], [82.8, 888.0], [82.9, 895.0], [83.0, 898.0], [83.1, 903.0], [83.2, 908.0], [83.3, 911.0], [83.4, 914.0], [83.5, 918.0], [83.6, 921.0], [83.7, 925.0], [83.8, 928.0], [83.9, 934.0], [84.0, 938.0], [84.1, 941.0], [84.2, 947.0], [84.3, 952.0], [84.4, 957.0], [84.5, 961.0], [84.6, 964.0], [84.7, 970.0], [84.8, 973.0], [84.9, 977.0], [85.0, 983.0], [85.1, 987.0], [85.2, 990.0], [85.3, 997.0], [85.4, 1003.0], [85.5, 1008.0], [85.6, 1011.0], [85.7, 1015.0], [85.8, 1019.0], [85.9, 1023.0], [86.0, 1025.0], [86.1, 1030.0], [86.2, 1039.0], [86.3, 1043.0], [86.4, 1048.0], [86.5, 1053.0], [86.6, 1056.0], [86.7, 1061.0], [86.8, 1062.0], [86.9, 1067.0], [87.0, 1073.0], [87.1, 1079.0], [87.2, 1088.0], [87.3, 1095.0], [87.4, 1100.0], [87.5, 1103.0], [87.6, 1110.0], [87.7, 1113.0], [87.8, 1119.0], [87.9, 1123.0], [88.0, 1127.0], [88.1, 1132.0], [88.2, 1138.0], [88.3, 1141.0], [88.4, 1143.0], [88.5, 1148.0], [88.6, 1150.0], [88.7, 1152.0], [88.8, 1156.0], [88.9, 1159.0], [89.0, 1161.0], [89.1, 1165.0], [89.2, 1168.0], [89.3, 1170.0], [89.4, 1173.0], [89.5, 1175.0], [89.6, 1178.0], [89.7, 1179.0], [89.8, 1186.0], [89.9, 1190.0], [90.0, 1192.0], [90.1, 1196.0], [90.2, 1201.0], [90.3, 1205.0], [90.4, 1208.0], [90.5, 1212.0], [90.6, 1215.0], [90.7, 1218.0], [90.8, 1221.0], [90.9, 1226.0], [91.0, 1229.0], [91.1, 1232.0], [91.2, 1235.0], [91.3, 1239.0], [91.4, 1244.0], [91.5, 1247.0], [91.6, 1251.0], [91.7, 1254.0], [91.8, 1260.0], [91.9, 1264.0], [92.0, 1268.0], [92.1, 1275.0], [92.2, 1278.0], [92.3, 1284.0], [92.4, 1286.0], [92.5, 1291.0], [92.6, 1296.0], [92.7, 1301.0], [92.8, 1303.0], [92.9, 1310.0], [93.0, 1316.0], [93.1, 1318.0], [93.2, 1326.0], [93.3, 1331.0], [93.4, 1335.0], [93.5, 1341.0], [93.6, 1345.0], [93.7, 1350.0], [93.8, 1354.0], [93.9, 1358.0], [94.0, 1362.0], [94.1, 1365.0], [94.2, 1370.0], [94.3, 1377.0], [94.4, 1382.0], [94.5, 1386.0], [94.6, 1390.0], [94.7, 1394.0], [94.8, 1401.0], [94.9, 1406.0], [95.0, 1408.0], [95.1, 1415.0], [95.2, 1419.0], [95.3, 1424.0], [95.4, 1428.0], [95.5, 1432.0], [95.6, 1434.0], [95.7, 1436.0], [95.8, 1444.0], [95.9, 1449.0], [96.0, 1454.0], [96.1, 1462.0], [96.2, 1469.0], [96.3, 1477.0], [96.4, 1481.0], [96.5, 1486.0], [96.6, 1491.0], [96.7, 1494.0], [96.8, 1499.0], [96.9, 1503.0], [97.0, 1511.0], [97.1, 1519.0], [97.2, 1531.0], [97.3, 1538.0], [97.4, 1549.0], [97.5, 1560.0], [97.6, 1573.0], [97.7, 1579.0], [97.8, 1596.0], [97.9, 1620.0], [98.0, 1630.0], [98.1, 1646.0], [98.2, 1656.0], [98.3, 1666.0], [98.4, 1680.0], [98.5, 1702.0], [98.6, 1727.0], [98.7, 1757.0], [98.8, 1787.0], [98.9, 1816.0], [99.0, 1831.0], [99.1, 1872.0], [99.2, 1964.0], [99.3, 2003.0], [99.4, 2103.0], [99.5, 2252.0], [99.6, 2317.0], [99.7, 2393.0], [99.8, 2492.0], [99.9, 4367.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4183.0, "series": [{"data": [[0.0, 4183.0], [600.0, 166.0], [700.0, 184.0], [800.0, 222.0], [900.0, 192.0], [1000.0, 168.0], [1100.0, 231.0], [1200.0, 208.0], [1300.0, 175.0], [1400.0, 171.0], [1500.0, 83.0], [100.0, 822.0], [1600.0, 54.0], [1700.0, 32.0], [1800.0, 22.0], [1900.0, 14.0], [2000.0, 9.0], [2100.0, 6.0], [2200.0, 8.0], [2300.0, 12.0], [2400.0, 8.0], [2500.0, 5.0], [3100.0, 1.0], [200.0, 455.0], [3500.0, 1.0], [4300.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [300.0, 469.0], [4900.0, 1.0], [5300.0, 2.0], [400.0, 191.0], [7100.0, 1.0], [7500.0, 1.0], [7900.0, 1.0], [500.0, 210.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 262.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6124.0, "series": [{"data": [[0.0, 6124.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1925.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 262.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.324546952224053, "minX": 1.62704997E12, "maxY": 357.5696721311476, "series": [{"data": [[1.62705004E12, 357.5696721311476], [1.62705E12, 6.858773181169763], [1.62705001E12, 20.921712538226334], [1.62705002E12, 110.863608183509], [1.62705003E12, 286.86705202312163], [1.62704997E12, 12.0], [1.62704998E12, 4.324546952224053], [1.62704999E12, 5.016933207902166]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705004E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.0, "minX": 2.0, "maxY": 3581.0, "series": [{"data": [[2.0, 901.1666666666664], [3.0, 61.403755868544614], [4.0, 46.970338983050844], [5.0, 38.23255813953487], [6.0, 42.955200000000005], [7.0, 74.41447368421049], [8.0, 62.773809523809575], [9.0, 94.59090909090914], [10.0, 87.0], [11.0, 70.622641509434], [12.0, 72.76506024096383], [13.0, 76.84117647058822], [14.0, 83.67251461988303], [15.0, 136.0], [16.0, 95.7657142857143], [17.0, 125.0], [18.0, 104.86206896551725], [19.0, 102.0], [20.0, 3581.0], [21.0, 122.59883720930229], [22.0, 127.0], [23.0, 132.0], [24.0, 146.57058823529417], [27.0, 167.5], [28.0, 149.0909090909091], [29.0, 177.6863905325443], [30.0, 187.0], [31.0, 177.0], [32.0, 184.0], [33.0, 182.5], [34.0, 207.47305389221552], [35.0, 227.0], [36.0, 191.22222222222223], [37.0, 221.66666666666666], [38.0, 192.33333333333334], [39.0, 200.5], [40.0, 199.5], [41.0, 218.7142857142857], [42.0, 262.3536585365853], [43.0, 336.0], [44.0, 285.66666666666663], [45.0, 247.25], [46.0, 249.0], [47.0, 250.42857142857144], [48.0, 276.3333333333333], [49.0, 283.0], [50.0, 273.66666666666663], [51.0, 285.24999999999994], [52.0, 296.8], [53.0, 300.0], [54.0, 311.5], [55.0, 300.28571428571433], [56.0, 322.0], [57.0, 310.0], [58.0, 305.1], [59.0, 316.75], [60.0, 325.5], [61.0, 333.16666666666663], [62.0, 343.8], [64.0, 320.56666666666666], [65.0, 363.4250000000001], [66.0, 379.6], [67.0, 346.0], [68.0, 367.75], [69.0, 356.6666666666667], [70.0, 374.77419354838713], [71.0, 374.7272727272728], [72.0, 270.0], [77.0, 153.0], [83.0, 284.0], [85.0, 258.3333333333333], [87.0, 283.0], [88.0, 209.0], [94.0, 349.0], [96.0, 391.0], [97.0, 407.3333333333333], [98.0, 537.3333333333334], [99.0, 553.4044117647057], [100.0, 540.6666666666666], [101.0, 487.65151515151524], [102.0, 388.8888888888889], [104.0, 271.0], [105.0, 260.16666666666663], [106.0, 260.1666666666667], [107.0, 263.85714285714283], [108.0, 277.1111111111111], [109.0, 588.75], [110.0, 309.25], [111.0, 557.5], [112.0, 317.75], [113.0, 300.73333333333335], [114.0, 334.5], [115.0, 351.0], [116.0, 342.05555555555554], [117.0, 368.62499999999994], [118.0, 358.5], [119.0, 372.0], [120.0, 375.1666666666667], [121.0, 375.20000000000005], [122.0, 374.0], [124.0, 328.4285714285714], [125.0, 496.2121212121212], [126.0, 1117.5], [127.0, 1986.0], [128.0, 369.0], [129.0, 355.16666666666663], [132.0, 1082.5], [133.0, 674.1666666666667], [134.0, 654.0], [135.0, 742.6666666666666], [136.0, 1338.7083333333335], [138.0, 429.0], [139.0, 550.1176470588235], [140.0, 703.68], [141.0, 1513.0], [142.0, 872.0], [147.0, 627.9777777777778], [148.0, 744.325], [149.0, 855.53125], [150.0, 1062.0322580645163], [151.0, 876.125], [152.0, 891.7560975609757], [153.0, 826.0749999999997], [154.0, 758.5], [155.0, 680.6666666666667], [179.0, 674.0], [180.0, 549.5714285714286], [181.0, 610.263157894737], [182.0, 787.25], [183.0, 740.3076923076923], [184.0, 1046.402298850574], [185.0, 1291.4], [186.0, 1023.75], [187.0, 1127.7777777777776], [188.0, 1155.4761904761904], [189.0, 905.3928571428571], [211.0, 275.0], [214.0, 418.0], [219.0, 914.3333333333334], [220.0, 836.1999999999998], [221.0, 1169.5757575757575], [222.0, 1277.611111111111], [223.0, 1243.5681818181818], [224.0, 1220.2499999999998], [225.0, 1104.7651006711412], [226.0, 904.75], [227.0, 1289.125], [228.0, 1498.923076923077], [229.0, 1402.0540540540544], [230.0, 1445.0540540540542], [231.0, 1362.0000000000007], [232.0, 1199.7500000000002], [234.0, 1257.0], [235.0, 1040.076923076923], [236.0, 1290.0], [239.0, 21.0], [238.0, 30.0], [237.0, 24.0], [247.0, 62.0], [246.0, 63.0], [245.0, 63.5], [244.0, 65.0], [242.0, 67.0], [241.0, 24.0], [240.0, 22.0], [250.0, 502.0], [249.0, 376.66666666666663], [255.0, 26.0], [254.0, 19.0], [253.0, 24.0], [252.0, 33.0], [251.0, 54.0], [248.0, 57.0], [259.0, 373.0], [263.0, 841.1666666666666], [264.0, 1376.0824742268042], [271.0, 59.0], [270.0, 43.0], [269.0, 43.0], [268.0, 30.0], [262.0, 507.0], [261.0, 472.8], [260.0, 35.0], [258.0, 312.0], [257.0, 20.0], [256.0, 25.0], [265.0, 1550.0344827586205], [266.0, 1315.1785714285713], [267.0, 1139.7906976744184], [286.0, 524.0], [281.0, 842.7777777777777], [279.0, 194.5], [273.0, 96.0], [272.0, 81.0], [275.0, 72.0], [274.0, 73.0], [278.0, 40.0], [277.0, 56.0], [276.0, 97.0], [283.0, 477.5], [287.0, 58.0], [285.0, 54.0], [284.0, 33.0], [282.0, 38.0], [280.0, 39.0], [300.0, 1445.4893617021273], [288.0, 488.0], [291.0, 487.5], [290.0, 50.0], [289.0, 55.0], [294.0, 755.1428571428571], [293.0, 71.0], [292.0, 64.0], [295.0, 525.0], [296.0, 917.2666666666667], [297.0, 537.5], [298.0, 1292.6], [299.0, 1468.6551724137926], [301.0, 1050.1610169491528], [302.0, 833.8571428571428], [303.0, 576.375], [318.0, 98.0], [304.0, 823.75], [306.0, 58.0], [305.0, 82.0], [311.0, 37.0], [310.0, 55.0], [309.0, 52.33333333333333], [319.0, 48.0], [317.0, 80.0], [316.0, 66.0], [315.0, 36.0], [314.0, 65.0], [313.0, 50.0], [312.0, 21.0], [335.0, 207.375], [332.0, 778.9090909090909], [323.0, 77.0], [322.0, 67.0], [321.0, 54.0], [320.0, 28.0], [333.0, 663.0367647058821], [334.0, 376.0], [331.0, 73.0], [330.0, 25.0], [329.0, 95.0], [328.0, 76.0], [327.0, 109.0], [326.0, 93.0], [325.0, 24.0], [324.0, 57.0], [337.0, 266.5], [336.0, 243.33333333333331], [338.0, 239.5], [339.0, 206.0], [340.0, 187.25], [341.0, 36.0], [342.0, 151.39999999999998], [343.0, 81.5], [344.0, 149.54545454545453], [350.0, 61.625], [349.0, 33.0], [348.0, 26.0], [351.0, 23.0], [345.0, 151.4], [347.0, 34.0], [346.0, 18.0], [364.0, 29.0], [353.0, 44.25], [352.0, 37.0], [355.0, 31.0], [354.0, 37.0], [356.0, 47.666666666666664], [357.0, 34.0], [359.0, 41.666666666666664], [360.0, 38.0], [361.0, 49.666666666666664], [363.0, 31.0], [362.0, 30.0], [366.0, 30.0], [367.0, 21.0], [365.0, 24.0], [382.0, 26.5], [373.0, 35.666666666666664], [372.0, 36.0], [375.0, 15.0], [369.0, 24.0], [371.0, 24.0], [370.0, 25.0], [374.0, 22.0], [379.0, 32.5], [383.0, 29.0], [381.0, 29.0], [380.0, 21.0], [378.0, 19.0], [377.0, 26.0], [376.0, 16.0], [398.0, 58.5], [391.0, 24.5], [399.0, 39.0], [397.0, 40.0], [387.0, 33.0], [386.0, 34.0], [385.0, 18.0], [384.0, 26.0], [395.0, 34.0], [394.0, 44.0], [393.0, 42.0], [392.0, 37.0], [390.0, 46.0], [389.0, 31.0], [388.0, 21.0], [414.0, 45.0], [403.0, 41.0], [401.0, 18.0], [400.0, 19.0], [407.0, 24.0], [406.0, 61.0], [405.0, 62.0], [404.0, 71.0], [410.0, 37.0], [411.0, 32.0], [412.0, 25.0], [413.0, 39.0], [415.0, 26.0], [409.0, 30.0], [408.0, 21.0], [431.0, 25.0], [422.0, 27.333333333333332], [421.0, 35.0], [420.0, 32.0], [425.0, 35.0], [424.0, 26.0], [430.0, 27.0], [429.0, 27.0], [428.0, 18.0], [423.0, 28.0], [416.0, 21.0], [418.0, 23.0], [417.0, 17.0], [419.0, 16.0], [427.0, 19.0], [426.0, 22.0], [445.0, 53.0], [433.0, 50.0], [432.0, 46.5], [439.0, 41.0], [435.0, 44.0], [434.0, 27.0], [444.0, 54.0], [436.0, 44.0], [437.0, 46.0], [438.0, 45.0], [443.0, 43.5], [442.0, 57.0], [441.0, 58.0], [440.0, 28.0], [447.0, 34.0], [446.0, 37.0], [463.0, 157.0], [449.0, 37.0], [448.0, 176.0], [451.0, 69.0], [450.0, 72.5], [455.0, 74.0], [454.0, 77.0], [453.0, 175.0], [452.0, 175.0], [459.0, 81.33333333333334], [460.0, 98.5], [462.0, 104.0], [461.0, 161.0], [458.0, 66.0], [457.0, 66.0], [456.0, 67.0], [477.0, 36.333333333333336], [464.0, 56.0], [465.0, 155.0], [470.0, 69.5], [469.0, 85.0], [468.0, 89.5], [471.0, 51.0], [479.0, 38.0], [478.0, 39.0], [476.0, 68.0], [466.0, 154.0], [475.0, 74.0], [474.0, 76.0], [473.0, 78.0], [493.0, 29.0], [494.0, 29.0], [492.0, 43.0], [483.0, 37.0], [482.0, 18.0], [481.0, 22.5], [491.0, 42.0], [490.0, 46.0], [489.0, 51.0], [488.0, 30.0], [487.0, 35.0], [486.0, 40.0], [485.0, 28.0], [484.0, 35.0], [510.0, 49.0], [504.0, 58.714285714285715], [507.0, 38.5], [511.0, 49.0], [509.0, 22.0], [508.0, 23.0], [506.0, 33.0], [505.0, 24.0], [503.0, 29.0], [497.0, 29.0], [499.0, 41.0], [498.0, 48.0], [502.0, 33.0], [501.0, 32.0], [500.0, 34.0], [539.0, 48.6], [512.0, 41.2], [514.0, 31.0], [513.0, 35.0], [527.0, 103.0], [526.0, 65.0], [525.0, 70.0], [524.0, 71.0], [523.0, 85.0], [522.0, 87.0], [521.0, 93.0], [520.0, 64.0], [515.0, 50.5], [531.0, 38.0], [530.0, 87.0], [529.0, 94.0], [528.0, 99.0], [532.0, 66.0], [535.0, 56.0], [533.0, 30.0], [538.0, 25.0], [536.0, 51.0], [519.0, 74.0], [518.0, 76.0], [517.0, 78.0], [516.0, 78.0], [543.0, 70.0], [542.0, 75.0], [541.0, 43.0], [540.0, 45.0], [550.0, 40.0], [562.0, 60.0], [564.0, 28.0], [554.0, 36.0], [553.0, 47.0], [552.0, 28.0], [556.0, 36.0], [555.0, 37.0], [559.0, 28.0], [545.0, 60.0], [544.0, 67.0], [547.0, 57.0], [546.0, 59.0], [549.0, 52.0], [548.0, 53.0], [551.0, 38.0], [557.0, 64.0], [566.0, 53.0], [567.0, 45.0], [565.0, 39.0], [563.0, 28.0], [561.0, 45.0], [560.0, 55.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}, {"data": [[97.28035134159516, 373.0980628083271]], "isOverall": false, "label": "Healthy Thinking CN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 567.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 387.6, "minX": 1.62704997E12, "maxY": 7557678.0, "series": [{"data": [[1.62705004E12, 1065938.4], [1.62705E12, 6124777.2], [1.62705001E12, 7142661.0], [1.62705002E12, 7046551.8], [1.62705003E12, 7557678.0], [1.62704997E12, 74275.0], [1.62704998E12, 2651676.9], [1.62704999E12, 4643813.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62705004E12, 5563.2], [1.62705E12, 31965.6], [1.62705001E12, 37278.0], [1.62705002E12, 36776.4], [1.62705003E12, 39444.0], [1.62704997E12, 387.6], [1.62704998E12, 13839.6], [1.62704999E12, 24236.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705004E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 32.27751646284104, "minX": 1.62704997E12, "maxY": 2014.7058823529412, "series": [{"data": [[1.62705004E12, 50.749999999999986], [1.62705E12, 43.29386590584881], [1.62705001E12, 124.49541284403662], [1.62705002E12, 595.3316800991944], [1.62705003E12, 1009.1393063583813], [1.62704997E12, 2014.7058823529412], [1.62704998E12, 81.62273476112026], [1.62704999E12, 32.27751646284104]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705004E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 30.298212605832536, "minX": 1.62704997E12, "maxY": 1923.5882352941176, "series": [{"data": [[1.62705004E12, 48.545081967213086], [1.62705E12, 40.99500713266764], [1.62705001E12, 121.56697247706428], [1.62705002E12, 579.4525728456298], [1.62705003E12, 980.1653179190748], [1.62704997E12, 1923.5882352941176], [1.62704998E12, 78.48929159802306], [1.62704999E12, 30.298212605832536]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705004E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 25.925682031984966, "minX": 1.62704997E12, "maxY": 953.4312138728362, "series": [{"data": [[1.62705004E12, 44.09016393442626], [1.62705E12, 36.3045649072753], [1.62705001E12, 115.84281345565748], [1.62705002E12, 561.8592684438931], [1.62705003E12, 953.4312138728362], [1.62704997E12, 107.17647058823529], [1.62704998E12, 36.62438220757825], [1.62704999E12, 25.925682031984966]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705004E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.62704997E12, "maxY": 7914.0, "series": [{"data": [[1.62705004E12, 176.0], [1.62705E12, 108.0], [1.62705001E12, 349.0], [1.62705002E12, 2509.0], [1.62705003E12, 3196.0], [1.62704997E12, 5334.0], [1.62704998E12, 7914.0], [1.62704999E12, 98.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62705004E12, 15.0], [1.62705E12, 15.0], [1.62705001E12, 39.0], [1.62705002E12, 122.0], [1.62705003E12, 18.0], [1.62704997E12, 81.0], [1.62704998E12, 16.0], [1.62704999E12, 14.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62705004E12, 86.5], [1.62705E12, 67.0], [1.62705001E12, 200.4000000000001], [1.62705002E12, 1014.0], [1.62705003E12, 1530.0], [1.62704997E12, 5314.0], [1.62704998E12, 69.0], [1.62704999E12, 48.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62705004E12, 175.0], [1.62705E12, 87.0], [1.62705001E12, 275.6399999999999], [1.62705002E12, 2363.0199999999995], [1.62705003E12, 1888.4600000000019], [1.62704997E12, 5334.0], [1.62704998E12, 106.51999999999975], [1.62704999E12, 72.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62705004E12, 154.0], [1.62705E12, 74.0], [1.62705001E12, 232.0], [1.62705002E12, 1216.3], [1.62705003E12, 1659.8999999999996], [1.62704997E12, 5334.0], [1.62704998E12, 86.60000000000002], [1.62704999E12, 56.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705004E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 4843.0, "series": [{"data": [[3.0, 4843.0], [4.0, 3594.5], [11.0, 113.0], [12.0, 59.5], [28.0, 37.0], [51.0, 57.0], [52.0, 57.5], [54.0, 47.5], [58.0, 54.5], [65.0, 42.0], [67.0, 39.0], [66.0, 31.0], [71.0, 34.0], [75.0, 45.0], [76.0, 31.0], [82.0, 43.5], [86.0, 37.0], [87.0, 33.0], [92.0, 47.5], [96.0, 25.0], [102.0, 26.0], [101.0, 28.0], [107.0, 29.0], [106.0, 1450.0], [114.0, 27.0], [115.0, 277.0], [122.0, 36.0], [127.0, 41.0], [126.0, 30.0], [135.0, 33.0], [128.0, 1060.5], [142.0, 32.0], [136.0, 733.0], [150.0, 43.0], [145.0, 50.0], [147.0, 59.0], [151.0, 356.0], [154.0, 57.0], [159.0, 131.0], [158.0, 184.5], [156.0, 255.5], [162.0, 133.5], [164.0, 87.0], [166.0, 80.0], [165.0, 92.0], [161.0, 212.0], [160.0, 527.0], [168.0, 298.0], [188.0, 669.5], [196.0, 569.0], [202.0, 1222.0], [236.0, 1316.5], [1.0, 30.0], [260.0, 1243.5], [263.0, 858.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 263.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 4647.0, "series": [{"data": [[3.0, 4647.0], [4.0, 3529.0], [11.0, 82.0], [12.0, 57.0], [28.0, 34.5], [51.0, 53.0], [52.0, 55.5], [54.0, 45.0], [58.0, 51.0], [65.0, 39.0], [67.0, 36.0], [66.0, 27.0], [71.0, 31.0], [75.0, 43.0], [76.0, 28.0], [82.0, 41.5], [86.0, 34.0], [87.0, 31.0], [92.0, 44.5], [96.0, 23.0], [102.0, 24.0], [101.0, 26.0], [107.0, 26.0], [106.0, 1437.5], [114.0, 26.0], [115.0, 276.5], [122.0, 34.0], [127.0, 39.0], [126.0, 28.0], [135.0, 31.0], [128.0, 1044.5], [142.0, 30.0], [136.0, 688.0], [150.0, 40.0], [145.0, 47.0], [147.0, 57.0], [151.0, 349.0], [154.0, 54.5], [159.0, 129.0], [158.0, 181.5], [156.0, 247.5], [162.0, 130.0], [164.0, 85.0], [166.0, 78.0], [165.0, 88.0], [161.0, 207.0], [160.0, 522.5], [168.0, 291.0], [188.0, 661.5], [196.0, 554.0], [202.0, 1218.5], [236.0, 1296.5], [1.0, 28.0], [260.0, 1210.0], [263.0, 850.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 263.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62704996E12, "maxY": 175.6, "series": [{"data": [[1.62705004E12, 24.4], [1.62705E12, 141.1], [1.62705001E12, 166.6], [1.62705002E12, 175.6], [1.62705003E12, 154.5], [1.62704996E12, 0.1], [1.62704997E12, 1.9], [1.62704998E12, 60.6], [1.62704999E12, 106.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705004E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.7, "minX": 1.62704997E12, "maxY": 173.0, "series": [{"data": [[1.62705004E12, 24.4], [1.62705E12, 140.2], [1.62705001E12, 163.5], [1.62705002E12, 161.3], [1.62705003E12, 173.0], [1.62704997E12, 1.7], [1.62704998E12, 60.7], [1.62704999E12, 106.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705004E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.7, "minX": 1.62704997E12, "maxY": 173.0, "series": [{"data": [[1.62705004E12, 24.4], [1.62705E12, 140.2], [1.62705001E12, 163.5], [1.62705002E12, 161.3], [1.62705003E12, 173.0], [1.62704997E12, 1.7], [1.62704998E12, 60.7], [1.62704999E12, 106.3]], "isOverall": false, "label": "Healthy Thinking CN-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705004E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.7, "minX": 1.62704997E12, "maxY": 173.0, "series": [{"data": [[1.62705004E12, 24.4], [1.62705E12, 140.2], [1.62705001E12, 163.5], [1.62705002E12, 161.3], [1.62705003E12, 173.0], [1.62704997E12, 1.7], [1.62704998E12, 60.7], [1.62704999E12, 106.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705004E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

