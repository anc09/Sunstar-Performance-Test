/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 56.0, "minX": 0.0, "maxY": 21148.0, "series": [{"data": [[0.0, 56.0], [0.1, 72.0], [0.2, 83.0], [0.3, 95.0], [0.4, 105.0], [0.5, 123.0], [0.6, 128.0], [0.7, 135.0], [0.8, 142.0], [0.9, 144.0], [1.0, 152.0], [1.1, 155.0], [1.2, 161.0], [1.3, 174.0], [1.4, 185.0], [1.5, 198.0], [1.6, 218.0], [1.7, 230.0], [1.8, 267.0], [1.9, 345.0], [2.0, 388.0], [2.1, 420.0], [2.2, 436.0], [2.3, 455.0], [2.4, 469.0], [2.5, 474.0], [2.6, 482.0], [2.7, 490.0], [2.8, 495.0], [2.9, 508.0], [3.0, 511.0], [3.1, 518.0], [3.2, 524.0], [3.3, 532.0], [3.4, 543.0], [3.5, 548.0], [3.6, 555.0], [3.7, 568.0], [3.8, 576.0], [3.9, 582.0], [4.0, 589.0], [4.1, 593.0], [4.2, 596.0], [4.3, 600.0], [4.4, 608.0], [4.5, 614.0], [4.6, 620.0], [4.7, 626.0], [4.8, 636.0], [4.9, 641.0], [5.0, 650.0], [5.1, 659.0], [5.2, 671.0], [5.3, 676.0], [5.4, 685.0], [5.5, 698.0], [5.6, 702.0], [5.7, 709.0], [5.8, 715.0], [5.9, 726.0], [6.0, 729.0], [6.1, 735.0], [6.2, 742.0], [6.3, 750.0], [6.4, 754.0], [6.5, 759.0], [6.6, 766.0], [6.7, 775.0], [6.8, 781.0], [6.9, 786.0], [7.0, 792.0], [7.1, 803.0], [7.2, 814.0], [7.3, 817.0], [7.4, 828.0], [7.5, 837.0], [7.6, 843.0], [7.7, 851.0], [7.8, 853.0], [7.9, 858.0], [8.0, 864.0], [8.1, 872.0], [8.2, 877.0], [8.3, 886.0], [8.4, 888.0], [8.5, 891.0], [8.6, 895.0], [8.7, 901.0], [8.8, 907.0], [8.9, 915.0], [9.0, 920.0], [9.1, 923.0], [9.2, 926.0], [9.3, 935.0], [9.4, 938.0], [9.5, 943.0], [9.6, 949.0], [9.7, 953.0], [9.8, 958.0], [9.9, 960.0], [10.0, 968.0], [10.1, 974.0], [10.2, 978.0], [10.3, 980.0], [10.4, 986.0], [10.5, 991.0], [10.6, 995.0], [10.7, 1000.0], [10.8, 1005.0], [10.9, 1008.0], [11.0, 1018.0], [11.1, 1023.0], [11.2, 1032.0], [11.3, 1038.0], [11.4, 1042.0], [11.5, 1049.0], [11.6, 1056.0], [11.7, 1061.0], [11.8, 1066.0], [11.9, 1072.0], [12.0, 1077.0], [12.1, 1082.0], [12.2, 1088.0], [12.3, 1095.0], [12.4, 1097.0], [12.5, 1101.0], [12.6, 1105.0], [12.7, 1112.0], [12.8, 1117.0], [12.9, 1122.0], [13.0, 1127.0], [13.1, 1129.0], [13.2, 1136.0], [13.3, 1142.0], [13.4, 1148.0], [13.5, 1153.0], [13.6, 1161.0], [13.7, 1168.0], [13.8, 1180.0], [13.9, 1186.0], [14.0, 1190.0], [14.1, 1199.0], [14.2, 1201.0], [14.3, 1204.0], [14.4, 1208.0], [14.5, 1213.0], [14.6, 1220.0], [14.7, 1225.0], [14.8, 1227.0], [14.9, 1235.0], [15.0, 1240.0], [15.1, 1246.0], [15.2, 1248.0], [15.3, 1252.0], [15.4, 1258.0], [15.5, 1260.0], [15.6, 1269.0], [15.7, 1274.0], [15.8, 1279.0], [15.9, 1283.0], [16.0, 1288.0], [16.1, 1295.0], [16.2, 1298.0], [16.3, 1307.0], [16.4, 1312.0], [16.5, 1316.0], [16.6, 1320.0], [16.7, 1326.0], [16.8, 1332.0], [16.9, 1337.0], [17.0, 1343.0], [17.1, 1351.0], [17.2, 1354.0], [17.3, 1363.0], [17.4, 1368.0], [17.5, 1373.0], [17.6, 1380.0], [17.7, 1383.0], [17.8, 1388.0], [17.9, 1398.0], [18.0, 1404.0], [18.1, 1410.0], [18.2, 1414.0], [18.3, 1418.0], [18.4, 1425.0], [18.5, 1428.0], [18.6, 1434.0], [18.7, 1436.0], [18.8, 1439.0], [18.9, 1447.0], [19.0, 1456.0], [19.1, 1460.0], [19.2, 1466.0], [19.3, 1471.0], [19.4, 1473.0], [19.5, 1482.0], [19.6, 1488.0], [19.7, 1493.0], [19.8, 1500.0], [19.9, 1504.0], [20.0, 1510.0], [20.1, 1512.0], [20.2, 1518.0], [20.3, 1523.0], [20.4, 1528.0], [20.5, 1539.0], [20.6, 1547.0], [20.7, 1551.0], [20.8, 1558.0], [20.9, 1563.0], [21.0, 1567.0], [21.1, 1573.0], [21.2, 1581.0], [21.3, 1585.0], [21.4, 1589.0], [21.5, 1595.0], [21.6, 1599.0], [21.7, 1607.0], [21.8, 1612.0], [21.9, 1617.0], [22.0, 1624.0], [22.1, 1628.0], [22.2, 1634.0], [22.3, 1640.0], [22.4, 1645.0], [22.5, 1650.0], [22.6, 1656.0], [22.7, 1665.0], [22.8, 1674.0], [22.9, 1679.0], [23.0, 1687.0], [23.1, 1696.0], [23.2, 1703.0], [23.3, 1706.0], [23.4, 1711.0], [23.5, 1717.0], [23.6, 1722.0], [23.7, 1728.0], [23.8, 1733.0], [23.9, 1737.0], [24.0, 1742.0], [24.1, 1744.0], [24.2, 1746.0], [24.3, 1754.0], [24.4, 1766.0], [24.5, 1772.0], [24.6, 1775.0], [24.7, 1780.0], [24.8, 1784.0], [24.9, 1787.0], [25.0, 1791.0], [25.1, 1797.0], [25.2, 1808.0], [25.3, 1812.0], [25.4, 1817.0], [25.5, 1819.0], [25.6, 1824.0], [25.7, 1836.0], [25.8, 1838.0], [25.9, 1847.0], [26.0, 1851.0], [26.1, 1854.0], [26.2, 1857.0], [26.3, 1866.0], [26.4, 1871.0], [26.5, 1874.0], [26.6, 1878.0], [26.7, 1883.0], [26.8, 1890.0], [26.9, 1895.0], [27.0, 1902.0], [27.1, 1904.0], [27.2, 1907.0], [27.3, 1911.0], [27.4, 1914.0], [27.5, 1917.0], [27.6, 1924.0], [27.7, 1933.0], [27.8, 1939.0], [27.9, 1942.0], [28.0, 1945.0], [28.1, 1952.0], [28.2, 1956.0], [28.3, 1959.0], [28.4, 1963.0], [28.5, 1967.0], [28.6, 1972.0], [28.7, 1977.0], [28.8, 1982.0], [28.9, 1987.0], [29.0, 1990.0], [29.1, 1994.0], [29.2, 1995.0], [29.3, 2000.0], [29.4, 2001.0], [29.5, 2004.0], [29.6, 2007.0], [29.7, 2012.0], [29.8, 2017.0], [29.9, 2021.0], [30.0, 2026.0], [30.1, 2029.0], [30.2, 2033.0], [30.3, 2037.0], [30.4, 2040.0], [30.5, 2043.0], [30.6, 2049.0], [30.7, 2052.0], [30.8, 2058.0], [30.9, 2059.0], [31.0, 2064.0], [31.1, 2066.0], [31.2, 2074.0], [31.3, 2081.0], [31.4, 2085.0], [31.5, 2090.0], [31.6, 2094.0], [31.7, 2096.0], [31.8, 2100.0], [31.9, 2103.0], [32.0, 2104.0], [32.1, 2109.0], [32.2, 2114.0], [32.3, 2119.0], [32.4, 2122.0], [32.5, 2125.0], [32.6, 2129.0], [32.7, 2133.0], [32.8, 2136.0], [32.9, 2139.0], [33.0, 2144.0], [33.1, 2148.0], [33.2, 2151.0], [33.3, 2154.0], [33.4, 2161.0], [33.5, 2165.0], [33.6, 2168.0], [33.7, 2170.0], [33.8, 2173.0], [33.9, 2175.0], [34.0, 2179.0], [34.1, 2185.0], [34.2, 2190.0], [34.3, 2193.0], [34.4, 2197.0], [34.5, 2200.0], [34.6, 2206.0], [34.7, 2208.0], [34.8, 2211.0], [34.9, 2214.0], [35.0, 2220.0], [35.1, 2221.0], [35.2, 2223.0], [35.3, 2225.0], [35.4, 2227.0], [35.5, 2229.0], [35.6, 2234.0], [35.7, 2237.0], [35.8, 2243.0], [35.9, 2249.0], [36.0, 2251.0], [36.1, 2254.0], [36.2, 2257.0], [36.3, 2261.0], [36.4, 2265.0], [36.5, 2268.0], [36.6, 2272.0], [36.7, 2276.0], [36.8, 2278.0], [36.9, 2281.0], [37.0, 2283.0], [37.1, 2289.0], [37.2, 2293.0], [37.3, 2296.0], [37.4, 2301.0], [37.5, 2307.0], [37.6, 2309.0], [37.7, 2313.0], [37.8, 2319.0], [37.9, 2322.0], [38.0, 2327.0], [38.1, 2331.0], [38.2, 2336.0], [38.3, 2338.0], [38.4, 2342.0], [38.5, 2344.0], [38.6, 2346.0], [38.7, 2352.0], [38.8, 2357.0], [38.9, 2360.0], [39.0, 2363.0], [39.1, 2369.0], [39.2, 2372.0], [39.3, 2382.0], [39.4, 2386.0], [39.5, 2388.0], [39.6, 2392.0], [39.7, 2397.0], [39.8, 2407.0], [39.9, 2415.0], [40.0, 2419.0], [40.1, 2422.0], [40.2, 2426.0], [40.3, 2437.0], [40.4, 2443.0], [40.5, 2445.0], [40.6, 2455.0], [40.7, 2461.0], [40.8, 2465.0], [40.9, 2472.0], [41.0, 2479.0], [41.1, 2482.0], [41.2, 2486.0], [41.3, 2493.0], [41.4, 2499.0], [41.5, 2505.0], [41.6, 2509.0], [41.7, 2513.0], [41.8, 2518.0], [41.9, 2522.0], [42.0, 2527.0], [42.1, 2529.0], [42.2, 2532.0], [42.3, 2534.0], [42.4, 2537.0], [42.5, 2540.0], [42.6, 2542.0], [42.7, 2545.0], [42.8, 2548.0], [42.9, 2553.0], [43.0, 2556.0], [43.1, 2559.0], [43.2, 2564.0], [43.3, 2572.0], [43.4, 2578.0], [43.5, 2579.0], [43.6, 2584.0], [43.7, 2588.0], [43.8, 2592.0], [43.9, 2595.0], [44.0, 2596.0], [44.1, 2602.0], [44.2, 2607.0], [44.3, 2610.0], [44.4, 2616.0], [44.5, 2618.0], [44.6, 2623.0], [44.7, 2628.0], [44.8, 2631.0], [44.9, 2633.0], [45.0, 2636.0], [45.1, 2639.0], [45.2, 2644.0], [45.3, 2649.0], [45.4, 2652.0], [45.5, 2653.0], [45.6, 2657.0], [45.7, 2662.0], [45.8, 2665.0], [45.9, 2667.0], [46.0, 2672.0], [46.1, 2674.0], [46.2, 2679.0], [46.3, 2680.0], [46.4, 2685.0], [46.5, 2690.0], [46.6, 2694.0], [46.7, 2698.0], [46.8, 2701.0], [46.9, 2703.0], [47.0, 2708.0], [47.1, 2711.0], [47.2, 2714.0], [47.3, 2716.0], [47.4, 2717.0], [47.5, 2720.0], [47.6, 2725.0], [47.7, 2729.0], [47.8, 2731.0], [47.9, 2737.0], [48.0, 2741.0], [48.1, 2743.0], [48.2, 2745.0], [48.3, 2747.0], [48.4, 2749.0], [48.5, 2752.0], [48.6, 2754.0], [48.7, 2759.0], [48.8, 2761.0], [48.9, 2764.0], [49.0, 2767.0], [49.1, 2768.0], [49.2, 2774.0], [49.3, 2782.0], [49.4, 2783.0], [49.5, 2788.0], [49.6, 2790.0], [49.7, 2794.0], [49.8, 2796.0], [49.9, 2799.0], [50.0, 2801.0], [50.1, 2806.0], [50.2, 2809.0], [50.3, 2815.0], [50.4, 2819.0], [50.5, 2822.0], [50.6, 2826.0], [50.7, 2828.0], [50.8, 2831.0], [50.9, 2837.0], [51.0, 2840.0], [51.1, 2845.0], [51.2, 2849.0], [51.3, 2853.0], [51.4, 2857.0], [51.5, 2860.0], [51.6, 2863.0], [51.7, 2865.0], [51.8, 2867.0], [51.9, 2872.0], [52.0, 2875.0], [52.1, 2880.0], [52.2, 2885.0], [52.3, 2888.0], [52.4, 2891.0], [52.5, 2896.0], [52.6, 2898.0], [52.7, 2902.0], [52.8, 2905.0], [52.9, 2908.0], [53.0, 2910.0], [53.1, 2912.0], [53.2, 2917.0], [53.3, 2922.0], [53.4, 2924.0], [53.5, 2927.0], [53.6, 2929.0], [53.7, 2931.0], [53.8, 2933.0], [53.9, 2935.0], [54.0, 2937.0], [54.1, 2942.0], [54.2, 2946.0], [54.3, 2952.0], [54.4, 2956.0], [54.5, 2959.0], [54.6, 2964.0], [54.7, 2967.0], [54.8, 2972.0], [54.9, 2977.0], [55.0, 2979.0], [55.1, 2982.0], [55.2, 2984.0], [55.3, 2987.0], [55.4, 2990.0], [55.5, 2997.0], [55.6, 3003.0], [55.7, 3008.0], [55.8, 3011.0], [55.9, 3014.0], [56.0, 3017.0], [56.1, 3022.0], [56.2, 3026.0], [56.3, 3029.0], [56.4, 3030.0], [56.5, 3034.0], [56.6, 3036.0], [56.7, 3039.0], [56.8, 3041.0], [56.9, 3046.0], [57.0, 3050.0], [57.1, 3055.0], [57.2, 3056.0], [57.3, 3061.0], [57.4, 3063.0], [57.5, 3066.0], [57.6, 3069.0], [57.7, 3072.0], [57.8, 3078.0], [57.9, 3081.0], [58.0, 3083.0], [58.1, 3087.0], [58.2, 3089.0], [58.3, 3091.0], [58.4, 3094.0], [58.5, 3098.0], [58.6, 3106.0], [58.7, 3113.0], [58.8, 3116.0], [58.9, 3122.0], [59.0, 3124.0], [59.1, 3129.0], [59.2, 3134.0], [59.3, 3138.0], [59.4, 3145.0], [59.5, 3148.0], [59.6, 3151.0], [59.7, 3156.0], [59.8, 3160.0], [59.9, 3163.0], [60.0, 3170.0], [60.1, 3175.0], [60.2, 3182.0], [60.3, 3187.0], [60.4, 3190.0], [60.5, 3195.0], [60.6, 3198.0], [60.7, 3204.0], [60.8, 3207.0], [60.9, 3212.0], [61.0, 3216.0], [61.1, 3223.0], [61.2, 3230.0], [61.3, 3234.0], [61.4, 3237.0], [61.5, 3243.0], [61.6, 3250.0], [61.7, 3252.0], [61.8, 3256.0], [61.9, 3262.0], [62.0, 3268.0], [62.1, 3271.0], [62.2, 3275.0], [62.3, 3278.0], [62.4, 3285.0], [62.5, 3292.0], [62.6, 3295.0], [62.7, 3299.0], [62.8, 3306.0], [62.9, 3312.0], [63.0, 3318.0], [63.1, 3321.0], [63.2, 3332.0], [63.3, 3337.0], [63.4, 3342.0], [63.5, 3348.0], [63.6, 3353.0], [63.7, 3358.0], [63.8, 3362.0], [63.9, 3370.0], [64.0, 3381.0], [64.1, 3385.0], [64.2, 3389.0], [64.3, 3399.0], [64.4, 3404.0], [64.5, 3407.0], [64.6, 3414.0], [64.7, 3419.0], [64.8, 3425.0], [64.9, 3431.0], [65.0, 3442.0], [65.1, 3457.0], [65.2, 3464.0], [65.3, 3479.0], [65.4, 3484.0], [65.5, 3491.0], [65.6, 3497.0], [65.7, 3505.0], [65.8, 3513.0], [65.9, 3521.0], [66.0, 3530.0], [66.1, 3536.0], [66.2, 3542.0], [66.3, 3556.0], [66.4, 3566.0], [66.5, 3571.0], [66.6, 3585.0], [66.7, 3590.0], [66.8, 3597.0], [66.9, 3607.0], [67.0, 3619.0], [67.1, 3630.0], [67.2, 3643.0], [67.3, 3655.0], [67.4, 3666.0], [67.5, 3680.0], [67.6, 3691.0], [67.7, 3703.0], [67.8, 3713.0], [67.9, 3728.0], [68.0, 3743.0], [68.1, 3757.0], [68.2, 3767.0], [68.3, 3779.0], [68.4, 3790.0], [68.5, 3805.0], [68.6, 3823.0], [68.7, 3839.0], [68.8, 3854.0], [68.9, 3873.0], [69.0, 3887.0], [69.1, 3896.0], [69.2, 3906.0], [69.3, 3935.0], [69.4, 3953.0], [69.5, 3964.0], [69.6, 3974.0], [69.7, 3989.0], [69.8, 4005.0], [69.9, 4033.0], [70.0, 4051.0], [70.1, 4078.0], [70.2, 4094.0], [70.3, 4104.0], [70.4, 4130.0], [70.5, 4139.0], [70.6, 4152.0], [70.7, 4206.0], [70.8, 4218.0], [70.9, 4253.0], [71.0, 4290.0], [71.1, 4309.0], [71.2, 4354.0], [71.3, 4375.0], [71.4, 4400.0], [71.5, 4426.0], [71.6, 4448.0], [71.7, 4477.0], [71.8, 4506.0], [71.9, 4532.0], [72.0, 4559.0], [72.1, 4578.0], [72.2, 4593.0], [72.3, 4610.0], [72.4, 4638.0], [72.5, 4654.0], [72.6, 4676.0], [72.7, 4682.0], [72.8, 4696.0], [72.9, 4712.0], [73.0, 4732.0], [73.1, 4756.0], [73.2, 4788.0], [73.3, 4823.0], [73.4, 4850.0], [73.5, 4865.0], [73.6, 4907.0], [73.7, 4938.0], [73.8, 4955.0], [73.9, 4976.0], [74.0, 4998.0], [74.1, 5027.0], [74.2, 5047.0], [74.3, 5070.0], [74.4, 5080.0], [74.5, 5099.0], [74.6, 5112.0], [74.7, 5136.0], [74.8, 5156.0], [74.9, 5190.0], [75.0, 5232.0], [75.1, 5255.0], [75.2, 5276.0], [75.3, 5316.0], [75.4, 5350.0], [75.5, 5379.0], [75.6, 5397.0], [75.7, 5409.0], [75.8, 5424.0], [75.9, 5438.0], [76.0, 5458.0], [76.1, 5468.0], [76.2, 5474.0], [76.3, 5490.0], [76.4, 5512.0], [76.5, 5526.0], [76.6, 5534.0], [76.7, 5545.0], [76.8, 5559.0], [76.9, 5605.0], [77.0, 5621.0], [77.1, 5673.0], [77.2, 5710.0], [77.3, 5727.0], [77.4, 5758.0], [77.5, 5802.0], [77.6, 5844.0], [77.7, 5873.0], [77.8, 5904.0], [77.9, 5925.0], [78.0, 5941.0], [78.1, 5958.0], [78.2, 5985.0], [78.3, 6004.0], [78.4, 6028.0], [78.5, 6043.0], [78.6, 6059.0], [78.7, 6082.0], [78.8, 6099.0], [78.9, 6106.0], [79.0, 6116.0], [79.1, 6128.0], [79.2, 6151.0], [79.3, 6169.0], [79.4, 6185.0], [79.5, 6200.0], [79.6, 6220.0], [79.7, 6240.0], [79.8, 6251.0], [79.9, 6261.0], [80.0, 6289.0], [80.1, 6302.0], [80.2, 6324.0], [80.3, 6337.0], [80.4, 6349.0], [80.5, 6377.0], [80.6, 6408.0], [80.7, 6418.0], [80.8, 6451.0], [80.9, 6477.0], [81.0, 6485.0], [81.1, 6510.0], [81.2, 6540.0], [81.3, 6558.0], [81.4, 6580.0], [81.5, 6597.0], [81.6, 6617.0], [81.7, 6648.0], [81.8, 6657.0], [81.9, 6671.0], [82.0, 6689.0], [82.1, 6704.0], [82.2, 6722.0], [82.3, 6738.0], [82.4, 6765.0], [82.5, 6782.0], [82.6, 6800.0], [82.7, 6817.0], [82.8, 6841.0], [82.9, 6856.0], [83.0, 6880.0], [83.1, 6897.0], [83.2, 6922.0], [83.3, 6933.0], [83.4, 6962.0], [83.5, 6984.0], [83.6, 6998.0], [83.7, 7011.0], [83.8, 7029.0], [83.9, 7050.0], [84.0, 7070.0], [84.1, 7081.0], [84.2, 7100.0], [84.3, 7128.0], [84.4, 7147.0], [84.5, 7191.0], [84.6, 7250.0], [84.7, 7296.0], [84.8, 7328.0], [84.9, 7371.0], [85.0, 7409.0], [85.1, 7423.0], [85.2, 7474.0], [85.3, 7502.0], [85.4, 7513.0], [85.5, 7552.0], [85.6, 7582.0], [85.7, 7600.0], [85.8, 7633.0], [85.9, 7658.0], [86.0, 7677.0], [86.1, 7690.0], [86.2, 7724.0], [86.3, 7756.0], [86.4, 7775.0], [86.5, 7801.0], [86.6, 7820.0], [86.7, 7857.0], [86.8, 7869.0], [86.9, 7882.0], [87.0, 7898.0], [87.1, 7918.0], [87.2, 7932.0], [87.3, 7954.0], [87.4, 7968.0], [87.5, 8015.0], [87.6, 8045.0], [87.7, 8072.0], [87.8, 8111.0], [87.9, 8155.0], [88.0, 8177.0], [88.1, 8190.0], [88.2, 8212.0], [88.3, 8229.0], [88.4, 8250.0], [88.5, 8297.0], [88.6, 8315.0], [88.7, 8334.0], [88.8, 8348.0], [88.9, 8357.0], [89.0, 8385.0], [89.1, 8413.0], [89.2, 8441.0], [89.3, 8457.0], [89.4, 8483.0], [89.5, 8513.0], [89.6, 8530.0], [89.7, 8559.0], [89.8, 8586.0], [89.9, 8596.0], [90.0, 8633.0], [90.1, 8651.0], [90.2, 8685.0], [90.3, 8710.0], [90.4, 8746.0], [90.5, 8765.0], [90.6, 8775.0], [90.7, 8800.0], [90.8, 8823.0], [90.9, 8834.0], [91.0, 8857.0], [91.1, 8870.0], [91.2, 8874.0], [91.3, 8885.0], [91.4, 8896.0], [91.5, 8912.0], [91.6, 8931.0], [91.7, 8957.0], [91.8, 8969.0], [91.9, 8990.0], [92.0, 9011.0], [92.1, 9042.0], [92.2, 9061.0], [92.3, 9081.0], [92.4, 9103.0], [92.5, 9120.0], [92.6, 9149.0], [92.7, 9169.0], [92.8, 9188.0], [92.9, 9217.0], [93.0, 9243.0], [93.1, 9286.0], [93.2, 9312.0], [93.3, 9323.0], [93.4, 9334.0], [93.5, 9372.0], [93.6, 9402.0], [93.7, 9435.0], [93.8, 9457.0], [93.9, 9509.0], [94.0, 9563.0], [94.1, 9600.0], [94.2, 9646.0], [94.3, 9683.0], [94.4, 9716.0], [94.5, 9759.0], [94.6, 9781.0], [94.7, 9804.0], [94.8, 9829.0], [94.9, 9853.0], [95.0, 9899.0], [95.1, 9926.0], [95.2, 9983.0], [95.3, 9990.0], [95.4, 10031.0], [95.5, 10078.0], [95.6, 10094.0], [95.7, 10148.0], [95.8, 10175.0], [95.9, 10207.0], [96.0, 10220.0], [96.1, 10246.0], [96.2, 10262.0], [96.3, 10271.0], [96.4, 10292.0], [96.5, 10318.0], [96.6, 10341.0], [96.7, 10360.0], [96.8, 10390.0], [96.9, 10428.0], [97.0, 10503.0], [97.1, 10559.0], [97.2, 10609.0], [97.3, 10655.0], [97.4, 10745.0], [97.5, 10900.0], [97.6, 11064.0], [97.7, 11188.0], [97.8, 11294.0], [97.9, 11339.0], [98.0, 11411.0], [98.1, 11481.0], [98.2, 11553.0], [98.3, 11586.0], [98.4, 11669.0], [98.5, 11721.0], [98.6, 11806.0], [98.7, 11892.0], [98.8, 11963.0], [98.9, 12069.0], [99.0, 12275.0], [99.1, 12505.0], [99.2, 12693.0], [99.3, 12945.0], [99.4, 13230.0], [99.5, 14130.0], [99.6, 14627.0], [99.7, 15220.0], [99.8, 15583.0], [99.9, 16810.0], [100.0, 21148.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 206.0, "series": [{"data": [[0.0, 22.0], [100.0, 79.0], [200.0, 21.0], [300.0, 13.0], [400.0, 51.0], [500.0, 98.0], [600.0, 84.0], [700.0, 100.0], [800.0, 105.0], [900.0, 136.0], [1000.0, 118.0], [1100.0, 111.0], [1200.0, 137.0], [1300.0, 112.0], [1400.0, 125.0], [1500.0, 121.0], [1600.0, 102.0], [1700.0, 130.0], [1800.0, 123.0], [1900.0, 153.0], [2000.0, 166.0], [2100.0, 178.0], [2300.0, 158.0], [2200.0, 191.0], [2400.0, 110.0], [2500.0, 174.0], [2600.0, 183.0], [2700.0, 206.0], [2800.0, 182.0], [2900.0, 193.0], [3000.0, 196.0], [3100.0, 140.0], [3300.0, 107.0], [3200.0, 138.0], [3400.0, 86.0], [3500.0, 80.0], [3600.0, 54.0], [3700.0, 52.0], [3800.0, 46.0], [3900.0, 40.0], [4000.0, 37.0], [4200.0, 23.0], [4100.0, 27.0], [4300.0, 23.0], [4400.0, 26.0], [4600.0, 39.0], [4500.0, 31.0], [4700.0, 26.0], [4800.0, 22.0], [5000.0, 34.0], [4900.0, 29.0], [5100.0, 27.0], [5200.0, 22.0], [5300.0, 25.0], [5400.0, 46.0], [5500.0, 37.0], [5600.0, 19.0], [5800.0, 19.0], [5700.0, 21.0], [5900.0, 32.0], [6000.0, 37.0], [6100.0, 45.0], [6300.0, 34.0], [6200.0, 39.0], [6500.0, 31.0], [6400.0, 30.0], [6600.0, 36.0], [6700.0, 35.0], [6800.0, 35.0], [6900.0, 33.0], [7000.0, 38.0], [7100.0, 21.0], [7300.0, 18.0], [7200.0, 14.0], [7400.0, 20.0], [7600.0, 31.0], [7500.0, 27.0], [7700.0, 22.0], [7800.0, 34.0], [7900.0, 29.0], [8000.0, 23.0], [8100.0, 22.0], [8200.0, 25.0], [8600.0, 22.0], [8400.0, 26.0], [8700.0, 29.0], [8500.0, 30.0], [8300.0, 38.0], [8800.0, 49.0], [8900.0, 37.0], [9000.0, 26.0], [9100.0, 31.0], [9200.0, 21.0], [9400.0, 19.0], [9300.0, 28.0], [9500.0, 15.0], [9600.0, 18.0], [9700.0, 19.0], [10100.0, 18.0], [10200.0, 35.0], [10000.0, 20.0], [9800.0, 23.0], [9900.0, 20.0], [10600.0, 12.0], [10500.0, 13.0], [10300.0, 27.0], [10700.0, 3.0], [10400.0, 12.0], [11200.0, 8.0], [10800.0, 5.0], [11100.0, 7.0], [11000.0, 1.0], [10900.0, 6.0], [11400.0, 9.0], [11600.0, 8.0], [11500.0, 15.0], [11300.0, 10.0], [11700.0, 9.0], [12200.0, 3.0], [11900.0, 9.0], [11800.0, 7.0], [12000.0, 7.0], [12100.0, 2.0], [12300.0, 3.0], [12600.0, 2.0], [12400.0, 2.0], [12500.0, 5.0], [12700.0, 2.0], [12900.0, 4.0], [12800.0, 3.0], [13100.0, 3.0], [13000.0, 1.0], [13200.0, 3.0], [13300.0, 1.0], [14300.0, 3.0], [14100.0, 1.0], [14000.0, 1.0], [13900.0, 1.0], [14400.0, 1.0], [14600.0, 3.0], [14700.0, 2.0], [15300.0, 1.0], [15200.0, 4.0], [15100.0, 4.0], [15600.0, 2.0], [15500.0, 2.0], [15900.0, 2.0], [16700.0, 1.0], [16900.0, 1.0], [16800.0, 1.0], [16600.0, 1.0], [20400.0, 1.0], [20600.0, 1.0], [20700.0, 1.0], [21100.0, 2.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5309.0, "series": [{"data": [[0.0, 187.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1128.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5309.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.6262529E12, "maxY": 983.4176795580116, "series": [{"data": [[1.62625296E12, 983.4176795580116], [1.62625297E12, 916.2173095014111], [1.62625292E12, 146.3781818181819], [1.62625293E12, 291.89458955223887], [1.62625294E12, 356.1661392405061], [1.62625295E12, 408.97375820056243], [1.6262529E12, 18.0], [1.62625291E12, 34.35761589403974]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625297E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 185.0, "minX": 10.0, "maxY": 20471.0, "series": [{"data": [[10.0, 5303.666666666666], [11.0, 12966.0], [12.0, 4140.0], [13.0, 12225.0], [14.0, 11468.0], [15.0, 11294.0], [16.0, 7398.0], [17.0, 2026.2499999999998], [18.0, 3363.5], [19.0, 1371.2], [20.0, 703.9320388349515], [22.0, 185.0], [68.0, 468.9879518072288], [69.0, 571.5], [70.0, 707.6666666666666], [71.0, 505.0], [72.0, 608.0], [73.0, 622.0], [74.0, 599.0], [75.0, 568.1951219512194], [76.0, 573.4444444444445], [77.0, 487.16666666666663], [80.0, 438.0], [81.0, 437.44444444444446], [82.0, 575.7058823529412], [83.0, 707.7647058823529], [84.0, 722.8], [85.0, 711.1666666666666], [86.0, 787.3076923076923], [87.0, 779.6666666666666], [88.0, 674.1428571428571], [89.0, 643.6666666666666], [90.0, 605.2], [91.0, 581.0], [92.0, 742.0], [93.0, 608.75], [94.0, 646.0], [99.0, 751.0], [101.0, 593.0], [102.0, 583.4], [103.0, 767.0], [104.0, 20471.0], [105.0, 647.0], [106.0, 751.0], [107.0, 825.6666666666666], [108.0, 833.7058823529411], [109.0, 925.2142857142858], [110.0, 4838.8], [111.0, 928.8333333333334], [112.0, 5934.0], [113.0, 1064.5555555555557], [114.0, 837.4999999999999], [116.0, 2136.7878787878785], [117.0, 643.75], [119.0, 983.5789473684212], [120.0, 924.75], [121.0, 1011.9411764705883], [122.0, 888.0], [142.0, 914.25], [143.0, 1096.5], [144.0, 1095.1594202898552], [145.0, 801.5], [146.0, 739.0], [147.0, 811.0], [150.0, 879.0], [152.0, 714.3333333333334], [154.0, 787.2857142857142], [155.0, 727.5833333333334], [157.0, 1007.5000000000001], [158.0, 1201.5], [159.0, 1224.3170731707319], [160.0, 1338.9999999999998], [161.0, 1445.9583333333333], [169.0, 1270.0], [170.0, 1290.5], [171.0, 1284.0], [172.0, 1473.1764705882354], [180.0, 1561.0], [186.0, 1425.0], [188.0, 2030.5], [190.0, 1337.0], [191.0, 1192.2056737588648], [192.0, 1671.1200000000003], [193.0, 1645.7692307692307], [194.0, 1472.598684210526], [195.0, 1621.181818181818], [196.0, 1186.5], [197.0, 1160.233333333333], [198.0, 1378.8367346938776], [199.0, 1796.1666666666667], [200.0, 3050.3333333333335], [217.0, 2530.1666666666665], [221.0, 1439.0], [222.0, 1461.0], [223.0, 1595.0], [224.0, 1745.242424242424], [225.0, 1924.1153846153848], [226.0, 1820.6792452830186], [227.0, 1874.0], [269.0, 1693.0], [271.0, 1894.0], [285.0, 2097.0], [272.0, 1965.8666666666668], [273.0, 1889.2598425196848], [276.0, 2105.0], [277.0, 2103.0], [278.0, 1706.5], [280.0, 2215.0], [281.0, 1925.2], [286.0, 2216.0], [287.0, 1790.2631578947367], [289.0, 1932.2666666666667], [288.0, 1845.0], [290.0, 1966.2999999999997], [291.0, 2568.666666666666], [292.0, 2701.1999999999985], [294.0, 2956.181818181818], [295.0, 2217.8], [293.0, 2806.5254237288127], [303.0, 1629.0], [296.0, 1913.0], [302.0, 1810.5], [300.0, 1955.0], [311.0, 3170.0], [312.0, 2607.8571428571427], [309.0, 2446.2727272727275], [310.0, 2467.7499999999995], [308.0, 2174.9444444444443], [306.0, 2044.0], [305.0, 1781.3333333333335], [313.0, 1644.0], [319.0, 2063.857142857143], [322.0, 2290.083333333333], [320.0, 1914.0], [323.0, 1674.4687499999998], [332.0, 2016.4117647058827], [333.0, 1633.0], [334.0, 2087.076923076923], [335.0, 2495.0], [324.0, 1507.2], [325.0, 1431.6153846153845], [326.0, 2213.3333333333335], [327.0, 2845.96875], [328.0, 2322.528455284552], [329.0, 2132.3750000000005], [330.0, 2103.5555555555557], [331.0, 1714.6666666666667], [337.0, 2609.2727272727275], [336.0, 2966.5], [338.0, 2272.4285714285716], [339.0, 2458.148387096777], [340.0, 3301.9444444444443], [341.0, 3726.128205128205], [342.0, 2908.8545454545456], [343.0, 2640.5555555555557], [344.0, 2698.607594936709], [351.0, 3581.3333333333335], [348.0, 2438.4545454545455], [349.0, 2501.0357142857147], [345.0, 2506.823529411765], [346.0, 2257.5], [347.0, 2393.75], [353.0, 2847.4444444444443], [352.0, 3113.1399999999994], [354.0, 2919.1111111111113], [355.0, 2765.1343283582096], [356.0, 4485.083333333333], [358.0, 3974.3333333333335], [359.0, 2474.9], [360.0, 2855.2857142857147], [366.0, 1529.08], [367.0, 3121.613899613901], [364.0, 2586.75], [365.0, 2348.8750000000005], [361.0, 2854.767326732674], [362.0, 2710.625], [363.0, 2756.0], [368.0, 2872.5], [369.0, 2782.5], [370.0, 3196.3529411764703], [371.0, 3112.459459459459], [372.0, 2520.4375], [380.0, 2343.0], [383.0, 2769.1686746987957], [384.0, 2789.2999999999997], [419.0, 2828.0], [420.0, 2456.0], [421.0, 2606.6666666666665], [422.0, 3093.719696969698], [423.0, 3120.271604938271], [424.0, 2013.0], [429.0, 2680.0], [436.0, 2123.608695652175], [438.0, 1844.8333333333335], [439.0, 2961.222222222222], [437.0, 2722.0495495495497], [441.0, 4560.6], [442.0, 2226.0], [443.0, 2831.2], [463.0, 3434.0], [464.0, 4496.0], [466.0, 4331.150000000001], [467.0, 5262.0], [596.0, 6653.0], [633.0, 9507.0], [634.0, 11526.0], [632.0, 8800.0], [631.0, 5408.0], [630.0, 9106.0], [629.0, 10263.0], [624.0, 6514.0], [623.0, 5230.0], [622.0, 4615.0], [664.0, 10239.0], [668.0, 2337.0], [669.0, 8768.0], [656.0, 8385.0], [667.0, 8912.0], [666.0, 9270.0], [665.0, 4458.0], [655.0, 6706.0], [643.0, 7296.629629629631], [642.0, 6609.875], [645.0, 6115.0], [644.0, 5148.0], [647.0, 4901.0], [646.0, 5489.5], [654.0, 10274.0], [652.0, 8789.0], [650.0, 8957.0], [649.0, 10280.0], [648.0, 10263.0], [663.0, 10026.0], [662.0, 8823.0], [660.0, 10309.0], [657.0, 6237.0], [696.0, 9550.0], [702.0, 8739.0], [703.0, 10262.0], [689.0, 10210.0], [688.0, 10043.0], [701.0, 8842.0], [699.0, 8864.0], [698.0, 10257.0], [687.0, 8535.0], [674.0, 10199.0], [676.0, 8471.0], [675.0, 8456.0], [679.0, 8637.0], [678.0, 8651.0], [686.0, 8931.0], [685.0, 10261.0], [684.0, 10102.5], [683.0, 8352.0], [682.0, 9476.5], [681.0, 8621.0], [694.0, 10093.0], [693.0, 10079.0], [692.0, 8344.0], [691.0, 8388.0], [728.0, 9834.0], [733.0, 10142.0], [734.0, 8647.0], [720.0, 10232.0], [722.0, 10110.0], [721.0, 8301.0], [731.0, 10207.0], [730.0, 10083.0], [729.0, 10105.0], [718.0, 10070.0], [704.0, 9351.0], [707.0, 11339.0], [706.0, 9506.0], [709.0, 8315.0], [708.0, 8344.0], [711.0, 9846.0], [710.0, 9983.0], [717.0, 8362.0], [716.0, 10175.0], [715.0, 10045.0], [714.0, 8306.0], [713.0, 10028.0], [712.0, 9813.0], [727.0, 10148.0], [726.0, 11184.0], [725.0, 10241.0], [723.0, 11222.0], [764.0, 9908.0], [749.0, 6958.666666666667], [748.0, 11231.0], [747.0, 9501.0], [746.0, 10125.0], [745.0, 8782.0], [744.0, 7869.0], [750.0, 4406.941176470588], [767.0, 8594.0], [753.0, 10165.0], [752.0, 9693.0], [755.0, 8577.0], [754.0, 9770.0], [757.0, 9891.0], [756.0, 9827.0], [759.0, 8716.0], [758.0, 8594.0], [766.0, 9803.0], [765.0, 8451.5], [762.0, 9834.0], [761.0, 9716.0], [760.0, 10080.0], [743.0, 12945.0], [742.0, 10009.5], [740.0, 8800.0], [739.0, 9956.5], [737.0, 8515.0], [794.0, 8059.5], [798.0, 9563.0], [799.0, 9596.0], [785.0, 8471.0], [784.0, 8924.0], [787.0, 9812.0], [786.0, 9984.0], [789.0, 8585.0], [788.0, 10609.0], [797.0, 10446.5], [796.0, 9984.0], [795.0, 8522.0], [792.0, 8616.0], [775.0, 10094.0], [774.0, 9693.0], [773.0, 9826.0], [772.0, 11114.0], [771.0, 8642.0], [770.0, 12853.0], [769.0, 8675.0], [768.0, 9775.0], [783.0, 10079.0], [781.0, 8685.0], [780.0, 10025.0], [777.0, 8596.0], [776.0, 8348.0], [791.0, 9672.0], [790.0, 11111.0], [830.0, 8270.0], [820.0, 8457.0], [831.0, 9889.0], [816.0, 9872.0], [818.0, 8582.0], [817.0, 11120.0], [829.0, 8545.0], [828.0, 8023.0], [827.0, 8128.0], [807.0, 9146.0], [802.0, 9956.0], [800.0, 9561.0], [815.0, 9911.0], [814.0, 9899.0], [813.0, 9678.0], [812.0, 10679.0], [811.0, 8596.0], [809.0, 8598.0], [808.0, 10664.0], [823.0, 10995.0], [822.0, 8586.0], [821.0, 10897.0], [860.0, 9759.0], [846.0, 4059.5], [845.0, 9604.0], [844.0, 9672.666666666666], [842.0, 8543.0], [841.0, 9550.0], [847.0, 1849.6], [848.0, 2400.4500000000003], [850.0, 9577.0], [849.0, 9909.0], [853.0, 8184.0], [852.0, 11129.0], [862.0, 9724.0], [861.0, 9501.0], [859.0, 9894.0], [858.0, 6317.0], [838.0, 9850.0], [837.0, 9497.0], [836.0, 8551.0], [835.0, 9597.0], [834.0, 8221.0], [833.0, 8400.0], [832.0, 7560.0], [855.0, 9562.0], [854.0, 9586.5], [879.0, 9760.0], [880.0, 5884.0], [876.0, 9787.0], [875.0, 8884.0], [874.0, 9571.0], [872.0, 7207.0], [871.0, 5713.0], [864.0, 6251.0], [881.0, 9413.0], [927.0, 8558.5], [897.0, 8094.0], [956.0, 9298.0], [959.0, 9162.0], [944.0, 7802.5], [946.0, 7671.0], [945.0, 10079.0], [948.0, 7650.0], [947.0, 9071.0], [958.0, 8635.5], [957.0, 9322.5], [955.0, 7943.0], [954.0, 7968.0], [953.0, 7658.0], [952.0, 9313.5], [942.0, 7488.0], [929.0, 8543.5], [928.0, 9165.0], [932.0, 9373.0], [930.0, 8754.0], [934.0, 8055.0], [933.0, 7474.0], [939.0, 9339.0], [938.0, 5432.0], [937.0, 9386.0], [936.0, 9412.0], [951.0, 8360.75], [949.0, 7445.0], [985.0, 8969.5], [990.0, 7742.0], [991.0, 9081.0], [977.0, 8001.333333333333], [976.0, 7866.0], [979.0, 9162.0], [978.0, 7820.0], [981.0, 8800.0], [980.0, 8775.0], [989.0, 8714.25], [988.0, 7107.0], [986.0, 7039.0], [984.0, 9915.0], [967.0, 6536.0], [966.0, 9273.5], [965.0, 9317.0], [964.0, 9273.0], [962.0, 7398.0], [961.0, 9286.0], [960.0, 7872.0], [975.0, 7563.0], [974.0, 7529.0], [973.0, 5446.0], [971.0, 9200.0], [970.0, 7262.5], [969.0, 8614.333333333334], [968.0, 8510.0], [983.0, 7259.0], [982.0, 9159.0], [1000.0, 7387.492587601085], [999.0, 9073.666666666666], [998.0, 8612.666666666666], [995.0, 6777.0], [993.0, 8964.333333333334], [992.0, 8763.0], [997.0, 7621.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}, {"data": [[485.41330918967856, 3793.424777425685]], "isOverall": false, "label": "Healthy Thinking CN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 114.0, "minX": 1.6262529E12, "maxY": 5521910.4, "series": [{"data": [[1.62625296E12, 3953602.4], [1.62625297E12, 4631337.5], [1.62625292E12, 4805386.4], [1.62625293E12, 4683139.2], [1.62625294E12, 5521910.4], [1.62625295E12, 4661296.2], [1.6262529E12, 21850.6], [1.62625291E12, 659665.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62625296E12, 20634.0], [1.62625297E12, 24168.0], [1.62625292E12, 25080.0], [1.62625293E12, 24441.6], [1.62625294E12, 28819.2], [1.62625295E12, 24327.6], [1.6262529E12, 114.0], [1.62625291E12, 3442.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625297E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1123.3708609271516, "minX": 1.6262529E12, "maxY": 7901.983066792111, "series": [{"data": [[1.62625296E12, 6973.951381215476], [1.62625297E12, 7901.983066792111], [1.62625292E12, 1151.458181818181], [1.62625293E12, 2209.7444029850735], [1.62625294E12, 2770.721518987341], [1.62625295E12, 2892.9756326148054], [1.6262529E12, 6743.2], [1.62625291E12, 1123.3708609271516]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625297E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1093.1986754966888, "minX": 1.6262529E12, "maxY": 7624.0498588899345, "series": [{"data": [[1.62625296E12, 6757.3359116022075], [1.62625297E12, 7624.0498588899345], [1.62625292E12, 1108.3481818181833], [1.62625293E12, 2102.7639925373137], [1.62625294E12, 2683.2974683544303], [1.62625295E12, 2796.9222118088073], [1.6262529E12, 6414.4], [1.62625291E12, 1093.1986754966888]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625297E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 170.0397350993377, "minX": 1.6262529E12, "maxY": 7185.172154280335, "series": [{"data": [[1.62625296E12, 6373.959116022107], [1.62625297E12, 7185.172154280335], [1.62625292E12, 961.5809090909086], [1.62625293E12, 2006.998134328356], [1.62625294E12, 2582.9193037974687], [1.62625295E12, 2685.217432052482], [1.6262529E12, 308.0], [1.62625291E12, 170.0397350993377]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625297E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 56.0, "minX": 1.6262529E12, "maxY": 21148.0, "series": [{"data": [[1.62625296E12, 14790.0], [1.62625297E12, 16642.0], [1.62625292E12, 21148.0], [1.62625293E12, 5403.0], [1.62625294E12, 5141.0], [1.62625295E12, 5528.0], [1.6262529E12, 7724.0], [1.62625291E12, 16959.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62625296E12, 1129.0], [1.62625297E12, 2616.0], [1.62625292E12, 267.0], [1.62625293E12, 527.0], [1.62625294E12, 885.0], [1.62625295E12, 481.0], [1.6262529E12, 5944.0], [1.62625291E12, 56.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62625296E12, 10693.199999999999], [1.62625297E12, 10301.0], [1.62625292E12, 1519.9], [1.62625293E12, 3028.4], [1.62625294E12, 3769.5], [1.62625295E12, 3879.800000000001], [1.6262529E12, 7724.0], [1.62625291E12, 509.40000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62625296E12, 13143.46], [1.62625297E12, 15204.750000000002], [1.62625292E12, 2826.92], [1.62625293E12, 3801.8999999999987], [1.62625294E12, 4726.899999999991], [1.62625295E12, 5107.439999999999], [1.6262529E12, 7724.0], [1.62625291E12, 16881.519999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62625296E12, 11751.9], [1.62625297E12, 11281.349999999997], [1.62625292E12, 1893.3500000000006], [1.62625293E12, 3295.35], [1.62625294E12, 4098.0], [1.62625295E12, 4609.399999999998], [1.6262529E12, 7724.0], [1.62625291E12, 12245.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625297E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 82.5, "minX": 1.0, "maxY": 12275.0, "series": [{"data": [[2.0, 6769.5], [3.0, 12275.0], [4.0, 2705.0], [10.0, 3652.0], [12.0, 82.5], [13.0, 2066.0], [26.0, 4585.5], [32.0, 6924.0], [35.0, 4095.0], [34.0, 2505.0], [37.0, 2974.0], [42.0, 3588.5], [48.0, 1361.0], [57.0, 3406.5], [64.0, 1744.5], [65.0, 5313.0], [74.0, 1222.5], [77.0, 155.0], [79.0, 2510.0], [78.0, 3252.0], [81.0, 2207.0], [84.0, 2343.0], [85.0, 2520.0], [89.0, 854.0], [90.0, 3237.5], [95.0, 677.0], [94.0, 1601.5], [96.0, 3136.0], [98.0, 8180.0], [100.0, 3128.0], [102.0, 6895.5], [109.0, 1890.0], [113.0, 879.0], [116.0, 1296.0], [123.0, 1645.0], [127.0, 1032.0], [126.0, 7874.5], [128.0, 547.0], [134.0, 2769.5], [135.0, 3051.0], [142.0, 1239.5], [138.0, 2701.5], [145.0, 1825.0], [144.0, 2562.0], [168.0, 1345.5], [171.0, 2920.0], [180.0, 9072.0], [187.0, 2631.0], [188.0, 3331.5], [191.0, 7687.0], [195.0, 2919.0], [212.0, 2351.0], [215.0, 8303.0], [219.0, 2335.0], [231.0, 8828.0], [1.0, 6330.0], [473.0, 6245.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[180.0, 9678.0], [231.0, 5457.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 473.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 77.0, "minX": 1.0, "maxY": 11960.0, "series": [{"data": [[2.0, 6525.5], [3.0, 11960.0], [4.0, 2318.5], [10.0, 2912.0], [12.0, 77.0], [13.0, 1998.0], [26.0, 4528.0], [32.0, 6871.0], [35.0, 3726.0], [34.0, 2296.5], [37.0, 2936.0], [42.0, 3548.0], [48.0, 1245.0], [57.0, 3148.0], [64.0, 1625.0], [65.0, 5257.0], [74.0, 1195.0], [77.0, 146.0], [79.0, 2494.0], [78.0, 3170.5], [81.0, 2035.0], [84.0, 2250.5], [85.0, 2499.0], [89.0, 648.0], [90.0, 3104.0], [95.0, 661.0], [94.0, 1536.0], [96.0, 3024.5], [98.0, 8096.0], [100.0, 3092.0], [102.0, 6301.5], [109.0, 1771.0], [113.0, 840.0], [116.0, 1286.0], [123.0, 1273.0], [127.0, 1000.0], [126.0, 7505.0], [128.0, 518.0], [134.0, 2731.0], [135.0, 2919.0], [142.0, 1157.0], [138.0, 2676.0], [145.0, 1773.0], [144.0, 2317.5], [168.0, 1266.0], [171.0, 2882.0], [180.0, 9041.0], [187.0, 2404.0], [188.0, 3239.5], [191.0, 6231.0], [195.0, 2806.0], [212.0, 2337.5], [215.0, 8280.0], [219.0, 2300.0], [231.0, 8781.0], [1.0, 5931.5], [473.0, 6198.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[180.0, 9675.0], [231.0, 4288.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 473.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.6262529E12, "maxY": 145.6, "series": [{"data": [[1.62625296E12, 145.6], [1.62625297E12, 8.8], [1.62625292E12, 122.2], [1.62625293E12, 121.3], [1.62625294E12, 125.1], [1.62625295E12, 117.3], [1.6262529E12, 2.0], [1.62625291E12, 20.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625297E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.6262529E12, "maxY": 126.4, "series": [{"data": [[1.62625297E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62625296E12, 90.5], [1.62625297E12, 106.0], [1.62625292E12, 110.0], [1.62625293E12, 107.2], [1.62625294E12, 126.4], [1.62625295E12, 106.7], [1.6262529E12, 0.5], [1.62625291E12, 15.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62625297E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625297E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.6262529E12, "maxY": 126.4, "series": [{"data": [[1.62625296E12, 90.5], [1.62625297E12, 106.0], [1.62625292E12, 110.0], [1.62625293E12, 107.2], [1.62625294E12, 126.4], [1.62625295E12, 106.7], [1.6262529E12, 0.5], [1.62625291E12, 15.1]], "isOverall": false, "label": "Healthy Thinking CN-success", "isController": false}, {"data": [[1.62625297E12, 0.3]], "isOverall": false, "label": "Healthy Thinking CN-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625297E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.6262529E12, "maxY": 126.4, "series": [{"data": [[1.62625296E12, 90.5], [1.62625297E12, 106.0], [1.62625292E12, 110.0], [1.62625293E12, 107.2], [1.62625294E12, 126.4], [1.62625295E12, 106.7], [1.6262529E12, 0.5], [1.62625291E12, 15.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62625297E12, 0.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625297E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

