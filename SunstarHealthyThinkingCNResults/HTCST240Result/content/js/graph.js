/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "maxY": 28476.0, "series": [{"data": [[0.0, 16.0], [0.1, 25.0], [0.2, 43.0], [0.3, 52.0], [0.4, 55.0], [0.5, 57.0], [0.6, 61.0], [0.7, 65.0], [0.8, 76.0], [0.9, 83.0], [1.0, 95.0], [1.1, 122.0], [1.2, 141.0], [1.3, 155.0], [1.4, 171.0], [1.5, 178.0], [1.6, 181.0], [1.7, 184.0], [1.8, 186.0], [1.9, 188.0], [2.0, 192.0], [2.1, 196.0], [2.2, 200.0], [2.3, 202.0], [2.4, 206.0], [2.5, 209.0], [2.6, 212.0], [2.7, 215.0], [2.8, 222.0], [2.9, 224.0], [3.0, 229.0], [3.1, 235.0], [3.2, 237.0], [3.3, 241.0], [3.4, 247.0], [3.5, 250.0], [3.6, 251.0], [3.7, 255.0], [3.8, 258.0], [3.9, 261.0], [4.0, 264.0], [4.1, 267.0], [4.2, 268.0], [4.3, 269.0], [4.4, 271.0], [4.5, 271.0], [4.6, 274.0], [4.7, 278.0], [4.8, 280.0], [4.9, 282.0], [5.0, 285.0], [5.1, 291.0], [5.2, 295.0], [5.3, 297.0], [5.4, 298.0], [5.5, 300.0], [5.6, 303.0], [5.7, 306.0], [5.8, 311.0], [5.9, 314.0], [6.0, 315.0], [6.1, 318.0], [6.2, 319.0], [6.3, 323.0], [6.4, 325.0], [6.5, 327.0], [6.6, 330.0], [6.7, 332.0], [6.8, 336.0], [6.9, 341.0], [7.0, 343.0], [7.1, 344.0], [7.2, 346.0], [7.3, 348.0], [7.4, 350.0], [7.5, 351.0], [7.6, 355.0], [7.7, 359.0], [7.8, 360.0], [7.9, 362.0], [8.0, 367.0], [8.1, 369.0], [8.2, 370.0], [8.3, 375.0], [8.4, 377.0], [8.5, 379.0], [8.6, 381.0], [8.7, 386.0], [8.8, 389.0], [8.9, 391.0], [9.0, 393.0], [9.1, 396.0], [9.2, 399.0], [9.3, 404.0], [9.4, 407.0], [9.5, 409.0], [9.6, 412.0], [9.7, 417.0], [9.8, 420.0], [9.9, 424.0], [10.0, 426.0], [10.1, 431.0], [10.2, 433.0], [10.3, 434.0], [10.4, 436.0], [10.5, 441.0], [10.6, 444.0], [10.7, 448.0], [10.8, 453.0], [10.9, 455.0], [11.0, 460.0], [11.1, 465.0], [11.2, 467.0], [11.3, 470.0], [11.4, 473.0], [11.5, 476.0], [11.6, 479.0], [11.7, 482.0], [11.8, 483.0], [11.9, 487.0], [12.0, 490.0], [12.1, 493.0], [12.2, 495.0], [12.3, 498.0], [12.4, 503.0], [12.5, 508.0], [12.6, 512.0], [12.7, 515.0], [12.8, 518.0], [12.9, 520.0], [13.0, 523.0], [13.1, 525.0], [13.2, 532.0], [13.3, 534.0], [13.4, 537.0], [13.5, 542.0], [13.6, 545.0], [13.7, 551.0], [13.8, 555.0], [13.9, 562.0], [14.0, 566.0], [14.1, 568.0], [14.2, 574.0], [14.3, 577.0], [14.4, 582.0], [14.5, 586.0], [14.6, 592.0], [14.7, 594.0], [14.8, 598.0], [14.9, 602.0], [15.0, 609.0], [15.1, 613.0], [15.2, 615.0], [15.3, 617.0], [15.4, 620.0], [15.5, 623.0], [15.6, 627.0], [15.7, 634.0], [15.8, 637.0], [15.9, 644.0], [16.0, 647.0], [16.1, 651.0], [16.2, 654.0], [16.3, 657.0], [16.4, 660.0], [16.5, 667.0], [16.6, 670.0], [16.7, 676.0], [16.8, 685.0], [16.9, 690.0], [17.0, 695.0], [17.1, 700.0], [17.2, 706.0], [17.3, 708.0], [17.4, 716.0], [17.5, 718.0], [17.6, 724.0], [17.7, 730.0], [17.8, 736.0], [17.9, 741.0], [18.0, 747.0], [18.1, 754.0], [18.2, 756.0], [18.3, 760.0], [18.4, 771.0], [18.5, 784.0], [18.6, 791.0], [18.7, 799.0], [18.8, 804.0], [18.9, 807.0], [19.0, 815.0], [19.1, 826.0], [19.2, 836.0], [19.3, 840.0], [19.4, 849.0], [19.5, 853.0], [19.6, 867.0], [19.7, 879.0], [19.8, 888.0], [19.9, 892.0], [20.0, 904.0], [20.1, 911.0], [20.2, 916.0], [20.3, 934.0], [20.4, 944.0], [20.5, 952.0], [20.6, 964.0], [20.7, 968.0], [20.8, 983.0], [20.9, 990.0], [21.0, 996.0], [21.1, 1002.0], [21.2, 1010.0], [21.3, 1021.0], [21.4, 1029.0], [21.5, 1045.0], [21.6, 1051.0], [21.7, 1060.0], [21.8, 1071.0], [21.9, 1085.0], [22.0, 1095.0], [22.1, 1109.0], [22.2, 1113.0], [22.3, 1119.0], [22.4, 1124.0], [22.5, 1132.0], [22.6, 1134.0], [22.7, 1140.0], [22.8, 1152.0], [22.9, 1159.0], [23.0, 1165.0], [23.1, 1172.0], [23.2, 1176.0], [23.3, 1180.0], [23.4, 1186.0], [23.5, 1189.0], [23.6, 1197.0], [23.7, 1200.0], [23.8, 1202.0], [23.9, 1209.0], [24.0, 1212.0], [24.1, 1215.0], [24.2, 1218.0], [24.3, 1224.0], [24.4, 1227.0], [24.5, 1231.0], [24.6, 1238.0], [24.7, 1244.0], [24.8, 1251.0], [24.9, 1256.0], [25.0, 1260.0], [25.1, 1269.0], [25.2, 1271.0], [25.3, 1276.0], [25.4, 1281.0], [25.5, 1284.0], [25.6, 1286.0], [25.7, 1291.0], [25.8, 1294.0], [25.9, 1300.0], [26.0, 1304.0], [26.1, 1311.0], [26.2, 1314.0], [26.3, 1318.0], [26.4, 1326.0], [26.5, 1330.0], [26.6, 1335.0], [26.7, 1338.0], [26.8, 1342.0], [26.9, 1349.0], [27.0, 1353.0], [27.1, 1357.0], [27.2, 1361.0], [27.3, 1372.0], [27.4, 1377.0], [27.5, 1382.0], [27.6, 1386.0], [27.7, 1392.0], [27.8, 1396.0], [27.9, 1404.0], [28.0, 1408.0], [28.1, 1412.0], [28.2, 1416.0], [28.3, 1421.0], [28.4, 1424.0], [28.5, 1428.0], [28.6, 1434.0], [28.7, 1440.0], [28.8, 1447.0], [28.9, 1455.0], [29.0, 1462.0], [29.1, 1465.0], [29.2, 1472.0], [29.3, 1478.0], [29.4, 1481.0], [29.5, 1485.0], [29.6, 1491.0], [29.7, 1493.0], [29.8, 1498.0], [29.9, 1501.0], [30.0, 1505.0], [30.1, 1510.0], [30.2, 1516.0], [30.3, 1521.0], [30.4, 1526.0], [30.5, 1530.0], [30.6, 1536.0], [30.7, 1539.0], [30.8, 1541.0], [30.9, 1546.0], [31.0, 1548.0], [31.1, 1551.0], [31.2, 1553.0], [31.3, 1558.0], [31.4, 1566.0], [31.5, 1570.0], [31.6, 1576.0], [31.7, 1583.0], [31.8, 1586.0], [31.9, 1587.0], [32.0, 1591.0], [32.1, 1594.0], [32.2, 1597.0], [32.3, 1605.0], [32.4, 1607.0], [32.5, 1612.0], [32.6, 1613.0], [32.7, 1617.0], [32.8, 1620.0], [32.9, 1622.0], [33.0, 1625.0], [33.1, 1630.0], [33.2, 1633.0], [33.3, 1640.0], [33.4, 1644.0], [33.5, 1648.0], [33.6, 1651.0], [33.7, 1656.0], [33.8, 1658.0], [33.9, 1662.0], [34.0, 1665.0], [34.1, 1669.0], [34.2, 1672.0], [34.3, 1677.0], [34.4, 1680.0], [34.5, 1685.0], [34.6, 1686.0], [34.7, 1689.0], [34.8, 1695.0], [34.9, 1699.0], [35.0, 1703.0], [35.1, 1706.0], [35.2, 1709.0], [35.3, 1712.0], [35.4, 1720.0], [35.5, 1728.0], [35.6, 1733.0], [35.7, 1736.0], [35.8, 1740.0], [35.9, 1749.0], [36.0, 1758.0], [36.1, 1762.0], [36.2, 1763.0], [36.3, 1766.0], [36.4, 1772.0], [36.5, 1775.0], [36.6, 1778.0], [36.7, 1784.0], [36.8, 1789.0], [36.9, 1791.0], [37.0, 1792.0], [37.1, 1795.0], [37.2, 1797.0], [37.3, 1799.0], [37.4, 1801.0], [37.5, 1806.0], [37.6, 1809.0], [37.7, 1811.0], [37.8, 1817.0], [37.9, 1823.0], [38.0, 1825.0], [38.1, 1828.0], [38.2, 1832.0], [38.3, 1835.0], [38.4, 1841.0], [38.5, 1844.0], [38.6, 1848.0], [38.7, 1851.0], [38.8, 1853.0], [38.9, 1855.0], [39.0, 1859.0], [39.1, 1863.0], [39.2, 1866.0], [39.3, 1869.0], [39.4, 1873.0], [39.5, 1876.0], [39.6, 1879.0], [39.7, 1885.0], [39.8, 1887.0], [39.9, 1891.0], [40.0, 1894.0], [40.1, 1897.0], [40.2, 1902.0], [40.3, 1908.0], [40.4, 1909.0], [40.5, 1909.0], [40.6, 1914.0], [40.7, 1917.0], [40.8, 1920.0], [40.9, 1923.0], [41.0, 1928.0], [41.1, 1932.0], [41.2, 1936.0], [41.3, 1939.0], [41.4, 1943.0], [41.5, 1944.0], [41.6, 1946.0], [41.7, 1952.0], [41.8, 1956.0], [41.9, 1960.0], [42.0, 1964.0], [42.1, 1966.0], [42.2, 1968.0], [42.3, 1970.0], [42.4, 1973.0], [42.5, 1979.0], [42.6, 1983.0], [42.7, 1988.0], [42.8, 1992.0], [42.9, 1998.0], [43.0, 2003.0], [43.1, 2004.0], [43.2, 2006.0], [43.3, 2013.0], [43.4, 2016.0], [43.5, 2020.0], [43.6, 2023.0], [43.7, 2027.0], [43.8, 2030.0], [43.9, 2035.0], [44.0, 2038.0], [44.1, 2043.0], [44.2, 2046.0], [44.3, 2049.0], [44.4, 2051.0], [44.5, 2057.0], [44.6, 2063.0], [44.7, 2067.0], [44.8, 2072.0], [44.9, 2075.0], [45.0, 2079.0], [45.1, 2085.0], [45.2, 2091.0], [45.3, 2095.0], [45.4, 2098.0], [45.5, 2102.0], [45.6, 2104.0], [45.7, 2107.0], [45.8, 2110.0], [45.9, 2114.0], [46.0, 2119.0], [46.1, 2124.0], [46.2, 2129.0], [46.3, 2134.0], [46.4, 2135.0], [46.5, 2136.0], [46.6, 2140.0], [46.7, 2143.0], [46.8, 2147.0], [46.9, 2155.0], [47.0, 2159.0], [47.1, 2162.0], [47.2, 2167.0], [47.3, 2170.0], [47.4, 2174.0], [47.5, 2177.0], [47.6, 2183.0], [47.7, 2188.0], [47.8, 2190.0], [47.9, 2193.0], [48.0, 2199.0], [48.1, 2201.0], [48.2, 2203.0], [48.3, 2211.0], [48.4, 2216.0], [48.5, 2219.0], [48.6, 2221.0], [48.7, 2222.0], [48.8, 2226.0], [48.9, 2230.0], [49.0, 2235.0], [49.1, 2239.0], [49.2, 2243.0], [49.3, 2244.0], [49.4, 2247.0], [49.5, 2252.0], [49.6, 2254.0], [49.7, 2260.0], [49.8, 2261.0], [49.9, 2264.0], [50.0, 2270.0], [50.1, 2274.0], [50.2, 2277.0], [50.3, 2279.0], [50.4, 2281.0], [50.5, 2285.0], [50.6, 2289.0], [50.7, 2294.0], [50.8, 2299.0], [50.9, 2301.0], [51.0, 2309.0], [51.1, 2313.0], [51.2, 2318.0], [51.3, 2325.0], [51.4, 2335.0], [51.5, 2340.0], [51.6, 2344.0], [51.7, 2349.0], [51.8, 2354.0], [51.9, 2362.0], [52.0, 2368.0], [52.1, 2371.0], [52.2, 2378.0], [52.3, 2383.0], [52.4, 2388.0], [52.5, 2393.0], [52.6, 2399.0], [52.7, 2401.0], [52.8, 2406.0], [52.9, 2407.0], [53.0, 2409.0], [53.1, 2417.0], [53.2, 2423.0], [53.3, 2423.0], [53.4, 2431.0], [53.5, 2433.0], [53.6, 2437.0], [53.7, 2440.0], [53.8, 2444.0], [53.9, 2448.0], [54.0, 2456.0], [54.1, 2464.0], [54.2, 2469.0], [54.3, 2476.0], [54.4, 2478.0], [54.5, 2482.0], [54.6, 2484.0], [54.7, 2490.0], [54.8, 2496.0], [54.9, 2504.0], [55.0, 2511.0], [55.1, 2516.0], [55.2, 2520.0], [55.3, 2523.0], [55.4, 2530.0], [55.5, 2542.0], [55.6, 2548.0], [55.7, 2558.0], [55.8, 2567.0], [55.9, 2574.0], [56.0, 2582.0], [56.1, 2588.0], [56.2, 2594.0], [56.3, 2600.0], [56.4, 2611.0], [56.5, 2620.0], [56.6, 2624.0], [56.7, 2634.0], [56.8, 2641.0], [56.9, 2644.0], [57.0, 2655.0], [57.1, 2663.0], [57.2, 2670.0], [57.3, 2690.0], [57.4, 2694.0], [57.5, 2706.0], [57.6, 2715.0], [57.7, 2720.0], [57.8, 2727.0], [57.9, 2735.0], [58.0, 2740.0], [58.1, 2752.0], [58.2, 2757.0], [58.3, 2765.0], [58.4, 2777.0], [58.5, 2782.0], [58.6, 2794.0], [58.7, 2807.0], [58.8, 2821.0], [58.9, 2833.0], [59.0, 2848.0], [59.1, 2853.0], [59.2, 2870.0], [59.3, 2883.0], [59.4, 2894.0], [59.5, 2903.0], [59.6, 2911.0], [59.7, 2912.0], [59.8, 2923.0], [59.9, 2931.0], [60.0, 2938.0], [60.1, 2953.0], [60.2, 2965.0], [60.3, 2973.0], [60.4, 2988.0], [60.5, 2996.0], [60.6, 3011.0], [60.7, 3018.0], [60.8, 3038.0], [60.9, 3044.0], [61.0, 3056.0], [61.1, 3058.0], [61.2, 3066.0], [61.3, 3075.0], [61.4, 3087.0], [61.5, 3094.0], [61.6, 3104.0], [61.7, 3115.0], [61.8, 3119.0], [61.9, 3127.0], [62.0, 3140.0], [62.1, 3149.0], [62.2, 3153.0], [62.3, 3162.0], [62.4, 3171.0], [62.5, 3181.0], [62.6, 3190.0], [62.7, 3202.0], [62.8, 3216.0], [62.9, 3224.0], [63.0, 3230.0], [63.1, 3244.0], [63.2, 3254.0], [63.3, 3273.0], [63.4, 3287.0], [63.5, 3302.0], [63.6, 3315.0], [63.7, 3343.0], [63.8, 3354.0], [63.9, 3367.0], [64.0, 3379.0], [64.1, 3389.0], [64.2, 3400.0], [64.3, 3409.0], [64.4, 3413.0], [64.5, 3428.0], [64.6, 3438.0], [64.7, 3445.0], [64.8, 3451.0], [64.9, 3466.0], [65.0, 3470.0], [65.1, 3481.0], [65.2, 3502.0], [65.3, 3527.0], [65.4, 3539.0], [65.5, 3549.0], [65.6, 3562.0], [65.7, 3568.0], [65.8, 3586.0], [65.9, 3597.0], [66.0, 3619.0], [66.1, 3625.0], [66.2, 3638.0], [66.3, 3668.0], [66.4, 3679.0], [66.5, 3692.0], [66.6, 3718.0], [66.7, 3727.0], [66.8, 3744.0], [66.9, 3766.0], [67.0, 3793.0], [67.1, 3815.0], [67.2, 3833.0], [67.3, 3841.0], [67.4, 3869.0], [67.5, 3882.0], [67.6, 3905.0], [67.7, 3935.0], [67.8, 3957.0], [67.9, 3966.0], [68.0, 3990.0], [68.1, 4014.0], [68.2, 4039.0], [68.3, 4050.0], [68.4, 4086.0], [68.5, 4103.0], [68.6, 4115.0], [68.7, 4128.0], [68.8, 4152.0], [68.9, 4173.0], [69.0, 4192.0], [69.1, 4200.0], [69.2, 4214.0], [69.3, 4252.0], [69.4, 4264.0], [69.5, 4289.0], [69.6, 4311.0], [69.7, 4348.0], [69.8, 4364.0], [69.9, 4375.0], [70.0, 4388.0], [70.1, 4403.0], [70.2, 4412.0], [70.3, 4420.0], [70.4, 4433.0], [70.5, 4454.0], [70.6, 4469.0], [70.7, 4495.0], [70.8, 4505.0], [70.9, 4521.0], [71.0, 4551.0], [71.1, 4588.0], [71.2, 4597.0], [71.3, 4616.0], [71.4, 4626.0], [71.5, 4641.0], [71.6, 4644.0], [71.7, 4662.0], [71.8, 4668.0], [71.9, 4676.0], [72.0, 4689.0], [72.1, 4699.0], [72.2, 4709.0], [72.3, 4733.0], [72.4, 4742.0], [72.5, 4748.0], [72.6, 4764.0], [72.7, 4779.0], [72.8, 4785.0], [72.9, 4797.0], [73.0, 4806.0], [73.1, 4810.0], [73.2, 4819.0], [73.3, 4835.0], [73.4, 4845.0], [73.5, 4865.0], [73.6, 4883.0], [73.7, 4900.0], [73.8, 4915.0], [73.9, 4919.0], [74.0, 4934.0], [74.1, 4944.0], [74.2, 4961.0], [74.3, 4975.0], [74.4, 4985.0], [74.5, 4995.0], [74.6, 5002.0], [74.7, 5010.0], [74.8, 5015.0], [74.9, 5026.0], [75.0, 5036.0], [75.1, 5050.0], [75.2, 5057.0], [75.3, 5062.0], [75.4, 5080.0], [75.5, 5094.0], [75.6, 5111.0], [75.7, 5119.0], [75.8, 5132.0], [75.9, 5143.0], [76.0, 5159.0], [76.1, 5168.0], [76.2, 5178.0], [76.3, 5185.0], [76.4, 5196.0], [76.5, 5211.0], [76.6, 5221.0], [76.7, 5232.0], [76.8, 5237.0], [76.9, 5249.0], [77.0, 5269.0], [77.1, 5281.0], [77.2, 5286.0], [77.3, 5293.0], [77.4, 5301.0], [77.5, 5313.0], [77.6, 5321.0], [77.7, 5326.0], [77.8, 5334.0], [77.9, 5340.0], [78.0, 5362.0], [78.1, 5374.0], [78.2, 5389.0], [78.3, 5402.0], [78.4, 5405.0], [78.5, 5409.0], [78.6, 5416.0], [78.7, 5423.0], [78.8, 5433.0], [78.9, 5441.0], [79.0, 5448.0], [79.1, 5453.0], [79.2, 5462.0], [79.3, 5481.0], [79.4, 5490.0], [79.5, 5493.0], [79.6, 5498.0], [79.7, 5501.0], [79.8, 5520.0], [79.9, 5532.0], [80.0, 5539.0], [80.1, 5549.0], [80.2, 5560.0], [80.3, 5568.0], [80.4, 5571.0], [80.5, 5576.0], [80.6, 5585.0], [80.7, 5590.0], [80.8, 5598.0], [80.9, 5617.0], [81.0, 5630.0], [81.1, 5644.0], [81.2, 5656.0], [81.3, 5671.0], [81.4, 5680.0], [81.5, 5688.0], [81.6, 5700.0], [81.7, 5706.0], [81.8, 5718.0], [81.9, 5729.0], [82.0, 5744.0], [82.1, 5750.0], [82.2, 5757.0], [82.3, 5768.0], [82.4, 5785.0], [82.5, 5787.0], [82.6, 5803.0], [82.7, 5808.0], [82.8, 5818.0], [82.9, 5827.0], [83.0, 5845.0], [83.1, 5856.0], [83.2, 5863.0], [83.3, 5867.0], [83.4, 5871.0], [83.5, 5888.0], [83.6, 5920.0], [83.7, 5928.0], [83.8, 5936.0], [83.9, 5951.0], [84.0, 5959.0], [84.1, 5968.0], [84.2, 5979.0], [84.3, 5999.0], [84.4, 6012.0], [84.5, 6023.0], [84.6, 6034.0], [84.7, 6046.0], [84.8, 6061.0], [84.9, 6075.0], [85.0, 6083.0], [85.1, 6098.0], [85.2, 6105.0], [85.3, 6116.0], [85.4, 6128.0], [85.5, 6159.0], [85.6, 6169.0], [85.7, 6179.0], [85.8, 6195.0], [85.9, 6204.0], [86.0, 6230.0], [86.1, 6243.0], [86.2, 6262.0], [86.3, 6283.0], [86.4, 6311.0], [86.5, 6339.0], [86.6, 6350.0], [86.7, 6374.0], [86.8, 6404.0], [86.9, 6416.0], [87.0, 6433.0], [87.1, 6442.0], [87.2, 6449.0], [87.3, 6472.0], [87.4, 6510.0], [87.5, 6524.0], [87.6, 6537.0], [87.7, 6552.0], [87.8, 6573.0], [87.9, 6585.0], [88.0, 6595.0], [88.1, 6611.0], [88.2, 6635.0], [88.3, 6656.0], [88.4, 6671.0], [88.5, 6693.0], [88.6, 6703.0], [88.7, 6710.0], [88.8, 6733.0], [88.9, 6769.0], [89.0, 6784.0], [89.1, 6801.0], [89.2, 6838.0], [89.3, 6861.0], [89.4, 6879.0], [89.5, 6889.0], [89.6, 6896.0], [89.7, 6909.0], [89.8, 6931.0], [89.9, 6945.0], [90.0, 6954.0], [90.1, 6965.0], [90.2, 6982.0], [90.3, 6990.0], [90.4, 7001.0], [90.5, 7020.0], [90.6, 7044.0], [90.7, 7065.0], [90.8, 7081.0], [90.9, 7089.0], [91.0, 7105.0], [91.1, 7128.0], [91.2, 7145.0], [91.3, 7166.0], [91.4, 7195.0], [91.5, 7215.0], [91.6, 7237.0], [91.7, 7245.0], [91.8, 7258.0], [91.9, 7272.0], [92.0, 7290.0], [92.1, 7299.0], [92.2, 7332.0], [92.3, 7345.0], [92.4, 7366.0], [92.5, 7400.0], [92.6, 7412.0], [92.7, 7446.0], [92.8, 7458.0], [92.9, 7471.0], [93.0, 7479.0], [93.1, 7488.0], [93.2, 7506.0], [93.3, 7521.0], [93.4, 7529.0], [93.5, 7550.0], [93.6, 7584.0], [93.7, 7602.0], [93.8, 7615.0], [93.9, 7640.0], [94.0, 7660.0], [94.1, 7681.0], [94.2, 7702.0], [94.3, 7720.0], [94.4, 7753.0], [94.5, 7757.0], [94.6, 7788.0], [94.7, 7806.0], [94.8, 7826.0], [94.9, 7854.0], [95.0, 7870.0], [95.1, 7887.0], [95.2, 7895.0], [95.3, 7902.0], [95.4, 7909.0], [95.5, 7940.0], [95.6, 7964.0], [95.7, 7987.0], [95.8, 8004.0], [95.9, 8035.0], [96.0, 8058.0], [96.1, 8091.0], [96.2, 8160.0], [96.3, 8177.0], [96.4, 8192.0], [96.5, 8201.0], [96.6, 8220.0], [96.7, 8278.0], [96.8, 8292.0], [96.9, 8366.0], [97.0, 8414.0], [97.1, 8443.0], [97.2, 8497.0], [97.3, 8548.0], [97.4, 8582.0], [97.5, 8626.0], [97.6, 8655.0], [97.7, 8728.0], [97.8, 8811.0], [97.9, 8851.0], [98.0, 8911.0], [98.1, 8938.0], [98.2, 8993.0], [98.3, 9030.0], [98.4, 9103.0], [98.5, 9174.0], [98.6, 9254.0], [98.7, 9296.0], [98.8, 9309.0], [98.9, 9371.0], [99.0, 9496.0], [99.1, 9559.0], [99.2, 9814.0], [99.3, 9882.0], [99.4, 10124.0], [99.5, 10525.0], [99.6, 10998.0], [99.7, 11902.0], [99.8, 18485.0], [99.9, 26037.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 183.0, "series": [{"data": [[0.0, 49.0], [100.0, 56.0], [200.0, 157.0], [300.0, 183.0], [400.0, 151.0], [500.0, 119.0], [600.0, 110.0], [700.0, 80.0], [800.0, 60.0], [900.0, 51.0], [1000.0, 47.0], [1100.0, 81.0], [1200.0, 106.0], [1300.0, 96.0], [1400.0, 94.0], [1500.0, 117.0], [1600.0, 129.0], [1700.0, 116.0], [1800.0, 135.0], [1900.0, 135.0], [2000.0, 122.0], [2100.0, 125.0], [2300.0, 88.0], [2200.0, 135.0], [2400.0, 106.0], [2500.0, 70.0], [2600.0, 55.0], [2700.0, 58.0], [2800.0, 41.0], [2900.0, 51.0], [3000.0, 50.0], [3100.0, 52.0], [3200.0, 40.0], [3300.0, 35.0], [3400.0, 48.0], [3500.0, 36.0], [3600.0, 28.0], [3700.0, 26.0], [3800.0, 23.0], [3900.0, 26.0], [4000.0, 19.0], [4100.0, 29.0], [4200.0, 25.0], [4300.0, 24.0], [4400.0, 33.0], [4500.0, 23.0], [4600.0, 43.0], [4800.0, 35.0], [4700.0, 40.0], [4900.0, 43.0], [5100.0, 42.0], [5000.0, 47.0], [5200.0, 47.0], [5300.0, 43.0], [5600.0, 38.0], [5400.0, 67.0], [5500.0, 55.0], [5800.0, 49.0], [5700.0, 47.0], [5900.0, 35.0], [6100.0, 32.0], [6000.0, 41.0], [6200.0, 27.0], [6300.0, 20.0], [6600.0, 24.0], [6500.0, 31.0], [6400.0, 28.0], [6700.0, 28.0], [6800.0, 28.0], [6900.0, 35.0], [7100.0, 24.0], [7000.0, 28.0], [7200.0, 31.0], [7400.0, 32.0], [7300.0, 18.0], [7600.0, 23.0], [7500.0, 26.0], [7700.0, 25.0], [7800.0, 26.0], [7900.0, 27.0], [8000.0, 16.0], [8100.0, 17.0], [8500.0, 11.0], [8300.0, 8.0], [8200.0, 17.0], [8600.0, 9.0], [8400.0, 11.0], [8700.0, 8.0], [9100.0, 6.0], [8800.0, 10.0], [9000.0, 7.0], [8900.0, 12.0], [9200.0, 10.0], [9500.0, 6.0], [9700.0, 1.0], [9400.0, 4.0], [9300.0, 10.0], [9600.0, 2.0], [9800.0, 6.0], [9900.0, 1.0], [10000.0, 3.0], [10100.0, 2.0], [10500.0, 1.0], [10300.0, 2.0], [10600.0, 3.0], [10700.0, 1.0], [11200.0, 1.0], [11100.0, 1.0], [10900.0, 1.0], [11600.0, 1.0], [11300.0, 1.0], [12100.0, 1.0], [11900.0, 1.0], [12300.0, 1.0], [12400.0, 1.0], [14900.0, 1.0], [18400.0, 1.0], [18700.0, 1.0], [19500.0, 1.0], [19700.0, 1.0], [21700.0, 1.0], [26000.0, 1.0], [26100.0, 2.0], [26900.0, 1.0], [28400.0, 1.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3386.0, "series": [{"data": [[0.0, 597.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 844.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3386.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.62774344E12, "maxY": 724.2908805031449, "series": [{"data": [[1.6277435E12, 724.2908805031449], [1.62774351E12, 434.2105263157895], [1.62774348E12, 278.5861471861473], [1.62774349E12, 593.9113300492611], [1.62774346E12, 27.971509971509995], [1.62774347E12, 131.7507477567299], [1.62774344E12, 18.0], [1.62774345E12, 11.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62774351E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.0, "minX": 5.0, "maxY": 19763.0, "series": [{"data": [[5.0, 2857.2857142857147], [6.0, 7304.666666666666], [7.0, 19763.0], [8.0, 19556.0], [9.0, 18783.0], [10.0, 18485.0], [11.0, 14974.0], [12.0, 12413.0], [13.0, 12340.0], [14.0, 12105.0], [15.0, 11666.0], [16.0, 7615.0], [17.0, 3988.0], [18.0, 7889.0], [19.0, 3883.0], [20.0, 603.3928571428575], [22.0, 197.66666666666666], [29.0, 265.3], [30.0, 601.3068181818184], [31.0, 379.6666666666667], [32.0, 277.3333333333333], [33.0, 260.0], [34.0, 311.5], [35.0, 287.25], [36.0, 309.5], [37.0, 342.21621621621614], [38.0, 310.3333333333333], [40.0, 371.5], [41.0, 273.25], [42.0, 348.0], [43.0, 368.5], [44.0, 377.5], [45.0, 363.0], [46.0, 374.6666666666667], [47.0, 385.24999999999994], [48.0, 404.4], [49.0, 404.0], [50.0, 421.5], [51.0, 429.0], [52.0, 414.0], [53.0, 444.31249999999994], [55.0, 483.2], [56.0, 471.9], [57.0, 480.0], [58.0, 514.1280000000002], [59.0, 458.7777777777777], [60.0, 427.0], [61.0, 435.2], [62.0, 489.6666666666667], [63.0, 448.0], [64.0, 387.0], [65.0, 581.75], [66.0, 439.5], [67.0, 397.6923076923077], [68.0, 433.57142857142856], [69.0, 497.5], [70.0, 591.5], [71.0, 599.0], [72.0, 509.0], [73.0, 491.7727272727275], [74.0, 250.0], [78.0, 436.0], [79.0, 550.5294117647059], [80.0, 849.0], [81.0, 652.0], [82.0, 660.0], [87.0, 613.0], [88.0, 667.0], [94.0, 689.6666666666666], [95.0, 732.3333333333334], [96.0, 718.5], [97.0, 665.0909090909091], [98.0, 642.75], [99.0, 600.875], [100.0, 604.3999999999999], [101.0, 687.0], [102.0, 665.3333333333334], [103.0, 749.7777777777778], [106.0, 664.0], [107.0, 558.6], [108.0, 979.5517241379309], [109.0, 1890.0], [116.0, 598.0], [120.0, 647.0], [124.0, 622.0], [126.0, 706.1666666666666], [127.0, 795.1333333333333], [128.0, 841.3333333333334], [129.0, 1043.0740740740741], [166.0, 1413.0], [167.0, 1451.9038461538464], [168.0, 1451.6595744680853], [199.0, 1575.0396825396824], [200.0, 1618.4436090225563], [201.0, 1255.6], [202.0, 1589.3333333333333], [203.0, 1875.136363636364], [216.0, 1572.111111111111], [241.0, 1851.788888888889], [243.0, 2086.944444444445], [244.0, 1948.8749999999998], [245.0, 2357.2571428571428], [258.0, 2011.5000000000007], [257.0, 1792.0], [259.0, 2163.424242424243], [268.0, 2106.7], [269.0, 2278.371900826445], [261.0, 1714.428571428571], [263.0, 1289.8888888888887], [264.0, 1479.421052631579], [265.0, 1963.0526315789468], [266.0, 2081.375], [267.0, 2629.642857142858], [279.0, 1444.0], [280.0, 1596.0], [282.0, 1252.75], [283.0, 1460.0], [285.0, 2284.785714285714], [286.0, 2610.9], [287.0, 1602.8], [303.0, 1763.6666666666667], [307.0, 3028.5], [305.0, 1895.4736842105265], [304.0, 1898.6], [306.0, 2304.521327014217], [309.0, 1853.0], [310.0, 1438.5], [312.0, 2323.0], [316.0, 2604.846153846154], [317.0, 2817.6], [314.0, 1743.462264150943], [315.0, 3073.5], [320.0, 1560.0], [321.0, 2387.1477272727284], [322.0, 1872.0], [323.0, 1869.0], [387.0, 2006.0], [431.0, 25.0], [430.0, 20.0], [429.0, 37.0], [428.0, 146.0], [427.0, 52.0], [426.0, 41.0], [425.0, 56.0], [435.0, 19.0], [445.0, 224.0], [446.0, 231.0], [444.0, 284.0], [434.0, 33.0], [433.0, 21.0], [432.0, 16.0], [443.0, 49.0], [442.0, 54.0], [439.0, 55.0], [438.0, 57.0], [437.0, 35.0], [436.0, 43.0], [458.0, 465.5], [455.0, 210.0], [454.0, 572.0], [450.0, 215.0], [478.0, 1336.0], [477.0, 1384.0], [472.0, 1256.0], [471.0, 1154.0], [495.0, 2117.25], [490.0, 1915.3333333333333], [492.0, 1952.0], [483.0, 1262.0], [482.0, 1266.5], [480.0, 1337.5], [493.0, 2600.6666666666665], [494.0, 1472.090909090909], [491.0, 574.0], [489.0, 633.5], [488.0, 1385.0], [487.0, 879.0], [486.0, 1176.0], [485.0, 479.0], [484.0, 691.0], [500.0, 1621.0], [501.0, 1769.0], [508.0, 3978.0], [507.0, 1374.0], [499.0, 1382.0], [515.0, 2285.0], [531.0, 1610.0], [543.0, 694.0], [527.0, 1260.0], [514.0, 300.0], [565.0, 773.0], [560.0, 883.0], [547.0, 716.6], [609.0, 1790.0], [614.0, 2160.0], [615.0, 2422.0], [618.0, 2311.0], [625.0, 2268.333333333333], [627.0, 1229.0], [629.0, 837.0], [630.0, 5218.0], [659.0, 2442.0454545454545], [668.0, 1511.0], [669.0, 1377.0], [656.0, 627.0], [658.0, 3463.2], [657.0, 1852.0], [667.0, 1455.0], [666.0, 2406.0], [664.0, 1616.5], [655.0, 1976.6363636363637], [663.0, 1862.0], [662.0, 4120.0], [661.0, 1014.0], [697.0, 4107.52808988764], [685.0, 1812.5], [686.0, 4713.8767123287635], [687.0, 4060.4318181818207], [696.0, 2914.857142857143], [688.0, 3721.714285714286], [691.0, 3758.0], [690.0, 1451.0], [689.0, 3232.7894736842104], [692.0, 3578.5714285714284], [694.0, 2266.5], [693.0, 1391.0], [699.0, 5727.794811320757], [698.0, 2757.0], [703.0, 2800.0], [701.0, 2416.0], [730.0, 3614.833333333333], [706.0, 3817.0], [707.0, 2967.0], [708.0, 1854.0], [711.0, 3148.5], [709.0, 2897.0], [712.0, 2228.5], [713.0, 2578.0], [715.0, 3151.0], [714.0, 1646.0], [717.0, 2504.0], [716.0, 2552.0], [719.0, 2775.0], [705.0, 2641.0], [718.0, 2417.0], [731.0, 5054.31794871795], [732.0, 5068.814814814815], [733.0, 5416.0], [735.0, 7025.0], [727.0, 3190.0], [726.0, 3058.0], [725.0, 2670.0], [724.0, 2802.5], [722.0, 2694.0], [721.0, 2276.0], [720.0, 2478.0], [736.0, 6169.5], [737.0, 5833.0], [740.0, 7221.768115942026], [748.0, 7151.735294117648], [749.0, 6994.774058577407], [750.0, 5467.519999999999], [752.0, 4531.25]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}, {"data": [[412.03934562021095, 3160.988610478359]], "isOverall": false, "label": "Healthy Thinking CN-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 752.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 114.0, "minX": 1.62774344E12, "maxY": 4823557.9, "series": [{"data": [[1.6277435E12, 4823557.9], [1.62774351E12, 72152.5], [1.62774348E12, 4386112.5], [1.62774349E12, 3854464.1], [1.62774346E12, 1332877.4], [1.62774347E12, 3808833.4], [1.62774344E12, 18995.3], [1.62774345E12, 34190.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6277435E12, 28956.0], [1.62774351E12, 433.2], [1.62774348E12, 26334.0], [1.62774349E12, 23142.0], [1.62774346E12, 8002.8], [1.62774347E12, 22868.4], [1.62774344E12, 114.0], [1.62774345E12, 205.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62774351E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 45.36842105263158, "minX": 1.62774344E12, "maxY": 15565.0, "series": [{"data": [[1.6277435E12, 5461.776729559747], [1.62774351E12, 45.36842105263158], [1.62774348E12, 2107.176623376624], [1.62774349E12, 4352.306403940883], [1.62774346E12, 700.5356125356128], [1.62774347E12, 1036.542372881355], [1.62774344E12, 7833.4], [1.62774345E12, 15565.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62774351E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 44.94736842105264, "minX": 1.62774344E12, "maxY": 15534.0, "series": [{"data": [[1.6277435E12, 5351.548742138364], [1.62774351E12, 44.94736842105264], [1.62774348E12, 2061.2380952380945], [1.62774349E12, 4287.349753694584], [1.62774346E12, 696.3133903133913], [1.62774347E12, 1022.8833499501493], [1.62774344E12, 7734.4], [1.62774345E12, 15534.0]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62774351E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 41.526315789473685, "minX": 1.62774344E12, "maxY": 5232.01179245283, "series": [{"data": [[1.6277435E12, 5232.01179245283], [1.62774351E12, 41.526315789473685], [1.62774348E12, 1990.5108225108224], [1.62774349E12, 4135.649261083745], [1.62774346E12, 243.9145299145299], [1.62774347E12, 979.5024925224343], [1.62774344E12, 192.4], [1.62774345E12, 288.88888888888886]], "isOverall": false, "label": "Healthy Thinking CN", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62774351E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.62774344E12, "maxY": 28476.0, "series": [{"data": [[1.6277435E12, 11902.0], [1.62774351E12, 146.0], [1.62774348E12, 4870.0], [1.62774349E12, 8578.0], [1.62774346E12, 28476.0], [1.62774347E12, 2968.0], [1.62774344E12, 8067.0], [1.62774345E12, 19763.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6277435E12, 200.0], [1.62774351E12, 16.0], [1.62774348E12, 341.0], [1.62774349E12, 83.0], [1.62774346E12, 50.0], [1.62774347E12, 113.0], [1.62774344E12, 7615.0], [1.62774345E12, 11666.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6277435E12, 8424.8], [1.62774351E12, 57.0], [1.62774348E12, 2919.4], [1.62774349E12, 6606.6], [1.62774346E12, 379.8], [1.62774347E12, 1907.2], [1.62774344E12, 8067.0], [1.62774345E12, 19763.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6277435E12, 10207.509999999991], [1.62774351E12, 146.0], [1.62774348E12, 4045.44], [1.62774349E12, 7926.4400000000005], [1.62774346E12, 26145.68], [1.62774347E12, 2690.2400000000016], [1.62774344E12, 8067.0], [1.62774345E12, 19763.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6277435E12, 9100.8], [1.62774351E12, 146.0], [1.62774348E12, 3216.0], [1.62774349E12, 7001.0], [1.62774346E12, 426.79999999999995], [1.62774347E12, 2110.3999999999996], [1.62774344E12, 8067.0], [1.62774345E12, 19763.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62774351E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 15449.0, "series": [{"data": [[2.0, 15449.0], [32.0, 3858.0], [44.0, 5463.5], [46.0, 1996.0], [3.0, 3923.5], [52.0, 87.5], [55.0, 2807.0], [4.0, 5760.5], [71.0, 2097.0], [73.0, 2159.0], [76.0, 1482.0], [79.0, 2517.0], [80.0, 2268.5], [84.0, 738.0], [89.0, 418.0], [93.0, 207.0], [95.0, 280.0], [96.0, 475.5], [97.0, 1409.0], [100.0, 1840.5], [106.0, 330.0], [107.0, 600.0], [104.0, 1478.0], [118.0, 509.0], [123.0, 1526.0], [133.0, 1612.0], [137.0, 1825.0], [140.0, 2365.5], [149.0, 5212.5], [155.0, 2103.0], [175.0, 2623.0], [169.0, 6898.5], [190.0, 4391.5], [198.0, 2186.5], [205.0, 7239.0], [230.0, 2164.0], [15.0, 37.0], [1.0, 8067.0], [16.0, 2669.5], [379.0, 5870.0], [384.0, 7015.0], [25.0, 4938.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[149.0, 1110.0], [169.0, 7009.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 384.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 15426.0, "series": [{"data": [[2.0, 15426.0], [32.0, 3857.0], [44.0, 5334.5], [46.0, 1995.0], [3.0, 3861.5], [52.0, 86.0], [55.0, 2774.0], [4.0, 5742.5], [71.0, 2090.0], [73.0, 2117.0], [76.0, 1474.0], [79.0, 2516.0], [80.0, 2202.5], [84.0, 679.5], [89.0, 395.0], [93.0, 205.0], [95.0, 278.0], [96.0, 470.5], [97.0, 1356.5], [100.0, 1801.5], [106.0, 326.5], [107.0, 599.0], [104.0, 1436.5], [118.0, 498.0], [123.0, 1524.0], [133.0, 1584.0], [137.0, 1768.0], [140.0, 2365.0], [149.0, 5203.5], [155.0, 2050.0], [175.0, 2622.0], [169.0, 6758.5], [190.0, 4382.0], [198.0, 2164.0], [205.0, 6759.0], [230.0, 2161.5], [15.0, 37.0], [1.0, 8007.0], [16.0, 2669.0], [379.0, 5807.0], [384.0, 6986.0], [25.0, 4863.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[149.0, 0.0], [169.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 384.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.62774343E12, "maxY": 149.5, "series": [{"data": [[1.62774343E12, 2.0], [1.6277435E12, 57.9], [1.62774351E12, 1.9], [1.62774348E12, 115.7], [1.62774349E12, 149.5], [1.62774346E12, 38.4], [1.62774347E12, 117.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62774351E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62774344E12, "maxY": 127.0, "series": [{"data": [[1.6277435E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.6277435E12, 127.0], [1.62774351E12, 1.9], [1.62774348E12, 115.5], [1.62774349E12, 101.5], [1.62774346E12, 35.1], [1.62774347E12, 100.3], [1.62774344E12, 0.5], [1.62774345E12, 0.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62774351E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62774344E12, "maxY": 127.0, "series": [{"data": [[1.6277435E12, 127.0], [1.62774351E12, 1.9], [1.62774348E12, 115.5], [1.62774349E12, 101.5], [1.62774346E12, 35.1], [1.62774347E12, 100.3], [1.62774344E12, 0.5], [1.62774345E12, 0.9]], "isOverall": false, "label": "Healthy Thinking CN-success", "isController": false}, {"data": [[1.6277435E12, 0.2]], "isOverall": false, "label": "Healthy Thinking CN-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62774351E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62774344E12, "maxY": 127.0, "series": [{"data": [[1.6277435E12, 127.0], [1.62774351E12, 1.9], [1.62774348E12, 115.5], [1.62774349E12, 101.5], [1.62774346E12, 35.1], [1.62774347E12, 100.3], [1.62774344E12, 0.5], [1.62774345E12, 0.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6277435E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62774351E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

