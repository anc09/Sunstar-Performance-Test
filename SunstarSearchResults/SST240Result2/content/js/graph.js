/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "maxY": 29843.0, "series": [{"data": [[0.0, 12.0], [0.1, 14.0], [0.2, 15.0], [0.3, 16.0], [0.4, 16.0], [0.5, 17.0], [0.6, 18.0], [0.7, 19.0], [0.8, 19.0], [0.9, 21.0], [1.0, 24.0], [1.1, 26.0], [1.2, 29.0], [1.3, 32.0], [1.4, 34.0], [1.5, 36.0], [1.6, 43.0], [1.7, 49.0], [1.8, 51.0], [1.9, 54.0], [2.0, 58.0], [2.1, 59.0], [2.2, 68.0], [2.3, 75.0], [2.4, 90.0], [2.5, 105.0], [2.6, 113.0], [2.7, 123.0], [2.8, 131.0], [2.9, 136.0], [3.0, 146.0], [3.1, 149.0], [3.2, 151.0], [3.3, 153.0], [3.4, 156.0], [3.5, 159.0], [3.6, 160.0], [3.7, 164.0], [3.8, 168.0], [3.9, 170.0], [4.0, 173.0], [4.1, 177.0], [4.2, 178.0], [4.3, 179.0], [4.4, 185.0], [4.5, 187.0], [4.6, 190.0], [4.7, 192.0], [4.8, 193.0], [4.9, 194.0], [5.0, 196.0], [5.1, 201.0], [5.2, 204.0], [5.3, 208.0], [5.4, 213.0], [5.5, 214.0], [5.6, 216.0], [5.7, 219.0], [5.8, 222.0], [5.9, 225.0], [6.0, 227.0], [6.1, 229.0], [6.2, 232.0], [6.3, 233.0], [6.4, 239.0], [6.5, 243.0], [6.6, 245.0], [6.7, 246.0], [6.8, 248.0], [6.9, 249.0], [7.0, 253.0], [7.1, 255.0], [7.2, 258.0], [7.3, 260.0], [7.4, 263.0], [7.5, 266.0], [7.6, 269.0], [7.7, 271.0], [7.8, 272.0], [7.9, 278.0], [8.0, 282.0], [8.1, 286.0], [8.2, 292.0], [8.3, 299.0], [8.4, 301.0], [8.5, 306.0], [8.6, 311.0], [8.7, 313.0], [8.8, 317.0], [8.9, 320.0], [9.0, 325.0], [9.1, 329.0], [9.2, 332.0], [9.3, 336.0], [9.4, 338.0], [9.5, 345.0], [9.6, 347.0], [9.7, 351.0], [9.8, 359.0], [9.9, 366.0], [10.0, 371.0], [10.1, 378.0], [10.2, 383.0], [10.3, 390.0], [10.4, 397.0], [10.5, 405.0], [10.6, 407.0], [10.7, 409.0], [10.8, 412.0], [10.9, 415.0], [11.0, 422.0], [11.1, 427.0], [11.2, 429.0], [11.3, 432.0], [11.4, 435.0], [11.5, 436.0], [11.6, 439.0], [11.7, 445.0], [11.8, 447.0], [11.9, 450.0], [12.0, 453.0], [12.1, 457.0], [12.2, 459.0], [12.3, 462.0], [12.4, 467.0], [12.5, 477.0], [12.6, 481.0], [12.7, 483.0], [12.8, 489.0], [12.9, 491.0], [13.0, 492.0], [13.1, 497.0], [13.2, 499.0], [13.3, 507.0], [13.4, 511.0], [13.5, 515.0], [13.6, 519.0], [13.7, 520.0], [13.8, 522.0], [13.9, 525.0], [14.0, 528.0], [14.1, 530.0], [14.2, 534.0], [14.3, 536.0], [14.4, 538.0], [14.5, 541.0], [14.6, 543.0], [14.7, 546.0], [14.8, 547.0], [14.9, 551.0], [15.0, 552.0], [15.1, 556.0], [15.2, 559.0], [15.3, 561.0], [15.4, 564.0], [15.5, 566.0], [15.6, 568.0], [15.7, 570.0], [15.8, 572.0], [15.9, 573.0], [16.0, 577.0], [16.1, 578.0], [16.2, 581.0], [16.3, 582.0], [16.4, 584.0], [16.5, 586.0], [16.6, 589.0], [16.7, 589.0], [16.8, 592.0], [16.9, 594.0], [17.0, 595.0], [17.1, 597.0], [17.2, 599.0], [17.3, 601.0], [17.4, 605.0], [17.5, 608.0], [17.6, 609.0], [17.7, 612.0], [17.8, 615.0], [17.9, 618.0], [18.0, 621.0], [18.1, 623.0], [18.2, 625.0], [18.3, 627.0], [18.4, 630.0], [18.5, 633.0], [18.6, 636.0], [18.7, 638.0], [18.8, 639.0], [18.9, 642.0], [19.0, 643.0], [19.1, 649.0], [19.2, 652.0], [19.3, 658.0], [19.4, 662.0], [19.5, 666.0], [19.6, 670.0], [19.7, 672.0], [19.8, 676.0], [19.9, 681.0], [20.0, 683.0], [20.1, 687.0], [20.2, 694.0], [20.3, 696.0], [20.4, 698.0], [20.5, 700.0], [20.6, 704.0], [20.7, 704.0], [20.8, 708.0], [20.9, 709.0], [21.0, 712.0], [21.1, 715.0], [21.2, 717.0], [21.3, 719.0], [21.4, 723.0], [21.5, 725.0], [21.6, 727.0], [21.7, 731.0], [21.8, 735.0], [21.9, 739.0], [22.0, 742.0], [22.1, 746.0], [22.2, 752.0], [22.3, 755.0], [22.4, 759.0], [22.5, 763.0], [22.6, 764.0], [22.7, 768.0], [22.8, 770.0], [22.9, 774.0], [23.0, 777.0], [23.1, 779.0], [23.2, 782.0], [23.3, 785.0], [23.4, 788.0], [23.5, 790.0], [23.6, 794.0], [23.7, 796.0], [23.8, 798.0], [23.9, 803.0], [24.0, 804.0], [24.1, 806.0], [24.2, 811.0], [24.3, 814.0], [24.4, 816.0], [24.5, 817.0], [24.6, 824.0], [24.7, 828.0], [24.8, 831.0], [24.9, 838.0], [25.0, 839.0], [25.1, 842.0], [25.2, 847.0], [25.3, 851.0], [25.4, 859.0], [25.5, 865.0], [25.6, 868.0], [25.7, 871.0], [25.8, 873.0], [25.9, 876.0], [26.0, 877.0], [26.1, 881.0], [26.2, 883.0], [26.3, 889.0], [26.4, 896.0], [26.5, 898.0], [26.6, 900.0], [26.7, 905.0], [26.8, 907.0], [26.9, 910.0], [27.0, 914.0], [27.1, 916.0], [27.2, 919.0], [27.3, 923.0], [27.4, 925.0], [27.5, 927.0], [27.6, 931.0], [27.7, 934.0], [27.8, 937.0], [27.9, 940.0], [28.0, 942.0], [28.1, 946.0], [28.2, 950.0], [28.3, 955.0], [28.4, 958.0], [28.5, 961.0], [28.6, 963.0], [28.7, 968.0], [28.8, 969.0], [28.9, 971.0], [29.0, 973.0], [29.1, 977.0], [29.2, 979.0], [29.3, 983.0], [29.4, 985.0], [29.5, 986.0], [29.6, 990.0], [29.7, 993.0], [29.8, 994.0], [29.9, 1000.0], [30.0, 1002.0], [30.1, 1005.0], [30.2, 1008.0], [30.3, 1010.0], [30.4, 1015.0], [30.5, 1018.0], [30.6, 1019.0], [30.7, 1020.0], [30.8, 1026.0], [30.9, 1029.0], [31.0, 1032.0], [31.1, 1034.0], [31.2, 1035.0], [31.3, 1036.0], [31.4, 1038.0], [31.5, 1040.0], [31.6, 1044.0], [31.7, 1048.0], [31.8, 1051.0], [31.9, 1053.0], [32.0, 1054.0], [32.1, 1057.0], [32.2, 1059.0], [32.3, 1060.0], [32.4, 1063.0], [32.5, 1065.0], [32.6, 1065.0], [32.7, 1067.0], [32.8, 1071.0], [32.9, 1074.0], [33.0, 1076.0], [33.1, 1078.0], [33.2, 1081.0], [33.3, 1083.0], [33.4, 1085.0], [33.5, 1087.0], [33.6, 1088.0], [33.7, 1092.0], [33.8, 1096.0], [33.9, 1099.0], [34.0, 1103.0], [34.1, 1105.0], [34.2, 1109.0], [34.3, 1110.0], [34.4, 1115.0], [34.5, 1118.0], [34.6, 1122.0], [34.7, 1127.0], [34.8, 1128.0], [34.9, 1132.0], [35.0, 1137.0], [35.1, 1139.0], [35.2, 1143.0], [35.3, 1144.0], [35.4, 1146.0], [35.5, 1148.0], [35.6, 1149.0], [35.7, 1151.0], [35.8, 1155.0], [35.9, 1157.0], [36.0, 1161.0], [36.1, 1165.0], [36.2, 1167.0], [36.3, 1170.0], [36.4, 1175.0], [36.5, 1180.0], [36.6, 1184.0], [36.7, 1188.0], [36.8, 1190.0], [36.9, 1193.0], [37.0, 1195.0], [37.1, 1200.0], [37.2, 1207.0], [37.3, 1209.0], [37.4, 1215.0], [37.5, 1222.0], [37.6, 1225.0], [37.7, 1230.0], [37.8, 1235.0], [37.9, 1238.0], [38.0, 1247.0], [38.1, 1249.0], [38.2, 1255.0], [38.3, 1257.0], [38.4, 1260.0], [38.5, 1263.0], [38.6, 1267.0], [38.7, 1272.0], [38.8, 1273.0], [38.9, 1275.0], [39.0, 1277.0], [39.1, 1279.0], [39.2, 1283.0], [39.3, 1287.0], [39.4, 1292.0], [39.5, 1293.0], [39.6, 1296.0], [39.7, 1299.0], [39.8, 1304.0], [39.9, 1306.0], [40.0, 1307.0], [40.1, 1309.0], [40.2, 1312.0], [40.3, 1316.0], [40.4, 1317.0], [40.5, 1318.0], [40.6, 1321.0], [40.7, 1324.0], [40.8, 1328.0], [40.9, 1331.0], [41.0, 1333.0], [41.1, 1336.0], [41.2, 1340.0], [41.3, 1343.0], [41.4, 1347.0], [41.5, 1353.0], [41.6, 1356.0], [41.7, 1359.0], [41.8, 1361.0], [41.9, 1364.0], [42.0, 1368.0], [42.1, 1372.0], [42.2, 1377.0], [42.3, 1378.0], [42.4, 1379.0], [42.5, 1384.0], [42.6, 1386.0], [42.7, 1389.0], [42.8, 1390.0], [42.9, 1393.0], [43.0, 1396.0], [43.1, 1398.0], [43.2, 1401.0], [43.3, 1404.0], [43.4, 1406.0], [43.5, 1409.0], [43.6, 1411.0], [43.7, 1414.0], [43.8, 1416.0], [43.9, 1421.0], [44.0, 1423.0], [44.1, 1424.0], [44.2, 1425.0], [44.3, 1428.0], [44.4, 1431.0], [44.5, 1433.0], [44.6, 1434.0], [44.7, 1436.0], [44.8, 1438.0], [44.9, 1441.0], [45.0, 1443.0], [45.1, 1447.0], [45.2, 1448.0], [45.3, 1451.0], [45.4, 1453.0], [45.5, 1456.0], [45.6, 1462.0], [45.7, 1464.0], [45.8, 1466.0], [45.9, 1468.0], [46.0, 1470.0], [46.1, 1473.0], [46.2, 1474.0], [46.3, 1476.0], [46.4, 1478.0], [46.5, 1479.0], [46.6, 1483.0], [46.7, 1486.0], [46.8, 1486.0], [46.9, 1489.0], [47.0, 1495.0], [47.1, 1497.0], [47.2, 1499.0], [47.3, 1502.0], [47.4, 1505.0], [47.5, 1509.0], [47.6, 1513.0], [47.7, 1517.0], [47.8, 1519.0], [47.9, 1520.0], [48.0, 1523.0], [48.1, 1525.0], [48.2, 1528.0], [48.3, 1528.0], [48.4, 1532.0], [48.5, 1533.0], [48.6, 1534.0], [48.7, 1536.0], [48.8, 1538.0], [48.9, 1540.0], [49.0, 1542.0], [49.1, 1543.0], [49.2, 1545.0], [49.3, 1550.0], [49.4, 1553.0], [49.5, 1556.0], [49.6, 1557.0], [49.7, 1560.0], [49.8, 1562.0], [49.9, 1565.0], [50.0, 1567.0], [50.1, 1570.0], [50.2, 1572.0], [50.3, 1574.0], [50.4, 1578.0], [50.5, 1581.0], [50.6, 1583.0], [50.7, 1584.0], [50.8, 1588.0], [50.9, 1590.0], [51.0, 1592.0], [51.1, 1593.0], [51.2, 1598.0], [51.3, 1601.0], [51.4, 1604.0], [51.5, 1608.0], [51.6, 1611.0], [51.7, 1614.0], [51.8, 1619.0], [51.9, 1622.0], [52.0, 1623.0], [52.1, 1627.0], [52.2, 1632.0], [52.3, 1636.0], [52.4, 1641.0], [52.5, 1645.0], [52.6, 1648.0], [52.7, 1650.0], [52.8, 1652.0], [52.9, 1656.0], [53.0, 1659.0], [53.1, 1663.0], [53.2, 1666.0], [53.3, 1669.0], [53.4, 1672.0], [53.5, 1674.0], [53.6, 1678.0], [53.7, 1681.0], [53.8, 1685.0], [53.9, 1694.0], [54.0, 1696.0], [54.1, 1697.0], [54.2, 1699.0], [54.3, 1703.0], [54.4, 1705.0], [54.5, 1708.0], [54.6, 1711.0], [54.7, 1713.0], [54.8, 1715.0], [54.9, 1716.0], [55.0, 1722.0], [55.1, 1728.0], [55.2, 1732.0], [55.3, 1735.0], [55.4, 1738.0], [55.5, 1741.0], [55.6, 1744.0], [55.7, 1750.0], [55.8, 1753.0], [55.9, 1756.0], [56.0, 1759.0], [56.1, 1761.0], [56.2, 1763.0], [56.3, 1766.0], [56.4, 1768.0], [56.5, 1770.0], [56.6, 1774.0], [56.7, 1775.0], [56.8, 1778.0], [56.9, 1782.0], [57.0, 1784.0], [57.1, 1790.0], [57.2, 1793.0], [57.3, 1797.0], [57.4, 1802.0], [57.5, 1803.0], [57.6, 1805.0], [57.7, 1807.0], [57.8, 1812.0], [57.9, 1813.0], [58.0, 1816.0], [58.1, 1819.0], [58.2, 1821.0], [58.3, 1823.0], [58.4, 1826.0], [58.5, 1828.0], [58.6, 1831.0], [58.7, 1836.0], [58.8, 1838.0], [58.9, 1845.0], [59.0, 1849.0], [59.1, 1852.0], [59.2, 1855.0], [59.3, 1858.0], [59.4, 1860.0], [59.5, 1863.0], [59.6, 1866.0], [59.7, 1867.0], [59.8, 1871.0], [59.9, 1873.0], [60.0, 1877.0], [60.1, 1880.0], [60.2, 1884.0], [60.3, 1886.0], [60.4, 1890.0], [60.5, 1893.0], [60.6, 1897.0], [60.7, 1900.0], [60.8, 1903.0], [60.9, 1905.0], [61.0, 1908.0], [61.1, 1912.0], [61.2, 1914.0], [61.3, 1919.0], [61.4, 1924.0], [61.5, 1928.0], [61.6, 1933.0], [61.7, 1935.0], [61.8, 1938.0], [61.9, 1941.0], [62.0, 1944.0], [62.1, 1946.0], [62.2, 1948.0], [62.3, 1951.0], [62.4, 1953.0], [62.5, 1954.0], [62.6, 1955.0], [62.7, 1958.0], [62.8, 1962.0], [62.9, 1966.0], [63.0, 1971.0], [63.1, 1975.0], [63.2, 1978.0], [63.3, 1983.0], [63.4, 1987.0], [63.5, 1993.0], [63.6, 1997.0], [63.7, 2003.0], [63.8, 2006.0], [63.9, 2009.0], [64.0, 2010.0], [64.1, 2011.0], [64.2, 2014.0], [64.3, 2015.0], [64.4, 2017.0], [64.5, 2020.0], [64.6, 2023.0], [64.7, 2025.0], [64.8, 2029.0], [64.9, 2031.0], [65.0, 2034.0], [65.1, 2038.0], [65.2, 2041.0], [65.3, 2044.0], [65.4, 2048.0], [65.5, 2052.0], [65.6, 2054.0], [65.7, 2056.0], [65.8, 2061.0], [65.9, 2068.0], [66.0, 2070.0], [66.1, 2075.0], [66.2, 2078.0], [66.3, 2080.0], [66.4, 2083.0], [66.5, 2086.0], [66.6, 2087.0], [66.7, 2089.0], [66.8, 2091.0], [66.9, 2093.0], [67.0, 2095.0], [67.1, 2099.0], [67.2, 2102.0], [67.3, 2109.0], [67.4, 2112.0], [67.5, 2115.0], [67.6, 2119.0], [67.7, 2124.0], [67.8, 2126.0], [67.9, 2127.0], [68.0, 2130.0], [68.1, 2135.0], [68.2, 2137.0], [68.3, 2141.0], [68.4, 2144.0], [68.5, 2147.0], [68.6, 2150.0], [68.7, 2153.0], [68.8, 2158.0], [68.9, 2160.0], [69.0, 2162.0], [69.1, 2167.0], [69.2, 2173.0], [69.3, 2177.0], [69.4, 2183.0], [69.5, 2188.0], [69.6, 2189.0], [69.7, 2191.0], [69.8, 2193.0], [69.9, 2200.0], [70.0, 2202.0], [70.1, 2211.0], [70.2, 2213.0], [70.3, 2216.0], [70.4, 2221.0], [70.5, 2225.0], [70.6, 2227.0], [70.7, 2230.0], [70.8, 2236.0], [70.9, 2241.0], [71.0, 2243.0], [71.1, 2243.0], [71.2, 2249.0], [71.3, 2252.0], [71.4, 2255.0], [71.5, 2257.0], [71.6, 2262.0], [71.7, 2267.0], [71.8, 2271.0], [71.9, 2279.0], [72.0, 2282.0], [72.1, 2284.0], [72.2, 2291.0], [72.3, 2294.0], [72.4, 2298.0], [72.5, 2300.0], [72.6, 2304.0], [72.7, 2309.0], [72.8, 2317.0], [72.9, 2320.0], [73.0, 2322.0], [73.1, 2327.0], [73.2, 2328.0], [73.3, 2331.0], [73.4, 2334.0], [73.5, 2338.0], [73.6, 2343.0], [73.7, 2347.0], [73.8, 2350.0], [73.9, 2354.0], [74.0, 2360.0], [74.1, 2364.0], [74.2, 2366.0], [74.3, 2369.0], [74.4, 2375.0], [74.5, 2378.0], [74.6, 2383.0], [74.7, 2385.0], [74.8, 2390.0], [74.9, 2394.0], [75.0, 2400.0], [75.1, 2403.0], [75.2, 2410.0], [75.3, 2415.0], [75.4, 2419.0], [75.5, 2425.0], [75.6, 2426.0], [75.7, 2431.0], [75.8, 2437.0], [75.9, 2442.0], [76.0, 2443.0], [76.1, 2450.0], [76.2, 2454.0], [76.3, 2461.0], [76.4, 2464.0], [76.5, 2469.0], [76.6, 2472.0], [76.7, 2478.0], [76.8, 2479.0], [76.9, 2486.0], [77.0, 2490.0], [77.1, 2492.0], [77.2, 2498.0], [77.3, 2506.0], [77.4, 2514.0], [77.5, 2519.0], [77.6, 2525.0], [77.7, 2529.0], [77.8, 2533.0], [77.9, 2537.0], [78.0, 2544.0], [78.1, 2551.0], [78.2, 2555.0], [78.3, 2561.0], [78.4, 2564.0], [78.5, 2568.0], [78.6, 2579.0], [78.7, 2589.0], [78.8, 2594.0], [78.9, 2602.0], [79.0, 2606.0], [79.1, 2611.0], [79.2, 2615.0], [79.3, 2619.0], [79.4, 2626.0], [79.5, 2633.0], [79.6, 2638.0], [79.7, 2646.0], [79.8, 2655.0], [79.9, 2664.0], [80.0, 2668.0], [80.1, 2673.0], [80.2, 2677.0], [80.3, 2680.0], [80.4, 2684.0], [80.5, 2692.0], [80.6, 2702.0], [80.7, 2714.0], [80.8, 2718.0], [80.9, 2725.0], [81.0, 2736.0], [81.1, 2742.0], [81.2, 2749.0], [81.3, 2756.0], [81.4, 2761.0], [81.5, 2765.0], [81.6, 2771.0], [81.7, 2776.0], [81.8, 2782.0], [81.9, 2788.0], [82.0, 2796.0], [82.1, 2798.0], [82.2, 2804.0], [82.3, 2813.0], [82.4, 2820.0], [82.5, 2833.0], [82.6, 2841.0], [82.7, 2844.0], [82.8, 2855.0], [82.9, 2877.0], [83.0, 2884.0], [83.1, 2891.0], [83.2, 2899.0], [83.3, 2903.0], [83.4, 2906.0], [83.5, 2908.0], [83.6, 2912.0], [83.7, 2916.0], [83.8, 2918.0], [83.9, 2922.0], [84.0, 2924.0], [84.1, 2933.0], [84.2, 2940.0], [84.3, 2947.0], [84.4, 2954.0], [84.5, 2960.0], [84.6, 2964.0], [84.7, 2968.0], [84.8, 2975.0], [84.9, 2979.0], [85.0, 2984.0], [85.1, 2988.0], [85.2, 3001.0], [85.3, 3007.0], [85.4, 3018.0], [85.5, 3025.0], [85.6, 3032.0], [85.7, 3039.0], [85.8, 3047.0], [85.9, 3053.0], [86.0, 3055.0], [86.1, 3058.0], [86.2, 3070.0], [86.3, 3080.0], [86.4, 3084.0], [86.5, 3092.0], [86.6, 3104.0], [86.7, 3107.0], [86.8, 3112.0], [86.9, 3128.0], [87.0, 3137.0], [87.1, 3144.0], [87.2, 3154.0], [87.3, 3172.0], [87.4, 3186.0], [87.5, 3195.0], [87.6, 3201.0], [87.7, 3214.0], [87.8, 3222.0], [87.9, 3231.0], [88.0, 3237.0], [88.1, 3244.0], [88.2, 3250.0], [88.3, 3256.0], [88.4, 3265.0], [88.5, 3276.0], [88.6, 3281.0], [88.7, 3292.0], [88.8, 3298.0], [88.9, 3302.0], [89.0, 3307.0], [89.1, 3316.0], [89.2, 3323.0], [89.3, 3329.0], [89.4, 3337.0], [89.5, 3342.0], [89.6, 3350.0], [89.7, 3361.0], [89.8, 3367.0], [89.9, 3373.0], [90.0, 3384.0], [90.1, 3391.0], [90.2, 3396.0], [90.3, 3414.0], [90.4, 3429.0], [90.5, 3435.0], [90.6, 3445.0], [90.7, 3458.0], [90.8, 3469.0], [90.9, 3482.0], [91.0, 3494.0], [91.1, 3504.0], [91.2, 3516.0], [91.3, 3531.0], [91.4, 3546.0], [91.5, 3563.0], [91.6, 3577.0], [91.7, 3593.0], [91.8, 3600.0], [91.9, 3625.0], [92.0, 3638.0], [92.1, 3657.0], [92.2, 3673.0], [92.3, 3696.0], [92.4, 3709.0], [92.5, 3725.0], [92.6, 3735.0], [92.7, 3764.0], [92.8, 3779.0], [92.9, 3798.0], [93.0, 3819.0], [93.1, 3848.0], [93.2, 3856.0], [93.3, 3868.0], [93.4, 3888.0], [93.5, 3906.0], [93.6, 3919.0], [93.7, 3925.0], [93.8, 3934.0], [93.9, 3942.0], [94.0, 3955.0], [94.1, 3968.0], [94.2, 3978.0], [94.3, 4002.0], [94.4, 4023.0], [94.5, 4046.0], [94.6, 4097.0], [94.7, 4137.0], [94.8, 4153.0], [94.9, 4192.0], [95.0, 4221.0], [95.1, 4256.0], [95.2, 4282.0], [95.3, 4325.0], [95.4, 4361.0], [95.5, 4390.0], [95.6, 4414.0], [95.7, 4457.0], [95.8, 4470.0], [95.9, 4479.0], [96.0, 4511.0], [96.1, 4540.0], [96.2, 4563.0], [96.3, 4578.0], [96.4, 4591.0], [96.5, 4617.0], [96.6, 4643.0], [96.7, 4663.0], [96.8, 4672.0], [96.9, 4699.0], [97.0, 4712.0], [97.1, 4750.0], [97.2, 4773.0], [97.3, 4783.0], [97.4, 4808.0], [97.5, 4859.0], [97.6, 4892.0], [97.7, 4912.0], [97.8, 4942.0], [97.9, 4962.0], [98.0, 5000.0], [98.1, 5036.0], [98.2, 5049.0], [98.3, 5099.0], [98.4, 5124.0], [98.5, 5154.0], [98.6, 5166.0], [98.7, 5200.0], [98.8, 5238.0], [98.9, 5351.0], [99.0, 5560.0], [99.1, 5713.0], [99.2, 5882.0], [99.3, 5938.0], [99.4, 6035.0], [99.5, 6420.0], [99.6, 7918.0], [99.7, 13928.0], [99.8, 20499.0], [99.9, 28508.0], [100.0, 29843.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 203.0, "series": [{"data": [[0.0, 121.0], [600.0, 161.0], [700.0, 168.0], [800.0, 136.0], [900.0, 165.0], [1000.0, 201.0], [1100.0, 155.0], [1200.0, 135.0], [1300.0, 170.0], [1400.0, 203.0], [1500.0, 199.0], [1600.0, 150.0], [1700.0, 156.0], [1800.0, 167.0], [1900.0, 148.0], [2000.0, 172.0], [2100.0, 139.0], [2200.0, 128.0], [2300.0, 125.0], [2400.0, 114.0], [2500.0, 80.0], [2600.0, 85.0], [2700.0, 78.0], [2800.0, 54.0], [2900.0, 99.0], [3000.0, 66.0], [3100.0, 51.0], [3200.0, 64.0], [3300.0, 71.0], [3400.0, 39.0], [3500.0, 38.0], [3600.0, 26.0], [3700.0, 30.0], [3800.0, 27.0], [3900.0, 41.0], [4000.0, 17.0], [4100.0, 15.0], [4200.0, 17.0], [4300.0, 13.0], [4400.0, 19.0], [4500.0, 25.0], [4600.0, 25.0], [4700.0, 24.0], [4800.0, 12.0], [4900.0, 18.0], [5100.0, 19.0], [5000.0, 16.0], [5300.0, 1.0], [5200.0, 10.0], [5500.0, 3.0], [5600.0, 3.0], [5400.0, 3.0], [5800.0, 5.0], [5700.0, 3.0], [6100.0, 1.0], [6000.0, 4.0], [5900.0, 7.0], [6400.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7900.0, 2.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8500.0, 1.0], [13900.0, 2.0], [14600.0, 1.0], [14800.0, 1.0], [15700.0, 1.0], [20400.0, 1.0], [20900.0, 1.0], [21700.0, 1.0], [22500.0, 1.0], [22700.0, 1.0], [100.0, 131.0], [28500.0, 2.0], [29100.0, 1.0], [29800.0, 2.0], [200.0, 163.0], [300.0, 104.0], [400.0, 140.0], [500.0, 201.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 659.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2630.0, "series": [{"data": [[0.0, 659.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1697.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2630.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.62768277E12, "maxY": 620.7422680412378, "series": [{"data": [[1.62768277E12, 19.0], [1.62768278E12, 14.0], [1.62768279E12, 8.0], [1.6276828E12, 56.65755208333332], [1.62768281E12, 156.4283231972199], [1.62768282E12, 301.3920704845821], [1.62768283E12, 466.45168539325846], [1.62768284E12, 620.7422680412378]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62768284E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.0, "minX": 5.0, "maxY": 21784.0, "series": [{"data": [[5.0, 9553.166666666668], [6.0, 7613.666666666666], [7.0, 11331.5], [8.0, 21784.0], [9.0, 20499.0], [10.0, 20924.0], [11.0, 15743.0], [12.0, 14863.0], [13.0, 14648.0], [14.0, 13999.0], [15.0, 13928.0], [16.0, 8168.0], [17.0, 7918.0], [18.0, 8503.0], [19.0, 7967.0], [20.0, 753.1343283582091], [21.0, 209.10526315789474], [30.0, 926.0232558139537], [31.0, 219.0], [34.0, 354.0], [35.0, 405.0], [40.0, 439.5], [41.0, 250.22115384615384], [42.0, 314.0], [43.0, 414.0], [46.0, 339.0], [55.0, 330.44444444444446], [56.0, 394.4], [57.0, 433.0], [58.0, 500.4761904761905], [59.0, 512.5333333333333], [60.0, 456.8888888888889], [61.0, 538.8333333333334], [62.0, 505.11999999999995], [63.0, 467.62499999999994], [64.0, 514.7777777777778], [66.0, 513.0], [69.0, 406.0], [70.0, 512.608695652174], [71.0, 541.923076923077], [72.0, 532.1904761904761], [73.0, 515.0], [75.0, 554.3333333333334], [76.0, 623.0], [77.0, 518.3333333333334], [78.0, 658.0], [79.0, 613.75], [80.0, 761.0], [81.0, 673.9411764705883], [82.0, 660.0], [83.0, 591.625], [84.0, 601.2222222222223], [85.0, 541.1052631578947], [86.0, 584.375], [88.0, 785.0], [89.0, 586.0], [90.0, 628.6363636363637], [91.0, 660.8039215686276], [93.0, 724.75], [94.0, 690.5], [95.0, 792.5555555555555], [96.0, 635.0], [97.0, 682.1111111111111], [98.0, 737.6666666666666], [99.0, 683.2173913043479], [100.0, 743.1], [101.0, 869.8333333333334], [103.0, 799.6666666666666], [104.0, 892.6666666666666], [105.0, 892.8947368421052], [106.0, 782.6799999999996], [107.0, 919.0], [108.0, 827.0], [111.0, 811.0], [112.0, 776.0], [113.0, 880.2738095238095], [114.0, 1449.5], [117.0, 1881.0], [126.0, 353.0], [127.0, 851.2], [128.0, 873.0], [129.0, 1110.857142857143], [130.0, 938.9354838709678], [131.0, 1000.8333333333333], [132.0, 1053.5882352941173], [133.0, 1055.3333333333335], [134.0, 1028.6000000000001], [135.0, 941.5277777777778], [136.0, 757.5], [137.0, 704.0], [140.0, 1296.0], [141.0, 1448.0], [142.0, 1153.3333333333333], [143.0, 1096.6842105263158], [144.0, 1086.8260869565217], [145.0, 1108.3181818181818], [146.0, 1044.2499999999998], [147.0, 1054.4615384615386], [148.0, 890.8666666666667], [149.0, 978.6666666666666], [150.0, 863.2], [151.0, 670.0], [152.0, 2129.75], [154.0, 1472.5], [155.0, 1049.2075471698106], [156.0, 1041.0], [158.0, 1300.5], [159.0, 1244.2545454545452], [160.0, 1161.0], [161.0, 1380.0625000000005], [168.0, 1319.0], [171.0, 1437.6666666666667], [172.0, 1613.0], [174.0, 1517.2], [183.0, 1126.5], [184.0, 1420.6201550387595], [185.0, 1353.3], [187.0, 1275.2], [188.0, 1208.9], [189.0, 1436.083333333333], [190.0, 1620.7249999999997], [191.0, 1265.4642857142856], [192.0, 1550.4074074074076], [193.0, 1405.1666666666663], [194.0, 1234.125], [195.0, 886.2857142857141], [196.0, 955.8], [216.0, 927.0], [218.0, 1395.5454545454545], [219.0, 1361.5454545454547], [220.0, 1390.4632768361578], [221.0, 1401.5254237288136], [222.0, 1456.3170731707316], [224.0, 1467.5714285714287], [225.0, 1696.9523809523805], [226.0, 1545.076923076923], [276.0, 2097.3333333333335], [277.0, 1949.6527777777771], [278.0, 2206.7299999999996], [351.0, 2616.0], [359.0, 2421.2682926829266], [356.0, 2082.0], [357.0, 2532.8019801980204], [358.0, 1767.6315789473683], [360.0, 4773.0], [362.0, 1860.0], [363.0, 4446.0], [364.0, 2681.6938775510216], [367.0, 2072.294117647059], [368.0, 2764.159574468086], [369.0, 2426.0], [370.0, 1962.625], [372.0, 2957.678571428572], [389.0, 2605.5], [390.0, 2880.866666666666], [391.0, 2118.454545454545], [392.0, 2347.541666666667], [393.0, 2425.0], [394.0, 1546.0], [416.0, 2136.0], [417.0, 2873.125], [418.0, 2954.1038961038967], [422.0, 2487.0], [423.0, 3578.1162790697686], [439.0, 4860.0], [440.0, 3121.0], [441.0, 4109.333333333333], [447.0, 3657.4], [450.0, 2546.553571428572], [451.0, 3847.9107981220645], [452.0, 2054.3611111111118], [477.0, 17.0], [469.0, 2318.333333333333], [468.0, 25.0], [470.0, 2361.7540983606564], [471.0, 2019.8333333333333], [473.0, 2132.0], [472.0, 16.0], [479.0, 21.0], [478.0, 16.0], [476.0, 17.0], [475.0, 17.0], [474.0, 15.0], [495.0, 1346.5], [488.0, 2111.0], [494.0, 17.0], [493.0, 16.0], [492.0, 19.0], [483.0, 16.0], [482.0, 19.0], [481.0, 16.0], [480.0, 16.0], [491.0, 15.0], [490.0, 14.0], [489.0, 14.0], [487.0, 16.0], [486.0, 14.0], [485.0, 12.0], [484.0, 15.0], [510.0, 21.0], [511.0, 37.0], [509.0, 36.0], [508.0, 24.0], [507.0, 15.0], [506.0, 19.0], [505.0, 18.0], [504.0, 16.0], [503.0, 15.0], [497.0, 20.0], [496.0, 17.0], [499.0, 65.0], [498.0, 20.0], [502.0, 17.0], [501.0, 19.0], [500.0, 17.0], [537.0, 86.5], [543.0, 197.0], [539.0, 1512.0], [524.0, 665.0], [522.0, 26.0], [521.0, 61.0], [520.0, 26.0], [525.0, 19.0], [527.0, 30.0], [513.0, 32.0], [512.0, 45.0], [515.0, 21.0], [514.0, 52.0], [517.0, 50.0], [516.0, 33.0], [519.0, 19.0], [518.0, 34.0], [526.0, 19.0], [528.0, 1632.5], [529.0, 26.0], [531.0, 30.0], [530.0, 22.0], [533.0, 35.0], [532.0, 35.0], [535.0, 59.0], [534.0, 71.0], [541.0, 1464.0], [542.0, 191.0], [540.0, 203.0], [538.0, 119.0], [572.0, 18.0], [575.0, 38.0], [561.0, 54.0], [560.0, 49.0], [563.0, 41.0], [562.0, 58.0], [565.0, 24.0], [564.0, 19.0], [574.0, 28.0], [573.0, 25.0], [571.0, 17.0], [570.0, 32.0], [569.0, 25.0], [568.0, 53.0], [559.0, 43.0], [547.0, 185.0], [544.0, 177.0], [549.0, 159.0], [548.0, 165.5], [551.0, 162.0], [550.0, 168.0], [558.0, 58.0], [557.0, 72.0], [556.0, 49.0], [555.0, 51.0], [554.0, 150.0], [553.0, 156.0], [552.0, 147.0], [567.0, 35.0], [566.0, 28.0], [606.0, 272.0], [579.0, 3233.6956521739125], [577.0, 2863.0549019607843], [576.0, 24.0], [578.0, 35.0], [590.0, 88.0], [589.0, 71.0], [588.0, 44.0], [587.0, 68.0], [586.0, 16.0], [583.0, 1251.4285714285713], [582.0, 33.0], [581.0, 29.0], [580.0, 40.0], [602.0, 538.5], [605.0, 269.0], [604.0, 385.0], [584.0, 1027.0], [585.0, 597.5], [595.0, 1310.3333333333335], [597.0, 2845.0], [596.0, 368.0], [598.0, 1114.0], [599.0, 429.0], [607.0, 427.0], [592.0, 175.0], [594.0, 112.0], [593.0, 86.0], [633.0, 325.0], [638.0, 553.0], [639.0, 412.0], [625.0, 201.0], [624.0, 625.0], [627.0, 498.0], [626.0, 435.0], [629.0, 230.0], [628.0, 551.0], [636.0, 542.0], [635.0, 458.0], [634.0, 436.0], [632.0, 520.0], [615.0, 216.0], [614.0, 174.0], [613.0, 225.0], [612.0, 104.0], [611.0, 116.0], [610.0, 216.0], [609.0, 409.0], [608.0, 90.0], [623.0, 658.0], [622.0, 348.0], [621.0, 281.0], [620.0, 255.0], [619.0, 262.0], [618.0, 58.0], [617.0, 178.0], [616.0, 126.0], [631.0, 538.0], [630.0, 416.0], [653.0, 1149.25], [645.0, 1776.5], [644.0, 706.0], [643.0, 705.0], [642.0, 304.0], [641.0, 352.0], [640.0, 683.0], [646.0, 2103.0845070422533], [647.0, 2039.333333333333], [656.0, 693.25], [650.0, 1046.142857142857], [649.0, 435.0], [648.0, 547.0], [651.0, 826.4285714285714], [652.0, 1332.7766990291261], [654.0, 900.2352941176471], [655.0, 728.5999999999999]], "isOverall": false, "label": "Sunstar Search", "isController": false}, {"data": [[309.0288808664257, 1821.0062174087402]], "isOverall": false, "label": "Sunstar Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 656.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 65.1, "minX": 1.62768277E12, "maxY": 868608.7, "series": [{"data": [[1.62768277E12, 1789.7], [1.62768278E12, 4703.4], [1.62768279E12, 3122.2], [1.6276828E12, 499329.3], [1.62768281E12, 748825.1], [1.62768282E12, 736623.0], [1.62768283E12, 868608.7], [1.62768284E12, 377048.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62768277E12, 65.1], [1.62768278E12, 145.1], [1.62768279E12, 104.8], [1.6276828E12, 16142.1], [1.62768281E12, 24194.2], [1.62768282E12, 23860.2], [1.62768283E12, 28060.4], [1.62768284E12, 12222.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62768284E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 603.4856770833325, "minX": 1.62768277E12, "maxY": 21697.6, "series": [{"data": [[1.62768277E12, 8161.333333333333], [1.62768278E12, 12752.42857142857], [1.62768279E12, 21697.6], [1.6276828E12, 603.4856770833325], [1.62768281E12, 1146.5760208514323], [1.62768282E12, 2147.13127753304], [1.62768283E12, 2938.2876404494364], [1.62768284E12, 1227.6701030927836]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62768284E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 600.7825520833337, "minX": 1.62768277E12, "maxY": 21697.4, "series": [{"data": [[1.62768277E12, 8159.0], [1.62768278E12, 12752.142857142857], [1.62768279E12, 21697.4], [1.6276828E12, 600.7825520833337], [1.62768281E12, 1134.103388357949], [1.62768282E12, 2131.5964757709276], [1.62768283E12, 2919.398501872661], [1.62768284E12, 1225.3453608247416]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62768284E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 78.2, "minX": 1.62768277E12, "maxY": 2828.0838951310907, "series": [{"data": [[1.62768277E12, 276.6666666666667], [1.62768278E12, 92.42857142857143], [1.62768279E12, 78.2], [1.6276828E12, 385.9166666666668], [1.62768281E12, 1084.0695047784545], [1.62768282E12, 2060.41321585903], [1.62768283E12, 2828.0838951310907], [1.62768284E12, 1190.9621993127143]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62768284E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.62768277E12, "maxY": 29843.0, "series": [{"data": [[1.62768277E12, 8503.0], [1.62768278E12, 15743.0], [1.62768279E12, 22708.0], [1.6276828E12, 29843.0], [1.62768281E12, 2600.0], [1.62768282E12, 6170.0], [1.62768283E12, 7720.0], [1.62768284E12, 5908.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62768277E12, 7967.0], [1.62768278E12, 7918.0], [1.62768279E12, 20499.0], [1.6276828E12, 53.0], [1.62768281E12, 335.0], [1.62768282E12, 497.0], [1.62768283E12, 824.0], [1.62768284E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62768277E12, 8503.0], [1.62768278E12, 15743.0], [1.62768279E12, 22708.0], [1.6276828E12, 665.1], [1.62768281E12, 1576.3999999999999], [1.62768282E12, 3188.5999999999995], [1.62768283E12, 4603.6], [1.62768284E12, 2240.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62768277E12, 8503.0], [1.62768278E12, 15743.0], [1.62768279E12, 22708.0], [1.6276828E12, 1304.359999999997], [1.62768281E12, 2212.36], [1.62768282E12, 4765.440000000002], [1.62768283E12, 5941.84], [1.62768284E12, 4420.329999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62768277E12, 8503.0], [1.62768278E12, 15743.0], [1.62768279E12, 22708.0], [1.6276828E12, 736.0999999999999], [1.62768281E12, 1754.3999999999992], [1.62768282E12, 3728.6000000000004], [1.62768283E12, 5041.4], [1.62768284E12, 2891.7500000000014]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62768284E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 14323.5, "series": [{"data": [[2.0, 14323.5], [35.0, 17.0], [38.0, 1392.5], [42.0, 1820.0], [47.0, 58.0], [49.0, 2560.0], [56.0, 192.5], [77.0, 200.0], [80.0, 1063.0], [5.0, 16.0], [89.0, 1464.0], [90.0, 2851.0], [96.0, 268.5], [98.0, 704.0], [99.0, 1071.0], [103.0, 260.0], [104.0, 629.0], [105.0, 2452.0], [107.0, 2142.0], [108.0, 499.0], [110.0, 1323.0], [115.0, 990.0], [119.0, 880.0], [116.0, 3392.5], [123.0, 1020.0], [125.0, 809.0], [127.0, 771.0], [134.0, 2201.5], [129.0, 1975.0], [147.0, 2291.0], [165.0, 1455.0], [181.0, 1432.0], [182.0, 3025.5], [178.0, 2303.5], [194.0, 1567.0], [196.0, 2335.5], [13.0, 2403.0], [1.0, 4032.0], [263.0, 1536.0], [335.0, 2960.0], [27.0, 1938.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 335.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 14323.0, "series": [{"data": [[2.0, 14323.0], [35.0, 17.0], [38.0, 1357.0], [42.0, 1818.5], [47.0, 57.0], [49.0, 2477.0], [56.0, 191.5], [77.0, 199.0], [80.0, 929.5], [5.0, 16.0], [89.0, 1447.0], [90.0, 2837.5], [96.0, 268.0], [98.0, 699.5], [99.0, 1071.0], [103.0, 260.0], [104.0, 628.5], [105.0, 2452.0], [107.0, 2142.0], [108.0, 496.0], [110.0, 1315.0], [115.0, 990.0], [119.0, 868.0], [116.0, 3392.5], [123.0, 1009.0], [125.0, 806.0], [127.0, 770.0], [134.0, 2073.0], [129.0, 1950.0], [147.0, 2282.0], [165.0, 1449.0], [181.0, 1431.0], [182.0, 3025.0], [178.0, 2244.0], [194.0, 1561.5], [196.0, 2334.5], [13.0, 2356.0], [1.0, 4029.0], [263.0, 1535.0], [335.0, 2960.0], [27.0, 1873.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 335.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.62768277E12, "maxY": 133.0, "series": [{"data": [[1.62768277E12, 2.0], [1.6276828E12, 85.8], [1.62768281E12, 125.1], [1.62768282E12, 133.0], [1.62768283E12, 120.7], [1.62768284E12, 32.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62768284E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62768277E12, "maxY": 133.5, "series": [{"data": [[1.62768277E12, 0.3], [1.62768278E12, 0.7], [1.62768279E12, 0.5], [1.6276828E12, 76.8], [1.62768281E12, 115.1], [1.62768282E12, 113.5], [1.62768283E12, 133.5], [1.62768284E12, 58.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62768284E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62768277E12, "maxY": 133.5, "series": [{"data": [[1.62768277E12, 0.3], [1.62768278E12, 0.7], [1.62768279E12, 0.5], [1.6276828E12, 76.8], [1.62768281E12, 115.1], [1.62768282E12, 113.5], [1.62768283E12, 133.5], [1.62768284E12, 58.2]], "isOverall": false, "label": "Sunstar Search-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62768284E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62768277E12, "maxY": 133.5, "series": [{"data": [[1.62768277E12, 0.3], [1.62768278E12, 0.7], [1.62768279E12, 0.5], [1.6276828E12, 76.8], [1.62768281E12, 115.1], [1.62768282E12, 113.5], [1.62768283E12, 133.5], [1.62768284E12, 58.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62768284E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

