/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 181448.0, "series": [{"data": [[0.0, 10.0], [0.1, 11.0], [0.2, 11.0], [0.3, 11.0], [0.4, 11.0], [0.5, 11.0], [0.6, 11.0], [0.7, 12.0], [0.8, 12.0], [0.9, 12.0], [1.0, 12.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 12.0], [1.7, 12.0], [1.8, 12.0], [1.9, 12.0], [2.0, 12.0], [2.1, 12.0], [2.2, 12.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 13.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 13.0], [3.2, 13.0], [3.3, 13.0], [3.4, 13.0], [3.5, 13.0], [3.6, 13.0], [3.7, 13.0], [3.8, 13.0], [3.9, 13.0], [4.0, 13.0], [4.1, 13.0], [4.2, 13.0], [4.3, 13.0], [4.4, 13.0], [4.5, 13.0], [4.6, 13.0], [4.7, 13.0], [4.8, 13.0], [4.9, 13.0], [5.0, 13.0], [5.1, 14.0], [5.2, 14.0], [5.3, 14.0], [5.4, 14.0], [5.5, 14.0], [5.6, 14.0], [5.7, 14.0], [5.8, 14.0], [5.9, 14.0], [6.0, 14.0], [6.1, 14.0], [6.2, 14.0], [6.3, 14.0], [6.4, 14.0], [6.5, 14.0], [6.6, 14.0], [6.7, 14.0], [6.8, 14.0], [6.9, 14.0], [7.0, 14.0], [7.1, 14.0], [7.2, 14.0], [7.3, 14.0], [7.4, 14.0], [7.5, 14.0], [7.6, 14.0], [7.7, 14.0], [7.8, 14.0], [7.9, 14.0], [8.0, 14.0], [8.1, 15.0], [8.2, 15.0], [8.3, 15.0], [8.4, 15.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 15.0], [9.5, 15.0], [9.6, 15.0], [9.7, 15.0], [9.8, 15.0], [9.9, 15.0], [10.0, 15.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 16.0], [11.8, 16.0], [11.9, 16.0], [12.0, 16.0], [12.1, 16.0], [12.2, 16.0], [12.3, 16.0], [12.4, 16.0], [12.5, 16.0], [12.6, 16.0], [12.7, 16.0], [12.8, 16.0], [12.9, 16.0], [13.0, 16.0], [13.1, 16.0], [13.2, 16.0], [13.3, 16.0], [13.4, 16.0], [13.5, 16.0], [13.6, 16.0], [13.7, 16.0], [13.8, 16.0], [13.9, 16.0], [14.0, 16.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 17.0], [15.0, 17.0], [15.1, 17.0], [15.2, 17.0], [15.3, 17.0], [15.4, 17.0], [15.5, 17.0], [15.6, 17.0], [15.7, 17.0], [15.8, 17.0], [15.9, 17.0], [16.0, 17.0], [16.1, 17.0], [16.2, 17.0], [16.3, 17.0], [16.4, 17.0], [16.5, 17.0], [16.6, 17.0], [16.7, 17.0], [16.8, 17.0], [16.9, 17.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 17.0], [17.4, 18.0], [17.5, 18.0], [17.6, 18.0], [17.7, 18.0], [17.8, 18.0], [17.9, 18.0], [18.0, 18.0], [18.1, 18.0], [18.2, 18.0], [18.3, 18.0], [18.4, 18.0], [18.5, 18.0], [18.6, 18.0], [18.7, 18.0], [18.8, 18.0], [18.9, 18.0], [19.0, 18.0], [19.1, 18.0], [19.2, 18.0], [19.3, 18.0], [19.4, 18.0], [19.5, 18.0], [19.6, 19.0], [19.7, 19.0], [19.8, 19.0], [19.9, 19.0], [20.0, 19.0], [20.1, 19.0], [20.2, 19.0], [20.3, 19.0], [20.4, 19.0], [20.5, 19.0], [20.6, 19.0], [20.7, 19.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 20.0], [21.7, 20.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 20.0], [22.8, 20.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 20.0], [24.1, 20.0], [24.2, 20.0], [24.3, 20.0], [24.4, 20.0], [24.5, 20.0], [24.6, 20.0], [24.7, 21.0], [24.8, 21.0], [24.9, 21.0], [25.0, 21.0], [25.1, 21.0], [25.2, 21.0], [25.3, 21.0], [25.4, 21.0], [25.5, 21.0], [25.6, 21.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 21.0], [26.3, 21.0], [26.4, 21.0], [26.5, 21.0], [26.6, 21.0], [26.7, 21.0], [26.8, 21.0], [26.9, 21.0], [27.0, 21.0], [27.1, 21.0], [27.2, 21.0], [27.3, 21.0], [27.4, 21.0], [27.5, 21.0], [27.6, 21.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 21.0], [28.1, 21.0], [28.2, 21.0], [28.3, 21.0], [28.4, 22.0], [28.5, 22.0], [28.6, 22.0], [28.7, 22.0], [28.8, 22.0], [28.9, 22.0], [29.0, 22.0], [29.1, 22.0], [29.2, 22.0], [29.3, 22.0], [29.4, 22.0], [29.5, 22.0], [29.6, 22.0], [29.7, 22.0], [29.8, 22.0], [29.9, 22.0], [30.0, 22.0], [30.1, 22.0], [30.2, 22.0], [30.3, 22.0], [30.4, 22.0], [30.5, 22.0], [30.6, 22.0], [30.7, 22.0], [30.8, 22.0], [30.9, 22.0], [31.0, 22.0], [31.1, 22.0], [31.2, 22.0], [31.3, 22.0], [31.4, 22.0], [31.5, 22.0], [31.6, 22.0], [31.7, 22.0], [31.8, 22.0], [31.9, 22.0], [32.0, 22.0], [32.1, 22.0], [32.2, 22.0], [32.3, 22.0], [32.4, 22.0], [32.5, 22.0], [32.6, 22.0], [32.7, 22.0], [32.8, 23.0], [32.9, 23.0], [33.0, 23.0], [33.1, 23.0], [33.2, 23.0], [33.3, 23.0], [33.4, 23.0], [33.5, 23.0], [33.6, 23.0], [33.7, 23.0], [33.8, 23.0], [33.9, 23.0], [34.0, 23.0], [34.1, 23.0], [34.2, 23.0], [34.3, 23.0], [34.4, 23.0], [34.5, 23.0], [34.6, 23.0], [34.7, 23.0], [34.8, 23.0], [34.9, 23.0], [35.0, 23.0], [35.1, 23.0], [35.2, 23.0], [35.3, 23.0], [35.4, 23.0], [35.5, 23.0], [35.6, 23.0], [35.7, 23.0], [35.8, 23.0], [35.9, 23.0], [36.0, 23.0], [36.1, 23.0], [36.2, 23.0], [36.3, 23.0], [36.4, 23.0], [36.5, 23.0], [36.6, 23.0], [36.7, 23.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 23.0], [37.5, 23.0], [37.6, 23.0], [37.7, 23.0], [37.8, 23.0], [37.9, 23.0], [38.0, 23.0], [38.1, 23.0], [38.2, 23.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 24.0], [42.5, 24.0], [42.6, 24.0], [42.7, 24.0], [42.8, 24.0], [42.9, 24.0], [43.0, 24.0], [43.1, 24.0], [43.2, 24.0], [43.3, 24.0], [43.4, 24.0], [43.5, 24.0], [43.6, 25.0], [43.7, 25.0], [43.8, 25.0], [43.9, 25.0], [44.0, 25.0], [44.1, 25.0], [44.2, 25.0], [44.3, 25.0], [44.4, 25.0], [44.5, 25.0], [44.6, 25.0], [44.7, 25.0], [44.8, 25.0], [44.9, 25.0], [45.0, 25.0], [45.1, 25.0], [45.2, 25.0], [45.3, 25.0], [45.4, 25.0], [45.5, 25.0], [45.6, 25.0], [45.7, 25.0], [45.8, 25.0], [45.9, 25.0], [46.0, 25.0], [46.1, 25.0], [46.2, 25.0], [46.3, 25.0], [46.4, 25.0], [46.5, 25.0], [46.6, 25.0], [46.7, 25.0], [46.8, 25.0], [46.9, 25.0], [47.0, 25.0], [47.1, 25.0], [47.2, 25.0], [47.3, 25.0], [47.4, 25.0], [47.5, 25.0], [47.6, 25.0], [47.7, 25.0], [47.8, 25.0], [47.9, 25.0], [48.0, 25.0], [48.1, 25.0], [48.2, 26.0], [48.3, 26.0], [48.4, 26.0], [48.5, 26.0], [48.6, 26.0], [48.7, 26.0], [48.8, 26.0], [48.9, 26.0], [49.0, 26.0], [49.1, 26.0], [49.2, 26.0], [49.3, 26.0], [49.4, 26.0], [49.5, 26.0], [49.6, 26.0], [49.7, 26.0], [49.8, 26.0], [49.9, 26.0], [50.0, 26.0], [50.1, 26.0], [50.2, 26.0], [50.3, 26.0], [50.4, 26.0], [50.5, 26.0], [50.6, 26.0], [50.7, 26.0], [50.8, 26.0], [50.9, 26.0], [51.0, 26.0], [51.1, 26.0], [51.2, 26.0], [51.3, 26.0], [51.4, 26.0], [51.5, 26.0], [51.6, 26.0], [51.7, 26.0], [51.8, 26.0], [51.9, 26.0], [52.0, 26.0], [52.1, 26.0], [52.2, 27.0], [52.3, 27.0], [52.4, 27.0], [52.5, 27.0], [52.6, 27.0], [52.7, 27.0], [52.8, 27.0], [52.9, 27.0], [53.0, 27.0], [53.1, 27.0], [53.2, 27.0], [53.3, 27.0], [53.4, 27.0], [53.5, 27.0], [53.6, 27.0], [53.7, 27.0], [53.8, 27.0], [53.9, 27.0], [54.0, 27.0], [54.1, 27.0], [54.2, 27.0], [54.3, 27.0], [54.4, 27.0], [54.5, 27.0], [54.6, 27.0], [54.7, 27.0], [54.8, 27.0], [54.9, 27.0], [55.0, 27.0], [55.1, 27.0], [55.2, 27.0], [55.3, 27.0], [55.4, 27.0], [55.5, 27.0], [55.6, 28.0], [55.7, 28.0], [55.8, 28.0], [55.9, 28.0], [56.0, 28.0], [56.1, 28.0], [56.2, 28.0], [56.3, 28.0], [56.4, 28.0], [56.5, 28.0], [56.6, 28.0], [56.7, 28.0], [56.8, 28.0], [56.9, 28.0], [57.0, 28.0], [57.1, 28.0], [57.2, 28.0], [57.3, 28.0], [57.4, 28.0], [57.5, 28.0], [57.6, 28.0], [57.7, 28.0], [57.8, 28.0], [57.9, 28.0], [58.0, 28.0], [58.1, 28.0], [58.2, 28.0], [58.3, 28.0], [58.4, 28.0], [58.5, 28.0], [58.6, 28.0], [58.7, 29.0], [58.8, 29.0], [58.9, 29.0], [59.0, 29.0], [59.1, 29.0], [59.2, 29.0], [59.3, 29.0], [59.4, 29.0], [59.5, 29.0], [59.6, 29.0], [59.7, 29.0], [59.8, 29.0], [59.9, 29.0], [60.0, 29.0], [60.1, 29.0], [60.2, 29.0], [60.3, 29.0], [60.4, 29.0], [60.5, 29.0], [60.6, 29.0], [60.7, 29.0], [60.8, 29.0], [60.9, 29.0], [61.0, 29.0], [61.1, 29.0], [61.2, 29.0], [61.3, 30.0], [61.4, 30.0], [61.5, 30.0], [61.6, 30.0], [61.7, 30.0], [61.8, 30.0], [61.9, 30.0], [62.0, 30.0], [62.1, 30.0], [62.2, 30.0], [62.3, 30.0], [62.4, 30.0], [62.5, 30.0], [62.6, 30.0], [62.7, 30.0], [62.8, 30.0], [62.9, 30.0], [63.0, 30.0], [63.1, 30.0], [63.2, 30.0], [63.3, 30.0], [63.4, 31.0], [63.5, 31.0], [63.6, 31.0], [63.7, 31.0], [63.8, 31.0], [63.9, 31.0], [64.0, 31.0], [64.1, 31.0], [64.2, 31.0], [64.3, 31.0], [64.4, 31.0], [64.5, 31.0], [64.6, 31.0], [64.7, 31.0], [64.8, 31.0], [64.9, 31.0], [65.0, 31.0], [65.1, 31.0], [65.2, 32.0], [65.3, 32.0], [65.4, 32.0], [65.5, 32.0], [65.6, 32.0], [65.7, 32.0], [65.8, 32.0], [65.9, 32.0], [66.0, 32.0], [66.1, 32.0], [66.2, 32.0], [66.3, 32.0], [66.4, 32.0], [66.5, 32.0], [66.6, 32.0], [66.7, 32.0], [66.8, 32.0], [66.9, 33.0], [67.0, 33.0], [67.1, 33.0], [67.2, 33.0], [67.3, 33.0], [67.4, 33.0], [67.5, 33.0], [67.6, 33.0], [67.7, 33.0], [67.8, 33.0], [67.9, 33.0], [68.0, 33.0], [68.1, 33.0], [68.2, 34.0], [68.3, 34.0], [68.4, 34.0], [68.5, 34.0], [68.6, 34.0], [68.7, 34.0], [68.8, 34.0], [68.9, 34.0], [69.0, 34.0], [69.1, 34.0], [69.2, 34.0], [69.3, 34.0], [69.4, 34.0], [69.5, 35.0], [69.6, 35.0], [69.7, 35.0], [69.8, 35.0], [69.9, 35.0], [70.0, 35.0], [70.1, 35.0], [70.2, 35.0], [70.3, 35.0], [70.4, 35.0], [70.5, 36.0], [70.6, 36.0], [70.7, 36.0], [70.8, 36.0], [70.9, 36.0], [71.0, 36.0], [71.1, 36.0], [71.2, 36.0], [71.3, 36.0], [71.4, 36.0], [71.5, 36.0], [71.6, 37.0], [71.7, 37.0], [71.8, 37.0], [71.9, 37.0], [72.0, 37.0], [72.1, 37.0], [72.2, 37.0], [72.3, 37.0], [72.4, 38.0], [72.5, 38.0], [72.6, 38.0], [72.7, 38.0], [72.8, 38.0], [72.9, 38.0], [73.0, 38.0], [73.1, 38.0], [73.2, 39.0], [73.3, 39.0], [73.4, 39.0], [73.5, 39.0], [73.6, 39.0], [73.7, 39.0], [73.8, 39.0], [73.9, 39.0], [74.0, 40.0], [74.1, 40.0], [74.2, 40.0], [74.3, 40.0], [74.4, 40.0], [74.5, 40.0], [74.6, 40.0], [74.7, 40.0], [74.8, 41.0], [74.9, 41.0], [75.0, 41.0], [75.1, 41.0], [75.2, 41.0], [75.3, 41.0], [75.4, 41.0], [75.5, 41.0], [75.6, 42.0], [75.7, 42.0], [75.8, 42.0], [75.9, 42.0], [76.0, 42.0], [76.1, 42.0], [76.2, 42.0], [76.3, 43.0], [76.4, 43.0], [76.5, 43.0], [76.6, 43.0], [76.7, 43.0], [76.8, 43.0], [76.9, 43.0], [77.0, 44.0], [77.1, 44.0], [77.2, 44.0], [77.3, 44.0], [77.4, 44.0], [77.5, 44.0], [77.6, 45.0], [77.7, 45.0], [77.8, 45.0], [77.9, 45.0], [78.0, 45.0], [78.1, 45.0], [78.2, 45.0], [78.3, 46.0], [78.4, 46.0], [78.5, 46.0], [78.6, 46.0], [78.7, 46.0], [78.8, 46.0], [78.9, 47.0], [79.0, 47.0], [79.1, 47.0], [79.2, 47.0], [79.3, 47.0], [79.4, 47.0], [79.5, 48.0], [79.6, 48.0], [79.7, 48.0], [79.8, 48.0], [79.9, 48.0], [80.0, 48.0], [80.1, 49.0], [80.2, 49.0], [80.3, 49.0], [80.4, 49.0], [80.5, 49.0], [80.6, 49.0], [80.7, 50.0], [80.8, 50.0], [80.9, 50.0], [81.0, 50.0], [81.1, 50.0], [81.2, 51.0], [81.3, 51.0], [81.4, 51.0], [81.5, 51.0], [81.6, 51.0], [81.7, 51.0], [81.8, 52.0], [81.9, 52.0], [82.0, 52.0], [82.1, 52.0], [82.2, 52.0], [82.3, 52.0], [82.4, 53.0], [82.5, 53.0], [82.6, 53.0], [82.7, 53.0], [82.8, 53.0], [82.9, 53.0], [83.0, 54.0], [83.1, 54.0], [83.2, 54.0], [83.3, 54.0], [83.4, 55.0], [83.5, 55.0], [83.6, 55.0], [83.7, 55.0], [83.8, 55.0], [83.9, 55.0], [84.0, 56.0], [84.1, 56.0], [84.2, 56.0], [84.3, 56.0], [84.4, 57.0], [84.5, 57.0], [84.6, 57.0], [84.7, 57.0], [84.8, 57.0], [84.9, 58.0], [85.0, 58.0], [85.1, 58.0], [85.2, 59.0], [85.3, 59.0], [85.4, 59.0], [85.5, 59.0], [85.6, 59.0], [85.7, 60.0], [85.8, 60.0], [85.9, 60.0], [86.0, 60.0], [86.1, 60.0], [86.2, 61.0], [86.3, 61.0], [86.4, 61.0], [86.5, 62.0], [86.6, 62.0], [86.7, 62.0], [86.8, 62.0], [86.9, 63.0], [87.0, 63.0], [87.1, 63.0], [87.2, 63.0], [87.3, 64.0], [87.4, 64.0], [87.5, 64.0], [87.6, 65.0], [87.7, 65.0], [87.8, 65.0], [87.9, 66.0], [88.0, 66.0], [88.1, 66.0], [88.2, 67.0], [88.3, 67.0], [88.4, 67.0], [88.5, 68.0], [88.6, 68.0], [88.7, 68.0], [88.8, 69.0], [88.9, 69.0], [89.0, 70.0], [89.1, 70.0], [89.2, 70.0], [89.3, 71.0], [89.4, 71.0], [89.5, 72.0], [89.6, 72.0], [89.7, 72.0], [89.8, 73.0], [89.9, 74.0], [90.0, 74.0], [90.1, 75.0], [90.2, 75.0], [90.3, 76.0], [90.4, 76.0], [90.5, 77.0], [90.6, 77.0], [90.7, 78.0], [90.8, 79.0], [90.9, 79.0], [91.0, 80.0], [91.1, 81.0], [91.2, 82.0], [91.3, 83.0], [91.4, 84.0], [91.5, 84.0], [91.6, 85.0], [91.7, 87.0], [91.8, 87.0], [91.9, 89.0], [92.0, 90.0], [92.1, 91.0], [92.2, 92.0], [92.3, 93.0], [92.4, 94.0], [92.5, 95.0], [92.6, 97.0], [92.7, 98.0], [92.8, 100.0], [92.9, 102.0], [93.0, 104.0], [93.1, 106.0], [93.2, 108.0], [93.3, 110.0], [93.4, 113.0], [93.5, 116.0], [93.6, 119.0], [93.7, 122.0], [93.8, 125.0], [93.9, 128.0], [94.0, 131.0], [94.1, 135.0], [94.2, 139.0], [94.3, 143.0], [94.4, 148.0], [94.5, 152.0], [94.6, 157.0], [94.7, 163.0], [94.8, 173.0], [94.9, 182.0], [95.0, 190.0], [95.1, 200.0], [95.2, 213.0], [95.3, 234.0], [95.4, 260.0], [95.5, 300.0], [95.6, 378.0], [95.7, 465.0], [95.8, 508.0], [95.9, 555.0], [96.0, 648.0], [96.1, 713.0], [96.2, 746.0], [96.3, 772.0], [96.4, 789.0], [96.5, 807.0], [96.6, 826.0], [96.7, 838.0], [96.8, 849.0], [96.9, 862.0], [97.0, 872.0], [97.1, 883.0], [97.2, 894.0], [97.3, 905.0], [97.4, 916.0], [97.5, 926.0], [97.6, 936.0], [97.7, 948.0], [97.8, 961.0], [97.9, 985.0], [98.0, 1020.0], [98.1, 1067.0], [98.2, 1143.0], [98.3, 1185.0], [98.4, 1217.0], [98.5, 1247.0], [98.6, 1297.0], [98.7, 1342.0], [98.8, 1379.0], [98.9, 1408.0], [99.0, 1442.0], [99.1, 1472.0], [99.2, 1499.0], [99.3, 1532.0], [99.4, 1581.0], [99.5, 60061.0], [99.6, 60190.0], [99.7, 60276.0], [99.8, 60367.0], [99.9, 60668.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 31177.0, "series": [{"data": [[0.0, 31177.0], [600.0, 51.0], [700.0, 125.0], [180000.0, 9.0], [180200.0, 1.0], [181400.0, 1.0], [800.0, 270.0], [900.0, 231.0], [1000.0, 64.0], [1100.0, 68.0], [1200.0, 91.0], [1300.0, 87.0], [1400.0, 114.0], [1500.0, 69.0], [100.0, 780.0], [2500.0, 4.0], [180100.0, 3.0], [180700.0, 1.0], [200.0, 137.0], [61100.0, 1.0], [60700.0, 7.0], [60400.0, 11.0], [60200.0, 33.0], [60100.0, 23.0], [60000.0, 42.0], [60300.0, 39.0], [60500.0, 2.0], [60800.0, 1.0], [60900.0, 2.0], [60600.0, 16.0], [300.0, 44.0], [400.0, 49.0], [120000.0, 3.0], [500.0, 51.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 181400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 268.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 32188.0, "series": [{"data": [[0.0, 32188.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1151.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 268.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62703989E12, "maxY": 1466.6315789473679, "series": [{"data": [[1.62704021E12, 14.0], [1.62704004E12, 7.0], [1.62703991E12, 846.9848484848482], [1.62704038E12, 14.058823529411761], [1.62704017E12, 16.0], [1.62704051E12, 2.0], [1.62704034E12, 15.0], [1.62704029E12, 15.0], [1.62704012E12, 20.281897127588476], [1.62704025E12, 14.0], [1.62704008E12, 28.150588235294133], [1.62703995E12, 60.62264150943396], [1.62704037E12, 15.0], [1.6270402E12, 9.621621621621623], [1.62704007E12, 20.97520661157025], [1.6270399E12, 1286.4852320675107], [1.62704033E12, 15.0], [1.62704016E12, 16.0], [1.62704028E12, 15.0], [1.62704015E12, 17.785937500000035], [1.62704088E12, 2.5], [1.62704024E12, 14.0], [1.62704011E12, 18.54753877275791], [1.62703989E12, 1466.6315789473679], [1.62704036E12, 15.0], [1.62704023E12, 14.0], [1.6270407E12, 3.0], [1.62704032E12, 15.0], [1.62704019E12, 16.0], [1.62704031E12, 15.0], [1.62704014E12, 23.564467766116934], [1.62703993E12, 121.13333333333334], [1.62704027E12, 15.0], [1.6270401E12, 37.31827515400409], [1.62704005E12, 7.0], [1.62704052E12, 1.0], [1.62704039E12, 3.0], [1.62704022E12, 14.0], [1.62704035E12, 15.0], [1.62704018E12, 16.0], [1.62704013E12, 21.0], [1.6270403E12, 15.0], [1.62704009E12, 61.12670007158196], [1.62703992E12, 319.957219251337], [1.62704026E12, 14.94834710743801]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704088E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 180057.66666666666, "series": [{"data": [[2.0, 180057.66666666666], [3.0, 150037.0], [4.0, 120052.0], [5.0, 41.0], [6.0, 45.0], [7.0, 150130.3333333333], [8.0, 3311.454545454544], [9.0, 40510.0], [10.0, 28.0], [11.0, 40462.66666666667], [12.0, 77.69230769230768], [13.0, 4700.948717948718], [14.0, 114.37070524412269], [15.0, 86.62498300937898], [16.0, 221.5760555234239], [17.0, 261.6098418277679], [18.0, 392.40163934426215], [19.0, 350.25934579439246], [20.0, 75.44795859689502], [21.0, 129.50252525252498], [22.0, 675.1249999999998], [23.0, 496.8378378378378], [24.0, 584.1428571428569], [25.0, 76.9087452471483], [26.0, 1676.9605263157887], [27.0, 1078.1290322580646], [28.0, 165.42913000977478], [29.0, 248.0311526479748], [30.0, 1624.7249999999995], [31.0, 1571.8780487804875], [33.0, 1938.3030303030303], [32.0, 1585.3658536585363], [35.0, 1969.6874999999998], [34.0, 1510.6046511627908], [37.0, 2061.774193548386], [36.0, 1883.0], [38.0, 3277.315789473684], [39.0, 102.70588235294116], [41.0, 3127.0999999999995], [40.0, 5581.727272727273], [43.0, 4118.5999999999985], [42.0, 3131.5500000000006], [45.0, 6795.11111111111], [44.0, 5102.75], [47.0, 10119.583333333334], [46.0, 70.47058823529412], [49.0, 15188.375], [48.0, 5573.999999999999], [51.0, 6086.9], [50.0, 6780.222222222223], [53.0, 6786.88888888889], [52.0, 4097.333333333334], [55.0, 4704.3076923076915], [54.0, 5122.166666666667], [57.0, 4741.230769230768], [56.0, 617.1249999999998], [59.0, 3484.2222222222217], [58.0, 8717.285714285714], [61.0, 6801.000000000002], [60.0, 5585.545454545456], [63.0, 3519.000000000001], [62.0, 3644.0588235294113], [67.0, 4748.615384615385], [66.0, 6235.6], [65.0, 4806.692307692306], [64.0, 4724.384615384615], [71.0, 6131.599999999998], [70.0, 8719.357142857147], [68.0, 4382.571428571428], [69.0, 92.77777777777777], [75.0, 8734.0], [74.0, 8121.0666666666675], [72.0, 5573.181818181819], [73.0, 128.09999999999997], [78.0, 8128.266666666666], [77.0, 10158.5], [79.0, 97.16666666666667], [76.0, 154.0], [83.0, 5609.727272727272], [82.0, 6153.800000000001], [81.0, 10198.833333333332], [80.0, 11082.999999999996], [87.0, 6164.2], [86.0, 5655.90909090909], [85.0, 8723.714285714284], [84.0, 8745.285714285716], [91.0, 5553.272727272727], [90.0, 6092.400000000001], [89.0, 4714.076923076922], [88.0, 6787.333333333334], [95.0, 5548.272727272727], [94.0, 6116.500000000002], [93.0, 6100.4], [92.0, 4088.2666666666664], [99.0, 7607.500000000001], [98.0, 8668.57142857143], [97.0, 6109.0999999999985], [96.0, 6754.444444444443], [103.0, 6770.888888888889], [102.0, 3829.4374999999995], [101.0, 7625.625000000002], [100.0, 8676.285714285714], [107.0, 5545.818181818183], [106.0, 5138.333333333334], [105.0, 5112.583333333334], [104.0, 4718.153846153845], [111.0, 8670.42857142857], [110.0, 6091.0], [109.0, 12120.999999999998], [108.0, 105.0], [115.0, 15101.249999999998], [114.0, 15123.999999999998], [113.0, 878.3513513513514], [112.0, 6085.2], [119.0, 15116.499999999998], [118.0, 10094.5], [117.0, 15102.499999999998], [116.0, 12109.6], [123.0, 15089.749999999998], [121.0, 20105.0], [120.0, 20119.666666666664], [122.0, 58.0], [127.0, 10077.833333333332], [126.0, 15084.249999999998], [124.0, 20093.666666666664], [125.0, 53.25], [128.0, 12064.599999999999], [130.0, 60.5], [129.0, 53.25], [131.0, 84.0], [135.0, 58.0], [134.0, 60.0], [133.0, 81.0], [132.0, 80.0], [141.0, 67.0], [143.0, 69.0], [142.0, 70.0], [140.0, 90.0], [139.0, 90.0], [138.0, 46.0], [137.0, 50.0], [136.0, 55.0], [151.0, 49.0], [150.0, 48.0], [149.0, 48.0], [148.0, 55.0], [147.0, 57.0], [144.0, 42.0], [159.0, 268.5], [158.0, 323.33333333333337], [157.0, 163.28571428571428], [156.0, 221.6], [155.0, 359.0], [154.0, 511.0], [153.0, 502.5], [152.0, 791.5], [167.0, 649.75], [166.0, 859.4000000000001], [165.0, 330.66666666666663], [164.0, 331.33333333333337], [162.0, 498.0], [161.0, 786.0], [160.0, 555.3333333333334], [163.0, 50.0], [174.0, 522.2], [173.0, 247.0], [171.0, 480.0], [170.0, 793.0], [169.0, 785.5], [168.0, 317.3333333333333], [172.0, 52.5], [175.0, 53.666666666666664], [183.0, 318.33333333333337], [182.0, 775.25], [180.0, 517.0], [179.0, 268.0], [178.0, 474.0], [177.0, 234.8], [176.0, 374.2857142857143], [181.0, 52.6], [191.0, 472.0], [190.0, 584.0], [188.0, 465.74999999999994], [187.0, 601.3333333333333], [185.0, 249.50000000000003], [184.0, 467.0], [189.0, 66.0], [186.0, 54.0], [199.0, 870.0], [198.0, 868.0], [197.0, 887.0], [196.0, 1223.0], [195.0, 859.0], [194.0, 890.0], [193.0, 1551.0], [192.0, 472.5], [207.0, 884.0], [206.0, 846.0], [205.0, 896.0], [204.0, 874.0], [203.0, 855.0], [202.0, 1459.0], [201.0, 898.0], [200.0, 1198.5], [215.0, 875.0], [214.0, 880.0], [213.0, 844.0], [212.0, 1166.0], [210.0, 854.0], [209.0, 852.0], [208.0, 880.0], [223.0, 868.0], [222.0, 829.0], [221.0, 856.0], [220.0, 870.0], [219.0, 846.0], [218.0, 833.0], [217.0, 878.0], [216.0, 1449.0], [231.0, 1486.0], [230.0, 820.0], [229.0, 1155.0], [228.0, 1139.0], [227.0, 862.0], [226.0, 1435.0], [225.0, 817.0], [224.0, 843.0], [239.0, 1407.0], [237.0, 1471.0], [236.0, 852.0], [235.0, 852.0], [234.0, 1456.0], [233.0, 1462.0], [232.0, 1457.0], [247.0, 1426.0], [246.0, 1453.0], [245.0, 1417.0], [244.0, 1401.0], [243.0, 1480.0], [242.0, 1480.0], [241.0, 1463.0], [240.0, 1440.0], [255.0, 1479.0], [254.0, 779.0], [253.0, 1413.0], [252.0, 1401.0], [251.0, 1461.0], [250.0, 1452.0], [249.0, 1483.0], [248.0, 1483.0], [270.0, 1401.5], [271.0, 1436.0], [268.0, 1340.0], [259.0, 1364.0], [257.0, 1416.0], [256.0, 1434.0], [267.0, 1342.0], [266.0, 1367.0], [265.0, 1382.0], [264.0, 1386.0], [262.0, 1384.0], [261.0, 1405.0], [260.0, 1405.0], [281.0, 1384.0], [277.0, 1343.0], [276.0, 1361.0], [275.0, 1416.0], [274.0, 1355.0], [273.0, 1395.0], [272.0, 1332.0], [302.0, 1218.0], [303.0, 1297.0], [301.0, 1249.0], [300.0, 1262.0], [299.0, 1275.0], [298.0, 1328.0], [297.0, 1293.0], [296.0, 1299.0], [295.0, 1265.0], [294.0, 1330.0], [293.0, 1319.125], [318.0, 1135.0], [319.0, 1069.0], [317.0, 1158.0], [316.0, 1232.0], [315.0, 1136.0], [314.0, 1229.0], [313.0, 1176.0], [312.0, 1237.0], [311.0, 1171.0], [305.0, 1218.0], [304.0, 1217.0], [307.0, 1154.0], [306.0, 492.0], [310.0, 1229.0], [309.0, 1202.0], [308.0, 1196.0], [334.0, 971.0], [335.0, 825.0], [333.0, 1008.0], [332.0, 964.0], [331.0, 949.0], [330.0, 955.0], [329.0, 961.0], [328.0, 994.0], [327.0, 1052.0], [321.0, 1027.0], [320.0, 1121.0], [323.0, 1061.0], [322.0, 1025.0], [326.0, 985.0], [325.0, 1046.0], [324.0, 1042.0], [351.0, 350.0], [350.0, 379.0], [339.0, 797.0], [338.0, 807.0], [337.0, 781.0], [336.0, 779.0], [347.0, 378.0], [346.0, 375.0], [345.0, 392.0], [344.0, 696.0], [343.0, 713.0], [342.0, 756.0], [341.0, 716.0], [340.0, 806.0], [366.0, 371.0], [367.0, 373.0], [364.0, 374.0], [352.0, 373.0], [363.0, 343.0], [362.0, 343.0], [361.0, 355.5], [359.0, 369.3333333333333], [358.0, 370.5], [357.0, 348.0], [356.0, 375.0], [382.0, 260.0], [383.0, 284.0], [381.0, 271.0], [380.0, 300.0], [379.0, 284.0], [378.0, 278.0], [376.0, 302.0], [375.0, 290.0], [369.0, 348.0], [371.0, 296.0], [370.0, 338.0], [374.0, 295.0], [373.0, 286.0], [397.0, 578.0], [399.0, 530.0], [396.0, 259.0], [387.0, 243.0], [386.0, 251.0], [385.0, 260.0], [384.0, 252.0], [395.0, 240.0], [394.0, 252.0], [393.0, 234.0], [392.0, 257.0], [391.0, 258.0], [390.0, 242.0], [389.0, 251.0], [388.0, 251.0], [415.0, 514.0], [414.0, 524.0], [412.0, 533.0], [431.0, 545.0], [430.0, 555.0], [429.0, 542.0], [428.0, 508.0], [424.0, 510.0], [422.0, 504.0], [418.0, 511.0], [446.0, 517.0], [447.0, 499.0], [445.0, 463.0], [444.0, 465.0], [443.0, 527.0], [442.0, 456.0], [441.0, 472.0], [440.0, 506.0], [439.0, 511.0], [433.0, 546.0], [432.0, 518.8181818181819], [435.0, 513.0], [434.0, 491.0], [438.0, 492.0], [437.0, 477.0], [436.0, 490.5], [462.0, 477.0], [463.0, 469.0], [461.0, 463.0], [460.0, 459.0], [459.0, 479.0], [458.0, 505.0], [457.0, 503.0], [456.0, 453.0], [455.0, 497.0], [449.0, 480.0], [448.0, 447.0], [451.0, 468.0], [450.0, 458.0], [454.0, 505.0], [453.0, 482.0], [452.0, 450.0], [478.0, 60116.0], [479.0, 60112.0], [477.0, 60114.0], [476.0, 60123.0], [475.0, 60121.0], [474.0, 60129.0], [473.0, 284.0], [472.0, 312.0], [471.0, 479.0], [465.0, 473.0], [464.0, 435.0], [467.0, 466.0], [466.0, 450.0], [470.0, 419.0], [469.0, 484.0], [468.0, 452.0], [493.0, 131.5], [495.0, 132.5], [492.0, 135.0], [483.0, 161.0], [481.0, 60115.0], [480.0, 60114.0], [491.0, 134.0], [489.0, 143.0], [488.0, 142.0], [487.0, 145.0], [486.0, 149.0], [485.0, 143.0], [484.0, 161.5], [509.0, 918.0], [510.0, 965.0], [508.0, 944.0], [499.0, 122.0], [498.0, 126.0], [497.0, 126.0], [496.0, 138.0], [507.0, 950.0], [506.0, 932.0], [505.0, 954.0], [504.0, 953.0], [503.0, 958.0], [502.0, 34.0], [501.0, 111.0], [500.0, 108.0], [537.0, 949.0], [531.0, 945.5], [543.0, 899.0], [539.0, 929.0], [538.0, 916.0], [527.0, 951.0], [512.0, 943.5], [514.0, 943.0], [513.0, 959.0], [519.0, 929.0], [517.0, 940.5], [525.0, 923.0], [524.0, 929.0], [523.0, 953.0], [522.0, 939.0], [520.0, 931.0], [535.0, 908.5], [533.0, 907.0], [532.0, 908.0], [530.0, 928.0], [529.0, 933.0], [569.0, 836.0], [573.0, 866.0], [575.0, 835.5], [561.0, 877.0], [560.0, 899.0], [563.0, 873.5], [562.0, 884.0], [565.0, 852.0], [564.0, 892.0], [572.0, 849.0], [571.0, 838.0], [570.0, 855.0], [568.0, 867.5], [551.0, 858.0], [550.0, 895.0], [549.0, 869.0], [548.0, 888.0], [547.0, 912.0], [546.0, 866.0], [545.0, 883.0], [544.0, 872.0], [559.0, 879.5], [558.0, 870.0], [557.0, 887.0], [556.0, 869.0], [555.0, 857.0], [554.0, 905.0], [553.0, 895.0], [552.0, 887.0], [567.0, 879.0], [566.0, 848.0], [601.0, 1458.0], [596.0, 1316.0], [602.0, 1121.0], [593.0, 1494.0], [592.0, 1467.0], [600.0, 1401.0], [583.0, 1344.0], [582.0, 1334.0], [579.0, 849.0], [578.0, 854.0], [577.0, 864.0], [576.0, 877.0], [591.0, 1499.0], [590.0, 1169.0], [589.0, 1326.0], [588.0, 1441.0], [587.0, 1164.0], [586.0, 1440.0], [585.0, 1445.0], [584.0, 1450.0], [599.0, 1412.0], [598.0, 1429.0], [597.0, 1414.0], [595.0, 1491.0], [594.0, 1466.0], [636.0, 1057.0], [639.0, 1343.0], [624.0, 1411.0], [627.0, 1086.0], [626.0, 1342.0], [638.0, 1320.0], [637.0, 1347.0], [635.0, 1059.0], [634.0, 1403.0], [633.0, 1062.0], [632.0, 1342.8666666666666], [623.0, 1366.0], [615.0, 1435.0], [613.0, 1400.0], [622.0, 1354.0], [621.0, 1404.0], [620.0, 1378.0], [619.0, 1391.0], [618.0, 1379.0], [617.0, 1401.0], [616.0, 1392.0], [629.0, 1392.0], [628.0, 1396.0], [668.0, 1274.0], [671.0, 987.0], [657.0, 1326.0], [659.0, 1313.0], [658.0, 1280.4117647058827], [661.0, 1027.0], [660.0, 1303.0], [670.0, 1003.0], [669.0, 1306.0], [667.0, 1268.0], [666.0, 1310.0], [665.0, 1321.0], [664.0, 1021.0], [640.0, 1373.0], [663.0, 1297.0], [662.0, 1359.0], [700.0, 1214.0], [703.0, 1234.0], [689.0, 1248.0], [688.0, 1234.0], [691.0, 1263.0], [690.0, 1216.0], [693.0, 1215.0], [692.0, 1237.0], [702.0, 936.0], [701.0, 1237.0], [699.0, 1255.0], [698.0, 1267.0], [697.0, 1257.0], [696.0, 1244.0], [687.0, 1235.0], [672.0, 1281.0], [675.0, 1254.0], [674.0, 1286.0], [677.0, 1316.0], [676.0, 1252.0], [679.0, 989.0], [678.0, 1258.0], [686.0, 1136.0], [685.0, 1259.0], [684.0, 1281.0], [683.0, 1251.0], [682.0, 1246.0], [681.0, 1274.0], [680.0, 1240.0], [695.0, 1259.0], [694.0, 952.0], [732.0, 1118.0], [735.0, 1063.0], [721.0, 1203.0], [720.0, 1226.0], [723.0, 1186.0], [722.0, 1161.0], [725.0, 892.0], [724.0, 1206.0], [734.0, 1129.0], [733.0, 1067.0], [731.0, 793.0], [730.0, 1073.0], [729.0, 814.0], [728.0, 990.0], [719.0, 1196.0], [705.0, 1213.0], [704.0, 933.0], [707.0, 1231.0], [706.0, 1231.0], [709.0, 1199.0], [708.0, 1217.0], [711.0, 928.0], [710.0, 1204.0], [718.0, 1218.0], [717.0, 1240.0], [716.0, 1201.0], [715.0, 1243.0], [714.0, 935.0], [713.0, 1225.0], [712.0, 939.0], [727.0, 1188.0], [726.0, 1138.0], [760.0, 728.0], [766.0, 761.0], [767.0, 781.5], [754.0, 788.0], [753.0, 762.5], [764.0, 786.0], [763.0, 775.0], [761.0, 780.0], [751.0, 768.5], [737.0, 60085.0], [736.0, 60090.0], [739.0, 60080.0], [738.0, 60081.0], [741.0, 810.0], [740.0, 60064.0], [743.0, 777.0], [742.0, 786.0], [747.0, 802.0], [746.0, 738.0], [745.0, 819.0], [744.0, 744.0], [759.0, 725.0], [758.0, 766.0], [757.0, 763.0], [755.0, 771.0], [793.0, 670.0], [798.0, 637.0], [799.0, 648.0], [787.0, 710.0], [786.0, 694.0], [789.0, 700.0], [788.0, 695.0], [796.0, 691.0], [795.0, 633.0], [794.0, 651.0], [792.0, 715.0], [775.0, 742.0], [774.0, 739.0], [773.0, 748.0], [771.0, 746.0], [770.0, 764.0], [769.0, 757.0], [783.0, 758.0], [781.0, 771.0], [780.0, 697.0], [779.0, 741.0], [778.0, 774.0], [777.0, 745.0], [776.0, 778.0], [791.0, 682.0], [790.0, 713.0], [826.0, 619.0], [830.0, 572.0], [831.0, 557.0], [818.0, 600.0], [817.0, 642.0], [821.0, 630.0], [819.0, 643.0], [829.0, 617.0], [828.0, 622.0], [827.0, 627.0], [825.0, 585.0], [807.0, 613.0], [806.0, 647.0], [804.0, 614.0], [803.0, 662.0], [802.0, 651.0], [801.0, 652.0], [800.0, 641.0], [815.0, 645.0], [814.0, 603.0], [813.0, 617.0], [812.0, 646.0], [811.0, 623.0], [808.0, 648.0], [823.0, 638.0], [822.0, 643.0], [835.0, 546.5], [834.0, 564.0], [833.0, 557.0], [832.0, 557.0], [925.0, 953.0], [927.0, 954.5], [923.0, 927.0], [922.0, 931.0], [920.0, 930.0], [919.0, 938.0], [916.0, 983.0], [915.0, 979.0], [914.0, 952.0], [956.0, 895.0], [959.0, 924.0], [944.0, 907.0], [946.0, 920.0], [945.0, 915.0], [949.0, 902.0], [948.0, 924.5], [958.0, 879.0], [957.0, 919.0], [955.0, 938.0], [954.0, 888.0], [953.0, 938.0], [952.0, 926.5], [943.0, 928.5], [928.0, 928.0], [930.0, 942.0], [929.0, 914.0], [932.0, 945.0], [931.0, 943.0], [934.0, 931.0], [933.0, 939.0], [941.0, 926.0], [940.0, 908.0], [939.0, 926.0], [938.0, 921.0], [937.0, 934.6666666666666], [951.0, 942.0], [950.0, 894.0], [984.0, 1470.0], [990.0, 1482.0], [991.0, 1499.0], [978.0, 917.4285714285714], [976.0, 860.0], [988.0, 1483.0], [986.0, 1455.0], [985.0, 1482.0], [975.0, 888.0], [962.0, 913.0], [961.0, 920.0], [964.0, 929.0], [963.0, 917.0], [967.0, 901.0], [966.0, 921.0], [973.0, 877.0], [971.0, 911.5], [970.0, 1581.0], [969.0, 909.0], [968.0, 904.0], [983.0, 1527.0], [982.0, 1521.0], [981.0, 1519.0], [979.0, 1500.793103448276], [1017.0, 1421.0], [1021.0, 1362.0], [1023.0, 1398.0], [1009.0, 1446.5], [1008.0, 1439.0], [1011.0, 1446.0], [1010.0, 1422.0], [1013.0, 1399.0], [1012.0, 1397.0], [1020.0, 1424.0], [1019.0, 1382.0], [1018.0, 1448.0], [1016.0, 1461.0], [998.0, 1467.0], [996.0, 1449.0], [995.0, 1447.0], [994.0, 1467.5], [992.0, 1493.5], [1007.0, 1440.0], [1006.0, 1422.0], [1005.0, 1445.5], [1004.0, 1461.5], [1003.0, 1492.0], [1002.0, 1498.0], [1001.0, 1469.0], [1000.0, 1459.5], [1015.0, 1451.0], [1014.0, 1441.0], [1078.0, 834.5], [1072.0, 880.0], [1056.0, 846.0], [1058.0, 917.0], [1060.0, 901.0], [1066.0, 851.0], [1068.0, 923.0], [1084.0, 847.0], [1082.0, 871.5], [1080.0, 851.0], [1076.0, 838.0], [1074.0, 870.0], [1024.0, 1338.0], [1026.0, 1305.0], [1028.0, 1185.0], [1030.0, 1259.0], [1032.0, 1236.0], [1034.0, 1229.0], [1036.0, 1143.5], [1038.0, 1161.0], [1054.0, 918.0], [1052.0, 936.0], [1050.0, 878.0], [1048.0, 948.0], [1046.0, 907.0], [1044.0, 909.0], [1042.0, 1003.0], [1040.0, 1316.0], [1142.0, 746.0], [1148.0, 785.0], [1120.0, 766.0], [1122.0, 823.0], [1124.0, 835.0], [1126.0, 794.0], [1128.0, 789.0], [1150.0, 728.0], [1146.0, 735.0], [1140.0, 849.0], [1138.0, 807.0], [1136.0, 818.0], [1102.0, 850.0], [1100.0, 856.5], [1098.0, 897.0], [1096.0, 861.0], [1094.0, 806.0], [1092.0, 823.0], [1090.0, 859.0], [1118.0, 786.0], [1116.0, 819.0], [1114.0, 801.0], [1112.0, 831.0], [1110.0, 790.0], [1108.0, 833.0], [1106.0, 850.5], [1104.0, 823.0], [1166.0, 1056.0], [1190.0, 997.0], [1194.0, 1052.0], [1206.0, 961.0], [1164.0, 1114.0], [1162.0, 374.5], [1160.0, 354.0], [1158.0, 450.5], [1156.0, 419.0], [1152.0, 60100.0], [1176.0, 1015.0], [1174.0, 1045.5], [1170.0, 1050.0], [1168.0, 1056.0], [1198.0, 1048.0], [1196.0, 999.5], [1192.0, 995.5], [1276.0, 60177.0], [1250.0, 981.5], [1252.0, 975.0], [1254.0, 930.5999999999999], [1256.0, 896.0], [1258.0, 893.0], [1260.0, 872.0], [1262.0, 902.0], [1278.0, 60204.0], [1274.0, 668.0], [1272.0, 834.0], [1270.0, 803.0], [1268.0, 831.0], [1266.0, 794.0], [1264.0, 811.0], [1222.0, 963.5], [1224.0, 980.0], [1230.0, 956.0], [1242.0, 935.0], [1236.0, 963.0], [1234.0, 974.5], [1232.0, 952.0], [1340.0, 1083.0], [1312.0, 1161.0], [1316.0, 1157.5], [1314.0, 1200.5], [1318.0, 1128.0], [1320.0, 1212.0], [1324.0, 1185.0], [1326.0, 1213.0], [1342.0, 1146.0], [1338.0, 1149.0], [1332.0, 1169.0], [1330.0, 1126.0], [1328.0, 1121.0], [1294.0, 1248.0], [1292.0, 1161.0], [1290.0, 1167.0], [1288.0, 1194.0], [1282.0, 716.0], [1280.0, 60773.0], [1308.0, 1232.0], [1306.0, 1217.5], [1302.0, 1218.0], [1300.0, 1247.0], [1298.0, 1237.0], [1296.0, 1262.0], [1398.0, 47.0], [1404.0, 929.0], [1378.0, 789.0], [1380.0, 846.0], [1384.0, 842.0], [1386.0, 798.0], [1388.0, 823.0], [1390.0, 819.0], [1406.0, 879.0], [1400.0, 916.0], [1396.0, 737.0], [1394.0, 790.0], [1392.0, 763.0], [1358.0, 956.0], [1356.0, 953.0], [1354.0, 969.0], [1352.0, 967.0], [1350.0, 1046.0], [1348.0, 1055.0], [1346.0, 1119.0], [1344.0, 1084.0], [1374.0, 789.0], [1372.0, 888.0], [1368.0, 873.0], [1366.0, 829.0], [1364.0, 922.0], [1362.0, 873.0], [1360.0, 910.0], [1410.0, 868.0], [1408.0, 850.0], [1474.0, 848.0], [1472.0, 887.0], [1075.0, 823.0], [1083.0, 862.5], [1087.0, 850.0], [1059.0, 906.0], [1065.0, 875.0], [1067.0, 889.0], [1071.0, 857.0], [1085.0, 804.0], [1079.0, 837.0], [1055.0, 953.0], [1025.0, 1314.0], [1027.0, 1214.0], [1029.0, 1182.0], [1031.0, 1258.0], [1033.0, 1146.0], [1037.0, 1211.0], [1039.0, 748.0], [1053.0, 890.0], [1051.0, 968.0], [1049.0, 932.5], [1045.0, 996.0], [1043.0, 985.0], [1041.0, 1185.0], [1147.0, 741.0], [1139.0, 816.0], [1151.0, 734.0], [1121.0, 862.0], [1123.0, 800.0], [1125.0, 787.0], [1127.0, 818.0], [1131.0, 789.0], [1129.0, 773.0], [1135.0, 774.5], [1133.0, 799.0], [1149.0, 773.0], [1145.0, 812.0], [1143.0, 772.0], [1141.0, 783.0], [1137.0, 787.0], [1103.0, 836.0], [1101.0, 843.0], [1099.0, 895.0], [1097.0, 836.0], [1095.0, 852.0], [1093.0, 843.0], [1091.0, 821.0], [1089.0, 872.0], [1119.0, 870.0], [1117.0, 824.0], [1115.0, 870.0], [1113.0, 819.0], [1111.0, 824.0], [1109.0, 851.0], [1107.0, 867.5], [1155.0, 60066.0], [1165.0, 1026.0], [1163.0, 1032.0], [1159.0, 431.0], [1153.0, 60075.0], [1177.0, 1066.0], [1175.0, 1061.0], [1173.0, 1018.0], [1171.0, 1065.0], [1197.0, 1004.0], [1193.0, 1016.0], [1191.0, 1007.6666666666666], [1277.0, 60264.0], [1279.0, 60489.0], [1251.0, 917.0], [1253.0, 946.0], [1255.0, 918.0], [1257.0, 902.0], [1259.0, 898.0], [1261.0, 842.0], [1263.0, 801.0], [1275.0, 667.0], [1273.0, 662.0], [1271.0, 802.0], [1269.0, 859.0], [1267.0, 869.0], [1265.0, 849.0], [1247.0, 933.5], [1223.0, 965.0], [1229.0, 972.3333333333334], [1231.0, 1015.0], [1245.0, 948.5], [1243.0, 955.0], [1241.0, 971.0], [1239.0, 997.5], [1237.0, 922.0], [1235.0, 1004.0], [1339.0, 1138.0], [1333.0, 1125.0], [1319.0, 1146.0], [1343.0, 1119.0], [1313.0, 1183.0], [1317.0, 1163.0], [1323.0, 1135.0], [1321.0, 1177.0], [1325.0, 1150.0], [1327.0, 1108.0], [1341.0, 1163.5], [1335.0, 1147.0], [1331.0, 1128.0], [1329.0, 1193.0], [1295.0, 1260.0], [1293.0, 1163.0], [1291.0, 1254.0], [1289.0, 1256.0], [1283.0, 1204.0], [1281.0, 61167.0], [1311.0, 1193.0], [1309.0, 1223.0], [1305.0, 1240.5], [1303.0, 1201.0], [1301.0, 1209.0], [1299.0, 1208.0], [1399.0, 36.0], [1397.0, 638.0], [1383.0, 806.0], [1407.0, 839.0], [1377.0, 842.0], [1379.0, 870.0], [1381.0, 788.0], [1385.0, 843.0], [1387.0, 836.0], [1389.0, 799.0], [1405.0, 885.0], [1395.0, 842.0], [1393.0, 812.0], [1359.0, 864.0], [1357.0, 886.0], [1355.0, 965.0], [1353.0, 1044.0], [1351.0, 1000.0], [1349.0, 1019.0], [1347.0, 1110.0], [1345.0, 1113.0], [1375.0, 878.0], [1373.0, 819.0], [1371.0, 872.5], [1369.0, 889.0], [1367.0, 844.0], [1365.0, 904.0], [1363.0, 885.0], [1361.0, 891.0], [1463.0, 845.0], [1409.0, 891.0], [1475.0, 794.6875], [1.0, 180056.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}, {"data": [[51.3096973844733, 479.52685452435304]], "isOverall": false, "label": "Sunstar Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1475.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20.7, "minX": 1.62703989E12, "maxY": 4120946.2, "series": [{"data": [[1.62704021E12, 220280.0], [1.62704004E12, 1404.8], [1.62703991E12, 1718778.2], [1.62704038E12, 70367.1], [1.62704017E12, 1984826.7], [1.62704051E12, 2857.3], [1.62704034E12, 2776264.6], [1.62704029E12, 4120946.2], [1.62704012E12, 3978686.8], [1.62704025E12, 3289585.9], [1.62704008E12, 3244089.6], [1.62703995E12, 80509.5], [1.62704037E12, 572396.4], [1.6270402E12, 83310.3], [1.62704007E12, 108572.3], [1.6270399E12, 488093.3], [1.62704033E12, 3505467.6], [1.62704016E12, 2587039.9], [1.62704028E12, 3900208.2], [1.62704015E12, 3390893.6], [1.62704088E12, 2854.4], [1.62704024E12, 2491305.1], [1.62704011E12, 4082668.5], [1.62703989E12, 88639.3], [1.62704036E12, 1180399.6], [1.62704023E12, 1758984.0], [1.6270407E12, 1634.2], [1.62704032E12, 4007478.3], [1.62704019E12, 484163.3], [1.62704031E12, 4055860.9], [1.62704014E12, 3521496.1], [1.62703993E12, 10650.0], [1.62704027E12, 4057467.9], [1.6270401E12, 3854581.3], [1.62704005E12, 818.6], [1.62704052E12, 606.3], [1.62704039E12, 2857.3], [1.62704022E12, 858864.9], [1.62704035E12, 2029298.3], [1.62704018E12, 1260613.0], [1.62704013E12, 4019636.4], [1.6270403E12, 4073919.4], [1.62704009E12, 3803133.2], [1.62703992E12, 1000811.4], [1.62704026E12, 3900269.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62704021E12, 4623.9], [1.62704004E12, 42.1], [1.62703991E12, 13870.3], [1.62704038E12, 1430.3], [1.62704017E12, 16499.1], [1.62704051E12, 20.9], [1.62704034E12, 21860.1], [1.62704029E12, 31550.7], [1.62704012E12, 31465.3], [1.62704025E12, 25475.7], [1.62704008E12, 26799.1], [1.62703995E12, 2225.6], [1.62704037E12, 6157.8], [1.6270402E12, 1554.9], [1.62704007E12, 2542.0], [1.6270399E12, 4984.5], [1.62704033E12, 27092.6], [1.62704016E12, 21796.7], [1.62704028E12, 31447.5], [1.62704015E12, 26902.2], [1.62704088E12, 83.0], [1.62704024E12, 20243.2], [1.62704011E12, 31176.2], [1.62703989E12, 1600.9], [1.62704036E12, 11416.8], [1.62704023E12, 15154.4], [1.6270407E12, 41.6], [1.62704032E12, 31090.2], [1.62704019E12, 6328.5], [1.62704031E12, 31506.6], [1.62704014E12, 28046.9], [1.62703993E12, 316.7], [1.62704027E12, 31547.9], [1.6270401E12, 30711.9], [1.62704005E12, 20.7], [1.62704052E12, 21.2], [1.62704039E12, 20.9], [1.62704022E12, 9860.1], [1.62704035E12, 16647.5], [1.62704018E12, 11498.2], [1.62704013E12, 31549.4], [1.6270403E12, 31446.4], [1.62704009E12, 29363.2], [1.62703992E12, 7859.4], [1.62704026E12, 30524.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704088E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15.991692627206652, "minX": 1.62703989E12, "maxY": 180111.0, "series": [{"data": [[1.62704021E12, 27.245454545454542], [1.62704004E12, 180111.0], [1.62703991E12, 1764.9575757575774], [1.62704038E12, 2676.279411764706], [1.62704017E12, 27.231847133757995], [1.62704051E12, 180035.0], [1.62704034E12, 82.4019230769231], [1.62704029E12, 68.26715522984694], [1.62704012E12, 38.90714762859054], [1.62704025E12, 17.028052805280552], [1.62704008E12, 93.23450980392155], [1.62703995E12, 60411.37735849057], [1.62704037E12, 24.795221843003407], [1.6270402E12, 26.25675675675676], [1.62704007E12, 4586.421487603305], [1.6270399E12, 2494.6413502109704], [1.62704033E12, 71.93948797517453], [1.62704016E12, 199.65670202507235], [1.62704028E12, 23.562165775401052], [1.62704015E12, 73.09843749999999], [1.62704088E12, 180059.75], [1.62704024E12, 15.991692627206652], [1.62704011E12, 82.80782198246791], [1.62703989E12, 807.5789473684212], [1.62704036E12, 133.9429097605894], [1.62704023E12, 265.6019417475726], [1.6270407E12, 180075.0], [1.62704032E12, 27.486139283299472], [1.62704019E12, 1222.0232558139533], [1.62704031E12, 108.91927951967976], [1.62704014E12, 90.86206896551742], [1.62703993E12, 60179.2], [1.62704027E12, 139.14323784143903], [1.6270401E12, 144.52566735112876], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 275.88272921108734], [1.62704035E12, 23.723484848484883], [1.62704018E12, 25.184643510054855], [1.62704013E12, 157.81212524983331], [1.6270403E12, 68.47660427807487], [1.62704009E12, 212.41803865425908], [1.62703992E12, 2093.799465240644], [1.62704026E12, 142.11157024793388]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704088E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15.847352024922127, "minX": 1.62703989E12, "maxY": 180111.0, "series": [{"data": [[1.62704021E12, 27.03636363636363], [1.62704004E12, 180111.0], [1.62703991E12, 1763.2106060606056], [1.62704038E12, 2676.0882352941176], [1.62704017E12, 26.86242038216559], [1.62704051E12, 180035.0], [1.62704034E12, 82.07788461538458], [1.62704029E12, 67.888074616922], [1.62704012E12, 38.67935871743486], [1.62704025E12, 16.891089108910897], [1.62704008E12, 92.73725490196078], [1.62703995E12, 60411.13207547169], [1.62704037E12, 24.501706484641645], [1.6270402E12, 26.040540540540544], [1.62704007E12, 4585.909090909088], [1.6270399E12, 2492.949367088605], [1.62704033E12, 71.58184639255236], [1.62704016E12, 199.40501446480238], [1.62704028E12, 23.276069518716575], [1.62704015E12, 72.89140625000003], [1.62704088E12, 180059.5], [1.62704024E12, 15.847352024922127], [1.62704011E12, 82.61564396493611], [1.62703989E12, 806.4736842105264], [1.62704036E12, 133.7182320441989], [1.62704023E12, 265.50624133148386], [1.6270407E12, 180075.0], [1.62704032E12, 27.114266396213658], [1.62704019E12, 1221.827242524917], [1.62704031E12, 108.52701801200797], [1.62704014E12, 90.64542728635685], [1.62703993E12, 60178.86666666666], [1.62704027E12, 138.9806795469688], [1.6270401E12, 144.13347022587263], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 275.6993603411514], [1.62704035E12, 23.39646464646461], [1.62704018E12, 24.888482632541105], [1.62704013E12, 157.42971352431715], [1.6270403E12, 68.05280748663107], [1.62704009E12, 211.62705798138867], [1.62703992E12, 2092.548128342245], [1.62704026E12, 141.9593663911846]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704088E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.865464632454927, "minX": 1.62703989E12, "maxY": 996.8621212121207, "series": [{"data": [[1.62704021E12, 18.363636363636356], [1.62704004E12, 102.0], [1.62703991E12, 996.8621212121207], [1.62704038E12, 19.735294117647065], [1.62704017E12, 21.20127388535034], [1.62704051E12, 21.0], [1.62704034E12, 19.2451923076923], [1.62704029E12, 22.434377081945364], [1.62704012E12, 33.63059452237814], [1.62704025E12, 13.683993399339931], [1.62704008E12, 82.57254901960778], [1.62703995E12, 394.9339622641509], [1.62704037E12, 17.999999999999986], [1.6270402E12, 17.82432432432432], [1.62704007E12, 109.77685950413222], [1.6270399E12, 933.4092827004222], [1.62704033E12, 19.97517455391777], [1.62704016E12, 20.138862102217956], [1.62704028E12, 18.554144385026717], [1.62704015E12, 21.767968749999977], [1.62704088E12, 25.25], [1.62704024E12, 12.075804776739355], [1.62704011E12, 37.34120026972351], [1.62703989E12, 767.2105263157896], [1.62704036E12, 17.329650092081028], [1.62704023E12, 11.865464632454927], [1.6270407E12, 24.5], [1.62704032E12, 21.73968897903986], [1.62704019E12, 18.71428571428572], [1.62704031E12, 22.913942628418948], [1.62704014E12, 39.960269865067445], [1.62703993E12, 163.4], [1.62704027E12, 15.505662891405727], [1.6270401E12, 55.1868583162218], [1.62704005E12, 83.0], [1.62704052E12, 20.0], [1.62704039E12, 12.0], [1.62704022E12, 13.68230277185502], [1.62704035E12, 18.226010101010093], [1.62704018E12, 18.967093235831808], [1.62704013E12, 31.363091272484965], [1.6270403E12, 22.535427807486663], [1.62704009E12, 68.29706513958476], [1.62703992E12, 775.933155080214], [1.62704026E12, 14.52685950413223]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704088E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.62703989E12, "maxY": 181448.0, "series": [{"data": [[1.62704021E12, 91.0], [1.62704004E12, 180114.0], [1.62703991E12, 60100.0], [1.62704038E12, 60046.0], [1.62704017E12, 98.0], [1.62704051E12, 180035.0], [1.62704034E12, 60035.0], [1.62704029E12, 60028.0], [1.62704012E12, 261.0], [1.62704025E12, 203.0], [1.62704008E12, 1059.0], [1.62703995E12, 60936.0], [1.62704037E12, 55.0], [1.6270402E12, 52.0], [1.62704007E12, 180731.0], [1.6270399E12, 61167.0], [1.62704033E12, 60023.0], [1.62704016E12, 60079.0], [1.62704028E12, 93.0], [1.62704015E12, 60052.0], [1.62704088E12, 180076.0], [1.62704024E12, 86.0], [1.62704011E12, 60036.0], [1.62703989E12, 1063.0], [1.62704036E12, 60036.0], [1.62704023E12, 60042.0], [1.6270407E12, 180089.0], [1.62704032E12, 78.0], [1.62704019E12, 120092.0], [1.62704031E12, 60024.0], [1.62704014E12, 60091.0], [1.62703993E12, 60213.0], [1.62704027E12, 120030.0], [1.6270401E12, 60087.0], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 60081.0], [1.62704035E12, 82.0], [1.62704018E12, 116.0], [1.62704013E12, 60078.0], [1.6270403E12, 60015.0], [1.62704009E12, 181448.0], [1.62703992E12, 60129.0], [1.62704026E12, 60031.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62704021E12, 19.0], [1.62704004E12, 180108.0], [1.62703991E12, 354.0], [1.62704038E12, 20.0], [1.62704017E12, 18.0], [1.62704051E12, 180035.0], [1.62704034E12, 19.0], [1.62704029E12, 20.0], [1.62704012E12, 11.0], [1.62704025E12, 10.0], [1.62704008E12, 21.0], [1.62703995E12, 60190.0], [1.62704037E12, 19.0], [1.6270402E12, 20.0], [1.62704007E12, 40.0], [1.6270399E12, 36.0], [1.62704033E12, 19.0], [1.62704016E12, 10.0], [1.62704028E12, 11.0], [1.62704015E12, 10.0], [1.62704088E12, 180044.0], [1.62704024E12, 10.0], [1.62704011E12, 12.0], [1.62703989E12, 694.0], [1.62704036E12, 18.0], [1.62704023E12, 10.0], [1.6270407E12, 180061.0], [1.62704032E12, 20.0], [1.62704019E12, 18.0], [1.62704031E12, 20.0], [1.62704014E12, 12.0], [1.62703993E12, 60099.0], [1.62704027E12, 10.0], [1.6270401E12, 14.0], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 10.0], [1.62704035E12, 18.0], [1.62704018E12, 18.0], [1.62704013E12, 12.0], [1.6270403E12, 20.0], [1.62704009E12, 18.0], [1.62703992E12, 34.0], [1.62704026E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62704021E12, 34.0], [1.62704004E12, 180114.0], [1.62703991E12, 1495.8], [1.62704038E12, 41.0], [1.62704017E12, 36.39999999999998], [1.62704051E12, 180035.0], [1.62704034E12, 29.0], [1.62704029E12, 35.0], [1.62704012E12, 64.0], [1.62704025E12, 21.0], [1.62704008E12, 174.0], [1.62703995E12, 60685.6], [1.62704037E12, 31.0], [1.6270402E12, 32.5], [1.62704007E12, 202.39999999999998], [1.6270399E12, 1213.2], [1.62704033E12, 30.0], [1.62704016E12, 46.0], [1.62704028E12, 32.0], [1.62704015E12, 48.0], [1.62704088E12, 180076.0], [1.62704024E12, 21.0], [1.62704011E12, 65.0], [1.62703989E12, 893.1], [1.62704036E12, 27.0], [1.62704023E12, 21.0], [1.6270407E12, 180089.0], [1.62704032E12, 33.0], [1.62704019E12, 32.0], [1.62704031E12, 36.0], [1.62704014E12, 82.0], [1.62703993E12, 60205.8], [1.62704027E12, 26.0], [1.6270401E12, 103.0], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 27.0], [1.62704035E12, 27.0], [1.62704018E12, 32.0], [1.62704013E12, 62.0], [1.6270403E12, 35.0], [1.62704009E12, 142.0], [1.62703992E12, 1461.5], [1.62704026E12, 24.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62704021E12, 48.73999999999995], [1.62704004E12, 180114.0], [1.62703991E12, 60069.51], [1.62704038E12, 60046.0], [1.62704017E12, 79.27999999999997], [1.62704051E12, 180035.0], [1.62704034E12, 48.0], [1.62704029E12, 55.92000000000007], [1.62704012E12, 93.03999999999996], [1.62704025E12, 51.219999999999345], [1.62704008E12, 686.6400000000001], [1.62703995E12, 60935.65], [1.62704037E12, 42.06], [1.6270402E12, 52.0], [1.62704007E12, 180624.74], [1.6270399E12, 60665.08], [1.62704033E12, 41.09999999999991], [1.62704016E12, 72.61999999999989], [1.62704028E12, 50.02999999999997], [1.62704015E12, 77.19000000000005], [1.62704088E12, 180076.0], [1.62704024E12, 45.360000000000014], [1.62704011E12, 87.0], [1.62703989E12, 1063.0], [1.62704036E12, 43.559999999999945], [1.62704023E12, 56.899999999999864], [1.6270407E12, 180089.0], [1.62704032E12, 50.0], [1.62704019E12, 60067.340000000004], [1.62704031E12, 60.0], [1.62704014E12, 258.55000000000064], [1.62703993E12, 60213.0], [1.62704027E12, 54.960000000000036], [1.6270401E12, 155.37999999999988], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 50.50000000000006], [1.62704035E12, 43.20999999999981], [1.62704018E12, 93.07999999999993], [1.62704013E12, 93.94000000000005], [1.6270403E12, 57.02999999999997], [1.62704009E12, 393.0], [1.62703992E12, 60117.25], [1.62704026E12, 50.47000000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62704021E12, 39.0], [1.62704004E12, 180114.0], [1.62703991E12, 1532.0], [1.62704038E12, 33036.74999999983], [1.62704017E12, 48.0], [1.62704051E12, 180035.0], [1.62704034E12, 32.0], [1.62704029E12, 40.0], [1.62704012E12, 71.0], [1.62704025E12, 26.0], [1.62704008E12, 205.0], [1.62703995E12, 60789.2], [1.62704037E12, 34.0], [1.6270402E12, 36.0], [1.62704007E12, 222.79999999999998], [1.6270399E12, 1248.6], [1.62704033E12, 32.0], [1.62704016E12, 56.0], [1.62704028E12, 35.149999999999864], [1.62704015E12, 56.0], [1.62704088E12, 180076.0], [1.62704024E12, 25.0], [1.62704011E12, 71.0], [1.62703989E12, 917.9499999999999], [1.62704036E12, 31.0], [1.62704023E12, 26.899999999999977], [1.6270407E12, 180089.0], [1.62704032E12, 36.0], [1.62704019E12, 36.89999999999998], [1.62704031E12, 42.0], [1.62704014E12, 92.0], [1.62703993E12, 60213.0], [1.62704027E12, 33.0], [1.6270401E12, 120.0], [1.62704005E12, 180093.0], [1.62704052E12, 180036.0], [1.62704039E12, 120030.0], [1.62704022E12, 31.5], [1.62704035E12, 30.0], [1.62704018E12, 41.60000000000002], [1.62704013E12, 71.89999999999986], [1.6270403E12, 39.0], [1.62704009E12, 176.0999999999999], [1.62703992E12, 1534.75], [1.62704026E12, 31.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704088E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 180035.5, "series": [{"data": [[2.0, 44.0], [4.0, 60631.0], [5.0, 31.5], [6.0, 28.0], [7.0, 450.0], [8.0, 30620.5], [9.0, 25.0], [10.0, 394.5], [11.0, 31.0], [13.0, 27.0], [14.0, 27.0], [15.0, 60187.0], [16.0, 25.0], [17.0, 27.5], [20.0, 28.0], [21.0, 40.5], [22.0, 26.0], [23.0, 26.0], [24.0, 25.5], [25.0, 26.0], [28.0, 25.0], [29.0, 369.0], [30.0, 60204.5], [31.0, 24.5], [33.0, 60130.0], [32.0, 23.5], [34.0, 24.0], [35.0, 23.0], [36.0, 24.5], [38.0, 23.0], [39.0, 22.0], [41.0, 23.0], [40.0, 21.5], [43.0, 23.0], [42.0, 23.0], [44.0, 23.0], [45.0, 23.0], [46.0, 21.0], [48.0, 21.0], [50.0, 21.0], [51.0, 16.0], [52.0, 23.0], [53.0, 20.5], [54.0, 20.0], [55.0, 23.0], [56.0, 19.0], [57.0, 13.0], [58.0, 22.0], [60.0, 24.5], [63.0, 23.0], [62.0, 20.0], [65.0, 23.0], [67.0, 31.0], [64.0, 14.0], [69.0, 24.0], [70.0, 20.5], [72.0, 178.5], [75.0, 27.0], [73.0, 20.0], [74.0, 23.0], [78.0, 20.0], [76.0, 14.0], [77.0, 23.0], [81.0, 23.0], [82.0, 23.0], [80.0, 21.0], [87.0, 23.0], [86.0, 23.0], [85.0, 14.0], [84.0, 22.0], [89.0, 121.0], [90.0, 20.0], [88.0, 21.0], [91.0, 23.0], [95.0, 291.0], [94.0, 24.0], [93.0, 15.0], [98.0, 27.0], [96.0, 15.0], [102.0, 20.5], [103.0, 15.0], [100.0, 23.0], [104.0, 40.0], [107.0, 15.0], [105.0, 15.0], [106.0, 21.0], [108.0, 24.0], [110.0, 15.0], [109.0, 23.0], [115.0, 407.0], [112.0, 47.0], [113.0, 21.0], [116.0, 24.0], [117.0, 24.0], [119.0, 16.0], [118.0, 15.0], [121.0, 837.0], [120.0, 51.0], [122.0, 21.0], [123.0, 24.0], [124.0, 24.0], [131.0, 24.0], [134.0, 55.0], [132.0, 51.0], [128.0, 24.0], [129.0, 53.0], [130.0, 86.5], [135.0, 17.0], [133.0, 23.0], [139.0, 55.0], [140.0, 34.0], [137.0, 61.0], [141.0, 22.0], [138.0, 20.0], [136.0, 23.0], [142.0, 22.0], [143.0, 27.0], [145.0, 34.0], [149.0, 28.0], [147.0, 40.0], [148.0, 23.0], [146.0, 38.0], [150.0, 26.0], [151.0, 25.0], [144.0, 40.0], [156.0, 38.0], [152.0, 27.0], [153.0, 36.0], [159.0, 62.0], [155.0, 34.0], [158.0, 47.5], [154.0, 25.0], [168.0, 68.0], [187.0, 1232.0], [196.0, 1433.0], [225.0, 1205.0], [1.0, 180035.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 225.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 180035.5, "series": [{"data": [[2.0, 43.5], [4.0, 60631.0], [5.0, 31.0], [6.0, 28.0], [7.0, 449.5], [8.0, 30620.5], [9.0, 25.0], [10.0, 394.5], [11.0, 31.0], [13.0, 27.0], [14.0, 27.0], [15.0, 60187.0], [16.0, 25.0], [17.0, 27.0], [20.0, 28.0], [21.0, 40.5], [22.0, 26.0], [23.0, 26.0], [24.0, 25.5], [25.0, 26.0], [28.0, 25.0], [29.0, 369.0], [30.0, 60204.5], [31.0, 24.0], [33.0, 60130.0], [32.0, 23.0], [34.0, 23.5], [35.0, 22.0], [36.0, 24.5], [38.0, 23.0], [39.0, 22.0], [41.0, 22.0], [40.0, 21.0], [43.0, 23.0], [42.0, 23.0], [44.0, 22.5], [45.0, 23.0], [46.0, 21.0], [48.0, 21.0], [50.0, 20.0], [51.0, 16.0], [52.0, 23.0], [53.0, 20.0], [54.0, 20.0], [55.0, 23.0], [56.0, 19.0], [57.0, 13.0], [58.0, 22.0], [60.0, 24.0], [63.0, 22.0], [62.0, 20.0], [65.0, 23.0], [67.0, 31.0], [64.0, 14.0], [69.0, 23.0], [70.0, 20.0], [72.0, 178.0], [75.0, 27.0], [73.0, 20.0], [74.0, 23.0], [78.0, 19.5], [76.0, 14.0], [77.0, 23.0], [81.0, 23.0], [82.0, 22.0], [80.0, 20.5], [87.0, 22.0], [86.0, 22.0], [85.0, 14.0], [84.0, 22.0], [89.0, 121.0], [90.0, 20.0], [88.0, 21.0], [91.0, 23.0], [95.0, 291.0], [94.0, 24.0], [93.0, 15.0], [98.0, 26.0], [96.0, 15.0], [102.0, 20.5], [103.0, 15.0], [100.0, 23.0], [104.0, 40.0], [107.0, 15.0], [105.0, 15.0], [106.0, 21.0], [108.0, 24.0], [110.0, 15.0], [109.0, 23.0], [115.0, 406.5], [112.0, 46.5], [113.0, 21.0], [116.0, 24.0], [117.0, 24.0], [119.0, 16.0], [118.0, 15.0], [121.0, 835.0], [120.0, 51.0], [122.0, 21.0], [123.0, 24.0], [124.0, 24.0], [131.0, 24.0], [134.0, 54.0], [132.0, 50.0], [128.0, 24.0], [129.0, 52.0], [130.0, 85.5], [135.0, 16.0], [133.0, 23.0], [139.0, 55.0], [140.0, 34.0], [137.0, 61.0], [141.0, 22.0], [138.0, 20.0], [136.0, 23.0], [142.0, 22.0], [143.0, 27.0], [145.0, 34.0], [149.0, 27.0], [147.0, 40.0], [148.0, 22.0], [146.0, 38.0], [150.0, 25.0], [151.0, 25.0], [144.0, 40.0], [156.0, 38.0], [152.0, 27.0], [153.0, 36.0], [159.0, 62.0], [155.0, 34.0], [158.0, 47.0], [154.0, 25.0], [168.0, 67.5], [187.0, 1232.0], [196.0, 1428.0], [225.0, 1205.0], [1.0, 180035.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 225.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62703984E12, "maxY": 150.0, "series": [{"data": [[1.62704021E12, 22.1], [1.62704004E12, 0.2], [1.62703991E12, 65.3], [1.62704038E12, 6.5], [1.62704017E12, 79.0], [1.62703987E12, 1.6], [1.62704034E12, 103.9], [1.62704029E12, 149.8], [1.62704012E12, 149.7], [1.62704025E12, 121.6], [1.62704008E12, 127.3], [1.62704037E12, 29.2], [1.6270402E12, 7.7], [1.62704007E12, 13.2], [1.6270399E12, 23.1], [1.62704033E12, 128.8], [1.62704016E12, 103.6], [1.62703986E12, 1.0], [1.62704028E12, 150.0], [1.62704015E12, 127.7], [1.62704024E12, 96.5], [1.62704011E12, 148.4], [1.62703989E12, 18.5], [1.62704036E12, 54.2], [1.62704023E12, 71.8], [1.6270407E12, 0.4], [1.62703985E12, 0.8], [1.62704032E12, 148.1], [1.62704019E12, 29.5], [1.62704031E12, 149.8], [1.62704014E12, 133.5], [1.62704027E12, 150.0], [1.6270401E12, 145.3], [1.62704005E12, 0.1], [1.62704052E12, 0.2], [1.62704022E12, 46.9], [1.62703984E12, 0.6], [1.62704035E12, 79.1], [1.62704018E12, 54.4], [1.62704013E12, 149.9], [1.6270403E12, 149.7], [1.62704009E12, 140.3], [1.62703992E12, 36.6], [1.62704026E12, 144.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6270407E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62703989E12, "maxY": 150.1, "series": [{"data": [[1.62704021E12, 22.0], [1.62704004E12, 0.2], [1.62703991E12, 66.0], [1.62704038E12, 6.8], [1.62704017E12, 78.5], [1.62704051E12, 0.1], [1.62704034E12, 104.0], [1.62704029E12, 150.1], [1.62704012E12, 149.7], [1.62704025E12, 121.2], [1.62704008E12, 127.5], [1.62703995E12, 10.6], [1.62704037E12, 29.3], [1.6270402E12, 7.4], [1.62704007E12, 12.1], [1.6270399E12, 23.7], [1.62704033E12, 128.9], [1.62704016E12, 103.7], [1.62704028E12, 149.6], [1.62704015E12, 128.0], [1.62704088E12, 0.4], [1.62704024E12, 96.3], [1.62704011E12, 148.3], [1.62703989E12, 7.6], [1.62704036E12, 54.3], [1.62704023E12, 72.1], [1.6270407E12, 0.2], [1.62704032E12, 147.9], [1.62704019E12, 30.1], [1.62704031E12, 149.9], [1.62704014E12, 133.4], [1.62703993E12, 1.5], [1.62704027E12, 150.1], [1.6270401E12, 146.1], [1.62704005E12, 0.1], [1.62704052E12, 0.1], [1.62704039E12, 0.1], [1.62704022E12, 46.9], [1.62704035E12, 79.2], [1.62704018E12, 54.7], [1.62704013E12, 150.1], [1.6270403E12, 149.6], [1.62704009E12, 139.7], [1.62703992E12, 37.4], [1.62704026E12, 145.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62704088E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62703989E12, "maxY": 150.1, "series": [{"data": [[1.62704021E12, 22.0], [1.62704004E12, 0.2], [1.62703991E12, 66.0], [1.62704038E12, 6.8], [1.62704017E12, 78.5], [1.62704051E12, 0.1], [1.62704034E12, 104.0], [1.62704029E12, 150.1], [1.62704012E12, 149.7], [1.62704025E12, 121.2], [1.62704008E12, 127.5], [1.62703995E12, 10.6], [1.62704037E12, 29.3], [1.6270402E12, 7.4], [1.62704007E12, 12.1], [1.6270399E12, 23.7], [1.62704033E12, 128.9], [1.62704016E12, 103.7], [1.62704028E12, 149.6], [1.62704015E12, 128.0], [1.62704088E12, 0.4], [1.62704024E12, 96.3], [1.62704011E12, 148.3], [1.62703989E12, 7.6], [1.62704036E12, 54.3], [1.62704023E12, 72.1], [1.6270407E12, 0.2], [1.62704032E12, 147.9], [1.62704019E12, 30.1], [1.62704031E12, 149.9], [1.62704014E12, 133.4], [1.62703993E12, 1.5], [1.62704027E12, 150.1], [1.6270401E12, 146.1], [1.62704005E12, 0.1], [1.62704052E12, 0.1], [1.62704039E12, 0.1], [1.62704022E12, 46.9], [1.62704035E12, 79.2], [1.62704018E12, 54.7], [1.62704013E12, 150.1], [1.6270403E12, 149.6], [1.62704009E12, 139.7], [1.62703992E12, 37.4], [1.62704026E12, 145.2]], "isOverall": false, "label": "Sunstar Search-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704088E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62703989E12, "maxY": 150.1, "series": [{"data": [[1.62704021E12, 22.0], [1.62704004E12, 0.2], [1.62703991E12, 66.0], [1.62704038E12, 6.8], [1.62704017E12, 78.5], [1.62704051E12, 0.1], [1.62704034E12, 104.0], [1.62704029E12, 150.1], [1.62704012E12, 149.7], [1.62704025E12, 121.2], [1.62704008E12, 127.5], [1.62703995E12, 10.6], [1.62704037E12, 29.3], [1.6270402E12, 7.4], [1.62704007E12, 12.1], [1.6270399E12, 23.7], [1.62704033E12, 128.9], [1.62704016E12, 103.7], [1.62704028E12, 149.6], [1.62704015E12, 128.0], [1.62704088E12, 0.4], [1.62704024E12, 96.3], [1.62704011E12, 148.3], [1.62703989E12, 7.6], [1.62704036E12, 54.3], [1.62704023E12, 72.1], [1.6270407E12, 0.2], [1.62704032E12, 147.9], [1.62704019E12, 30.1], [1.62704031E12, 149.9], [1.62704014E12, 133.4], [1.62703993E12, 1.5], [1.62704027E12, 150.1], [1.6270401E12, 146.1], [1.62704005E12, 0.1], [1.62704052E12, 0.1], [1.62704039E12, 0.1], [1.62704022E12, 46.9], [1.62704035E12, 79.2], [1.62704018E12, 54.7], [1.62704013E12, 150.1], [1.6270403E12, 149.6], [1.62704009E12, 139.7], [1.62703992E12, 37.4], [1.62704026E12, 145.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62704088E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

