/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 50688.0, "series": [{"data": [[0.0, 33.0], [0.1, 1642.0], [0.2, 1899.0], [0.3, 2153.0], [0.4, 2269.0], [0.5, 2358.0], [0.6, 2423.0], [0.7, 2564.0], [0.8, 2657.0], [0.9, 2712.0], [1.0, 2771.0], [1.1, 2800.0], [1.2, 2832.0], [1.3, 2876.0], [1.4, 2898.0], [1.5, 2958.0], [1.6, 2996.0], [1.7, 3041.0], [1.8, 3076.0], [1.9, 3128.0], [2.0, 3192.0], [2.1, 3232.0], [2.2, 3254.0], [2.3, 3275.0], [2.4, 3307.0], [2.5, 3323.0], [2.6, 3346.0], [2.7, 3359.0], [2.8, 3376.0], [2.9, 3385.0], [3.0, 3403.0], [3.1, 3418.0], [3.2, 3445.0], [3.3, 3475.0], [3.4, 3501.0], [3.5, 3510.0], [3.6, 3533.0], [3.7, 3553.0], [3.8, 3567.0], [3.9, 3576.0], [4.0, 3617.0], [4.1, 3647.0], [4.2, 3670.0], [4.3, 3700.0], [4.4, 3724.0], [4.5, 3755.0], [4.6, 3774.0], [4.7, 3798.0], [4.8, 3834.0], [4.9, 3901.0], [5.0, 3924.0], [5.1, 3950.0], [5.2, 3980.0], [5.3, 4019.0], [5.4, 4051.0], [5.5, 4075.0], [5.6, 4100.0], [5.7, 4127.0], [5.8, 4146.0], [5.9, 4160.0], [6.0, 4182.0], [6.1, 4209.0], [6.2, 4231.0], [6.3, 4247.0], [6.4, 4260.0], [6.5, 4282.0], [6.6, 4294.0], [6.7, 4302.0], [6.8, 4313.0], [6.9, 4328.0], [7.0, 4349.0], [7.1, 4370.0], [7.2, 4398.0], [7.3, 4423.0], [7.4, 4447.0], [7.5, 4471.0], [7.6, 4486.0], [7.7, 4517.0], [7.8, 4534.0], [7.9, 4558.0], [8.0, 4566.0], [8.1, 4588.0], [8.2, 4615.0], [8.3, 4631.0], [8.4, 4650.0], [8.5, 4672.0], [8.6, 4711.0], [8.7, 4730.0], [8.8, 4750.0], [8.9, 4766.0], [9.0, 4787.0], [9.1, 4838.0], [9.2, 4854.0], [9.3, 4893.0], [9.4, 4912.0], [9.5, 4938.0], [9.6, 4962.0], [9.7, 4996.0], [9.8, 5016.0], [9.9, 5038.0], [10.0, 5048.0], [10.1, 5078.0], [10.2, 5116.0], [10.3, 5138.0], [10.4, 5150.0], [10.5, 5173.0], [10.6, 5208.0], [10.7, 5232.0], [10.8, 5244.0], [10.9, 5271.0], [11.0, 5292.0], [11.1, 5307.0], [11.2, 5316.0], [11.3, 5333.0], [11.4, 5357.0], [11.5, 5373.0], [11.6, 5389.0], [11.7, 5392.0], [11.8, 5411.0], [11.9, 5426.0], [12.0, 5441.0], [12.1, 5449.0], [12.2, 5481.0], [12.3, 5488.0], [12.4, 5506.0], [12.5, 5522.0], [12.6, 5540.0], [12.7, 5552.0], [12.8, 5570.0], [12.9, 5591.0], [13.0, 5598.0], [13.1, 5609.0], [13.2, 5628.0], [13.3, 5645.0], [13.4, 5670.0], [13.5, 5679.0], [13.6, 5697.0], [13.7, 5716.0], [13.8, 5739.0], [13.9, 5755.0], [14.0, 5777.0], [14.1, 5789.0], [14.2, 5796.0], [14.3, 5814.0], [14.4, 5826.0], [14.5, 5850.0], [14.6, 5860.0], [14.7, 5883.0], [14.8, 5893.0], [14.9, 5909.0], [15.0, 5930.0], [15.1, 5951.0], [15.2, 5963.0], [15.3, 5971.0], [15.4, 5980.0], [15.5, 6000.0], [15.6, 6021.0], [15.7, 6037.0], [15.8, 6051.0], [15.9, 6063.0], [16.0, 6081.0], [16.1, 6099.0], [16.2, 6113.0], [16.3, 6132.0], [16.4, 6146.0], [16.5, 6162.0], [16.6, 6173.0], [16.7, 6178.0], [16.8, 6182.0], [16.9, 6187.0], [17.0, 6196.0], [17.1, 6202.0], [17.2, 6217.0], [17.3, 6226.0], [17.4, 6235.0], [17.5, 6253.0], [17.6, 6267.0], [17.7, 6280.0], [17.8, 6291.0], [17.9, 6300.0], [18.0, 6308.0], [18.1, 6318.0], [18.2, 6332.0], [18.3, 6343.0], [18.4, 6357.0], [18.5, 6369.0], [18.6, 6377.0], [18.7, 6390.0], [18.8, 6410.0], [18.9, 6420.0], [19.0, 6433.0], [19.1, 6441.0], [19.2, 6449.0], [19.3, 6466.0], [19.4, 6481.0], [19.5, 6490.0], [19.6, 6508.0], [19.7, 6532.0], [19.8, 6552.0], [19.9, 6566.0], [20.0, 6574.0], [20.1, 6584.0], [20.2, 6607.0], [20.3, 6623.0], [20.4, 6638.0], [20.5, 6654.0], [20.6, 6669.0], [20.7, 6682.0], [20.8, 6705.0], [20.9, 6738.0], [21.0, 6746.0], [21.1, 6755.0], [21.2, 6764.0], [21.3, 6784.0], [21.4, 6803.0], [21.5, 6820.0], [21.6, 6835.0], [21.7, 6853.0], [21.8, 6863.0], [21.9, 6878.0], [22.0, 6899.0], [22.1, 6906.0], [22.2, 6916.0], [22.3, 6925.0], [22.4, 6939.0], [22.5, 6955.0], [22.6, 6960.0], [22.7, 6973.0], [22.8, 6983.0], [22.9, 6991.0], [23.0, 7000.0], [23.1, 7007.0], [23.2, 7013.0], [23.3, 7021.0], [23.4, 7031.0], [23.5, 7037.0], [23.6, 7053.0], [23.7, 7081.0], [23.8, 7090.0], [23.9, 7105.0], [24.0, 7115.0], [24.1, 7120.0], [24.2, 7131.0], [24.3, 7141.0], [24.4, 7150.0], [24.5, 7163.0], [24.6, 7168.0], [24.7, 7175.0], [24.8, 7183.0], [24.9, 7189.0], [25.0, 7196.0], [25.1, 7210.0], [25.2, 7218.0], [25.3, 7226.0], [25.4, 7235.0], [25.5, 7240.0], [25.6, 7245.0], [25.7, 7255.0], [25.8, 7263.0], [25.9, 7272.0], [26.0, 7280.0], [26.1, 7290.0], [26.2, 7295.0], [26.3, 7306.0], [26.4, 7319.0], [26.5, 7330.0], [26.6, 7338.0], [26.7, 7346.0], [26.8, 7354.0], [26.9, 7361.0], [27.0, 7367.0], [27.1, 7382.0], [27.2, 7393.0], [27.3, 7400.0], [27.4, 7415.0], [27.5, 7421.0], [27.6, 7429.0], [27.7, 7435.0], [27.8, 7441.0], [27.9, 7450.0], [28.0, 7462.0], [28.1, 7472.0], [28.2, 7480.0], [28.3, 7485.0], [28.4, 7498.0], [28.5, 7513.0], [28.6, 7523.0], [28.7, 7527.0], [28.8, 7534.0], [28.9, 7544.0], [29.0, 7558.0], [29.1, 7573.0], [29.2, 7591.0], [29.3, 7611.0], [29.4, 7634.0], [29.5, 7648.0], [29.6, 7670.0], [29.7, 7681.0], [29.8, 7701.0], [29.9, 7716.0], [30.0, 7731.0], [30.1, 7741.0], [30.2, 7763.0], [30.3, 7773.0], [30.4, 7798.0], [30.5, 7808.0], [30.6, 7833.0], [30.7, 7842.0], [30.8, 7853.0], [30.9, 7870.0], [31.0, 7879.0], [31.1, 7886.0], [31.2, 7892.0], [31.3, 7902.0], [31.4, 7910.0], [31.5, 7927.0], [31.6, 7933.0], [31.7, 7941.0], [31.8, 7949.0], [31.9, 7962.0], [32.0, 7965.0], [32.1, 7972.0], [32.2, 7981.0], [32.3, 7990.0], [32.4, 8001.0], [32.5, 8010.0], [32.6, 8018.0], [32.7, 8023.0], [32.8, 8031.0], [32.9, 8036.0], [33.0, 8043.0], [33.1, 8048.0], [33.2, 8053.0], [33.3, 8057.0], [33.4, 8066.0], [33.5, 8069.0], [33.6, 8073.0], [33.7, 8076.0], [33.8, 8082.0], [33.9, 8085.0], [34.0, 8087.0], [34.1, 8095.0], [34.2, 8100.0], [34.3, 8105.0], [34.4, 8114.0], [34.5, 8117.0], [34.6, 8121.0], [34.7, 8124.0], [34.8, 8129.0], [34.9, 8134.0], [35.0, 8136.0], [35.1, 8144.0], [35.2, 8153.0], [35.3, 8155.0], [35.4, 8161.0], [35.5, 8174.0], [35.6, 8177.0], [35.7, 8184.0], [35.8, 8190.0], [35.9, 8193.0], [36.0, 8200.0], [36.1, 8208.0], [36.2, 8213.0], [36.3, 8225.0], [36.4, 8231.0], [36.5, 8240.0], [36.6, 8243.0], [36.7, 8247.0], [36.8, 8258.0], [36.9, 8271.0], [37.0, 8276.0], [37.1, 8284.0], [37.2, 8290.0], [37.3, 8295.0], [37.4, 8304.0], [37.5, 8310.0], [37.6, 8315.0], [37.7, 8320.0], [37.8, 8327.0], [37.9, 8338.0], [38.0, 8346.0], [38.1, 8351.0], [38.2, 8354.0], [38.3, 8359.0], [38.4, 8363.0], [38.5, 8371.0], [38.6, 8379.0], [38.7, 8384.0], [38.8, 8392.0], [38.9, 8397.0], [39.0, 8402.0], [39.1, 8413.0], [39.2, 8419.0], [39.3, 8428.0], [39.4, 8438.0], [39.5, 8445.0], [39.6, 8450.0], [39.7, 8462.0], [39.8, 8467.0], [39.9, 8471.0], [40.0, 8479.0], [40.1, 8489.0], [40.2, 8496.0], [40.3, 8502.0], [40.4, 8517.0], [40.5, 8522.0], [40.6, 8525.0], [40.7, 8531.0], [40.8, 8539.0], [40.9, 8546.0], [41.0, 8557.0], [41.1, 8561.0], [41.2, 8574.0], [41.3, 8578.0], [41.4, 8587.0], [41.5, 8594.0], [41.6, 8600.0], [41.7, 8603.0], [41.8, 8611.0], [41.9, 8616.0], [42.0, 8622.0], [42.1, 8628.0], [42.2, 8638.0], [42.3, 8644.0], [42.4, 8653.0], [42.5, 8661.0], [42.6, 8665.0], [42.7, 8671.0], [42.8, 8679.0], [42.9, 8681.0], [43.0, 8689.0], [43.1, 8693.0], [43.2, 8701.0], [43.3, 8707.0], [43.4, 8718.0], [43.5, 8723.0], [43.6, 8728.0], [43.7, 8733.0], [43.8, 8736.0], [43.9, 8744.0], [44.0, 8753.0], [44.1, 8760.0], [44.2, 8764.0], [44.3, 8771.0], [44.4, 8775.0], [44.5, 8781.0], [44.6, 8788.0], [44.7, 8797.0], [44.8, 8802.0], [44.9, 8806.0], [45.0, 8812.0], [45.1, 8819.0], [45.2, 8825.0], [45.3, 8832.0], [45.4, 8836.0], [45.5, 8843.0], [45.6, 8849.0], [45.7, 8857.0], [45.8, 8864.0], [45.9, 8872.0], [46.0, 8877.0], [46.1, 8884.0], [46.2, 8890.0], [46.3, 8900.0], [46.4, 8907.0], [46.5, 8910.0], [46.6, 8916.0], [46.7, 8924.0], [46.8, 8928.0], [46.9, 8934.0], [47.0, 8942.0], [47.1, 8946.0], [47.2, 8955.0], [47.3, 8959.0], [47.4, 8966.0], [47.5, 8973.0], [47.6, 8982.0], [47.7, 8989.0], [47.8, 8994.0], [47.9, 9000.0], [48.0, 9006.0], [48.1, 9012.0], [48.2, 9020.0], [48.3, 9032.0], [48.4, 9047.0], [48.5, 9055.0], [48.6, 9062.0], [48.7, 9071.0], [48.8, 9077.0], [48.9, 9087.0], [49.0, 9093.0], [49.1, 9100.0], [49.2, 9105.0], [49.3, 9109.0], [49.4, 9113.0], [49.5, 9117.0], [49.6, 9124.0], [49.7, 9134.0], [49.8, 9143.0], [49.9, 9150.0], [50.0, 9167.0], [50.1, 9175.0], [50.2, 9185.0], [50.3, 9193.0], [50.4, 9208.0], [50.5, 9214.0], [50.6, 9223.0], [50.7, 9232.0], [50.8, 9238.0], [50.9, 9241.0], [51.0, 9246.0], [51.1, 9256.0], [51.2, 9265.0], [51.3, 9276.0], [51.4, 9284.0], [51.5, 9292.0], [51.6, 9300.0], [51.7, 9309.0], [51.8, 9315.0], [51.9, 9322.0], [52.0, 9329.0], [52.1, 9337.0], [52.2, 9342.0], [52.3, 9352.0], [52.4, 9359.0], [52.5, 9367.0], [52.6, 9375.0], [52.7, 9383.0], [52.8, 9395.0], [52.9, 9402.0], [53.0, 9409.0], [53.1, 9419.0], [53.2, 9430.0], [53.3, 9440.0], [53.4, 9444.0], [53.5, 9461.0], [53.6, 9469.0], [53.7, 9477.0], [53.8, 9481.0], [53.9, 9485.0], [54.0, 9493.0], [54.1, 9496.0], [54.2, 9507.0], [54.3, 9514.0], [54.4, 9519.0], [54.5, 9524.0], [54.6, 9536.0], [54.7, 9541.0], [54.8, 9545.0], [54.9, 9552.0], [55.0, 9557.0], [55.1, 9565.0], [55.2, 9570.0], [55.3, 9577.0], [55.4, 9589.0], [55.5, 9594.0], [55.6, 9599.0], [55.7, 9605.0], [55.8, 9608.0], [55.9, 9612.0], [56.0, 9618.0], [56.1, 9631.0], [56.2, 9637.0], [56.3, 9640.0], [56.4, 9645.0], [56.5, 9653.0], [56.6, 9659.0], [56.7, 9662.0], [56.8, 9665.0], [56.9, 9672.0], [57.0, 9678.0], [57.1, 9684.0], [57.2, 9696.0], [57.3, 9703.0], [57.4, 9714.0], [57.5, 9719.0], [57.6, 9727.0], [57.7, 9734.0], [57.8, 9746.0], [57.9, 9760.0], [58.0, 9772.0], [58.1, 9784.0], [58.2, 9791.0], [58.3, 9802.0], [58.4, 9808.0], [58.5, 9821.0], [58.6, 9827.0], [58.7, 9840.0], [58.8, 9847.0], [58.9, 9854.0], [59.0, 9870.0], [59.1, 9877.0], [59.2, 9886.0], [59.3, 9899.0], [59.4, 9908.0], [59.5, 9913.0], [59.6, 9923.0], [59.7, 9928.0], [59.8, 9942.0], [59.9, 9953.0], [60.0, 9974.0], [60.1, 9983.0], [60.2, 9990.0], [60.3, 9995.0], [60.4, 10004.0], [60.5, 10014.0], [60.6, 10026.0], [60.7, 10032.0], [60.8, 10040.0], [60.9, 10051.0], [61.0, 10065.0], [61.1, 10073.0], [61.2, 10084.0], [61.3, 10095.0], [61.4, 10100.0], [61.5, 10106.0], [61.6, 10121.0], [61.7, 10131.0], [61.8, 10139.0], [61.9, 10155.0], [62.0, 10161.0], [62.1, 10170.0], [62.2, 10182.0], [62.3, 10204.0], [62.4, 10216.0], [62.5, 10223.0], [62.6, 10235.0], [62.7, 10253.0], [62.8, 10263.0], [62.9, 10279.0], [63.0, 10286.0], [63.1, 10297.0], [63.2, 10316.0], [63.3, 10321.0], [63.4, 10329.0], [63.5, 10339.0], [63.6, 10355.0], [63.7, 10366.0], [63.8, 10376.0], [63.9, 10389.0], [64.0, 10399.0], [64.1, 10405.0], [64.2, 10411.0], [64.3, 10416.0], [64.4, 10430.0], [64.5, 10438.0], [64.6, 10446.0], [64.7, 10453.0], [64.8, 10463.0], [64.9, 10471.0], [65.0, 10484.0], [65.1, 10500.0], [65.2, 10508.0], [65.3, 10518.0], [65.4, 10528.0], [65.5, 10534.0], [65.6, 10541.0], [65.7, 10552.0], [65.8, 10560.0], [65.9, 10577.0], [66.0, 10589.0], [66.1, 10596.0], [66.2, 10604.0], [66.3, 10609.0], [66.4, 10617.0], [66.5, 10631.0], [66.6, 10634.0], [66.7, 10643.0], [66.8, 10649.0], [66.9, 10660.0], [67.0, 10676.0], [67.1, 10679.0], [67.2, 10686.0], [67.3, 10703.0], [67.4, 10723.0], [67.5, 10751.0], [67.6, 10762.0], [67.7, 10770.0], [67.8, 10782.0], [67.9, 10791.0], [68.0, 10797.0], [68.1, 10815.0], [68.2, 10831.0], [68.3, 10854.0], [68.4, 10874.0], [68.5, 10903.0], [68.6, 10907.0], [68.7, 10932.0], [68.8, 10942.0], [68.9, 10950.0], [69.0, 10964.0], [69.1, 10981.0], [69.2, 10996.0], [69.3, 11017.0], [69.4, 11030.0], [69.5, 11045.0], [69.6, 11077.0], [69.7, 11107.0], [69.8, 11137.0], [69.9, 11153.0], [70.0, 11172.0], [70.1, 11182.0], [70.2, 11207.0], [70.3, 11219.0], [70.4, 11235.0], [70.5, 11242.0], [70.6, 11247.0], [70.7, 11261.0], [70.8, 11273.0], [70.9, 11280.0], [71.0, 11292.0], [71.1, 11316.0], [71.2, 11326.0], [71.3, 11330.0], [71.4, 11340.0], [71.5, 11351.0], [71.6, 11361.0], [71.7, 11370.0], [71.8, 11401.0], [71.9, 11419.0], [72.0, 11440.0], [72.1, 11467.0], [72.2, 11485.0], [72.3, 11510.0], [72.4, 11520.0], [72.5, 11530.0], [72.6, 11556.0], [72.7, 11565.0], [72.8, 11576.0], [72.9, 11593.0], [73.0, 11604.0], [73.1, 11613.0], [73.2, 11625.0], [73.3, 11637.0], [73.4, 11656.0], [73.5, 11672.0], [73.6, 11685.0], [73.7, 11705.0], [73.8, 11720.0], [73.9, 11738.0], [74.0, 11758.0], [74.1, 11772.0], [74.2, 11778.0], [74.3, 11791.0], [74.4, 11801.0], [74.5, 11816.0], [74.6, 11838.0], [74.7, 11844.0], [74.8, 11866.0], [74.9, 11890.0], [75.0, 11910.0], [75.1, 11928.0], [75.2, 11942.0], [75.3, 11960.0], [75.4, 11975.0], [75.5, 11997.0], [75.6, 12035.0], [75.7, 12051.0], [75.8, 12077.0], [75.9, 12091.0], [76.0, 12115.0], [76.1, 12145.0], [76.2, 12159.0], [76.3, 12176.0], [76.4, 12202.0], [76.5, 12223.0], [76.6, 12258.0], [76.7, 12282.0], [76.8, 12315.0], [76.9, 12350.0], [77.0, 12362.0], [77.1, 12374.0], [77.2, 12386.0], [77.3, 12402.0], [77.4, 12412.0], [77.5, 12437.0], [77.6, 12444.0], [77.7, 12467.0], [77.8, 12482.0], [77.9, 12508.0], [78.0, 12525.0], [78.1, 12534.0], [78.2, 12542.0], [78.3, 12566.0], [78.4, 12578.0], [78.5, 12610.0], [78.6, 12633.0], [78.7, 12652.0], [78.8, 12664.0], [78.9, 12682.0], [79.0, 12708.0], [79.1, 12726.0], [79.2, 12748.0], [79.3, 12764.0], [79.4, 12790.0], [79.5, 12809.0], [79.6, 12818.0], [79.7, 12860.0], [79.8, 12886.0], [79.9, 12902.0], [80.0, 12937.0], [80.1, 12974.0], [80.2, 13001.0], [80.3, 13012.0], [80.4, 13031.0], [80.5, 13055.0], [80.6, 13079.0], [80.7, 13104.0], [80.8, 13130.0], [80.9, 13144.0], [81.0, 13167.0], [81.1, 13204.0], [81.2, 13222.0], [81.3, 13240.0], [81.4, 13264.0], [81.5, 13294.0], [81.6, 13334.0], [81.7, 13365.0], [81.8, 13406.0], [81.9, 13414.0], [82.0, 13439.0], [82.1, 13459.0], [82.2, 13467.0], [82.3, 13477.0], [82.4, 13500.0], [82.5, 13510.0], [82.6, 13525.0], [82.7, 13542.0], [82.8, 13585.0], [82.9, 13611.0], [83.0, 13641.0], [83.1, 13658.0], [83.2, 13695.0], [83.3, 13724.0], [83.4, 13751.0], [83.5, 13796.0], [83.6, 13825.0], [83.7, 13839.0], [83.8, 13871.0], [83.9, 13891.0], [84.0, 13909.0], [84.1, 13936.0], [84.2, 13960.0], [84.3, 13975.0], [84.4, 13985.0], [84.5, 14013.0], [84.6, 14030.0], [84.7, 14043.0], [84.8, 14063.0], [84.9, 14090.0], [85.0, 14098.0], [85.1, 14108.0], [85.2, 14125.0], [85.3, 14143.0], [85.4, 14174.0], [85.5, 14201.0], [85.6, 14210.0], [85.7, 14215.0], [85.8, 14227.0], [85.9, 14242.0], [86.0, 14256.0], [86.1, 14270.0], [86.2, 14281.0], [86.3, 14298.0], [86.4, 14314.0], [86.5, 14356.0], [86.6, 14396.0], [86.7, 14424.0], [86.8, 14444.0], [86.9, 14463.0], [87.0, 14509.0], [87.1, 14527.0], [87.2, 14558.0], [87.3, 14582.0], [87.4, 14609.0], [87.5, 14618.0], [87.6, 14632.0], [87.7, 14644.0], [87.8, 14660.0], [87.9, 14678.0], [88.0, 14692.0], [88.1, 14702.0], [88.2, 14713.0], [88.3, 14728.0], [88.4, 14742.0], [88.5, 14761.0], [88.6, 14783.0], [88.7, 14823.0], [88.8, 14837.0], [88.9, 14845.0], [89.0, 14864.0], [89.1, 14874.0], [89.2, 14896.0], [89.3, 14916.0], [89.4, 14924.0], [89.5, 14944.0], [89.6, 14957.0], [89.7, 14974.0], [89.8, 14991.0], [89.9, 15020.0], [90.0, 15042.0], [90.1, 15062.0], [90.2, 15077.0], [90.3, 15095.0], [90.4, 15118.0], [90.5, 15140.0], [90.6, 15155.0], [90.7, 15189.0], [90.8, 15218.0], [90.9, 15256.0], [91.0, 15299.0], [91.1, 15337.0], [91.2, 15385.0], [91.3, 15437.0], [91.4, 15469.0], [91.5, 15518.0], [91.6, 15555.0], [91.7, 15587.0], [91.8, 15601.0], [91.9, 15619.0], [92.0, 15644.0], [92.1, 15679.0], [92.2, 15707.0], [92.3, 15767.0], [92.4, 15801.0], [92.5, 15841.0], [92.6, 15856.0], [92.7, 15885.0], [92.8, 15909.0], [92.9, 15919.0], [93.0, 15990.0], [93.1, 16040.0], [93.2, 16076.0], [93.3, 16110.0], [93.4, 16168.0], [93.5, 16208.0], [93.6, 16262.0], [93.7, 16290.0], [93.8, 16316.0], [93.9, 16393.0], [94.0, 16404.0], [94.1, 16445.0], [94.2, 16554.0], [94.3, 16682.0], [94.4, 16717.0], [94.5, 16790.0], [94.6, 16870.0], [94.7, 16911.0], [94.8, 17030.0], [94.9, 17093.0], [95.0, 17277.0], [95.1, 17385.0], [95.2, 17469.0], [95.3, 17709.0], [95.4, 17741.0], [95.5, 17807.0], [95.6, 17911.0], [95.7, 17921.0], [95.8, 18010.0], [95.9, 18073.0], [96.0, 18132.0], [96.1, 18201.0], [96.2, 18228.0], [96.3, 18287.0], [96.4, 18347.0], [96.5, 18404.0], [96.6, 18442.0], [96.7, 18477.0], [96.8, 18529.0], [96.9, 18691.0], [97.0, 18922.0], [97.1, 19122.0], [97.2, 19195.0], [97.3, 19303.0], [97.4, 19536.0], [97.5, 19748.0], [97.6, 19884.0], [97.7, 20014.0], [97.8, 20126.0], [97.9, 20190.0], [98.0, 20269.0], [98.1, 20354.0], [98.2, 20515.0], [98.3, 20576.0], [98.4, 20658.0], [98.5, 20731.0], [98.6, 20787.0], [98.7, 20915.0], [98.8, 21024.0], [98.9, 21176.0], [99.0, 21517.0], [99.1, 22024.0], [99.2, 22589.0], [99.3, 23285.0], [99.4, 24865.0], [99.5, 26888.0], [99.6, 29063.0], [99.7, 32834.0], [99.8, 38979.0], [99.9, 43612.0], [100.0, 50688.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 127.0, "series": [{"data": [[0.0, 3.0], [37300.0, 1.0], [38900.0, 1.0], [41300.0, 1.0], [48500.0, 1.0], [48900.0, 1.0], [50500.0, 1.0], [1400.0, 2.0], [1500.0, 2.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 3.0], [2100.0, 5.0], [2200.0, 6.0], [2300.0, 8.0], [2400.0, 8.0], [2500.0, 5.0], [2600.0, 8.0], [2700.0, 17.0], [2800.0, 23.0], [2900.0, 13.0], [3000.0, 15.0], [3100.0, 14.0], [3200.0, 24.0], [3300.0, 44.0], [3400.0, 27.0], [3500.0, 40.0], [3600.0, 25.0], [3700.0, 30.0], [3800.0, 12.0], [3900.0, 26.0], [4000.0, 24.0], [4200.0, 44.0], [4100.0, 31.0], [4300.0, 38.0], [4500.0, 33.0], [4600.0, 31.0], [4400.0, 32.0], [4700.0, 32.0], [4800.0, 22.0], [5100.0, 30.0], [4900.0, 28.0], [5000.0, 30.0], [5200.0, 34.0], [5300.0, 49.0], [5500.0, 45.0], [5400.0, 42.0], [5600.0, 43.0], [5700.0, 44.0], [5800.0, 43.0], [5900.0, 45.0], [6100.0, 68.0], [6000.0, 45.0], [6200.0, 55.0], [6300.0, 63.0], [6500.0, 42.0], [6400.0, 55.0], [6600.0, 45.0], [6900.0, 68.0], [6800.0, 44.0], [6700.0, 42.0], [7000.0, 62.0], [7100.0, 81.0], [7400.0, 78.0], [7200.0, 87.0], [7300.0, 74.0], [7500.0, 61.0], [7600.0, 37.0], [7800.0, 61.0], [7900.0, 79.0], [7700.0, 43.0], [8000.0, 126.0], [8100.0, 127.0], [8600.0, 112.0], [8300.0, 112.0], [8400.0, 94.0], [8200.0, 95.0], [8700.0, 110.0], [8500.0, 93.0], [9000.0, 84.0], [9200.0, 85.0], [8800.0, 108.0], [8900.0, 114.0], [9100.0, 91.0], [9700.0, 75.0], [9500.0, 104.0], [9600.0, 112.0], [9300.0, 91.0], [9400.0, 89.0], [10000.0, 73.0], [10200.0, 61.0], [9900.0, 74.0], [9800.0, 72.0], [10100.0, 60.0], [10500.0, 76.0], [10700.0, 53.0], [10300.0, 64.0], [10400.0, 74.0], [10600.0, 78.0], [11100.0, 34.0], [11200.0, 60.0], [10900.0, 52.0], [11000.0, 32.0], [10800.0, 33.0], [11300.0, 54.0], [11500.0, 50.0], [11600.0, 49.0], [11700.0, 51.0], [11400.0, 34.0], [11800.0, 40.0], [12000.0, 28.0], [12100.0, 33.0], [11900.0, 40.0], [12200.0, 26.0], [12500.0, 42.0], [12700.0, 37.0], [12300.0, 37.0], [12400.0, 40.0], [12600.0, 34.0], [12800.0, 29.0], [13100.0, 27.0], [12900.0, 21.0], [13200.0, 30.0], [13000.0, 36.0], [13300.0, 21.0], [13400.0, 42.0], [13500.0, 33.0], [13800.0, 31.0], [13700.0, 19.0], [13600.0, 27.0], [14200.0, 57.0], [14300.0, 21.0], [14000.0, 40.0], [13900.0, 34.0], [14100.0, 34.0], [14400.0, 27.0], [14600.0, 53.0], [14700.0, 38.0], [14500.0, 25.0], [14800.0, 41.0], [15100.0, 30.0], [14900.0, 44.0], [15000.0, 33.0], [15200.0, 19.0], [15300.0, 15.0], [15600.0, 29.0], [15800.0, 27.0], [15400.0, 15.0], [15500.0, 24.0], [15700.0, 15.0], [15900.0, 16.0], [16300.0, 17.0], [16200.0, 17.0], [16000.0, 19.0], [16100.0, 14.0], [16600.0, 7.0], [16400.0, 14.0], [16800.0, 12.0], [17200.0, 4.0], [17000.0, 9.0], [17400.0, 8.0], [17800.0, 5.0], [18000.0, 13.0], [18200.0, 19.0], [17600.0, 3.0], [18400.0, 18.0], [18600.0, 2.0], [19000.0, 3.0], [19400.0, 3.0], [19200.0, 6.0], [18800.0, 4.0], [20000.0, 8.0], [19800.0, 5.0], [19600.0, 2.0], [20200.0, 10.0], [20400.0, 1.0], [21400.0, 2.0], [20600.0, 11.0], [21000.0, 5.0], [20800.0, 5.0], [22000.0, 3.0], [21600.0, 1.0], [22200.0, 1.0], [21800.0, 2.0], [22600.0, 2.0], [23200.0, 1.0], [24800.0, 3.0], [26200.0, 1.0], [26400.0, 2.0], [26600.0, 1.0], [26800.0, 1.0], [27800.0, 1.0], [29000.0, 1.0], [29400.0, 2.0], [32800.0, 1.0], [35200.0, 1.0], [39200.0, 1.0], [43600.0, 2.0], [46000.0, 2.0], [48800.0, 1.0], [41500.0, 1.0], [43500.0, 1.0], [16900.0, 8.0], [16700.0, 13.0], [16500.0, 4.0], [17300.0, 7.0], [17100.0, 4.0], [17900.0, 14.0], [17700.0, 14.0], [18300.0, 10.0], [17500.0, 1.0], [18100.0, 8.0], [18500.0, 10.0], [18900.0, 5.0], [19300.0, 5.0], [19100.0, 9.0], [20100.0, 10.0], [19500.0, 5.0], [19700.0, 5.0], [20300.0, 3.0], [19900.0, 3.0], [20900.0, 7.0], [20500.0, 13.0], [21300.0, 3.0], [20700.0, 10.0], [21100.0, 3.0], [21500.0, 2.0], [22500.0, 3.0], [21700.0, 3.0], [22300.0, 1.0], [22700.0, 1.0], [23300.0, 2.0], [22900.0, 3.0], [23900.0, 1.0], [24100.0, 1.0], [25100.0, 1.0], [26700.0, 1.0], [26900.0, 3.0], [27500.0, 1.0], [27300.0, 1.0], [30300.0, 1.0], [30700.0, 1.0], [30500.0, 1.0], [31700.0, 1.0], [33800.0, 1.0], [35000.0, 2.0], [37800.0, 1.0], [39400.0, 1.0], [50600.0, 1.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 50600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6964.0, "series": [{"data": [[0.0, 3.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6964.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 69.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1052.3903381642517, "minX": 1.62621419E12, "maxY": 1593.1559065934075, "series": [{"data": [[1.62621419E12, 1239.5], [1.62621421E12, 1067.4691358024706], [1.6262142E12, 1231.75], [1.62621423E12, 1183.754468485419], [1.62621422E12, 1052.3903381642517], [1.62621425E12, 1404.7601156069356], [1.62621424E12, 1302.390532544377], [1.62621427E12, 1299.4616935483866], [1.62621426E12, 1593.1559065934075]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62621427E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 46.0, "minX": 987.0, "maxY": 19917.0, "series": [{"data": [[987.0, 5652.683908045974], [988.0, 15395.875], [989.0, 7519.927461139896], [998.0, 5004.0], [1019.0, 4580.0], [1017.0, 4693.0], [1020.0, 4570.0], [1008.0, 4718.666666666667], [1007.0, 4671.0], [1006.0, 3487.0], [1005.0, 4415.0], [1001.0, 5253.0], [997.0, 5139.0], [992.0, 8384.866666666667], [993.0, 9507.772727272726], [1083.0, 5781.0], [1087.0, 7276.032258064515], [1057.0, 12569.0], [1056.0, 5344.0], [1086.0, 10932.414893617019], [1061.0, 8442.0], [1060.0, 6330.0], [1059.0, 6332.0], [1058.0, 5444.5], [1064.0, 11227.5], [1066.0, 8463.75], [1065.0, 4234.0], [1067.0, 18476.333333333332], [1063.0, 7513.5], [1062.0, 8979.5], [1070.0, 4419.0], [1071.0, 3435.3333333333335], [1069.0, 10921.051724137931], [1068.0, 9053.29649595687], [1085.0, 8854.0], [1084.0, 7517.666666666666], [1082.0, 4039.0], [1081.0, 6363.5], [1080.0, 4128.0], [1079.0, 8603.0], [1078.0, 4131.5], [1077.0, 7261.5], [1076.0, 5754.882352941177], [1072.0, 9222.666666666668], [1073.0, 4601.0], [1026.0, 4631.0], [1055.0, 6677.0], [1053.0, 5530.0], [1050.0, 2265.5], [1049.0, 3087.333333333333], [1046.0, 4672.0], [1048.0, 46.0], [1074.0, 3602.4545454545455], [1075.0, 4514.34375], [1100.0, 5158.5], [1127.0, 6046.2307692307695], [1134.0, 3572.75], [1132.0, 6267.0], [1131.0, 6546.5], [1135.0, 6284.0], [1129.0, 4971.0], [1128.0, 4916.0], [1138.0, 4927.0], [1137.0, 12409.0], [1136.0, 6225.0], [1103.0, 6914.0], [1102.0, 13152.0], [1101.0, 3948.0], [1139.0, 11773.0], [1141.0, 7051.5], [1140.0, 3171.0], [1144.0, 6222.0], [1143.0, 9005.5], [1147.0, 8363.5], [1145.0, 3841.0], [1149.0, 8334.5], [1150.0, 5387.0], [1151.0, 6317.0], [1120.0, 3742.0], [1122.0, 6286.0], [1121.0, 6318.0], [1124.0, 6275.0], [1123.0, 6364.0], [1126.0, 12255.0], [1125.0, 3360.0], [1148.0, 4573.0], [1118.0, 5001.0], [1117.0, 6298.0], [1116.0, 7892.0], [1115.0, 6388.0], [1113.0, 6329.0], [1112.0, 8603.0], [1111.0, 13272.0], [1110.0, 5607.0], [1109.0, 6299.0], [1108.0, 6904.0], [1107.0, 8601.0], [1106.0, 10623.0], [1105.0, 6404.0], [1104.0, 6912.0], [1088.0, 6475.743421052632], [1119.0, 6884.0], [1090.0, 7003.666666666667], [1089.0, 4384.8], [1092.0, 5201.5], [1091.0, 6564.5], [1095.0, 4105.25], [1094.0, 3719.0], [1093.0, 4146.0], [1097.0, 5160.0], [1096.0, 5157.0], [1099.0, 3719.5], [1098.0, 6153.5], [1204.0, 5102.75], [1212.0, 4396.0], [1215.0, 3307.5], [1185.0, 5450.75], [1191.0, 5678.5], [1190.0, 5757.0], [1187.0, 8875.630208333338], [1188.0, 6777.0], [1186.0, 2745.0], [1194.0, 2938.0], [1193.0, 6343.888888888889], [1197.0, 5805.0], [1196.0, 11110.5], [1195.0, 8421.968036529683], [1199.0, 2859.0], [1198.0, 4538.0], [1214.0, 4707.5], [1213.0, 4396.0], [1211.0, 2905.0], [1210.0, 3092.5], [1209.0, 3254.0], [1208.0, 4109.666666666667], [1207.0, 3957.6666666666665], [1206.0, 6794.0], [1205.0, 4532.666666666667], [1203.0, 4953.333333333333], [1202.0, 2879.0], [1201.0, 2764.0], [1200.0, 5096.0], [1183.0, 9297.75], [1152.0, 5177.0], [1154.0, 3963.0], [1153.0, 6229.0], [1156.0, 6778.5], [1155.0, 5068.5], [1159.0, 6884.5], [1158.0, 3457.0], [1161.0, 3909.0], [1160.0, 4069.0], [1157.0, 5675.0], [1165.0, 5028.666666666667], [1163.0, 3506.0], [1167.0, 3439.0], [1166.0, 7801.0], [1162.0, 4698.0], [1182.0, 8151.0], [1181.0, 3533.697674418604], [1180.0, 10459.0], [1179.0, 5260.5], [1178.0, 5458.5], [1177.0, 3585.5], [1176.0, 3416.0], [1175.0, 3565.6666666666665], [1173.0, 5157.0], [1174.0, 6735.666666666667], [1172.0, 4859.0], [1170.0, 3501.3333333333335], [1171.0, 6192.0], [1169.0, 4437.333333333333], [1168.0, 4612.857142857143], [1224.0, 2208.0], [1238.0, 4689.5], [1241.0, 19307.666666666668], [1242.0, 5974.0], [1247.0, 12861.0], [1246.0, 11171.0], [1245.0, 6124.0], [1244.0, 10976.0], [1243.0, 2980.0], [1217.0, 2896.0], [1216.0, 4321.5], [1219.0, 4303.5], [1218.0, 2726.0], [1221.0, 2965.0], [1220.0, 2684.0], [1223.0, 4186.5], [1222.0, 2941.0], [1225.0, 6541.0], [1227.0, 5651.0], [1226.0, 7184.0], [1229.0, 1956.0], [1228.0, 8212.75], [1240.0, 8648.0], [1239.0, 8475.5], [1237.0, 6771.5], [1236.0, 10105.5], [1235.0, 9183.0], [1234.0, 11686.5], [1233.0, 12911.5], [1232.0, 9600.0], [1231.0, 2730.5], [1264.0, 14582.0], [1267.0, 11075.0], [1266.0, 12398.0], [1269.0, 8100.0], [1268.0, 3192.0], [1271.0, 7943.0], [1270.0, 7763.0], [1273.0, 7932.0], [1272.0, 5850.0], [1274.0, 11258.010362694302], [1277.0, 6173.5], [1276.0, 10797.0], [1275.0, 5947.0], [1278.0, 9603.250000000002], [1279.0, 7730.0], [1250.0, 12838.0], [1249.0, 7623.0], [1253.0, 12387.0], [1252.0, 12386.0], [1257.0, 12183.0], [1255.0, 11556.0], [1259.0, 12162.0], [1258.0, 12374.0], [1261.0, 13027.0], [1260.0, 12725.0], [1263.0, 12155.0], [1262.0, 10984.0], [1230.0, 5885.333333333333], [1291.0, 5789.0], [1308.0, 12292.608695652172], [1299.0, 10526.63333333333], [1292.0, 7313.909090909091], [1311.0, 6475.0], [1280.0, 12942.0], [1282.0, 5980.0], [1281.0, 10615.0], [1284.0, 6755.0], [1283.0, 3238.0], [1286.0, 3948.0], [1285.0, 5810.0], [1288.0, 11637.0], [1287.0, 5942.0], [1290.0, 4747.5], [1289.0, 10142.0], [1309.0, 10486.03299492385], [1310.0, 6921.5], [1306.0, 10590.199999999999], [1307.0, 5909.0], [1293.0, 6353.333333333333], [1294.0, 6959.0], [1295.0, 8625.045774647879], [1312.0, 11211.479452054798], [1315.0, 7350.0], [1314.0, 6626.0], [1317.0, 7972.0], [1316.0, 5963.0], [1319.0, 5980.0], [1318.0, 7981.0], [1321.0, 7471.0], [1320.0, 5825.0], [1323.0, 11421.0], [1322.0, 5970.0], [1325.0, 10980.0], [1324.0, 10994.0], [1327.0, 7318.0], [1326.0, 6751.5], [1336.0, 12394.348079161799], [1338.0, 5793.0], [1337.0, 2960.0], [1343.0, 3366.0], [1330.0, 10040.777777777777], [1329.0, 5690.0], [1328.0, 3806.0], [1332.0, 3330.0], [1331.0, 5825.0], [1334.0, 6443.0], [1333.0, 3799.0], [1335.0, 14994.6], [1296.0, 8885.970588235292], [1297.0, 11491.259740259742], [1298.0, 9738.951999999997], [1304.0, 11224.666666666664], [1303.0, 7988.0], [1305.0, 11374.421052631578], [1396.0, 13459.0], [1404.0, 8237.5], [1407.0, 12625.0], [1377.0, 3694.5], [1379.0, 12680.0], [1378.0, 7193.0], [1381.0, 7194.0], [1380.0, 13415.0], [1383.0, 7232.0], [1382.0, 7196.0], [1385.0, 7218.0], [1384.0, 3660.0], [1387.0, 7211.0], [1386.0, 7757.0], [1389.0, 11744.0], [1388.0, 7191.0], [1391.0, 11613.0], [1390.0, 6299.0], [1406.0, 5705.0], [1405.0, 5684.0], [1403.0, 12699.0], [1402.0, 11235.0], [1401.0, 10321.0], [1400.0, 5811.0], [1399.0, 3636.0], [1398.0, 7176.0], [1397.0, 7295.0], [1395.0, 5782.0], [1394.0, 7174.0], [1393.0, 7203.0], [1392.0, 11928.0], [1375.0, 3501.0], [1344.0, 3725.0], [1346.0, 8955.0], [1345.0, 7278.0], [1349.0, 5878.0], [1347.0, 3740.0], [1351.0, 5859.0], [1350.0, 5736.0], [1353.0, 10962.0], [1352.0, 5750.0], [1355.0, 3724.0], [1354.0, 11772.0], [1357.0, 7808.0], [1356.0, 3708.0], [1359.0, 7236.0], [1358.0, 7805.0], [1374.0, 7352.0], [1373.0, 7356.0], [1372.0, 7771.0], [1371.0, 3689.0], [1370.0, 7255.0], [1369.0, 7681.0], [1368.0, 3659.0], [1367.0, 5590.0], [1366.0, 3568.0], [1365.0, 5749.0], [1364.0, 7253.0], [1363.0, 2964.0], [1362.0, 10752.0], [1361.0, 3698.0], [1360.0, 7362.0], [1460.0, 3441.0], [1468.0, 13323.0], [1471.0, 11898.0], [1441.0, 11597.0], [1440.0, 14839.0], [1443.0, 12353.0], [1442.0, 11481.0], [1446.0, 11382.0], [1444.0, 11247.0], [1448.0, 12287.0], [1447.0, 14459.5], [1451.0, 11262.0], [1449.0, 11783.0], [1453.0, 12377.0], [1452.0, 17619.0], [1455.0, 11363.0], [1454.0, 10693.0], [1470.0, 11843.0], [1469.0, 3414.0], [1467.0, 11843.0], [1466.0, 12353.5], [1465.0, 13306.0], [1464.0, 14270.0], [1463.0, 13230.0], [1462.0, 12202.0], [1461.0, 3499.0], [1459.0, 12375.0], [1458.0, 12487.0], [1457.0, 17092.0], [1456.0, 12491.0], [1439.0, 14438.0], [1410.0, 12568.0], [1409.0, 12434.0], [1412.0, 12569.0], [1411.0, 5762.0], [1415.0, 10581.0], [1414.0, 7466.5], [1417.0, 9130.0], [1416.0, 12589.0], [1419.0, 7750.0], [1418.0, 11960.0], [1423.0, 4629.5], [1422.0, 5724.0], [1437.0, 9169.5], [1435.0, 3543.0], [1434.0, 5449.0], [1433.0, 13336.0], [1432.0, 12090.5], [1430.0, 12284.0], [1429.0, 5565.0], [1427.0, 12258.0], [1426.0, 12508.0], [1425.0, 7660.0], [1424.0, 12578.0], [1524.0, 11671.0], [1532.0, 7353.0], [1535.0, 3254.0], [1505.0, 12399.0], [1504.0, 12379.0], [1507.0, 3194.0], [1506.0, 12119.0], [1509.0, 11472.0], [1508.0, 11772.0], [1511.0, 6878.0], [1510.0, 3385.0], [1513.0, 12109.0], [1512.0, 11067.0], [1515.0, 11869.0], [1514.0, 11453.0], [1517.0, 11280.0], [1516.0, 11661.0], [1519.0, 5966.0], [1518.0, 6863.0], [1534.0, 13024.0], [1533.0, 13411.0], [1531.0, 13040.0], [1530.0, 3299.0], [1529.0, 16860.0], [1528.0, 6864.0], [1527.0, 13912.0], [1526.0, 12157.0], [1525.0, 12099.0], [1523.0, 13935.0], [1522.0, 11817.0], [1521.0, 13165.0], [1520.0, 6979.0], [1503.0, 11316.0], [1473.0, 10462.0], [1472.0, 13229.0], [1475.0, 7102.0], [1474.0, 11172.0], [1477.0, 13218.0], [1476.0, 13260.0], [1479.0, 6988.0], [1478.0, 3399.0], [1481.0, 11843.0], [1480.0, 12407.0], [1483.0, 12262.0], [1482.0, 12457.0], [1485.0, 11920.0], [1484.0, 12363.0], [1487.0, 12438.0], [1486.0, 14227.0], [1502.0, 7470.0], [1501.0, 12437.0], [1500.0, 7165.0], [1499.0, 11355.0], [1498.0, 11643.0], [1497.0, 12202.0], [1496.0, 11165.0], [1495.0, 7507.0], [1494.0, 3393.0], [1493.0, 7509.0], [1492.0, 6956.0], [1491.0, 8392.0], [1490.0, 7481.0], [1489.0, 8363.0], [1488.0, 3444.0], [1591.0, 11212.0], [1595.0, 11306.0], [1553.0, 10060.713498622597], [1554.0, 6751.333333333334], [1555.0, 9516.509363295883], [1560.0, 6630.0], [1562.0, 7481.0], [1561.0, 6181.0], [1566.0, 8660.0], [1564.0, 10526.0], [1584.0, 14963.0], [1548.0, 9902.0], [1546.0, 9519.0], [1545.0, 6942.0], [1544.0, 2087.0], [1543.0, 5341.0], [1542.0, 6899.0], [1541.0, 11255.0], [1540.0, 6740.0], [1539.0, 7211.0], [1538.0, 3235.0], [1537.0, 5159.0], [1536.0, 6755.0], [1567.0, 10066.0], [1586.0, 15912.0], [1585.0, 15607.0], [1588.0, 16397.0], [1587.0, 11107.0], [1590.0, 11952.0], [1589.0, 12828.5], [1592.0, 10325.0], [1597.0, 7672.725490196077], [1598.0, 9742.545977011489], [1599.0, 7443.833333333333], [1569.0, 16194.0], [1568.0, 10141.0], [1571.0, 10682.0], [1570.0, 19917.0], [1573.0, 5884.0], [1572.0, 8727.0], [1575.0, 6464.0], [1574.0, 5015.0], [1577.0, 15856.0], [1576.0, 13899.0], [1579.0, 14623.0], [1578.0, 10848.0], [1581.0, 6366.0], [1580.0, 16472.0], [1583.0, 10940.0], [1582.0, 10355.0], [1596.0, 10263.0], [1594.0, 12079.0], [1593.0, 11030.0], [1600.0, 9163.396551724136], [1601.0, 12845.42056074768]], "isOverall": false, "label": "Sunstar Search", "isController": false}, {"data": [[1312.5436203466863, 9855.033674339313]], "isOverall": false, "label": "Sunstar Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1601.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 78.0, "minX": 1.62621419E12, "maxY": 1118331.5, "series": [{"data": [[1.62621419E12, 3071.2], [1.62621421E12, 311248.4], [1.6262142E12, 9217.8], [1.62621423E12, 817013.8], [1.62621422E12, 795490.6], [1.62621425E12, 1063746.6], [1.62621424E12, 909248.2], [1.62621427E12, 355504.9], [1.62621426E12, 1118331.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62621419E12, 78.0], [1.62621421E12, 7897.5], [1.6262142E12, 234.0], [1.62621423E12, 20728.5], [1.62621422E12, 20182.5], [1.62621425E12, 26988.0], [1.62621424E12, 23068.5], [1.62621427E12, 8365.5], [1.62621426E12, 28353.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62621427E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4595.703703703701, "minX": 1.62621419E12, "maxY": 11456.50755494506, "series": [{"data": [[1.62621419E12, 5888.75], [1.62621421E12, 4595.703703703701], [1.6262142E12, 8099.25], [1.62621423E12, 8677.777986829737], [1.62621422E12, 9503.514009661823], [1.62621425E12, 11410.518063583817], [1.62621424E12, 10018.679628064245], [1.62621427E12, 8048.74193548387], [1.62621426E12, 11456.50755494506]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62621427E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4486.6271604938265, "minX": 1.62621419E12, "maxY": 11420.997939560431, "series": [{"data": [[1.62621419E12, 5884.5], [1.62621421E12, 4486.6271604938265], [1.6262142E12, 8097.166666666666], [1.62621423E12, 8675.528692380049], [1.62621422E12, 9410.161352657007], [1.62621425E12, 11406.869942196541], [1.62621424E12, 10002.059171597626], [1.62621427E12, 6930.840725806449], [1.62621426E12, 11420.997939560431]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62621427E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 909.25, "minX": 1.62621419E12, "maxY": 11315.708815028916, "series": [{"data": [[1.62621419E12, 909.25], [1.62621421E12, 3671.343209876543], [1.6262142E12, 1270.75], [1.62621423E12, 8158.22201317027], [1.62621422E12, 8912.256038647349], [1.62621425E12, 11315.708815028916], [1.62621424E12, 9597.126796280647], [1.62621427E12, 7993.346774193552], [1.62621426E12, 11047.3743131868]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62621427E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.62621419E12, "maxY": 50688.0, "series": [{"data": [[1.62621419E12, 6280.0], [1.62621421E12, 26204.0], [1.6262142E12, 16633.0], [1.62621423E12, 43612.0], [1.62621422E12, 35237.0], [1.62621425E12, 29450.0], [1.62621424E12, 50688.0], [1.62621427E12, 17619.0], [1.62621426E12, 22979.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62621419E12, 5155.0], [1.62621421E12, 1549.0], [1.6262142E12, 1669.0], [1.62621423E12, 2358.0], [1.62621422E12, 1867.0], [1.62621425E12, 4099.0], [1.62621424E12, 1420.0], [1.62621427E12, 33.0], [1.62621426E12, 3206.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62621419E12, 6280.0], [1.62621421E12, 5988.200000000003], [1.6262142E12, 15585.700000000004], [1.62621423E12, 11802.2], [1.62621422E12, 13010.6], [1.62621425E12, 19257.0], [1.62621424E12, 14739.6], [1.62621427E12, 12569.0], [1.62621426E12, 15672.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62621419E12, 6280.0], [1.62621421E12, 22690.52], [1.6262142E12, 16633.0], [1.62621423E12, 26599.879999998317], [1.62621422E12, 28296.560000000212], [1.62621425E12, 24264.550000000057], [1.62621424E12, 21828.120000000024], [1.62621427E12, 17130.5], [1.62621426E12, 18898.7]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62621419E12, 6280.0], [1.62621421E12, 7735.599999999997], [1.6262142E12, 16633.0], [1.62621423E12, 12536.8], [1.62621422E12, 14951.4], [1.62621425E12, 20633.75], [1.62621424E12, 15099.8], [1.62621427E12, 13287.5], [1.62621426E12, 16171.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62621427E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2061.0, "minX": 1.0, "maxY": 20499.0, "series": [{"data": [[2.0, 4610.0], [640.0, 8467.0], [3.0, 11818.0], [4.0, 6806.0], [6.0, 2061.0], [9.0, 6903.0], [11.0, 3530.0], [12.0, 6911.5], [19.0, 11379.0], [20.0, 6997.5], [25.0, 6343.5], [28.0, 3358.5], [30.0, 6629.5], [34.0, 20499.0], [38.0, 4170.5], [42.0, 2762.0], [44.0, 8495.5], [47.0, 10682.0], [50.0, 7898.5], [53.0, 7214.0], [55.0, 8679.0], [57.0, 4765.0], [56.0, 10446.0], [63.0, 7289.0], [78.0, 7454.0], [81.0, 9854.0], [83.0, 12072.0], [92.0, 3418.5], [94.0, 9398.5], [101.0, 4471.0], [102.0, 9592.5], [110.0, 10739.0], [121.0, 9602.0], [133.0, 14507.0], [129.0, 7456.0], [137.0, 10109.0], [159.0, 8197.0], [154.0, 6403.0], [163.0, 8055.0], [174.0, 8401.5], [191.0, 11521.0], [188.0, 6193.5], [196.0, 9883.5], [218.0, 8403.5], [228.0, 8794.0], [1.0, 12811.0], [283.0, 7232.0], [305.0, 10405.0], [311.0, 9428.0], [307.0, 7937.5], [320.0, 10956.5], [452.0, 9934.5], [470.0, 14279.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[307.0, 13027.0], [47.0, 4514.5], [188.0, 6946.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 640.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 20498.5, "series": [{"data": [[2.0, 4597.5], [640.0, 8467.0], [3.0, 11818.0], [4.0, 6805.0], [6.0, 2060.5], [9.0, 6334.0], [11.0, 3108.0], [12.0, 6911.0], [19.0, 11378.5], [20.0, 6997.5], [25.0, 6343.5], [28.0, 3056.5], [30.0, 6629.0], [34.0, 20498.5], [38.0, 4141.0], [42.0, 2762.0], [44.0, 8495.5], [47.0, 10682.0], [50.0, 7898.5], [53.0, 7214.0], [55.0, 8679.0], [57.0, 4764.0], [56.0, 10437.5], [63.0, 7289.0], [78.0, 7453.5], [81.0, 9711.0], [83.0, 11478.0], [92.0, 3414.5], [94.0, 9398.5], [101.0, 4143.0], [102.0, 9592.5], [110.0, 10675.5], [121.0, 9596.0], [133.0, 14507.0], [129.0, 7456.0], [137.0, 9923.0], [159.0, 8197.0], [154.0, 6403.0], [163.0, 8055.0], [174.0, 8401.5], [191.0, 11521.0], [188.0, 6193.5], [196.0, 9872.0], [218.0, 8403.5], [228.0, 8794.0], [1.0, 12811.0], [283.0, 7219.0], [305.0, 10405.0], [311.0, 9427.0], [307.0, 7937.5], [320.0, 10956.5], [452.0, 9934.5], [470.0, 14276.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[307.0, 0.0], [47.0, 0.0], [188.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 640.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62621419E12, "maxY": 158.4, "series": [{"data": [[1.62621419E12, 5.2], [1.62621421E12, 111.8], [1.6262142E12, 23.8], [1.62621423E12, 125.1], [1.62621422E12, 113.4], [1.62621425E12, 158.4], [1.62621424E12, 121.9], [1.62621427E12, 0.3], [1.62621426E12, 43.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62621427E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62621419E12, "maxY": 145.4, "series": [{"data": [[1.62621427E12, 6.7], [1.62621426E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62621419E12, 0.4], [1.62621421E12, 40.5], [1.6262142E12, 1.2], [1.62621423E12, 106.3], [1.62621422E12, 103.5], [1.62621425E12, 138.4], [1.62621424E12, 118.3], [1.62621427E12, 42.9], [1.62621426E12, 145.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62621427E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62621419E12, "maxY": 145.4, "series": [{"data": [[1.62621419E12, 0.4], [1.62621421E12, 40.5], [1.6262142E12, 1.2], [1.62621423E12, 106.3], [1.62621422E12, 103.5], [1.62621425E12, 138.4], [1.62621424E12, 118.3], [1.62621427E12, 42.9], [1.62621426E12, 145.4]], "isOverall": false, "label": "Sunstar Search-success", "isController": false}, {"data": [[1.62621427E12, 6.7], [1.62621426E12, 0.2]], "isOverall": false, "label": "Sunstar Search-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62621427E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62621419E12, "maxY": 145.4, "series": [{"data": [[1.62621419E12, 0.4], [1.62621421E12, 40.5], [1.6262142E12, 1.2], [1.62621423E12, 106.3], [1.62621422E12, 103.5], [1.62621425E12, 138.4], [1.62621424E12, 118.3], [1.62621427E12, 42.9], [1.62621426E12, 145.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62621427E12, 6.7], [1.62621426E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62621427E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

