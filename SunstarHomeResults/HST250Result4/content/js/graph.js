/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "maxY": 86827.0, "series": [{"data": [[0.0, 37.0], [0.1, 56.0], [0.2, 61.0], [0.3, 62.0], [0.4, 63.0], [0.5, 63.0], [0.6, 65.0], [0.7, 66.0], [0.8, 68.0], [0.9, 68.0], [1.0, 70.0], [1.1, 72.0], [1.2, 73.0], [1.3, 74.0], [1.4, 76.0], [1.5, 78.0], [1.6, 80.0], [1.7, 85.0], [1.8, 87.0], [1.9, 90.0], [2.0, 90.0], [2.1, 112.0], [2.2, 121.0], [2.3, 123.0], [2.4, 125.0], [2.5, 129.0], [2.6, 135.0], [2.7, 140.0], [2.8, 146.0], [2.9, 147.0], [3.0, 150.0], [3.1, 155.0], [3.2, 157.0], [3.3, 160.0], [3.4, 163.0], [3.5, 163.0], [3.6, 167.0], [3.7, 167.0], [3.8, 171.0], [3.9, 172.0], [4.0, 174.0], [4.1, 186.0], [4.2, 193.0], [4.3, 201.0], [4.4, 201.0], [4.5, 223.0], [4.6, 224.0], [4.7, 280.0], [4.8, 284.0], [4.9, 292.0], [5.0, 300.0], [5.1, 310.0], [5.2, 312.0], [5.3, 315.0], [5.4, 316.0], [5.5, 318.0], [5.6, 351.0], [5.7, 368.0], [5.8, 370.0], [5.9, 375.0], [6.0, 386.0], [6.1, 399.0], [6.2, 407.0], [6.3, 411.0], [6.4, 417.0], [6.5, 418.0], [6.6, 423.0], [6.7, 429.0], [6.8, 431.0], [6.9, 438.0], [7.0, 438.0], [7.1, 440.0], [7.2, 443.0], [7.3, 443.0], [7.4, 446.0], [7.5, 449.0], [7.6, 451.0], [7.7, 451.0], [7.8, 452.0], [7.9, 460.0], [8.0, 467.0], [8.1, 472.0], [8.2, 474.0], [8.3, 478.0], [8.4, 483.0], [8.5, 484.0], [8.6, 490.0], [8.7, 492.0], [8.8, 500.0], [8.9, 502.0], [9.0, 507.0], [9.1, 509.0], [9.2, 516.0], [9.3, 516.0], [9.4, 516.0], [9.5, 519.0], [9.6, 520.0], [9.7, 534.0], [9.8, 535.0], [9.9, 536.0], [10.0, 538.0], [10.1, 542.0], [10.2, 544.0], [10.3, 545.0], [10.4, 545.0], [10.5, 546.0], [10.6, 547.0], [10.7, 549.0], [10.8, 549.0], [10.9, 553.0], [11.0, 561.0], [11.1, 563.0], [11.2, 568.0], [11.3, 568.0], [11.4, 574.0], [11.5, 575.0], [11.6, 581.0], [11.7, 581.0], [11.8, 582.0], [11.9, 582.0], [12.0, 585.0], [12.1, 585.0], [12.2, 587.0], [12.3, 588.0], [12.4, 589.0], [12.5, 592.0], [12.6, 592.0], [12.7, 592.0], [12.8, 593.0], [12.9, 596.0], [13.0, 599.0], [13.1, 599.0], [13.2, 600.0], [13.3, 601.0], [13.4, 601.0], [13.5, 602.0], [13.6, 604.0], [13.7, 605.0], [13.8, 606.0], [13.9, 608.0], [14.0, 610.0], [14.1, 612.0], [14.2, 615.0], [14.3, 615.0], [14.4, 617.0], [14.5, 618.0], [14.6, 619.0], [14.7, 621.0], [14.8, 622.0], [14.9, 626.0], [15.0, 626.0], [15.1, 627.0], [15.2, 628.0], [15.3, 629.0], [15.4, 631.0], [15.5, 635.0], [15.6, 637.0], [15.7, 641.0], [15.8, 644.0], [15.9, 647.0], [16.0, 650.0], [16.1, 656.0], [16.2, 657.0], [16.3, 659.0], [16.4, 662.0], [16.5, 662.0], [16.6, 663.0], [16.7, 663.0], [16.8, 676.0], [16.9, 678.0], [17.0, 679.0], [17.1, 682.0], [17.2, 689.0], [17.3, 689.0], [17.4, 692.0], [17.5, 692.0], [17.6, 695.0], [17.7, 697.0], [17.8, 697.0], [17.9, 701.0], [18.0, 703.0], [18.1, 704.0], [18.2, 706.0], [18.3, 707.0], [18.4, 708.0], [18.5, 710.0], [18.6, 712.0], [18.7, 712.0], [18.8, 713.0], [18.9, 714.0], [19.0, 716.0], [19.1, 716.0], [19.2, 716.0], [19.3, 716.0], [19.4, 721.0], [19.5, 721.0], [19.6, 724.0], [19.7, 725.0], [19.8, 726.0], [19.9, 726.0], [20.0, 731.0], [20.1, 732.0], [20.2, 734.0], [20.3, 735.0], [20.4, 735.0], [20.5, 735.0], [20.6, 738.0], [20.7, 741.0], [20.8, 742.0], [20.9, 743.0], [21.0, 743.0], [21.1, 744.0], [21.2, 744.0], [21.3, 745.0], [21.4, 746.0], [21.5, 748.0], [21.6, 748.0], [21.7, 750.0], [21.8, 754.0], [21.9, 754.0], [22.0, 755.0], [22.1, 757.0], [22.2, 759.0], [22.3, 760.0], [22.4, 764.0], [22.5, 764.0], [22.6, 768.0], [22.7, 769.0], [22.8, 770.0], [22.9, 770.0], [23.0, 772.0], [23.1, 773.0], [23.2, 774.0], [23.3, 779.0], [23.4, 780.0], [23.5, 785.0], [23.6, 786.0], [23.7, 788.0], [23.8, 789.0], [23.9, 789.0], [24.0, 790.0], [24.1, 791.0], [24.2, 794.0], [24.3, 794.0], [24.4, 799.0], [24.5, 801.0], [24.6, 801.0], [24.7, 802.0], [24.8, 804.0], [24.9, 804.0], [25.0, 806.0], [25.1, 808.0], [25.2, 809.0], [25.3, 809.0], [25.4, 812.0], [25.5, 812.0], [25.6, 814.0], [25.7, 817.0], [25.8, 820.0], [25.9, 822.0], [26.0, 823.0], [26.1, 824.0], [26.2, 827.0], [26.3, 828.0], [26.4, 831.0], [26.5, 831.0], [26.6, 832.0], [26.7, 833.0], [26.8, 833.0], [26.9, 834.0], [27.0, 834.0], [27.1, 838.0], [27.2, 840.0], [27.3, 840.0], [27.4, 841.0], [27.5, 841.0], [27.6, 842.0], [27.7, 843.0], [27.8, 844.0], [27.9, 847.0], [28.0, 847.0], [28.1, 848.0], [28.2, 850.0], [28.3, 850.0], [28.4, 850.0], [28.5, 851.0], [28.6, 851.0], [28.7, 851.0], [28.8, 852.0], [28.9, 854.0], [29.0, 855.0], [29.1, 859.0], [29.2, 862.0], [29.3, 863.0], [29.4, 864.0], [29.5, 864.0], [29.6, 865.0], [29.7, 867.0], [29.8, 869.0], [29.9, 869.0], [30.0, 871.0], [30.1, 872.0], [30.2, 873.0], [30.3, 874.0], [30.4, 874.0], [30.5, 875.0], [30.6, 878.0], [30.7, 878.0], [30.8, 879.0], [30.9, 879.0], [31.0, 880.0], [31.1, 882.0], [31.2, 883.0], [31.3, 884.0], [31.4, 884.0], [31.5, 885.0], [31.6, 885.0], [31.7, 886.0], [31.8, 886.0], [31.9, 887.0], [32.0, 889.0], [32.1, 891.0], [32.2, 891.0], [32.3, 891.0], [32.4, 892.0], [32.5, 893.0], [32.6, 895.0], [32.7, 895.0], [32.8, 896.0], [32.9, 897.0], [33.0, 898.0], [33.1, 899.0], [33.2, 903.0], [33.3, 903.0], [33.4, 905.0], [33.5, 906.0], [33.6, 909.0], [33.7, 910.0], [33.8, 911.0], [33.9, 912.0], [34.0, 913.0], [34.1, 913.0], [34.2, 913.0], [34.3, 914.0], [34.4, 915.0], [34.5, 916.0], [34.6, 917.0], [34.7, 918.0], [34.8, 918.0], [34.9, 919.0], [35.0, 921.0], [35.1, 923.0], [35.2, 923.0], [35.3, 923.0], [35.4, 923.0], [35.5, 923.0], [35.6, 925.0], [35.7, 925.0], [35.8, 927.0], [35.9, 927.0], [36.0, 929.0], [36.1, 932.0], [36.2, 935.0], [36.3, 936.0], [36.4, 938.0], [36.5, 938.0], [36.6, 939.0], [36.7, 943.0], [36.8, 943.0], [36.9, 944.0], [37.0, 946.0], [37.1, 946.0], [37.2, 947.0], [37.3, 950.0], [37.4, 951.0], [37.5, 953.0], [37.6, 953.0], [37.7, 956.0], [37.8, 958.0], [37.9, 963.0], [38.0, 964.0], [38.1, 966.0], [38.2, 967.0], [38.3, 967.0], [38.4, 969.0], [38.5, 970.0], [38.6, 972.0], [38.7, 972.0], [38.8, 975.0], [38.9, 979.0], [39.0, 986.0], [39.1, 988.0], [39.2, 992.0], [39.3, 993.0], [39.4, 993.0], [39.5, 994.0], [39.6, 995.0], [39.7, 996.0], [39.8, 1001.0], [39.9, 1004.0], [40.0, 1009.0], [40.1, 1010.0], [40.2, 1010.0], [40.3, 1014.0], [40.4, 1019.0], [40.5, 1022.0], [40.6, 1025.0], [40.7, 1027.0], [40.8, 1033.0], [40.9, 1036.0], [41.0, 1037.0], [41.1, 1038.0], [41.2, 1040.0], [41.3, 1040.0], [41.4, 1044.0], [41.5, 1046.0], [41.6, 1054.0], [41.7, 1054.0], [41.8, 1056.0], [41.9, 1058.0], [42.0, 1063.0], [42.1, 1064.0], [42.2, 1067.0], [42.3, 1073.0], [42.4, 1075.0], [42.5, 1078.0], [42.6, 1078.0], [42.7, 1080.0], [42.8, 1082.0], [42.9, 1089.0], [43.0, 1092.0], [43.1, 1092.0], [43.2, 1093.0], [43.3, 1095.0], [43.4, 1096.0], [43.5, 1100.0], [43.6, 1104.0], [43.7, 1105.0], [43.8, 1107.0], [43.9, 1109.0], [44.0, 1111.0], [44.1, 1112.0], [44.2, 1112.0], [44.3, 1113.0], [44.4, 1114.0], [44.5, 1114.0], [44.6, 1117.0], [44.7, 1119.0], [44.8, 1119.0], [44.9, 1119.0], [45.0, 1120.0], [45.1, 1122.0], [45.2, 1122.0], [45.3, 1123.0], [45.4, 1123.0], [45.5, 1126.0], [45.6, 1129.0], [45.7, 1130.0], [45.8, 1131.0], [45.9, 1133.0], [46.0, 1137.0], [46.1, 1139.0], [46.2, 1140.0], [46.3, 1140.0], [46.4, 1144.0], [46.5, 1145.0], [46.6, 1146.0], [46.7, 1146.0], [46.8, 1148.0], [46.9, 1152.0], [47.0, 1155.0], [47.1, 1157.0], [47.2, 1161.0], [47.3, 1162.0], [47.4, 1164.0], [47.5, 1169.0], [47.6, 1170.0], [47.7, 1172.0], [47.8, 1172.0], [47.9, 1174.0], [48.0, 1175.0], [48.1, 1176.0], [48.2, 1176.0], [48.3, 1177.0], [48.4, 1179.0], [48.5, 1181.0], [48.6, 1182.0], [48.7, 1184.0], [48.8, 1187.0], [48.9, 1187.0], [49.0, 1190.0], [49.1, 1191.0], [49.2, 1193.0], [49.3, 1194.0], [49.4, 1197.0], [49.5, 1197.0], [49.6, 1200.0], [49.7, 1202.0], [49.8, 1203.0], [49.9, 1203.0], [50.0, 1204.0], [50.1, 1205.0], [50.2, 1206.0], [50.3, 1207.0], [50.4, 1207.0], [50.5, 1210.0], [50.6, 1212.0], [50.7, 1212.0], [50.8, 1213.0], [50.9, 1215.0], [51.0, 1216.0], [51.1, 1217.0], [51.2, 1218.0], [51.3, 1219.0], [51.4, 1219.0], [51.5, 1220.0], [51.6, 1221.0], [51.7, 1221.0], [51.8, 1225.0], [51.9, 1226.0], [52.0, 1226.0], [52.1, 1227.0], [52.2, 1229.0], [52.3, 1231.0], [52.4, 1231.0], [52.5, 1232.0], [52.6, 1235.0], [52.7, 1236.0], [52.8, 1238.0], [52.9, 1242.0], [53.0, 1247.0], [53.1, 1250.0], [53.2, 1250.0], [53.3, 1251.0], [53.4, 1252.0], [53.5, 1253.0], [53.6, 1254.0], [53.7, 1258.0], [53.8, 1261.0], [53.9, 1262.0], [54.0, 1263.0], [54.1, 1269.0], [54.2, 1269.0], [54.3, 1270.0], [54.4, 1272.0], [54.5, 1273.0], [54.6, 1275.0], [54.7, 1276.0], [54.8, 1277.0], [54.9, 1279.0], [55.0, 1281.0], [55.1, 1281.0], [55.2, 1284.0], [55.3, 1286.0], [55.4, 1291.0], [55.5, 1291.0], [55.6, 1292.0], [55.7, 1293.0], [55.8, 1294.0], [55.9, 1295.0], [56.0, 1295.0], [56.1, 1297.0], [56.2, 1297.0], [56.3, 1298.0], [56.4, 1300.0], [56.5, 1304.0], [56.6, 1315.0], [56.7, 1316.0], [56.8, 1319.0], [56.9, 1319.0], [57.0, 1320.0], [57.1, 1321.0], [57.2, 1329.0], [57.3, 1329.0], [57.4, 1334.0], [57.5, 1334.0], [57.6, 1336.0], [57.7, 1336.0], [57.8, 1338.0], [57.9, 1339.0], [58.0, 1342.0], [58.1, 1343.0], [58.2, 1345.0], [58.3, 1346.0], [58.4, 1347.0], [58.5, 1349.0], [58.6, 1351.0], [58.7, 1353.0], [58.8, 1354.0], [58.9, 1356.0], [59.0, 1356.0], [59.1, 1360.0], [59.2, 1363.0], [59.3, 1363.0], [59.4, 1365.0], [59.5, 1366.0], [59.6, 1368.0], [59.7, 1370.0], [59.8, 1374.0], [59.9, 1377.0], [60.0, 1378.0], [60.1, 1378.0], [60.2, 1381.0], [60.3, 1383.0], [60.4, 1384.0], [60.5, 1387.0], [60.6, 1390.0], [60.7, 1391.0], [60.8, 1392.0], [60.9, 1394.0], [61.0, 1397.0], [61.1, 1398.0], [61.2, 1399.0], [61.3, 1404.0], [61.4, 1404.0], [61.5, 1406.0], [61.6, 1409.0], [61.7, 1413.0], [61.8, 1415.0], [61.9, 1418.0], [62.0, 1421.0], [62.1, 1421.0], [62.2, 1424.0], [62.3, 1426.0], [62.4, 1426.0], [62.5, 1430.0], [62.6, 1435.0], [62.7, 1435.0], [62.8, 1438.0], [62.9, 1439.0], [63.0, 1441.0], [63.1, 1442.0], [63.2, 1443.0], [63.3, 1444.0], [63.4, 1446.0], [63.5, 1449.0], [63.6, 1451.0], [63.7, 1464.0], [63.8, 1467.0], [63.9, 1470.0], [64.0, 1470.0], [64.1, 1474.0], [64.2, 1474.0], [64.3, 1479.0], [64.4, 1480.0], [64.5, 1483.0], [64.6, 1484.0], [64.7, 1490.0], [64.8, 1492.0], [64.9, 1499.0], [65.0, 1502.0], [65.1, 1505.0], [65.2, 1506.0], [65.3, 1510.0], [65.4, 1511.0], [65.5, 1512.0], [65.6, 1514.0], [65.7, 1514.0], [65.8, 1516.0], [65.9, 1516.0], [66.0, 1517.0], [66.1, 1521.0], [66.2, 1523.0], [66.3, 1526.0], [66.4, 1531.0], [66.5, 1532.0], [66.6, 1532.0], [66.7, 1533.0], [66.8, 1537.0], [66.9, 1540.0], [67.0, 1540.0], [67.1, 1543.0], [67.2, 1544.0], [67.3, 1546.0], [67.4, 1547.0], [67.5, 1549.0], [67.6, 1555.0], [67.7, 1557.0], [67.8, 1558.0], [67.9, 1560.0], [68.0, 1561.0], [68.1, 1562.0], [68.2, 1563.0], [68.3, 1563.0], [68.4, 1566.0], [68.5, 1566.0], [68.6, 1568.0], [68.7, 1568.0], [68.8, 1570.0], [68.9, 1571.0], [69.0, 1574.0], [69.1, 1575.0], [69.2, 1576.0], [69.3, 1577.0], [69.4, 1579.0], [69.5, 1580.0], [69.6, 1580.0], [69.7, 1582.0], [69.8, 1583.0], [69.9, 1585.0], [70.0, 1585.0], [70.1, 1587.0], [70.2, 1588.0], [70.3, 1590.0], [70.4, 1599.0], [70.5, 1600.0], [70.6, 1602.0], [70.7, 1605.0], [70.8, 1607.0], [70.9, 1607.0], [71.0, 1608.0], [71.1, 1609.0], [71.2, 1613.0], [71.3, 1613.0], [71.4, 1614.0], [71.5, 1614.0], [71.6, 1617.0], [71.7, 1619.0], [71.8, 1620.0], [71.9, 1624.0], [72.0, 1626.0], [72.1, 1627.0], [72.2, 1629.0], [72.3, 1636.0], [72.4, 1639.0], [72.5, 1649.0], [72.6, 1650.0], [72.7, 1653.0], [72.8, 1655.0], [72.9, 1663.0], [73.0, 1666.0], [73.1, 1669.0], [73.2, 1678.0], [73.3, 1678.0], [73.4, 1683.0], [73.5, 1695.0], [73.6, 1699.0], [73.7, 1717.0], [73.8, 1728.0], [73.9, 1730.0], [74.0, 1742.0], [74.1, 1752.0], [74.2, 1758.0], [74.3, 1771.0], [74.4, 1782.0], [74.5, 1786.0], [74.6, 1794.0], [74.7, 1808.0], [74.8, 1814.0], [74.9, 1819.0], [75.0, 1821.0], [75.1, 1848.0], [75.2, 1855.0], [75.3, 1877.0], [75.4, 1881.0], [75.5, 1923.0], [75.6, 1929.0], [75.7, 1944.0], [75.8, 1976.0], [75.9, 1988.0], [76.0, 2003.0], [76.1, 2018.0], [76.2, 2046.0], [76.3, 2051.0], [76.4, 2055.0], [76.5, 2066.0], [76.6, 2105.0], [76.7, 2124.0], [76.8, 2137.0], [76.9, 2140.0], [77.0, 2158.0], [77.1, 2162.0], [77.2, 2162.0], [77.3, 2166.0], [77.4, 2167.0], [77.5, 2170.0], [77.6, 2170.0], [77.7, 2171.0], [77.8, 2181.0], [77.9, 2189.0], [78.0, 2196.0], [78.1, 2198.0], [78.2, 2200.0], [78.3, 2208.0], [78.4, 2222.0], [78.5, 2223.0], [78.6, 2229.0], [78.7, 2231.0], [78.8, 2239.0], [78.9, 2241.0], [79.0, 2241.0], [79.1, 2252.0], [79.2, 2272.0], [79.3, 2284.0], [79.4, 2289.0], [79.5, 2293.0], [79.6, 2305.0], [79.7, 2306.0], [79.8, 2312.0], [79.9, 2320.0], [80.0, 2323.0], [80.1, 2327.0], [80.2, 2331.0], [80.3, 2333.0], [80.4, 2337.0], [80.5, 2351.0], [80.6, 2353.0], [80.7, 2357.0], [80.8, 2358.0], [80.9, 2364.0], [81.0, 2377.0], [81.1, 2386.0], [81.2, 2388.0], [81.3, 2390.0], [81.4, 2392.0], [81.5, 2396.0], [81.6, 2400.0], [81.7, 2401.0], [81.8, 2405.0], [81.9, 2416.0], [82.0, 2426.0], [82.1, 2434.0], [82.2, 2440.0], [82.3, 2444.0], [82.4, 2447.0], [82.5, 2447.0], [82.6, 2450.0], [82.7, 2452.0], [82.8, 2455.0], [82.9, 2460.0], [83.0, 2461.0], [83.1, 2463.0], [83.2, 2464.0], [83.3, 2471.0], [83.4, 2471.0], [83.5, 2476.0], [83.6, 2479.0], [83.7, 2489.0], [83.8, 2491.0], [83.9, 2491.0], [84.0, 2491.0], [84.1, 2493.0], [84.2, 2497.0], [84.3, 2503.0], [84.4, 2505.0], [84.5, 2506.0], [84.6, 2508.0], [84.7, 2518.0], [84.8, 2520.0], [84.9, 2522.0], [85.0, 2526.0], [85.1, 2529.0], [85.2, 2532.0], [85.3, 2535.0], [85.4, 2537.0], [85.5, 2540.0], [85.6, 2543.0], [85.7, 2545.0], [85.8, 2546.0], [85.9, 2547.0], [86.0, 2548.0], [86.1, 2548.0], [86.2, 2550.0], [86.3, 2552.0], [86.4, 2554.0], [86.5, 2557.0], [86.6, 2565.0], [86.7, 2566.0], [86.8, 2578.0], [86.9, 2583.0], [87.0, 2598.0], [87.1, 2602.0], [87.2, 2612.0], [87.3, 2613.0], [87.4, 2619.0], [87.5, 2638.0], [87.6, 2648.0], [87.7, 2650.0], [87.8, 2691.0], [87.9, 2699.0], [88.0, 2736.0], [88.1, 2778.0], [88.2, 2780.0], [88.3, 2904.0], [88.4, 2961.0], [88.5, 2967.0], [88.6, 2973.0], [88.7, 2984.0], [88.8, 2985.0], [88.9, 3015.0], [89.0, 3025.0], [89.1, 3064.0], [89.2, 3117.0], [89.3, 3134.0], [89.4, 3137.0], [89.5, 3141.0], [89.6, 3168.0], [89.7, 3175.0], [89.8, 3239.0], [89.9, 3245.0], [90.0, 3254.0], [90.1, 3255.0], [90.2, 3269.0], [90.3, 3283.0], [90.4, 3291.0], [90.5, 3311.0], [90.6, 3321.0], [90.7, 3322.0], [90.8, 3333.0], [90.9, 3348.0], [91.0, 3384.0], [91.1, 3398.0], [91.2, 3401.0], [91.3, 3420.0], [91.4, 3429.0], [91.5, 3457.0], [91.6, 15054.0], [91.7, 60044.0], [91.8, 60050.0], [91.9, 60056.0], [92.0, 60061.0], [92.1, 60065.0], [92.2, 60090.0], [92.3, 60135.0], [92.4, 60238.0], [92.5, 60250.0], [92.6, 60414.0], [92.7, 60431.0], [92.8, 60436.0], [92.9, 60439.0], [93.0, 60451.0], [93.1, 60451.0], [93.2, 60463.0], [93.3, 60473.0], [93.4, 60474.0], [93.5, 60486.0], [93.6, 60488.0], [93.7, 60492.0], [93.8, 60494.0], [93.9, 60498.0], [94.0, 60499.0], [94.1, 60501.0], [94.2, 60505.0], [94.3, 60507.0], [94.4, 60509.0], [94.5, 60514.0], [94.6, 60521.0], [94.7, 60522.0], [94.8, 60524.0], [94.9, 60524.0], [95.0, 60527.0], [95.1, 60528.0], [95.2, 60530.0], [95.3, 60530.0], [95.4, 60534.0], [95.5, 60535.0], [95.6, 60539.0], [95.7, 60540.0], [95.8, 60541.0], [95.9, 60541.0], [96.0, 60544.0], [96.1, 60548.0], [96.2, 60549.0], [96.3, 60553.0], [96.4, 60556.0], [96.5, 60559.0], [96.6, 60559.0], [96.7, 60566.0], [96.8, 60568.0], [96.9, 60580.0], [97.0, 60582.0], [97.1, 60611.0], [97.2, 60623.0], [97.3, 60633.0], [97.4, 60649.0], [97.5, 60653.0], [97.6, 60658.0], [97.7, 60659.0], [97.8, 60666.0], [97.9, 60667.0], [98.0, 60670.0], [98.1, 60670.0], [98.2, 60679.0], [98.3, 60680.0], [98.4, 60681.0], [98.5, 60682.0], [98.6, 60693.0], [98.7, 60702.0], [98.8, 60707.0], [98.9, 60712.0], [99.0, 60712.0], [99.1, 60716.0], [99.2, 60717.0], [99.3, 60718.0], [99.4, 60718.0], [99.5, 60724.0], [99.6, 60725.0], [99.7, 60752.0], [99.8, 60768.0], [99.9, 60966.0], [100.0, 86827.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 133.0, "series": [{"data": [[0.0, 32.0], [600.0, 73.0], [700.0, 101.0], [800.0, 133.0], [900.0, 102.0], [15000.0, 1.0], [1000.0, 57.0], [1100.0, 94.0], [1200.0, 104.0], [1300.0, 75.0], [1400.0, 57.0], [1500.0, 85.0], [1600.0, 49.0], [100.0, 34.0], [1700.0, 16.0], [1800.0, 12.0], [1900.0, 8.0], [2000.0, 8.0], [2100.0, 25.0], [2200.0, 21.0], [2300.0, 32.0], [2400.0, 41.0], [2500.0, 43.0], [2600.0, 14.0], [2700.0, 4.0], [2900.0, 10.0], [3000.0, 5.0], [3100.0, 8.0], [200.0, 10.0], [3200.0, 11.0], [3300.0, 11.0], [3400.0, 6.0], [60400.0, 22.0], [60800.0, 1.0], [60900.0, 1.0], [60200.0, 3.0], [60600.0, 26.0], [60700.0, 17.0], [60000.0, 10.0], [60500.0, 46.0], [60300.0, 1.0], [60100.0, 1.0], [300.0, 18.0], [86800.0, 1.0], [400.0, 41.0], [500.0, 67.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 86800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 862.0, "series": [{"data": [[0.0, 134.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 862.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 536.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 490.6666666666667, "minX": 1.62644252E12, "maxY": 1998.0, "series": [{"data": [[1.62644255E12, 1456.5280898876404], [1.62644254E12, 1769.0330882352948], [1.62644253E12, 1951.541176470588], [1.62644252E12, 1998.0], [1.62644259E12, 490.6666666666667], [1.62644258E12, 573.7321428571429], [1.62644257E12, 686.0917431192659], [1.62644256E12, 1006.960820895522]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62644259E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 37.0, "minX": 464.0, "maxY": 73747.0, "series": [{"data": [[478.0, 112.0], [479.0, 90.0], [477.0, 66.0], [476.0, 70.0], [475.0, 62.0], [474.0, 73.0], [473.0, 70.0], [472.0, 89.0], [471.0, 59.0], [465.0, 87.0], [464.0, 90.0], [467.0, 73.0], [466.0, 61.0], [470.0, 68.0], [469.0, 74.0], [468.0, 65.0], [494.0, 63.0], [495.0, 179.0], [493.0, 317.0], [492.0, 65.0], [491.0, 63.0], [490.0, 62.0], [489.0, 78.0], [488.0, 66.0], [487.0, 85.0], [481.0, 56.0], [480.0, 37.0], [483.0, 76.0], [482.0, 72.0], [486.0, 82.0], [485.0, 74.0], [484.0, 80.0], [499.0, 126.0], [509.0, 167.5], [510.0, 163.0], [508.0, 161.0], [504.0, 160.0], [503.0, 123.0], [502.0, 172.0], [501.0, 135.0], [500.0, 193.0], [498.0, 99.0], [497.0, 78.0], [496.0, 68.0], [538.0, 60680.0], [542.0, 60686.0], [543.0, 60718.0], [528.0, 60752.0], [531.0, 60703.0], [529.0, 60768.0], [533.0, 60693.0], [532.0, 60718.0], [541.0, 60712.0], [540.0, 60680.0], [539.0, 60660.0], [536.0, 60649.0], [519.0, 60710.0], [518.0, 60712.0], [517.0, 73747.0], [515.0, 15054.0], [514.0, 125.0], [513.0, 140.0], [512.0, 151.5], [527.0, 60717.0], [526.0, 60724.0], [525.0, 60735.0], [524.0, 60716.0], [523.0, 60720.0], [522.0, 60716.0], [521.0, 60707.0], [520.0, 60718.0], [535.0, 60681.0], [534.0, 60672.0], [572.0, 60436.0], [575.0, 60431.0], [560.0, 60607.0], [562.0, 60559.0], [561.0, 60582.0], [565.0, 60486.0], [563.0, 60528.0], [574.0, 60414.0], [573.0, 60479.0], [571.0, 60500.0], [570.0, 60486.0], [569.0, 60496.0], [568.0, 60509.0], [559.0, 60568.0], [544.0, 60670.0], [547.0, 60669.0], [545.0, 60658.0], [549.0, 60670.0], [548.0, 60702.0], [551.0, 60679.0], [550.0, 60623.0], [558.0, 60544.0], [557.0, 60611.0], [556.0, 60628.0], [555.0, 60647.0], [554.0, 60659.0], [553.0, 60653.0], [552.0, 60667.0], [567.0, 60548.0], [566.0, 60522.0], [600.0, 60551.5], [606.0, 60527.0], [607.0, 60528.0], [593.0, 60537.0], [592.0, 60439.0], [604.0, 60527.5], [603.0, 60501.0], [601.0, 60527.0], [591.0, 60553.0], [576.0, 60250.0], [578.0, 60135.0], [577.0, 60223.0], [580.0, 60541.0], [579.0, 60562.0], [582.0, 60540.0], [581.0, 60534.0], [590.0, 60535.0], [588.0, 60578.0], [587.0, 60557.0], [586.0, 60580.0], [585.0, 60532.0], [584.0, 60550.5], [598.0, 60530.0], [597.0, 60552.5], [595.0, 60549.0], [594.0, 60526.0], [636.0, 144.0], [639.0, 122.0], [624.0, 60452.0], [626.0, 60439.0], [625.0, 60473.0], [628.0, 60488.0], [627.0, 60444.0], [638.0, 129.0], [637.0, 138.0], [635.0, 147.0], [634.0, 146.0], [633.0, 150.0], [632.0, 160.0], [623.0, 60451.0], [608.0, 60516.0], [611.0, 60506.0], [609.0, 60524.0], [613.0, 60552.0], [612.0, 60521.0], [615.0, 60494.0], [614.0, 60507.0], [622.0, 60471.0], [621.0, 60463.0], [620.0, 60499.0], [619.0, 60492.0], [618.0, 60501.5], [616.0, 60523.0], [631.0, 168.5], [629.0, 60435.0], [659.0, 841.0], [668.0, 821.5], [666.0, 835.5], [665.0, 881.0], [664.0, 840.0], [640.0, 121.0], [663.0, 834.0], [662.0, 891.0], [660.0, 886.0], [658.0, 892.0], [657.0, 876.1666666666669], [696.0, 754.0], [702.0, 735.0], [703.0, 712.0], [688.0, 745.0], [701.0, 725.3333333333334], [699.0, 746.0], [697.0, 720.5], [687.0, 754.0], [674.0, 843.0], [673.0, 814.75], [676.0, 770.0], [675.0, 769.0], [679.0, 810.5], [678.0, 820.0], [686.0, 773.5], [685.0, 713.0], [683.0, 780.0], [682.0, 732.0], [681.0, 748.0], [680.0, 746.0], [694.0, 707.0], [693.0, 771.5], [690.0, 743.0], [689.0, 712.0], [730.0, 579.0], [734.0, 545.0], [735.0, 568.0], [721.0, 692.0], [720.0, 640.0], [723.0, 645.0], [722.0, 662.0], [725.0, 663.0], [724.0, 656.0], [733.0, 625.0], [732.0, 615.0], [731.0, 569.5], [728.0, 588.0], [711.0, 735.0], [710.0, 697.0], [709.0, 703.0], [708.0, 724.0], [707.0, 726.0], [706.0, 726.0], [705.0, 714.0], [704.0, 701.0], [719.0, 695.0], [718.0, 682.0], [717.0, 629.0], [716.0, 697.0], [715.0, 710.0], [714.0, 679.0], [713.0, 688.0], [712.0, 690.0], [727.0, 606.0], [726.0, 635.0], [762.0, 608.5], [766.0, 606.0], [767.0, 575.0], [753.0, 645.5], [756.0, 663.0], [754.0, 659.0], [765.0, 581.0], [764.0, 627.0], [763.0, 609.0], [760.0, 632.0], [743.0, 682.5], [741.0, 678.0], [740.0, 689.0], [739.0, 662.0], [738.0, 519.0], [737.0, 546.0], [736.0, 600.0], [751.0, 645.5], [749.0, 613.0], [748.0, 662.0], [747.0, 659.0], [746.0, 667.0], [745.0, 619.0], [744.0, 622.0], [758.0, 631.0], [757.0, 601.0], [793.0, 536.0], [797.0, 534.0], [798.0, 499.0], [785.0, 561.0], [784.0, 599.0], [787.0, 581.0], [786.0, 536.0], [789.0, 601.0], [788.0, 601.0], [796.0, 516.0], [795.0, 535.0], [794.0, 555.0], [792.0, 520.0], [775.0, 608.0], [774.0, 585.0], [773.0, 550.0], [772.0, 601.0], [771.0, 628.0], [770.0, 609.0], [769.0, 616.0], [768.0, 568.0], [783.0, 587.0], [782.0, 566.0], [781.0, 592.0], [780.0, 539.0], [779.0, 538.0], [778.0, 591.0], [777.0, 593.0], [776.0, 587.0], [791.0, 584.0], [790.0, 563.0], [828.0, 1394.0], [831.0, 1398.0], [816.0, 510.0], [818.0, 492.0], [817.0, 490.0], [821.0, 478.0], [819.0, 516.0], [830.0, 1343.0], [829.0, 1330.0], [827.0, 1413.0], [826.0, 1338.0], [825.0, 438.0], [824.0, 502.0], [815.0, 492.0], [801.0, 505.0], [800.0, 516.0], [803.0, 516.0], [802.0, 512.0], [805.0, 516.0], [804.0, 542.0], [807.0, 553.0], [806.0, 507.0], [813.0, 509.0], [812.0, 545.0], [811.0, 478.0], [810.0, 483.0], [809.0, 533.0], [808.0, 549.0], [823.0, 452.0], [822.0, 451.0], [857.0, 1280.0], [861.0, 1354.0], [862.0, 1294.0], [849.0, 1613.0], [848.0, 1369.0], [851.0, 1445.0], [850.0, 1607.0], [853.0, 1583.0], [852.0, 1269.0], [860.0, 1600.0], [859.0, 1444.0], [858.0, 1363.0], [856.0, 1329.0], [839.0, 1621.0], [838.0, 1374.0], [837.0, 1364.0], [835.0, 1627.0], [834.0, 1353.0], [833.0, 1614.0], [832.0, 1405.0], [846.0, 1387.0], [845.0, 1642.0], [844.0, 1343.0], [842.0, 1392.0], [841.0, 1627.0], [840.0, 1324.0], [855.0, 1286.0], [854.0, 1378.0], [888.0, 1287.0], [892.0, 1548.0], [895.0, 1269.0], [880.0, 1389.3333333333333], [883.0, 1242.0], [882.0, 1558.5], [894.0, 1291.0], [893.0, 1235.0], [891.0, 1297.0], [890.0, 1272.0], [889.0, 1236.0], [878.0, 1274.0], [864.0, 1273.5], [866.0, 1284.0], [865.0, 1346.0], [868.0, 1300.0], [867.0, 1272.0], [871.0, 1375.5], [869.0, 1351.0], [877.0, 1341.0], [875.0, 1291.0], [874.0, 1298.0], [872.0, 1298.0], [887.0, 1370.0], [885.0, 1564.5], [926.0, 1174.0], [916.0, 1209.0], [927.0, 1193.0], [913.0, 1479.0], [912.0, 1221.0], [915.0, 1204.0], [914.0, 1228.0], [925.0, 1214.5], [923.0, 1239.5], [921.0, 1173.5], [903.0, 1212.0], [902.0, 1206.0], [899.0, 1253.0], [898.0, 1202.0], [897.0, 1295.0], [896.0, 1251.0], [911.0, 1247.0], [910.0, 1197.0], [909.0, 1210.5], [907.0, 1220.0], [906.0, 1216.0], [905.0, 1523.0], [919.0, 1502.0], [918.0, 1227.0], [917.0, 1187.0], [953.0, 1258.0], [957.0, 1152.0], [958.0, 1203.0], [947.0, 1197.5], [945.0, 1179.5], [949.0, 1191.0], [948.0, 1219.0], [956.0, 1107.0], [955.0, 1298.0], [954.0, 1449.0], [952.0, 1202.0], [935.0, 1252.0], [934.0, 1137.0], [933.0, 1215.0], [932.0, 1231.0], [931.0, 1161.0], [930.0, 1229.0], [929.0, 1219.0], [928.0, 1219.0], [943.0, 1197.0], [942.0, 1207.0], [941.0, 1212.0], [940.0, 1474.0], [939.0, 1315.0], [938.0, 1176.0], [937.0, 1451.0], [936.0, 1225.0], [951.0, 1207.0], [950.0, 1140.0], [990.0, 1139.0], [980.0, 1399.0], [991.0, 1356.0], [977.0, 1366.0], [976.0, 1133.0], [979.0, 1187.0], [978.0, 1383.0], [989.0, 1291.5], [985.0, 1182.0], [984.0, 1363.0], [966.0, 1393.0], [965.0, 1140.0], [964.0, 1144.0], [963.0, 1176.0], [962.0, 1203.0], [961.0, 1158.0], [960.0, 1263.5], [975.0, 1123.0], [974.0, 1194.0], [973.0, 1133.0], [972.0, 1104.0], [971.0, 1146.0], [970.0, 1366.0], [969.0, 1078.0], [968.0, 1200.0], [983.0, 1054.0], [982.0, 1363.0], [981.0, 1378.0], [1020.0, 223.0], [1023.0, 201.0], [1009.0, 1114.0], [1008.0, 1095.0], [1011.0, 1111.0], [1010.0, 1157.0], [1013.0, 963.0], [1012.0, 1148.0], [1022.0, 212.0], [1021.0, 224.0], [1019.0, 280.0], [1018.0, 368.0], [1017.0, 878.0], [1016.0, 1056.0], [1007.0, 1119.5], [993.0, 1221.0], [992.0, 1113.0], [995.0, 1368.0], [994.0, 1213.0], [997.0, 1023.0], [996.0, 1114.0], [999.0, 1025.0], [998.0, 1100.0], [1006.0, 1037.0], [1005.0, 1092.0], [1004.0, 1206.0], [1003.0, 1196.0], [1002.0, 1044.0], [1001.0, 1378.0], [1000.0, 1357.0], [1015.0, 1106.0], [1014.0, 1080.0], [1074.0, 1653.0], [1076.0, 1594.0], [1082.0, 1607.0], [1060.0, 1605.0], [1064.0, 1589.6666666666667], [1066.0, 1568.0], [1068.0, 1558.0], [1070.0, 1590.0], [1086.0, 1573.5], [1080.0, 1698.0], [1078.0, 1533.0], [1072.0, 1562.0], [1024.0, 201.0], [1026.0, 167.0], [1030.0, 163.0], [1032.0, 60076.0], [1034.0, 60044.0], [1036.0, 60058.0], [1038.0, 60050.0], [1052.0, 1746.6666666666667], [1050.0, 1756.0], [1048.0, 1666.0], [1046.0, 1758.0], [1044.0, 60816.0], [1042.0, 60238.0], [1040.0, 60451.0], [1148.0, 1443.0], [1120.0, 1523.0], [1122.0, 1629.0], [1124.0, 1517.0], [1126.0, 1482.0], [1128.0, 1441.0], [1130.0, 1531.0], [1132.0, 1467.0], [1134.0, 1421.0], [1150.0, 1464.0], [1146.0, 1404.0], [1144.0, 1418.0], [1142.0, 1470.0], [1140.0, 1391.0], [1138.0, 1580.0], [1136.0, 1585.0], [1088.0, 1569.0], [1098.0, 1568.0], [1102.0, 1522.0], [1100.0, 1516.0], [1118.0, 1492.0], [1116.0, 1521.0], [1112.0, 1563.0], [1108.0, 1557.5], [1104.0, 1536.0], [1210.0, 1176.0], [1184.0, 1389.0], [1186.0, 1653.0], [1190.0, 1277.0], [1192.0, 1434.0], [1194.0, 1499.0], [1196.0, 1609.0], [1198.0, 1490.0], [1214.0, 1172.0], [1212.0, 1254.0], [1208.0, 1238.0], [1206.0, 1582.0], [1204.0, 1566.0], [1202.0, 1516.0], [1200.0, 1617.0], [1166.0, 1483.0], [1164.0, 1356.0], [1162.0, 1565.0], [1160.0, 1345.0], [1158.0, 1683.0], [1154.0, 1415.0], [1152.0, 1422.0], [1182.0, 1320.0], [1180.0, 1308.0], [1178.0, 1663.0], [1176.0, 1541.0], [1174.0, 1339.0], [1172.0, 1474.5], [1170.0, 1649.0], [1168.0, 1468.0], [1278.0, 2987.5], [1256.0, 1346.0], [1248.0, 1263.0], [1250.0, 1261.0], [1252.0, 1190.0], [1254.0, 1029.0], [1258.0, 1292.0], [1260.0, 1334.0], [1262.0, 1329.0], [1274.0, 701.0], [1272.0, 1009.0], [1270.0, 1221.0], [1268.0, 1292.5], [1266.0, 1321.0], [1264.0, 1276.0], [1230.0, 1359.25], [1224.0, 1250.0], [1222.0, 1116.0], [1220.0, 1139.0], [1218.0, 1439.0], [1216.0, 1273.0], [1246.0, 1290.0], [1244.0, 1294.0], [1242.0, 1426.0], [1240.0, 1389.3333333333333], [1238.0, 1426.0], [1236.0, 1437.0], [1234.0, 1300.0], [1232.0, 1235.0], [1318.0, 2557.0], [1338.0, 3287.0], [1342.0, 2554.0], [1312.0, 2508.0], [1320.0, 2476.0], [1322.0, 2520.5], [1326.0, 2956.5], [1324.0, 2497.0], [1332.0, 2545.0], [1330.0, 2548.0], [1328.0, 2934.0], [1282.0, 2578.0], [1284.0, 2619.0], [1290.0, 2561.0], [1288.0, 2503.0], [1294.0, 2608.0], [1306.0, 2476.0], [1302.0, 3420.0], [1300.0, 3321.0], [1400.0, 2401.0], [1378.0, 3254.0], [1382.0, 2463.0], [1380.0, 2460.0], [1386.0, 2351.0], [1388.0, 2358.0], [1390.0, 2405.0], [1404.0, 2391.0], [1402.0, 2320.0], [1396.0, 2320.0], [1392.0, 3137.0], [1358.0, 2471.0], [1356.0, 2547.0], [1348.0, 3386.0], [1344.0, 2843.0], [1374.0, 2396.0], [1366.0, 2377.0], [1364.0, 3343.0], [1362.0, 2433.5], [1360.0, 2491.0], [1464.0, 2456.0], [1466.0, 1817.0], [1470.0, 2736.0], [1440.0, 2201.5], [1442.0, 2162.0], [1446.0, 2174.5], [1444.0, 2992.0], [1448.0, 2568.5], [1450.0, 2229.0], [1452.0, 2124.0], [1454.0, 2166.0], [1462.0, 2055.0], [1460.0, 2965.0], [1458.0, 2160.0], [1456.0, 2973.0], [1438.0, 2172.0], [1410.0, 2307.0], [1414.0, 2711.0], [1412.0, 2214.0], [1416.0, 2289.0], [1436.0, 2252.0], [1432.0, 2184.6666666666665], [1430.0, 2756.1666666666665], [1520.0, 2105.0], [1522.0, 2198.0], [1512.0, 2314.5], [1528.0, 1990.0], [1504.0, 2461.0], [1514.0, 2270.0], [1516.0, 2241.0], [1518.0, 2221.0], [1534.0, 2055.0], [1526.0, 2137.0], [1524.0, 1231.0], [1472.0, 2234.0], [1474.0, 2693.0], [1478.0, 2714.0], [1476.0, 1782.0], [1480.0, 2638.0], [1482.0, 1833.0], [1484.0, 2666.0], [1486.0, 1771.0], [1502.0, 2401.0], [1500.0, 2537.0], [1496.0, 2508.0], [1494.0, 2535.0], [1492.0, 1721.0], [1488.0, 1755.5], [1574.0, 1033.0], [1576.0, 1063.0], [1568.0, 1536.6363636363635], [1578.0, 1075.0], [1580.0, 1010.0], [1582.0, 1112.0], [1592.0, 967.0], [1590.0, 959.0], [1586.0, 1070.0], [1584.0, 1037.0], [1536.0, 2046.0], [1540.0, 2018.0], [1538.0, 1936.0], [1542.0, 2051.0], [1648.0, 963.0], [1654.0, 869.0], [1658.0, 889.0], [1632.0, 989.0], [1644.0, 848.0], [1646.0, 911.0], [1660.0, 927.0], [1656.0, 903.0], [1650.0, 948.0], [1614.0, 894.5], [1612.0, 913.0], [1610.0, 972.0], [1608.0, 918.0], [1606.0, 878.0], [1604.0, 885.0], [1602.0, 972.0], [1630.0, 734.0], [1628.0, 794.0], [1626.0, 802.0], [1624.0, 801.0], [1622.0, 716.0], [1620.0, 812.0], [1618.0, 828.0], [1616.0, 979.0], [1720.0, 716.0], [1714.0, 744.0], [1724.0, 707.0], [1696.0, 865.0], [1698.0, 804.0], [1700.0, 833.0], [1702.0, 841.0], [1704.0, 791.0], [1706.0, 806.0], [1710.0, 741.0], [1708.0, 831.0], [1726.0, 732.0], [1722.0, 786.0], [1718.0, 714.0], [1716.0, 738.0], [1712.0, 726.3333333333334], [1666.0, 879.0], [1664.0, 891.5], [1668.0, 926.0], [1670.0, 911.0], [1674.0, 927.5], [1676.0, 887.0], [1678.0, 840.0], [1694.0, 879.0], [1692.0, 865.0], [1690.0, 799.0], [1688.0, 803.0], [1686.0, 896.0], [1684.0, 885.0], [1682.0, 823.0], [1680.0, 881.0], [1780.0, 1123.0], [1788.0, 1111.5], [1762.0, 1132.0], [1766.0, 1130.0], [1768.0, 1139.25], [1770.0, 1054.0], [1774.0, 1027.0], [1790.0, 1039.0], [1786.0, 1115.5], [1784.0, 1075.0], [1782.0, 1021.0], [1778.0, 1109.0], [1776.0, 1096.0], [1728.0, 703.0], [1730.0, 712.0], [1734.0, 1170.0], [1736.0, 1208.5], [1738.0, 1226.0], [1740.0, 1154.0], [1742.0, 1177.0], [1758.0, 1169.0], [1756.0, 1113.0], [1746.0, 1157.75], [1848.0, 767.6666666666666], [1850.0, 725.0], [1826.0, 854.5], [1824.0, 859.0], [1828.0, 814.0], [1832.0, 827.0], [1834.0, 851.0], [1836.0, 741.0], [1838.0, 744.0], [1846.0, 838.0], [1844.0, 851.0], [1842.0, 801.0], [1840.0, 742.0], [1822.0, 859.0], [1792.0, 1022.0], [1794.0, 985.0], [1802.0, 886.0], [1804.0, 951.0], [1806.0, 855.0], [1820.0, 864.0], [1818.0, 914.0], [1816.0, 884.0], [1814.0, 928.0], [1812.0, 909.0], [1810.0, 893.0], [1808.0, 876.0], [1864.0, 447.0], [1896.0, 316.0], [1900.0, 300.0], [1888.0, 375.0], [1890.0, 351.0], [1892.0, 318.0], [1894.0, 337.0], [1904.0, 953.0], [1866.0, 460.0], [1860.0, 471.0], [1858.0, 450.0], [1856.0, 439.0], [1886.0, 370.0], [1884.0, 399.0], [1882.0, 402.0], [1880.0, 401.0], [1876.0, 440.0], [1874.0, 437.0], [1872.0, 420.0], [1902.0, 284.0], [1898.0, 307.0], [1974.0, 587.0], [1956.0, 661.0], [1980.0, 637.0], [1952.0, 796.0], [1954.0, 823.0], [1958.0, 657.0], [1962.0, 679.0], [1964.0, 585.0], [1982.0, 549.0], [1976.0, 601.0], [1972.0, 586.0], [1970.0, 599.5], [1930.0, 944.0], [1926.0, 946.0], [1924.0, 980.5], [1922.0, 953.0], [1948.0, 884.0], [1946.0, 879.0], [1944.0, 832.0], [1940.0, 943.0], [1938.0, 913.0], [1936.0, 953.5], [2000.0, 782.75], [1998.0, 770.0], [1996.0, 773.0], [1984.0, 619.0], [1057.0, 1663.0], [1061.0, 1614.0], [1087.0, 1544.5], [1059.0, 1663.0], [1067.0, 1929.0], [1069.0, 1744.5], [1071.0, 1587.0], [1085.0, 1546.0], [1081.0, 1545.0], [1055.0, 1617.5], [1025.0, 193.0], [1029.0, 30115.0], [1027.0, 186.0], [1031.0, 60061.0], [1033.0, 60042.0], [1035.0, 60055.0], [1037.0, 60065.0], [1039.0, 60090.0], [1053.0, 1570.0], [1047.0, 1678.0], [1045.0, 1590.0], [1043.0, 60966.0], [1041.0, 60633.0], [1149.0, 1371.0], [1151.0, 1430.0], [1121.0, 1490.0], [1123.0, 1489.0], [1125.0, 1514.0], [1127.0, 1441.0], [1129.0, 1533.0], [1131.0, 1501.0], [1133.0, 1514.0], [1135.0, 1655.0], [1147.0, 1449.0], [1145.0, 1613.0], [1143.0, 1406.0], [1141.0, 1404.0], [1139.0, 1480.0], [1137.0, 1752.0], [1119.0, 1560.0], [1089.0, 1555.0], [1093.0, 1521.0], [1091.0, 1544.5], [1097.0, 1557.5], [1095.0, 1613.5], [1099.0, 1607.0], [1117.0, 1547.0], [1115.0, 1560.0], [1113.0, 1544.0], [1111.0, 1560.0], [1109.0, 1537.0], [1107.0, 1529.5], [1105.0, 1492.0], [1207.0, 1281.0], [1203.0, 1605.0], [1211.0, 1351.0], [1215.0, 1295.0], [1185.0, 1620.0], [1187.0, 1619.0], [1189.0, 1327.0], [1193.0, 1377.0], [1195.0, 1264.0], [1197.0, 1575.0], [1199.0, 1595.0], [1209.0, 1269.0], [1205.0, 1470.0], [1201.0, 1608.0], [1167.0, 1484.0], [1165.0, 1402.0], [1163.0, 1567.0], [1161.0, 1578.0], [1159.0, 1576.0], [1157.0, 1562.0], [1153.0, 1574.0], [1183.0, 1442.0], [1181.0, 1619.0], [1177.0, 1660.0], [1175.0, 1679.0], [1173.0, 1474.0], [1171.0, 1675.0], [1169.0, 1477.0], [1275.0, 2520.0], [1279.0, 2532.0], [1249.0, 1367.0], [1251.0, 1067.0], [1253.0, 1349.0], [1255.0, 992.0], [1257.0, 1093.0], [1259.0, 1217.0], [1261.0, 1275.0], [1263.0, 1232.0], [1277.0, 2532.0], [1271.0, 1197.0], [1269.0, 1252.0], [1265.0, 1279.0], [1231.0, 1080.0], [1229.0, 1421.0], [1225.0, 1442.0], [1223.0, 1251.0], [1221.0, 1381.0], [1219.0, 1237.5], [1217.0, 1146.0], [1247.0, 1155.0], [1245.0, 1078.0], [1243.0, 1336.0], [1241.0, 1336.0], [1235.0, 1421.0], [1233.0, 1349.0], [1333.0, 3260.0], [1315.0, 2517.0], [1317.0, 2470.5], [1319.0, 2491.0], [1323.0, 2512.5], [1341.0, 2970.5], [1339.0, 2439.0], [1337.0, 2435.6666666666665], [1335.0, 2933.0], [1331.0, 2533.0], [1329.0, 3269.0], [1311.0, 2548.0], [1281.0, 2540.5], [1283.0, 3454.0], [1287.0, 2579.0], [1293.0, 2912.0], [1291.0, 2559.0], [1295.0, 3333.0], [1309.0, 2524.0], [1305.0, 3429.0], [1301.0, 2551.0], [1299.0, 2516.5], [1297.0, 2607.5], [1399.0, 2321.5], [1383.0, 2363.0], [1403.0, 2293.0], [1407.0, 2309.0], [1377.0, 2425.5], [1379.0, 2452.0], [1385.0, 2752.0], [1387.0, 2444.0], [1389.0, 2337.0], [1391.0, 2388.0], [1405.0, 2688.5], [1401.0, 2326.0], [1397.0, 3291.0], [1395.0, 3311.0], [1393.0, 3168.0], [1359.0, 3283.0], [1357.0, 2491.0], [1355.0, 2548.0], [1353.0, 2851.5], [1351.0, 2911.0], [1349.0, 2445.0], [1347.0, 2936.0], [1345.0, 2552.0], [1375.0, 2438.0], [1373.0, 2721.8], [1367.0, 2447.0], [1365.0, 3255.0], [1363.0, 3322.0], [1361.0, 2522.0], [1443.0, 2984.0], [1441.0, 2272.0], [1449.0, 2170.0], [1451.0, 2170.0], [1453.0, 2904.0], [1455.0, 2103.0], [1469.0, 2647.0], [1467.0, 2699.0], [1465.0, 2780.0], [1463.0, 2961.0], [1461.0, 2066.0], [1459.0, 2204.0], [1457.0, 2902.0], [1409.0, 2685.5], [1415.0, 2284.0], [1437.0, 2577.5], [1431.0, 2488.0], [1429.0, 3064.0], [1529.0, 2037.0], [1535.0, 2003.0], [1507.0, 2398.0], [1505.0, 2355.0], [1511.0, 2387.0], [1509.0, 2357.0], [1513.0, 2231.0], [1515.0, 2333.0], [1517.0, 2344.0], [1519.0, 2241.0], [1525.0, 1976.0], [1521.0, 2208.0], [1503.0, 2518.0], [1473.0, 1794.0], [1475.0, 1786.0], [1479.0, 1848.0], [1481.0, 1814.0], [1483.0, 1883.0], [1485.0, 2691.0], [1501.0, 2419.0], [1499.0, 2032.0], [1497.0, 2566.0], [1495.0, 2141.0], [1491.0, 2532.0], [1489.0, 1783.0], [1575.0, 1129.0], [1591.0, 1040.0], [1597.0, 992.0], [1573.0, 1179.0], [1577.0, 1010.0], [1579.0, 1066.0], [1581.0, 1092.0], [1583.0, 1119.0], [1595.0, 919.0], [1589.0, 1079.5], [1587.0, 939.0], [1567.0, 1921.5], [1649.0, 896.0], [1613.0, 888.0], [1661.0, 906.5], [1633.0, 954.5], [1641.0, 895.0], [1645.0, 954.5], [1659.0, 912.0], [1657.0, 899.0], [1655.0, 938.0], [1653.0, 924.0], [1651.0, 940.5], [1615.0, 909.0], [1611.0, 995.0], [1609.0, 958.0], [1607.0, 864.0], [1605.0, 1063.0], [1603.0, 963.0], [1601.0, 996.0], [1629.0, 769.0], [1627.0, 761.0], [1625.0, 716.0], [1623.0, 844.0], [1621.0, 731.0], [1619.0, 771.5], [1617.0, 855.0], [1719.0, 734.0], [1727.0, 704.0], [1697.0, 834.0], [1699.0, 791.0], [1701.0, 786.0], [1703.0, 774.0], [1705.0, 764.0], [1707.0, 760.0], [1725.0, 790.0], [1723.0, 725.6666666666666], [1717.0, 699.0], [1713.0, 758.0], [1695.0, 869.0], [1669.0, 891.0], [1671.0, 872.0], [1673.0, 916.5], [1677.0, 913.0], [1679.0, 927.0], [1693.0, 871.0], [1691.0, 847.0], [1689.0, 797.0], [1687.0, 812.0], [1685.0, 841.0], [1683.0, 885.0], [1681.0, 869.0], [1789.0, 994.0], [1791.0, 1019.0], [1761.0, 1153.5], [1763.0, 1126.0], [1767.0, 1117.4], [1765.0, 1112.0], [1769.0, 1056.5], [1773.0, 1071.0], [1775.0, 1038.0], [1787.0, 1036.0], [1785.0, 993.0], [1783.0, 988.0], [1781.0, 1093.0], [1779.0, 1047.0], [1777.0, 1004.0], [1759.0, 1120.0], [1729.0, 710.0], [1731.0, 755.0], [1733.0, 1210.0], [1735.0, 1148.0], [1737.0, 1173.0], [1739.0, 1180.0], [1741.0, 1146.0], [1757.0, 1092.0], [1755.0, 1143.0], [1853.0, 657.0], [1855.0, 510.5], [1827.0, 745.0], [1831.0, 857.5], [1829.0, 804.0], [1833.0, 822.0], [1835.0, 834.0], [1837.0, 785.0], [1839.0, 862.0], [1851.0, 755.0], [1849.0, 788.0], [1847.0, 743.0], [1845.0, 750.0], [1843.0, 814.0], [1841.0, 831.0], [1795.0, 1044.0], [1799.0, 960.75], [1803.0, 866.0], [1805.0, 950.0], [1819.0, 850.0], [1817.0, 850.0], [1815.0, 905.0], [1813.0, 894.5], [1811.0, 833.0], [1809.0, 884.0], [1905.0, 1010.0], [1907.0, 987.0], [1891.0, 313.0], [1893.0, 311.0], [1895.0, 290.0], [1897.0, 315.0], [1869.0, 439.0], [1865.0, 447.0], [1863.0, 457.5], [1861.0, 467.0], [1887.0, 393.0], [1885.0, 381.0], [1883.0, 418.0], [1881.0, 431.0], [1877.0, 440.5], [1875.0, 423.0], [1903.0, 966.0], [1901.0, 292.0], [1899.0, 280.0], [1977.0, 589.0], [1983.0, 544.0], [1953.0, 824.0], [1955.0, 713.0], [1957.0, 656.0], [1959.0, 627.0], [1961.0, 605.0], [1963.0, 604.0], [1981.0, 599.0], [1979.0, 599.0], [1975.0, 574.0], [1973.0, 626.0], [1971.0, 607.0], [1935.0, 1009.0], [1927.0, 967.0], [1951.0, 771.0], [1949.0, 880.0], [1947.0, 872.0], [1945.0, 882.0], [1943.0, 924.7199999999998], [1993.0, 792.6666666666666], [1987.0, 577.0], [1985.0, 621.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}, {"data": [[1233.9459986987629, 6263.559531554975]], "isOverall": false, "label": "Sunstar Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 253.5, "minX": 1.62644252E12, "maxY": 1377098.7, "series": [{"data": [[1.62644255E12, 601798.7], [1.62644254E12, 488042.3], [1.62644253E12, 60972.6], [1.62644252E12, 9266.1], [1.62644259E12, 36706.6], [1.62644258E12, 79893.8], [1.62644257E12, 77814.9], [1.62644256E12, 1377098.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62644255E12, 6942.0], [1.62644254E12, 5304.0], [1.62644253E12, 1657.5], [1.62644252E12, 253.5], [1.62644259E12, 955.5], [1.62644258E12, 2184.0], [1.62644257E12, 2125.5], [1.62644256E12, 10452.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62644259E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 688.0, "minX": 1.62644252E12, "maxY": 60567.758928571406, "series": [{"data": [[1.62644255E12, 2141.230337078652], [1.62644254E12, 825.2794117647062], [1.62644253E12, 798.0823529411763], [1.62644252E12, 783.3076923076923], [1.62644259E12, 3109.5370370370374], [1.62644258E12, 60567.758928571406], [1.62644257E12, 688.0], [1.62644256E12, 2865.337686567164]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62644259E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 97.25925925925928, "minX": 1.62644252E12, "maxY": 60567.419642857145, "series": [{"data": [[1.62644255E12, 2127.3146067415737], [1.62644254E12, 822.5294117647056], [1.62644253E12, 794.7294117647058], [1.62644252E12, 776.2307692307692], [1.62644259E12, 97.25925925925928], [1.62644258E12, 60567.419642857145], [1.62644257E12, 686.9449541284406], [1.62644256E12, 2861.3208955223913]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62644259E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 94.18518518518518, "minX": 1.62644252E12, "maxY": 2051.01404494382, "series": [{"data": [[1.62644255E12, 2051.01404494382], [1.62644254E12, 792.2794117647061], [1.62644253E12, 775.5764705882352], [1.62644252E12, 652.6923076923076], [1.62644259E12, 94.18518518518518], [1.62644258E12, 511.24107142857144], [1.62644257E12, 659.8715596330278], [1.62644256E12, 1157.1156716417918]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62644259E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 59.0, "minX": 1.62644252E12, "maxY": 60966.0, "series": [{"data": [[1.62644255E12, 3457.0], [1.62644254E12, 1226.0], [1.62644253E12, 1014.0], [1.62644252E12, 842.0], [1.62644259E12, 317.0], [1.62644258E12, 60768.0], [1.62644257E12, 910.0], [1.62644256E12, 60966.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62644255E12, 696.0], [1.62644254E12, 280.0], [1.62644253E12, 544.0], [1.62644252E12, 757.0], [1.62644259E12, 59.0], [1.62644258E12, 60135.0], [1.62644257E12, 121.0], [1.62644256E12, 163.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62644255E12, 3122.1000000000004], [1.62644254E12, 1122.7], [1.62644253E12, 968.6], [1.62644252E12, 833.2], [1.62644259E12, 172.0], [1.62644258E12, 60716.0], [1.62644257E12, 881.0], [1.62644256E12, 1614.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62644255E12, 3423.87], [1.62644254E12, 1212.27], [1.62644253E12, 1014.0], [1.62644252E12, 842.0], [1.62644259E12, 317.0], [1.62644258E12, 60765.92], [1.62644257E12, 910.0], [1.62644256E12, 60183.24]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62644255E12, 3293.9999999999995], [1.62644254E12, 1164.4499999999998], [1.62644253E12, 997.3000000000001], [1.62644252E12, 842.0], [1.62644259E12, 186.0], [1.62644258E12, 60721.4], [1.62644257E12, 891.5], [1.62644256E12, 1678.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62644259E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 46.5, "minX": 2.0, "maxY": 60667.0, "series": [{"data": [[128.0, 2523.0], [2.0, 60179.0], [34.0, 126.0], [10.0, 1068.0], [45.0, 1129.0], [11.0, 146.0], [47.0, 417.0], [184.0, 1251.5], [3.0, 995.0], [50.0, 1713.5], [51.0, 60526.0], [13.0, 773.0], [227.0, 1501.0], [59.0, 60666.0], [62.0, 960.5], [79.0, 864.0], [19.0, 224.0], [20.0, 72.5], [85.0, 879.0], [87.0, 581.0], [6.0, 60542.0], [98.0, 745.5], [101.0, 869.0], [116.0, 2295.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 60667.0], [20.0, 46.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 227.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 60666.0, "series": [{"data": [[128.0, 2523.0], [2.0, 60179.0], [34.0, 126.0], [10.0, 1068.0], [45.0, 1129.0], [11.0, 146.0], [47.0, 416.0], [184.0, 1249.5], [3.0, 767.0], [50.0, 1707.0], [51.0, 60526.0], [13.0, 771.0], [227.0, 1489.0], [59.0, 60666.0], [62.0, 960.0], [79.0, 858.0], [19.0, 223.0], [20.0, 72.5], [85.0, 871.0], [87.0, 581.0], [6.0, 60542.0], [98.0, 745.5], [101.0, 868.0], [116.0, 2268.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 0.0], [20.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 227.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6, "minX": 1.6264425E12, "maxY": 52.1, "series": [{"data": [[1.62644255E12, 35.6], [1.62644254E12, 27.2], [1.62644253E12, 8.6], [1.62644252E12, 7.4], [1.62644251E12, 5.1], [1.6264425E12, 1.6], [1.62644259E12, 5.1], [1.62644257E12, 11.0], [1.62644256E12, 52.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62644259E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62644252E12, "maxY": 53.6, "series": [{"data": [[1.62644259E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62644255E12, 35.6], [1.62644254E12, 27.2], [1.62644253E12, 8.5], [1.62644252E12, 1.3], [1.62644259E12, 4.9], [1.62644258E12, 11.2], [1.62644257E12, 10.9], [1.62644256E12, 53.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62644259E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62644259E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62644252E12, "maxY": 53.6, "series": [{"data": [[1.62644255E12, 35.6], [1.62644254E12, 27.2], [1.62644253E12, 8.5], [1.62644252E12, 1.3], [1.62644259E12, 4.9], [1.62644258E12, 11.2], [1.62644257E12, 10.9], [1.62644256E12, 53.6]], "isOverall": false, "label": "Sunstar Search-success", "isController": false}, {"data": [[1.62644259E12, 0.5]], "isOverall": false, "label": "Sunstar Search-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62644259E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62644252E12, "maxY": 53.6, "series": [{"data": [[1.62644255E12, 35.6], [1.62644254E12, 27.2], [1.62644253E12, 8.5], [1.62644252E12, 1.3], [1.62644259E12, 4.9], [1.62644258E12, 11.2], [1.62644257E12, 10.9], [1.62644256E12, 53.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62644259E12, 0.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62644259E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

