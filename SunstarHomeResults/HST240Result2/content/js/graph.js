/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 29949.0, "series": [{"data": [[0.0, 14.0], [0.1, 18.0], [0.2, 19.0], [0.3, 20.0], [0.4, 21.0], [0.5, 23.0], [0.6, 24.0], [0.7, 26.0], [0.8, 27.0], [0.9, 28.0], [1.0, 30.0], [1.1, 31.0], [1.2, 33.0], [1.3, 34.0], [1.4, 36.0], [1.5, 45.0], [1.6, 50.0], [1.7, 64.0], [1.8, 72.0], [1.9, 80.0], [2.0, 101.0], [2.1, 139.0], [2.2, 147.0], [2.3, 157.0], [2.4, 163.0], [2.5, 170.0], [2.6, 173.0], [2.7, 175.0], [2.8, 178.0], [2.9, 179.0], [3.0, 182.0], [3.1, 184.0], [3.2, 188.0], [3.3, 190.0], [3.4, 191.0], [3.5, 198.0], [3.6, 199.0], [3.7, 200.0], [3.8, 204.0], [3.9, 208.0], [4.0, 213.0], [4.1, 217.0], [4.2, 222.0], [4.3, 230.0], [4.4, 240.0], [4.5, 248.0], [4.6, 263.0], [4.7, 278.0], [4.8, 284.0], [4.9, 293.0], [5.0, 300.0], [5.1, 308.0], [5.2, 311.0], [5.3, 316.0], [5.4, 319.0], [5.5, 327.0], [5.6, 332.0], [5.7, 340.0], [5.8, 343.0], [5.9, 345.0], [6.0, 347.0], [6.1, 354.0], [6.2, 358.0], [6.3, 363.0], [6.4, 365.0], [6.5, 368.0], [6.6, 371.0], [6.7, 375.0], [6.8, 378.0], [6.9, 381.0], [7.0, 387.0], [7.1, 391.0], [7.2, 395.0], [7.3, 397.0], [7.4, 399.0], [7.5, 402.0], [7.6, 405.0], [7.7, 409.0], [7.8, 411.0], [7.9, 414.0], [8.0, 416.0], [8.1, 418.0], [8.2, 420.0], [8.3, 425.0], [8.4, 428.0], [8.5, 432.0], [8.6, 436.0], [8.7, 438.0], [8.8, 441.0], [8.9, 442.0], [9.0, 445.0], [9.1, 450.0], [9.2, 453.0], [9.3, 458.0], [9.4, 460.0], [9.5, 462.0], [9.6, 463.0], [9.7, 466.0], [9.8, 470.0], [9.9, 471.0], [10.0, 473.0], [10.1, 475.0], [10.2, 477.0], [10.3, 479.0], [10.4, 481.0], [10.5, 482.0], [10.6, 486.0], [10.7, 488.0], [10.8, 490.0], [10.9, 494.0], [11.0, 498.0], [11.1, 501.0], [11.2, 501.0], [11.3, 504.0], [11.4, 505.0], [11.5, 508.0], [11.6, 510.0], [11.7, 513.0], [11.8, 516.0], [11.9, 520.0], [12.0, 522.0], [12.1, 525.0], [12.2, 527.0], [12.3, 530.0], [12.4, 531.0], [12.5, 535.0], [12.6, 537.0], [12.7, 540.0], [12.8, 544.0], [12.9, 549.0], [13.0, 552.0], [13.1, 557.0], [13.2, 560.0], [13.3, 563.0], [13.4, 565.0], [13.5, 569.0], [13.6, 571.0], [13.7, 572.0], [13.8, 577.0], [13.9, 582.0], [14.0, 584.0], [14.1, 588.0], [14.2, 592.0], [14.3, 594.0], [14.4, 595.0], [14.5, 598.0], [14.6, 601.0], [14.7, 603.0], [14.8, 607.0], [14.9, 608.0], [15.0, 610.0], [15.1, 612.0], [15.2, 615.0], [15.3, 619.0], [15.4, 622.0], [15.5, 623.0], [15.6, 626.0], [15.7, 628.0], [15.8, 631.0], [15.9, 632.0], [16.0, 636.0], [16.1, 639.0], [16.2, 641.0], [16.3, 645.0], [16.4, 647.0], [16.5, 650.0], [16.6, 653.0], [16.7, 654.0], [16.8, 657.0], [16.9, 662.0], [17.0, 664.0], [17.1, 668.0], [17.2, 672.0], [17.3, 675.0], [17.4, 677.0], [17.5, 685.0], [17.6, 690.0], [17.7, 694.0], [17.8, 696.0], [17.9, 698.0], [18.0, 700.0], [18.1, 704.0], [18.2, 705.0], [18.3, 709.0], [18.4, 711.0], [18.5, 715.0], [18.6, 718.0], [18.7, 720.0], [18.8, 722.0], [18.9, 726.0], [19.0, 728.0], [19.1, 731.0], [19.2, 732.0], [19.3, 738.0], [19.4, 739.0], [19.5, 742.0], [19.6, 744.0], [19.7, 745.0], [19.8, 747.0], [19.9, 750.0], [20.0, 751.0], [20.1, 753.0], [20.2, 755.0], [20.3, 758.0], [20.4, 760.0], [20.5, 764.0], [20.6, 766.0], [20.7, 769.0], [20.8, 772.0], [20.9, 774.0], [21.0, 777.0], [21.1, 779.0], [21.2, 782.0], [21.3, 784.0], [21.4, 787.0], [21.5, 791.0], [21.6, 793.0], [21.7, 796.0], [21.8, 799.0], [21.9, 803.0], [22.0, 807.0], [22.1, 809.0], [22.2, 816.0], [22.3, 818.0], [22.4, 821.0], [22.5, 824.0], [22.6, 825.0], [22.7, 826.0], [22.8, 828.0], [22.9, 830.0], [23.0, 833.0], [23.1, 834.0], [23.2, 836.0], [23.3, 841.0], [23.4, 842.0], [23.5, 843.0], [23.6, 845.0], [23.7, 846.0], [23.8, 851.0], [23.9, 856.0], [24.0, 857.0], [24.1, 861.0], [24.2, 864.0], [24.3, 866.0], [24.4, 869.0], [24.5, 873.0], [24.6, 877.0], [24.7, 880.0], [24.8, 882.0], [24.9, 884.0], [25.0, 888.0], [25.1, 891.0], [25.2, 894.0], [25.3, 897.0], [25.4, 901.0], [25.5, 904.0], [25.6, 906.0], [25.7, 909.0], [25.8, 913.0], [25.9, 916.0], [26.0, 917.0], [26.1, 922.0], [26.2, 924.0], [26.3, 927.0], [26.4, 929.0], [26.5, 930.0], [26.6, 933.0], [26.7, 934.0], [26.8, 936.0], [26.9, 937.0], [27.0, 942.0], [27.1, 944.0], [27.2, 947.0], [27.3, 950.0], [27.4, 954.0], [27.5, 957.0], [27.6, 960.0], [27.7, 963.0], [27.8, 966.0], [27.9, 968.0], [28.0, 971.0], [28.1, 972.0], [28.2, 978.0], [28.3, 985.0], [28.4, 988.0], [28.5, 990.0], [28.6, 993.0], [28.7, 996.0], [28.8, 1000.0], [28.9, 1001.0], [29.0, 1009.0], [29.1, 1013.0], [29.2, 1020.0], [29.3, 1027.0], [29.4, 1032.0], [29.5, 1036.0], [29.6, 1040.0], [29.7, 1042.0], [29.8, 1045.0], [29.9, 1053.0], [30.0, 1056.0], [30.1, 1060.0], [30.2, 1066.0], [30.3, 1069.0], [30.4, 1076.0], [30.5, 1080.0], [30.6, 1085.0], [30.7, 1093.0], [30.8, 1098.0], [30.9, 1103.0], [31.0, 1107.0], [31.1, 1114.0], [31.2, 1121.0], [31.3, 1127.0], [31.4, 1132.0], [31.5, 1137.0], [31.6, 1144.0], [31.7, 1155.0], [31.8, 1164.0], [31.9, 1174.0], [32.0, 1190.0], [32.1, 1205.0], [32.2, 1220.0], [32.3, 1227.0], [32.4, 1236.0], [32.5, 1245.0], [32.6, 1250.0], [32.7, 1251.0], [32.8, 1265.0], [32.9, 1272.0], [33.0, 1276.0], [33.1, 1278.0], [33.2, 1285.0], [33.3, 1291.0], [33.4, 1296.0], [33.5, 1315.0], [33.6, 1322.0], [33.7, 1338.0], [33.8, 1344.0], [33.9, 1351.0], [34.0, 1358.0], [34.1, 1364.0], [34.2, 1379.0], [34.3, 1390.0], [34.4, 1402.0], [34.5, 1406.0], [34.6, 1418.0], [34.7, 1426.0], [34.8, 1442.0], [34.9, 1454.0], [35.0, 1467.0], [35.1, 1477.0], [35.2, 1487.0], [35.3, 1494.0], [35.4, 1496.0], [35.5, 1506.0], [35.6, 1510.0], [35.7, 1515.0], [35.8, 1525.0], [35.9, 1534.0], [36.0, 1547.0], [36.1, 1554.0], [36.2, 1559.0], [36.3, 1563.0], [36.4, 1578.0], [36.5, 1584.0], [36.6, 1594.0], [36.7, 1596.0], [36.8, 1600.0], [36.9, 1607.0], [37.0, 1615.0], [37.1, 1617.0], [37.2, 1628.0], [37.3, 1635.0], [37.4, 1652.0], [37.5, 1661.0], [37.6, 1666.0], [37.7, 1673.0], [37.8, 1677.0], [37.9, 1682.0], [38.0, 1685.0], [38.1, 1687.0], [38.2, 1693.0], [38.3, 1699.0], [38.4, 1700.0], [38.5, 1707.0], [38.6, 1713.0], [38.7, 1720.0], [38.8, 1727.0], [38.9, 1731.0], [39.0, 1732.0], [39.1, 1741.0], [39.2, 1745.0], [39.3, 1751.0], [39.4, 1759.0], [39.5, 1763.0], [39.6, 1770.0], [39.7, 1774.0], [39.8, 1777.0], [39.9, 1783.0], [40.0, 1786.0], [40.1, 1791.0], [40.2, 1794.0], [40.3, 1800.0], [40.4, 1805.0], [40.5, 1809.0], [40.6, 1816.0], [40.7, 1818.0], [40.8, 1824.0], [40.9, 1830.0], [41.0, 1836.0], [41.1, 1844.0], [41.2, 1850.0], [41.3, 1855.0], [41.4, 1862.0], [41.5, 1866.0], [41.6, 1871.0], [41.7, 1880.0], [41.8, 1887.0], [41.9, 1889.0], [42.0, 1893.0], [42.1, 1900.0], [42.2, 1904.0], [42.3, 1908.0], [42.4, 1912.0], [42.5, 1920.0], [42.6, 1922.0], [42.7, 1925.0], [42.8, 1931.0], [42.9, 1937.0], [43.0, 1939.0], [43.1, 1945.0], [43.2, 1955.0], [43.3, 1961.0], [43.4, 1964.0], [43.5, 1971.0], [43.6, 1973.0], [43.7, 1978.0], [43.8, 1983.0], [43.9, 1991.0], [44.0, 1993.0], [44.1, 1996.0], [44.2, 2002.0], [44.3, 2006.0], [44.4, 2008.0], [44.5, 2012.0], [44.6, 2016.0], [44.7, 2019.0], [44.8, 2021.0], [44.9, 2024.0], [45.0, 2027.0], [45.1, 2030.0], [45.2, 2036.0], [45.3, 2040.0], [45.4, 2044.0], [45.5, 2048.0], [45.6, 2051.0], [45.7, 2056.0], [45.8, 2061.0], [45.9, 2063.0], [46.0, 2067.0], [46.1, 2073.0], [46.2, 2075.0], [46.3, 2076.0], [46.4, 2082.0], [46.5, 2092.0], [46.6, 2095.0], [46.7, 2097.0], [46.8, 2100.0], [46.9, 2103.0], [47.0, 2108.0], [47.1, 2111.0], [47.2, 2116.0], [47.3, 2119.0], [47.4, 2121.0], [47.5, 2125.0], [47.6, 2127.0], [47.7, 2130.0], [47.8, 2133.0], [47.9, 2137.0], [48.0, 2140.0], [48.1, 2145.0], [48.2, 2149.0], [48.3, 2154.0], [48.4, 2159.0], [48.5, 2163.0], [48.6, 2168.0], [48.7, 2172.0], [48.8, 2175.0], [48.9, 2177.0], [49.0, 2182.0], [49.1, 2186.0], [49.2, 2192.0], [49.3, 2194.0], [49.4, 2197.0], [49.5, 2200.0], [49.6, 2204.0], [49.7, 2210.0], [49.8, 2219.0], [49.9, 2226.0], [50.0, 2229.0], [50.1, 2233.0], [50.2, 2236.0], [50.3, 2242.0], [50.4, 2247.0], [50.5, 2250.0], [50.6, 2254.0], [50.7, 2257.0], [50.8, 2260.0], [50.9, 2263.0], [51.0, 2265.0], [51.1, 2270.0], [51.2, 2273.0], [51.3, 2280.0], [51.4, 2286.0], [51.5, 2290.0], [51.6, 2297.0], [51.7, 2300.0], [51.8, 2301.0], [51.9, 2307.0], [52.0, 2312.0], [52.1, 2317.0], [52.2, 2325.0], [52.3, 2328.0], [52.4, 2330.0], [52.5, 2334.0], [52.6, 2337.0], [52.7, 2342.0], [52.8, 2347.0], [52.9, 2349.0], [53.0, 2352.0], [53.1, 2360.0], [53.2, 2362.0], [53.3, 2364.0], [53.4, 2367.0], [53.5, 2374.0], [53.6, 2377.0], [53.7, 2381.0], [53.8, 2384.0], [53.9, 2388.0], [54.0, 2393.0], [54.1, 2395.0], [54.2, 2397.0], [54.3, 2400.0], [54.4, 2408.0], [54.5, 2410.0], [54.6, 2410.0], [54.7, 2415.0], [54.8, 2417.0], [54.9, 2420.0], [55.0, 2424.0], [55.1, 2426.0], [55.2, 2428.0], [55.3, 2432.0], [55.4, 2433.0], [55.5, 2436.0], [55.6, 2438.0], [55.7, 2441.0], [55.8, 2445.0], [55.9, 2449.0], [56.0, 2451.0], [56.1, 2453.0], [56.2, 2456.0], [56.3, 2458.0], [56.4, 2461.0], [56.5, 2463.0], [56.6, 2467.0], [56.7, 2473.0], [56.8, 2474.0], [56.9, 2478.0], [57.0, 2480.0], [57.1, 2484.0], [57.2, 2488.0], [57.3, 2491.0], [57.4, 2496.0], [57.5, 2498.0], [57.6, 2504.0], [57.7, 2513.0], [57.8, 2515.0], [57.9, 2518.0], [58.0, 2521.0], [58.1, 2525.0], [58.2, 2527.0], [58.3, 2532.0], [58.4, 2539.0], [58.5, 2543.0], [58.6, 2554.0], [58.7, 2556.0], [58.8, 2561.0], [58.9, 2565.0], [59.0, 2569.0], [59.1, 2573.0], [59.2, 2576.0], [59.3, 2581.0], [59.4, 2583.0], [59.5, 2586.0], [59.6, 2592.0], [59.7, 2594.0], [59.8, 2597.0], [59.9, 2600.0], [60.0, 2603.0], [60.1, 2606.0], [60.2, 2609.0], [60.3, 2612.0], [60.4, 2619.0], [60.5, 2621.0], [60.6, 2622.0], [60.7, 2627.0], [60.8, 2630.0], [60.9, 2632.0], [61.0, 2635.0], [61.1, 2641.0], [61.2, 2644.0], [61.3, 2646.0], [61.4, 2647.0], [61.5, 2652.0], [61.6, 2655.0], [61.7, 2657.0], [61.8, 2659.0], [61.9, 2664.0], [62.0, 2666.0], [62.1, 2669.0], [62.2, 2671.0], [62.3, 2672.0], [62.4, 2675.0], [62.5, 2678.0], [62.6, 2685.0], [62.7, 2688.0], [62.8, 2690.0], [62.9, 2693.0], [63.0, 2696.0], [63.1, 2702.0], [63.2, 2706.0], [63.3, 2711.0], [63.4, 2718.0], [63.5, 2721.0], [63.6, 2724.0], [63.7, 2729.0], [63.8, 2731.0], [63.9, 2741.0], [64.0, 2743.0], [64.1, 2750.0], [64.2, 2753.0], [64.3, 2754.0], [64.4, 2760.0], [64.5, 2762.0], [64.6, 2766.0], [64.7, 2771.0], [64.8, 2775.0], [64.9, 2779.0], [65.0, 2783.0], [65.1, 2791.0], [65.2, 2796.0], [65.3, 2801.0], [65.4, 2804.0], [65.5, 2805.0], [65.6, 2808.0], [65.7, 2811.0], [65.8, 2815.0], [65.9, 2819.0], [66.0, 2825.0], [66.1, 2828.0], [66.2, 2833.0], [66.3, 2840.0], [66.4, 2842.0], [66.5, 2844.0], [66.6, 2848.0], [66.7, 2852.0], [66.8, 2858.0], [66.9, 2861.0], [67.0, 2866.0], [67.1, 2868.0], [67.2, 2871.0], [67.3, 2874.0], [67.4, 2877.0], [67.5, 2880.0], [67.6, 2884.0], [67.7, 2887.0], [67.8, 2889.0], [67.9, 2891.0], [68.0, 2894.0], [68.1, 2899.0], [68.2, 2905.0], [68.3, 2913.0], [68.4, 2919.0], [68.5, 2921.0], [68.6, 2923.0], [68.7, 2926.0], [68.8, 2928.0], [68.9, 2932.0], [69.0, 2936.0], [69.1, 2943.0], [69.2, 2946.0], [69.3, 2950.0], [69.4, 2952.0], [69.5, 2955.0], [69.6, 2959.0], [69.7, 2964.0], [69.8, 2970.0], [69.9, 2974.0], [70.0, 2983.0], [70.1, 2992.0], [70.2, 2996.0], [70.3, 3002.0], [70.4, 3007.0], [70.5, 3010.0], [70.6, 3013.0], [70.7, 3016.0], [70.8, 3019.0], [70.9, 3027.0], [71.0, 3031.0], [71.1, 3037.0], [71.2, 3045.0], [71.3, 3049.0], [71.4, 3054.0], [71.5, 3060.0], [71.6, 3066.0], [71.7, 3071.0], [71.8, 3077.0], [71.9, 3079.0], [72.0, 3082.0], [72.1, 3087.0], [72.2, 3089.0], [72.3, 3091.0], [72.4, 3098.0], [72.5, 3103.0], [72.6, 3105.0], [72.7, 3107.0], [72.8, 3112.0], [72.9, 3116.0], [73.0, 3118.0], [73.1, 3121.0], [73.2, 3123.0], [73.3, 3126.0], [73.4, 3129.0], [73.5, 3134.0], [73.6, 3139.0], [73.7, 3144.0], [73.8, 3147.0], [73.9, 3152.0], [74.0, 3155.0], [74.1, 3160.0], [74.2, 3164.0], [74.3, 3170.0], [74.4, 3178.0], [74.5, 3180.0], [74.6, 3183.0], [74.7, 3186.0], [74.8, 3191.0], [74.9, 3195.0], [75.0, 3201.0], [75.1, 3207.0], [75.2, 3215.0], [75.3, 3219.0], [75.4, 3222.0], [75.5, 3227.0], [75.6, 3231.0], [75.7, 3235.0], [75.8, 3240.0], [75.9, 3247.0], [76.0, 3250.0], [76.1, 3256.0], [76.2, 3260.0], [76.3, 3262.0], [76.4, 3267.0], [76.5, 3272.0], [76.6, 3275.0], [76.7, 3279.0], [76.8, 3281.0], [76.9, 3285.0], [77.0, 3288.0], [77.1, 3291.0], [77.2, 3293.0], [77.3, 3301.0], [77.4, 3303.0], [77.5, 3307.0], [77.6, 3314.0], [77.7, 3318.0], [77.8, 3322.0], [77.9, 3329.0], [78.0, 3330.0], [78.1, 3337.0], [78.2, 3341.0], [78.3, 3346.0], [78.4, 3355.0], [78.5, 3360.0], [78.6, 3365.0], [78.7, 3369.0], [78.8, 3375.0], [78.9, 3377.0], [79.0, 3383.0], [79.1, 3388.0], [79.2, 3393.0], [79.3, 3398.0], [79.4, 3403.0], [79.5, 3406.0], [79.6, 3413.0], [79.7, 3419.0], [79.8, 3422.0], [79.9, 3425.0], [80.0, 3429.0], [80.1, 3433.0], [80.2, 3439.0], [80.3, 3452.0], [80.4, 3468.0], [80.5, 3478.0], [80.6, 3485.0], [80.7, 3498.0], [80.8, 3505.0], [80.9, 3509.0], [81.0, 3516.0], [81.1, 3520.0], [81.2, 3524.0], [81.3, 3529.0], [81.4, 3535.0], [81.5, 3538.0], [81.6, 3543.0], [81.7, 3548.0], [81.8, 3552.0], [81.9, 3559.0], [82.0, 3563.0], [82.1, 3575.0], [82.2, 3583.0], [82.3, 3586.0], [82.4, 3597.0], [82.5, 3603.0], [82.6, 3607.0], [82.7, 3618.0], [82.8, 3624.0], [82.9, 3628.0], [83.0, 3633.0], [83.1, 3640.0], [83.2, 3649.0], [83.3, 3661.0], [83.4, 3664.0], [83.5, 3672.0], [83.6, 3677.0], [83.7, 3685.0], [83.8, 3693.0], [83.9, 3697.0], [84.0, 3704.0], [84.1, 3711.0], [84.2, 3715.0], [84.3, 3729.0], [84.4, 3739.0], [84.5, 3742.0], [84.6, 3752.0], [84.7, 3764.0], [84.8, 3775.0], [84.9, 3781.0], [85.0, 3793.0], [85.1, 3801.0], [85.2, 3806.0], [85.3, 3812.0], [85.4, 3818.0], [85.5, 3826.0], [85.6, 3828.0], [85.7, 3835.0], [85.8, 3841.0], [85.9, 3852.0], [86.0, 3871.0], [86.1, 3884.0], [86.2, 3894.0], [86.3, 3898.0], [86.4, 3914.0], [86.5, 3925.0], [86.6, 3930.0], [86.7, 3935.0], [86.8, 3943.0], [86.9, 3959.0], [87.0, 3973.0], [87.1, 3985.0], [87.2, 3991.0], [87.3, 3997.0], [87.4, 4006.0], [87.5, 4016.0], [87.6, 4034.0], [87.7, 4042.0], [87.8, 4047.0], [87.9, 4058.0], [88.0, 4065.0], [88.1, 4079.0], [88.2, 4089.0], [88.3, 4110.0], [88.4, 4126.0], [88.5, 4146.0], [88.6, 4165.0], [88.7, 4195.0], [88.8, 4211.0], [88.9, 4222.0], [89.0, 4241.0], [89.1, 4257.0], [89.2, 4262.0], [89.3, 4277.0], [89.4, 4284.0], [89.5, 4294.0], [89.6, 4306.0], [89.7, 4318.0], [89.8, 4325.0], [89.9, 4341.0], [90.0, 4352.0], [90.1, 4358.0], [90.2, 4387.0], [90.3, 4406.0], [90.4, 4429.0], [90.5, 4444.0], [90.6, 4456.0], [90.7, 4462.0], [90.8, 4470.0], [90.9, 4482.0], [91.0, 4487.0], [91.1, 4495.0], [91.2, 4499.0], [91.3, 4502.0], [91.4, 4516.0], [91.5, 4531.0], [91.6, 4538.0], [91.7, 4555.0], [91.8, 4560.0], [91.9, 4568.0], [92.0, 4576.0], [92.1, 4583.0], [92.2, 4589.0], [92.3, 4593.0], [92.4, 4602.0], [92.5, 4613.0], [92.6, 4618.0], [92.7, 4622.0], [92.8, 4630.0], [92.9, 4639.0], [93.0, 4644.0], [93.1, 4651.0], [93.2, 4661.0], [93.3, 4677.0], [93.4, 4685.0], [93.5, 4695.0], [93.6, 4710.0], [93.7, 4727.0], [93.8, 4737.0], [93.9, 4745.0], [94.0, 4755.0], [94.1, 4775.0], [94.2, 4795.0], [94.3, 4807.0], [94.4, 4820.0], [94.5, 4828.0], [94.6, 4836.0], [94.7, 4848.0], [94.8, 4870.0], [94.9, 4897.0], [95.0, 4928.0], [95.1, 4958.0], [95.2, 4990.0], [95.3, 5022.0], [95.4, 5051.0], [95.5, 5062.0], [95.6, 5076.0], [95.7, 5090.0], [95.8, 5120.0], [95.9, 5150.0], [96.0, 5171.0], [96.1, 5219.0], [96.2, 5251.0], [96.3, 5281.0], [96.4, 5293.0], [96.5, 5340.0], [96.6, 5369.0], [96.7, 5393.0], [96.8, 5423.0], [96.9, 5458.0], [97.0, 5522.0], [97.1, 5582.0], [97.2, 5650.0], [97.3, 5659.0], [97.4, 5685.0], [97.5, 5710.0], [97.6, 5744.0], [97.7, 5779.0], [97.8, 5821.0], [97.9, 5850.0], [98.0, 5967.0], [98.1, 6011.0], [98.2, 6085.0], [98.3, 6120.0], [98.4, 6203.0], [98.5, 6271.0], [98.6, 6315.0], [98.7, 6370.0], [98.8, 6401.0], [98.9, 6481.0], [99.0, 6550.0], [99.1, 6644.0], [99.2, 6737.0], [99.3, 6852.0], [99.4, 6941.0], [99.5, 7260.0], [99.6, 7776.0], [99.7, 12602.0], [99.8, 20723.0], [99.9, 28181.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 190.0, "series": [{"data": [[0.0, 98.0], [600.0, 169.0], [700.0, 190.0], [800.0, 174.0], [900.0, 169.0], [1000.0, 101.0], [1100.0, 59.0], [1200.0, 68.0], [1300.0, 47.0], [1400.0, 52.0], [1500.0, 65.0], [1600.0, 77.0], [1700.0, 95.0], [1800.0, 89.0], [1900.0, 102.0], [2000.0, 127.0], [2100.0, 134.0], [2300.0, 129.0], [2200.0, 107.0], [2400.0, 158.0], [2500.0, 115.0], [2600.0, 158.0], [2700.0, 109.0], [2800.0, 138.0], [2900.0, 105.0], [3000.0, 106.0], [3100.0, 126.0], [3200.0, 114.0], [3300.0, 99.0], [3400.0, 69.0], [3500.0, 84.0], [3600.0, 74.0], [3700.0, 55.0], [3800.0, 62.0], [3900.0, 51.0], [4000.0, 44.0], [4200.0, 41.0], [4300.0, 33.0], [4100.0, 23.0], [4500.0, 53.0], [4400.0, 51.0], [4600.0, 60.0], [4700.0, 35.0], [4800.0, 32.0], [4900.0, 15.0], [5000.0, 23.0], [5100.0, 18.0], [5200.0, 19.0], [5300.0, 14.0], [5600.0, 15.0], [5400.0, 12.0], [5500.0, 8.0], [5700.0, 15.0], [5800.0, 10.0], [6000.0, 9.0], [5900.0, 5.0], [6100.0, 7.0], [6200.0, 9.0], [6300.0, 11.0], [6500.0, 6.0], [6400.0, 5.0], [6600.0, 8.0], [6800.0, 4.0], [6700.0, 3.0], [6900.0, 5.0], [7000.0, 2.0], [7100.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7500.0, 1.0], [7700.0, 3.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8600.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12900.0, 1.0], [13000.0, 1.0], [15300.0, 1.0], [20700.0, 1.0], [21300.0, 1.0], [21500.0, 2.0], [22700.0, 1.0], [100.0, 82.0], [28100.0, 1.0], [29200.0, 2.0], [29100.0, 1.0], [29900.0, 1.0], [200.0, 65.0], [300.0, 120.0], [400.0, 179.0], [500.0, 168.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 545.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3168.0, "series": [{"data": [[0.0, 545.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1197.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3168.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.62773573E12, "maxY": 697.0, "series": [{"data": [[1.6277358E12, 697.0], [1.62773578E12, 415.0429948109711], [1.62773579E12, 467.34047267355965], [1.62773576E12, 78.98011928429422], [1.62773577E12, 367.8634615384618], [1.62773574E12, 13.0], [1.62773575E12, 20.401515151515156], [1.62773573E12, 18.6]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6277358E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 5.0, "maxY": 22791.0, "series": [{"data": [[5.0, 3195.8888888888896], [6.0, 22791.0], [7.0, 21532.0], [8.0, 21524.0], [9.0, 21324.0], [10.0, 20723.0], [11.0, 15316.0], [12.0, 13025.0], [13.0, 12981.0], [14.0, 12759.0], [15.0, 12602.0], [16.0, 7078.0], [17.0, 7982.0], [20.0, 1445.9318181818182], [21.0, 198.57142857142858], [22.0, 1579.1363636363635], [23.0, 216.5], [31.0, 282.5], [33.0, 275.0], [34.0, 311.9090909090909], [35.0, 340.91666666666663], [36.0, 359.25], [37.0, 354.0], [38.0, 353.0], [39.0, 294.25], [40.0, 350.0], [41.0, 374.75], [42.0, 425.0], [43.0, 425.47747747747746], [44.0, 398.3333333333333], [45.0, 415.2857142857143], [46.0, 439.25], [47.0, 442.04], [49.0, 432.0], [50.0, 492.45], [51.0, 439.88888888888886], [52.0, 384.0], [53.0, 474.8], [54.0, 479.66666666666663], [58.0, 536.3333333333334], [59.0, 510.54166666666663], [60.0, 503.25], [61.0, 576.5], [62.0, 585.6666666666666], [63.0, 599.3157894736843], [64.0, 577.875], [65.0, 648.3636363636364], [66.0, 638.1666666666667], [67.0, 659.8], [68.0, 485.0], [69.0, 512.0], [71.0, 516.4705882352941], [72.0, 707.8181818181819], [73.0, 501.8], [74.0, 730.5555555555555], [75.0, 695.6874999999999], [76.0, 680.8], [77.0, 858.0], [78.0, 913.3076923076923], [79.0, 728.5], [80.0, 677.7500000000001], [81.0, 589.75], [82.0, 721.2666666666668], [83.0, 694.7], [85.0, 880.5], [87.0, 1103.0], [88.0, 730.4166666666667], [90.0, 787.6666666666666], [91.0, 839.125], [92.0, 831.6666666666666], [93.0, 810.6874999999999], [94.0, 774.7142857142858], [95.0, 762.0], [98.0, 794.4999999999999], [99.0, 772.0], [100.0, 810.4054054054054], [101.0, 829.8333333333333], [102.0, 951.4], [103.0, 1358.0], [105.0, 1009.2708333333333], [107.0, 600.0], [108.0, 837.7407407407409], [109.0, 866.906976744186], [110.0, 734.5], [112.0, 756.5], [113.0, 790.0], [114.0, 543.125], [115.0, 610.25], [116.0, 708.3636363636364], [118.0, 787.6], [119.0, 825.3333333333334], [120.0, 898.1999999999999], [121.0, 783.0], [122.0, 765.5], [123.0, 756.25], [124.0, 866.0], [129.0, 937.490566037736], [133.0, 755.0], [135.0, 706.5], [138.0, 623.0], [149.0, 772.0], [153.0, 652.0], [159.0, 935.0], [164.0, 745.0], [169.0, 808.0], [173.0, 900.0], [177.0, 886.5], [181.0, 802.25], [183.0, 886.6], [186.0, 908.6666666666666], [187.0, 825.0], [188.0, 716.0], [189.0, 908.0], [190.0, 959.3333333333334], [197.0, 460.0], [210.0, 926.0], [211.0, 1067.0], [318.0, 4834.0], [319.0, 3219.0], [317.0, 4400.0], [316.0, 3697.0], [315.0, 4672.0], [314.0, 3166.0], [312.0, 5245.0], [311.0, 3546.0], [310.0, 3903.238095238096], [309.0, 3177.4], [334.0, 3668.0], [335.0, 3603.0], [333.0, 4628.0], [332.0, 4341.0], [331.0, 4214.0], [330.0, 4047.0], [329.0, 3664.0], [328.0, 2823.0], [327.0, 4319.0], [320.0, 3894.0], [323.0, 3750.0], [321.0, 2718.0], [326.0, 4966.0], [325.0, 4577.0], [324.0, 2561.0], [350.0, 3514.0], [351.0, 3129.0], [349.0, 2672.3333333333335], [348.0, 2936.0], [347.0, 2291.0], [346.0, 4928.0], [345.0, 5150.333333333333], [343.0, 4062.0], [337.0, 4682.0], [336.0, 3139.0], [339.0, 3898.5], [338.0, 3115.0], [342.0, 4171.5], [341.0, 3476.5], [352.0, 4014.0], [366.0, 5026.25], [367.0, 3977.5], [383.0, 3450.5], [381.0, 4172.714285714286], [368.0, 5002.208333333334], [374.0, 3110.3255033557043], [375.0, 3140.6527777777774], [387.0, 4406.0], [398.0, 4699.0], [396.0, 4502.0], [386.0, 2581.2951807228947], [385.0, 1722.698113207547], [384.0, 3137.5], [395.0, 3934.0], [393.0, 4692.0], [392.0, 3804.0], [391.0, 2464.9069767441865], [390.0, 1637.1166666666663], [389.0, 2398.0], [388.0, 4807.0], [402.0, 4474.5], [400.0, 4516.0], [401.0, 1489.0], [405.0, 1427.0], [410.0, 2508.75], [412.0, 1984.0], [414.0, 1976.3333333333333], [415.0, 2041.3333333333333], [423.0, 3498.0588235294117], [420.0, 4696.0], [416.0, 2177.0588235294113], [421.0, 2033.0], [422.0, 2856.4917127071813], [424.0, 3818.2676056338028], [427.0, 2952.6666666666665], [428.0, 2858.448979591837], [429.0, 3565.4125874125866], [431.0, 2672.0], [433.0, 2561.0], [444.0, 3246.994736842106], [440.0, 2897.25], [446.0, 3613.6388888888887], [447.0, 3842.8888888888882], [445.0, 3720.3888888888887], [443.0, 2584.8709677419356], [442.0, 2740.8636363636365], [441.0, 2838.045045045047], [432.0, 2577.3333333333335], [436.0, 3528.0196078431372], [437.0, 2352.095238095238], [438.0, 2564.75], [439.0, 2902.704819277108], [462.0, 2752.0992647058856], [463.0, 2628.285714285714], [461.0, 1758.6666666666667], [460.0, 2416.75], [459.0, 4728.0], [458.0, 2680.0], [457.0, 4634.0], [456.0, 3393.0], [454.0, 4577.0], [449.0, 4488.666666666667], [448.0, 4019.5599999999995], [451.0, 2560.059701492539], [450.0, 2097.6666666666665], [453.0, 3515.931818181819], [452.0, 3683.8686131386858], [478.0, 1106.0], [464.0, 1792.8333333333333], [470.0, 1365.1521739130435], [469.0, 1481.9285714285716], [468.0, 1674.5], [471.0, 1503.6666666666667], [473.0, 2197.6666666666665], [474.0, 884.6206896551723], [479.0, 1578.5], [472.0, 2478.5], [477.0, 1368.6666666666667], [476.0, 696.5], [467.0, 3771.0], [466.0, 2148.4736842105267], [465.0, 1880.6826923076928], [475.0, 1170.2], [494.0, 2249.0], [495.0, 3576.5], [493.0, 2678.0], [492.0, 2652.0], [491.0, 3364.0], [490.0, 2988.4222222222224], [488.0, 2710.0], [487.0, 1799.0], [481.0, 2074.5], [480.0, 1650.0], [483.0, 1549.5], [482.0, 1425.8], [486.0, 3583.0], [485.0, 1512.0], [484.0, 84.0], [503.0, 1975.0], [502.0, 2199.0], [501.0, 2947.0], [500.0, 1315.0], [499.0, 3516.0], [498.0, 2811.0], [497.0, 2116.0], [496.0, 2027.0], [542.0, 1738.0], [543.0, 1426.0], [531.0, 3693.0], [530.0, 3774.0], [533.0, 3102.0], [532.0, 1866.0], [541.0, 2230.0], [540.0, 1806.0], [539.0, 1595.0], [538.0, 1634.0], [536.0, 2689.0], [527.0, 929.0], [526.0, 2794.0], [535.0, 1030.0], [534.0, 2791.0], [568.0, 414.0], [574.0, 1285.5], [575.0, 623.0], [560.0, 2233.0], [562.0, 2173.0], [561.0, 842.0], [573.0, 1478.0], [572.0, 289.6666666666667], [571.0, 817.0], [559.0, 2137.0], [546.0, 1031.0], [544.0, 3143.0], [548.0, 1024.0], [547.0, 956.0], [551.0, 880.5], [550.0, 1817.0], [558.0, 1007.0], [557.0, 594.0], [556.0, 660.0], [555.0, 603.75], [554.0, 1298.4583333333335], [552.0, 767.0], [567.0, 815.25], [566.0, 1644.5], [564.0, 1933.0], [565.0, 43.0], [563.0, 2436.0], [600.0, 1561.0], [604.0, 1579.0], [607.0, 1962.0], [594.0, 2003.0], [592.0, 2173.0], [597.0, 2254.0], [595.0, 1102.5], [606.0, 1560.0], [605.0, 1610.0], [603.0, 1592.0], [602.0, 1661.0], [601.0, 1617.0], [591.0, 2377.0], [577.0, 1577.0], [576.0, 1638.0], [579.0, 1051.5], [578.0, 1364.0], [581.0, 2065.0], [580.0, 963.0], [583.0, 1958.0], [582.0, 1849.0], [590.0, 2392.0], [589.0, 1108.5], [588.0, 2459.0], [587.0, 2004.0], [586.0, 765.6666666666667], [584.0, 2018.0], [599.0, 1830.0], [598.0, 2020.0], [612.0, 1678.0], [619.0, 1534.0], [620.0, 1689.0666666666668], [609.0, 1575.0], [608.0, 1745.0], [611.0, 2051.0], [610.0, 1550.0], [618.0, 1494.0], [617.0, 788.0], [616.0, 1488.0], [615.0, 1731.0], [626.0, 48.0], [629.0, 25.0], [614.0, 2119.0], [613.0, 1547.0], [644.0, 31.0], [651.0, 42.0], [653.0, 31.0], [657.0, 29.0], [662.0, 20.0], [665.0, 26.0], [697.0, 80.5], [680.0, 29.0], [687.0, 26.0], [693.0, 24.0], [692.0, 19.0], [691.0, 19.0], [690.0, 34.0], [689.0, 33.0], [688.0, 21.0], [695.0, 22.0], [694.0, 14.0], [696.0, 27.5], [698.0, 34.5], [699.0, 20.5], [703.0, 24.0], [702.0, 24.0], [701.0, 21.0], [700.0, 28.0], [732.0, 33.333333333333336], [735.0, 18.0], [721.0, 32.0], [720.0, 25.0], [723.0, 34.0], [722.0, 29.0], [725.0, 28.0], [724.0, 27.0], [734.0, 29.0], [733.0, 21.0], [731.0, 28.0], [730.0, 34.0], [729.0, 25.0], [728.0, 35.0], [719.0, 17.0], [705.0, 30.0], [704.0, 23.0], [707.0, 24.0], [706.0, 18.0], [709.0, 75.0], [708.0, 45.0], [711.0, 27.0], [710.0, 22.0], [718.0, 37.0], [717.0, 27.0], [716.0, 23.0], [715.0, 27.0], [714.0, 28.0], [713.0, 57.0], [712.0, 54.0], [727.0, 32.0], [726.0, 21.0], [738.0, 94.5], [737.0, 30.0], [736.0, 18.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}, {"data": [[338.8877800407337, 2315.3380855397145]], "isOverall": false, "label": "Sunstar Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 738.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 97.5, "minX": 1.62773573E12, "maxY": 962296.2, "series": [{"data": [[1.6277358E12, 13503.3], [1.62773578E12, 958734.3], [1.62773579E12, 962296.2], [1.62773576E12, 714883.1], [1.62773577E12, 739128.0], [1.62773574E12, 3549.5], [1.62773575E12, 93777.0], [1.62773573E12, 3549.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6277358E12, 370.5], [1.62773578E12, 26305.5], [1.62773579E12, 26403.0], [1.62773576E12, 19617.0], [1.62773577E12, 20280.0], [1.62773574E12, 97.5], [1.62773575E12, 2574.0], [1.62773573E12, 97.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6277358E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22.526315789473692, "minX": 1.62773573E12, "maxY": 13336.6, "series": [{"data": [[1.6277358E12, 22.526315789473692], [1.62773578E12, 2805.3810229799865], [1.62773579E12, 2611.6041358936504], [1.62773576E12, 669.3280318091455], [1.62773577E12, 2876.1951923076967], [1.62773574E12, 13336.6], [1.62773575E12, 2097.068181818182], [1.62773573E12, 7845.6]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6277358E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22.052631578947366, "minX": 1.62773573E12, "maxY": 13336.4, "series": [{"data": [[1.6277358E12, 22.052631578947366], [1.62773578E12, 2799.476649369897], [1.62773579E12, 2603.2400295420957], [1.62773576E12, 667.604373757455], [1.62773577E12, 2865.4788461538437], [1.62773574E12, 13336.4], [1.62773575E12, 2096.6590909090914], [1.62773573E12, 7843.8]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6277358E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19.631578947368418, "minX": 1.62773573E12, "maxY": 2729.2090437361, "series": [{"data": [[1.6277358E12, 19.631578947368418], [1.62773578E12, 2729.2090437361], [1.62773579E12, 2554.9135893648413], [1.62773576E12, 639.1471172962221], [1.62773577E12, 2637.6721153846165], [1.62773574E12, 212.6], [1.62773575E12, 177.15151515151513], [1.62773573E12, 202.6]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6277358E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.62773573E12, "maxY": 29949.0, "series": [{"data": [[1.6277358E12, 34.0], [1.62773578E12, 6157.0], [1.62773579E12, 7742.0], [1.62773576E12, 1684.0], [1.62773577E12, 8132.0], [1.62773574E12, 15316.0], [1.62773575E12, 29949.0], [1.62773573E12, 8620.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6277358E12, 14.0], [1.62773578E12, 580.0], [1.62773579E12, 17.0], [1.62773576E12, 240.0], [1.62773577E12, 397.0], [1.62773574E12, 12602.0], [1.62773575E12, 64.0], [1.62773573E12, 7078.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6277358E12, 33.0], [1.62773578E12, 4045.0], [1.62773579E12, 4297.5], [1.62773576E12, 989.6000000000001], [1.62773577E12, 5330.899999999999], [1.62773574E12, 15316.0], [1.62773575E12, 308.7], [1.62773573E12, 8620.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6277358E12, 34.0], [1.62773578E12, 5399.5], [1.62773579E12, 6295.750000000003], [1.62773576E12, 1249.9499999999994], [1.62773577E12, 6827.569999999998], [1.62773574E12, 15316.0], [1.62773575E12, 29719.979999999992], [1.62773573E12, 8620.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6277358E12, 34.0], [1.62773578E12, 4555.5], [1.62773579E12, 4806.0], [1.62773576E12, 1079.0], [1.62773577E12, 6052.65], [1.62773574E12, 15316.0], [1.62773575E12, 21972.649999999994], [1.62773573E12, 8620.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6277358E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 21524.0, "series": [{"data": [[33.0, 28.0], [39.0, 173.0], [3.0, 21524.0], [50.0, 1021.0], [55.0, 2048.0], [57.0, 2862.0], [4.0, 10611.0], [66.0, 2739.0], [74.0, 4746.0], [77.0, 1678.0], [80.0, 1809.0], [87.0, 608.0], [86.0, 1734.0], [88.0, 364.0], [91.0, 171.0], [94.0, 4235.5], [98.0, 424.5], [99.0, 480.0], [97.0, 707.0], [102.0, 743.5], [101.0, 759.0], [106.0, 932.5], [112.0, 2867.0], [120.0, 844.0], [121.0, 3089.0], [126.0, 795.5], [131.0, 3125.0], [139.0, 3335.0], [143.0, 3559.0], [145.0, 2835.0], [154.0, 2301.0], [174.0, 1515.0], [185.0, 3060.0], [196.0, 3540.0], [193.0, 2750.0], [206.0, 2893.5], [233.0, 2534.0], [247.0, 2125.0], [15.0, 21.0], [1.0, 7078.0], [284.0, 2659.0], [30.0, 1024.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 284.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 21523.0, "series": [{"data": [[33.0, 28.0], [39.0, 173.0], [3.0, 21523.0], [50.0, 999.0], [55.0, 2020.0], [57.0, 2861.0], [4.0, 10610.5], [66.0, 2738.5], [74.0, 4746.0], [77.0, 1677.0], [80.0, 1809.0], [87.0, 607.0], [86.0, 1685.0], [88.0, 361.5], [91.0, 170.0], [94.0, 4235.0], [98.0, 423.0], [99.0, 472.0], [97.0, 707.0], [102.0, 742.0], [101.0, 758.0], [106.0, 929.0], [112.0, 2866.5], [120.0, 843.0], [121.0, 3089.0], [126.0, 795.5], [131.0, 3125.0], [139.0, 3330.0], [143.0, 3558.0], [145.0, 2835.0], [154.0, 2300.5], [174.0, 1514.5], [185.0, 3059.0], [196.0, 3539.5], [193.0, 2729.0], [206.0, 2884.0], [233.0, 2533.0], [247.0, 2124.0], [15.0, 20.0], [1.0, 7078.0], [284.0, 2655.0], [30.0, 1023.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 284.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.8, "minX": 1.62773572E12, "maxY": 141.5, "series": [{"data": [[1.6277358E12, 1.8], [1.62773578E12, 141.5], [1.62773579E12, 91.4], [1.62773576E12, 109.4], [1.62773577E12, 129.6], [1.62773575E12, 15.3], [1.62773572E12, 2.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6277358E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62773573E12, "maxY": 135.4, "series": [{"data": [[1.6277358E12, 1.9], [1.62773578E12, 134.9], [1.62773579E12, 135.4], [1.62773576E12, 100.6], [1.62773577E12, 104.0], [1.62773574E12, 0.5], [1.62773575E12, 13.2], [1.62773573E12, 0.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6277358E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62773573E12, "maxY": 135.4, "series": [{"data": [[1.6277358E12, 1.9], [1.62773578E12, 134.9], [1.62773579E12, 135.4], [1.62773576E12, 100.6], [1.62773577E12, 104.0], [1.62773574E12, 0.5], [1.62773575E12, 13.2], [1.62773573E12, 0.5]], "isOverall": false, "label": "Sunstar Search-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6277358E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62773573E12, "maxY": 135.4, "series": [{"data": [[1.6277358E12, 1.9], [1.62773578E12, 134.9], [1.62773579E12, 135.4], [1.62773576E12, 100.6], [1.62773577E12, 104.0], [1.62773574E12, 0.5], [1.62773575E12, 13.2], [1.62773573E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6277358E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

