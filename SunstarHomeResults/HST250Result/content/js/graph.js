/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 46.0, "minX": 0.0, "maxY": 12547.0, "series": [{"data": [[0.0, 46.0], [0.1, 47.0], [0.2, 48.0], [0.3, 48.0], [0.4, 49.0], [0.5, 49.0], [0.6, 50.0], [0.7, 51.0], [0.8, 51.0], [0.9, 51.0], [1.0, 51.0], [1.1, 52.0], [1.2, 52.0], [1.3, 53.0], [1.4, 53.0], [1.5, 53.0], [1.6, 54.0], [1.7, 54.0], [1.8, 54.0], [1.9, 54.0], [2.0, 54.0], [2.1, 55.0], [2.2, 56.0], [2.3, 56.0], [2.4, 56.0], [2.5, 56.0], [2.6, 57.0], [2.7, 59.0], [2.8, 59.0], [2.9, 60.0], [3.0, 61.0], [3.1, 61.0], [3.2, 61.0], [3.3, 61.0], [3.4, 62.0], [3.5, 62.0], [3.6, 63.0], [3.7, 63.0], [3.8, 67.0], [3.9, 68.0], [4.0, 69.0], [4.1, 71.0], [4.2, 88.0], [4.3, 89.0], [4.4, 91.0], [4.5, 92.0], [4.6, 94.0], [4.7, 95.0], [4.8, 99.0], [4.9, 100.0], [5.0, 100.0], [5.1, 100.0], [5.2, 102.0], [5.3, 102.0], [5.4, 103.0], [5.5, 103.0], [5.6, 103.0], [5.7, 105.0], [5.8, 105.0], [5.9, 105.0], [6.0, 106.0], [6.1, 107.0], [6.2, 108.0], [6.3, 112.0], [6.4, 118.0], [6.5, 122.0], [6.6, 128.0], [6.7, 130.0], [6.8, 132.0], [6.9, 133.0], [7.0, 134.0], [7.1, 134.0], [7.2, 136.0], [7.3, 136.0], [7.4, 138.0], [7.5, 138.0], [7.6, 140.0], [7.7, 140.0], [7.8, 141.0], [7.9, 149.0], [8.0, 151.0], [8.1, 153.0], [8.2, 155.0], [8.3, 156.0], [8.4, 158.0], [8.5, 163.0], [8.6, 164.0], [8.7, 166.0], [8.8, 167.0], [8.9, 167.0], [9.0, 178.0], [9.1, 179.0], [9.2, 181.0], [9.3, 186.0], [9.4, 193.0], [9.5, 198.0], [9.6, 198.0], [9.7, 198.0], [9.8, 205.0], [9.9, 206.0], [10.0, 206.0], [10.1, 212.0], [10.2, 212.0], [10.3, 215.0], [10.4, 216.0], [10.5, 216.0], [10.6, 217.0], [10.7, 217.0], [10.8, 218.0], [10.9, 219.0], [11.0, 220.0], [11.1, 220.0], [11.2, 222.0], [11.3, 222.0], [11.4, 223.0], [11.5, 223.0], [11.6, 224.0], [11.7, 225.0], [11.8, 226.0], [11.9, 227.0], [12.0, 230.0], [12.1, 230.0], [12.2, 232.0], [12.3, 232.0], [12.4, 233.0], [12.5, 235.0], [12.6, 235.0], [12.7, 236.0], [12.8, 237.0], [12.9, 237.0], [13.0, 237.0], [13.1, 239.0], [13.2, 241.0], [13.3, 244.0], [13.4, 244.0], [13.5, 245.0], [13.6, 248.0], [13.7, 248.0], [13.8, 249.0], [13.9, 252.0], [14.0, 252.0], [14.1, 253.0], [14.2, 253.0], [14.3, 255.0], [14.4, 257.0], [14.5, 257.0], [14.6, 258.0], [14.7, 259.0], [14.8, 260.0], [14.9, 261.0], [15.0, 265.0], [15.1, 268.0], [15.2, 269.0], [15.3, 271.0], [15.4, 273.0], [15.5, 282.0], [15.6, 283.0], [15.7, 284.0], [15.8, 286.0], [15.9, 288.0], [16.0, 291.0], [16.1, 291.0], [16.2, 296.0], [16.3, 304.0], [16.4, 305.0], [16.5, 305.0], [16.6, 309.0], [16.7, 309.0], [16.8, 311.0], [16.9, 312.0], [17.0, 312.0], [17.1, 314.0], [17.2, 314.0], [17.3, 315.0], [17.4, 317.0], [17.5, 317.0], [17.6, 318.0], [17.7, 322.0], [17.8, 322.0], [17.9, 323.0], [18.0, 325.0], [18.1, 326.0], [18.2, 328.0], [18.3, 328.0], [18.4, 329.0], [18.5, 332.0], [18.6, 333.0], [18.7, 334.0], [18.8, 335.0], [18.9, 336.0], [19.0, 337.0], [19.1, 339.0], [19.2, 340.0], [19.3, 340.0], [19.4, 340.0], [19.5, 342.0], [19.6, 344.0], [19.7, 344.0], [19.8, 346.0], [19.9, 347.0], [20.0, 347.0], [20.1, 347.0], [20.2, 347.0], [20.3, 348.0], [20.4, 350.0], [20.5, 351.0], [20.6, 353.0], [20.7, 354.0], [20.8, 356.0], [20.9, 356.0], [21.0, 358.0], [21.1, 358.0], [21.2, 360.0], [21.3, 361.0], [21.4, 362.0], [21.5, 363.0], [21.6, 363.0], [21.7, 363.0], [21.8, 364.0], [21.9, 365.0], [22.0, 365.0], [22.1, 366.0], [22.2, 366.0], [22.3, 368.0], [22.4, 369.0], [22.5, 372.0], [22.6, 372.0], [22.7, 373.0], [22.8, 374.0], [22.9, 374.0], [23.0, 375.0], [23.1, 378.0], [23.2, 378.0], [23.3, 378.0], [23.4, 379.0], [23.5, 383.0], [23.6, 384.0], [23.7, 385.0], [23.8, 386.0], [23.9, 387.0], [24.0, 388.0], [24.1, 389.0], [24.2, 393.0], [24.3, 393.0], [24.4, 394.0], [24.5, 395.0], [24.6, 395.0], [24.7, 397.0], [24.8, 398.0], [24.9, 399.0], [25.0, 401.0], [25.1, 403.0], [25.2, 404.0], [25.3, 404.0], [25.4, 405.0], [25.5, 408.0], [25.6, 408.0], [25.7, 408.0], [25.8, 409.0], [25.9, 409.0], [26.0, 410.0], [26.1, 411.0], [26.2, 411.0], [26.3, 412.0], [26.4, 413.0], [26.5, 413.0], [26.6, 415.0], [26.7, 416.0], [26.8, 416.0], [26.9, 418.0], [27.0, 419.0], [27.1, 420.0], [27.2, 422.0], [27.3, 422.0], [27.4, 424.0], [27.5, 424.0], [27.6, 424.0], [27.7, 425.0], [27.8, 425.0], [27.9, 425.0], [28.0, 426.0], [28.1, 426.0], [28.2, 427.0], [28.3, 428.0], [28.4, 431.0], [28.5, 432.0], [28.6, 434.0], [28.7, 435.0], [28.8, 437.0], [28.9, 438.0], [29.0, 439.0], [29.1, 439.0], [29.2, 440.0], [29.3, 441.0], [29.4, 442.0], [29.5, 443.0], [29.6, 444.0], [29.7, 444.0], [29.8, 446.0], [29.9, 451.0], [30.0, 451.0], [30.1, 452.0], [30.2, 454.0], [30.3, 458.0], [30.4, 470.0], [30.5, 470.0], [30.6, 470.0], [30.7, 471.0], [30.8, 474.0], [30.9, 480.0], [31.0, 489.0], [31.1, 495.0], [31.2, 496.0], [31.3, 498.0], [31.4, 498.0], [31.5, 500.0], [31.6, 500.0], [31.7, 501.0], [31.8, 502.0], [31.9, 503.0], [32.0, 507.0], [32.1, 507.0], [32.2, 509.0], [32.3, 510.0], [32.4, 511.0], [32.5, 513.0], [32.6, 514.0], [32.7, 518.0], [32.8, 520.0], [32.9, 521.0], [33.0, 521.0], [33.1, 522.0], [33.2, 522.0], [33.3, 525.0], [33.4, 529.0], [33.5, 534.0], [33.6, 535.0], [33.7, 537.0], [33.8, 538.0], [33.9, 542.0], [34.0, 542.0], [34.1, 548.0], [34.2, 549.0], [34.3, 549.0], [34.4, 549.0], [34.5, 552.0], [34.6, 552.0], [34.7, 552.0], [34.8, 553.0], [34.9, 554.0], [35.0, 555.0], [35.1, 557.0], [35.2, 560.0], [35.3, 562.0], [35.4, 562.0], [35.5, 563.0], [35.6, 566.0], [35.7, 566.0], [35.8, 570.0], [35.9, 571.0], [36.0, 574.0], [36.1, 582.0], [36.2, 589.0], [36.3, 597.0], [36.4, 602.0], [36.5, 610.0], [36.6, 611.0], [36.7, 612.0], [36.8, 613.0], [36.9, 615.0], [37.0, 617.0], [37.1, 617.0], [37.2, 622.0], [37.3, 623.0], [37.4, 628.0], [37.5, 632.0], [37.6, 634.0], [37.7, 636.0], [37.8, 638.0], [37.9, 643.0], [38.0, 645.0], [38.1, 645.0], [38.2, 645.0], [38.3, 646.0], [38.4, 648.0], [38.5, 649.0], [38.6, 649.0], [38.7, 649.0], [38.8, 653.0], [38.9, 654.0], [39.0, 655.0], [39.1, 657.0], [39.2, 657.0], [39.3, 658.0], [39.4, 661.0], [39.5, 661.0], [39.6, 665.0], [39.7, 665.0], [39.8, 669.0], [39.9, 670.0], [40.0, 670.0], [40.1, 674.0], [40.2, 674.0], [40.3, 677.0], [40.4, 683.0], [40.5, 685.0], [40.6, 685.0], [40.7, 687.0], [40.8, 688.0], [40.9, 690.0], [41.0, 693.0], [41.1, 694.0], [41.2, 696.0], [41.3, 697.0], [41.4, 697.0], [41.5, 700.0], [41.6, 700.0], [41.7, 703.0], [41.8, 704.0], [41.9, 706.0], [42.0, 706.0], [42.1, 710.0], [42.2, 711.0], [42.3, 712.0], [42.4, 714.0], [42.5, 714.0], [42.6, 715.0], [42.7, 716.0], [42.8, 716.0], [42.9, 717.0], [43.0, 717.0], [43.1, 719.0], [43.2, 719.0], [43.3, 720.0], [43.4, 720.0], [43.5, 720.0], [43.6, 720.0], [43.7, 723.0], [43.8, 723.0], [43.9, 728.0], [44.0, 731.0], [44.1, 732.0], [44.2, 737.0], [44.3, 737.0], [44.4, 738.0], [44.5, 739.0], [44.6, 741.0], [44.7, 742.0], [44.8, 745.0], [44.9, 746.0], [45.0, 747.0], [45.1, 748.0], [45.2, 750.0], [45.3, 752.0], [45.4, 753.0], [45.5, 754.0], [45.6, 755.0], [45.7, 755.0], [45.8, 760.0], [45.9, 762.0], [46.0, 762.0], [46.1, 764.0], [46.2, 764.0], [46.3, 765.0], [46.4, 771.0], [46.5, 772.0], [46.6, 774.0], [46.7, 776.0], [46.8, 781.0], [46.9, 782.0], [47.0, 783.0], [47.1, 784.0], [47.2, 788.0], [47.3, 789.0], [47.4, 789.0], [47.5, 794.0], [47.6, 797.0], [47.7, 803.0], [47.8, 804.0], [47.9, 807.0], [48.0, 809.0], [48.1, 811.0], [48.2, 813.0], [48.3, 815.0], [48.4, 815.0], [48.5, 819.0], [48.6, 821.0], [48.7, 822.0], [48.8, 825.0], [48.9, 826.0], [49.0, 826.0], [49.1, 828.0], [49.2, 832.0], [49.3, 833.0], [49.4, 838.0], [49.5, 839.0], [49.6, 844.0], [49.7, 845.0], [49.8, 846.0], [49.9, 848.0], [50.0, 849.0], [50.1, 851.0], [50.2, 854.0], [50.3, 855.0], [50.4, 860.0], [50.5, 861.0], [50.6, 862.0], [50.7, 863.0], [50.8, 864.0], [50.9, 865.0], [51.0, 865.0], [51.1, 866.0], [51.2, 867.0], [51.3, 869.0], [51.4, 870.0], [51.5, 872.0], [51.6, 872.0], [51.7, 877.0], [51.8, 880.0], [51.9, 880.0], [52.0, 880.0], [52.1, 880.0], [52.2, 882.0], [52.3, 882.0], [52.4, 885.0], [52.5, 887.0], [52.6, 891.0], [52.7, 891.0], [52.8, 891.0], [52.9, 893.0], [53.0, 893.0], [53.1, 896.0], [53.2, 898.0], [53.3, 900.0], [53.4, 901.0], [53.5, 902.0], [53.6, 905.0], [53.7, 909.0], [53.8, 911.0], [53.9, 913.0], [54.0, 916.0], [54.1, 917.0], [54.2, 918.0], [54.3, 919.0], [54.4, 923.0], [54.5, 927.0], [54.6, 928.0], [54.7, 929.0], [54.8, 931.0], [54.9, 931.0], [55.0, 932.0], [55.1, 934.0], [55.2, 935.0], [55.3, 935.0], [55.4, 940.0], [55.5, 941.0], [55.6, 943.0], [55.7, 944.0], [55.8, 944.0], [55.9, 948.0], [56.0, 949.0], [56.1, 952.0], [56.2, 954.0], [56.3, 955.0], [56.4, 959.0], [56.5, 961.0], [56.6, 962.0], [56.7, 964.0], [56.8, 965.0], [56.9, 967.0], [57.0, 969.0], [57.1, 971.0], [57.2, 978.0], [57.3, 978.0], [57.4, 979.0], [57.5, 980.0], [57.6, 991.0], [57.7, 997.0], [57.8, 1003.0], [57.9, 1004.0], [58.0, 1006.0], [58.1, 1008.0], [58.2, 1010.0], [58.3, 1014.0], [58.4, 1014.0], [58.5, 1017.0], [58.6, 1028.0], [58.7, 1030.0], [58.8, 1036.0], [58.9, 1043.0], [59.0, 1045.0], [59.1, 1058.0], [59.2, 1061.0], [59.3, 1062.0], [59.4, 1064.0], [59.5, 1074.0], [59.6, 1085.0], [59.7, 1089.0], [59.8, 1101.0], [59.9, 1107.0], [60.0, 1109.0], [60.1, 1112.0], [60.2, 1115.0], [60.3, 1118.0], [60.4, 1121.0], [60.5, 1122.0], [60.6, 1122.0], [60.7, 1126.0], [60.8, 1131.0], [60.9, 1133.0], [61.0, 1135.0], [61.1, 1139.0], [61.2, 1142.0], [61.3, 1148.0], [61.4, 1148.0], [61.5, 1148.0], [61.6, 1151.0], [61.7, 1152.0], [61.8, 1154.0], [61.9, 1155.0], [62.0, 1158.0], [62.1, 1159.0], [62.2, 1160.0], [62.3, 1162.0], [62.4, 1165.0], [62.5, 1166.0], [62.6, 1166.0], [62.7, 1169.0], [62.8, 1170.0], [62.9, 1171.0], [63.0, 1174.0], [63.1, 1175.0], [63.2, 1188.0], [63.3, 1189.0], [63.4, 1191.0], [63.5, 1193.0], [63.6, 1194.0], [63.7, 1195.0], [63.8, 1196.0], [63.9, 1197.0], [64.0, 1199.0], [64.1, 1203.0], [64.2, 1203.0], [64.3, 1208.0], [64.4, 1210.0], [64.5, 1213.0], [64.6, 1214.0], [64.7, 1214.0], [64.8, 1216.0], [64.9, 1223.0], [65.0, 1229.0], [65.1, 1235.0], [65.2, 1236.0], [65.3, 1238.0], [65.4, 1240.0], [65.5, 1242.0], [65.6, 1247.0], [65.7, 1248.0], [65.8, 1254.0], [65.9, 1286.0], [66.0, 1287.0], [66.1, 1299.0], [66.2, 1307.0], [66.3, 1309.0], [66.4, 1324.0], [66.5, 1329.0], [66.6, 1333.0], [66.7, 1343.0], [66.8, 1344.0], [66.9, 1344.0], [67.0, 1352.0], [67.1, 1353.0], [67.2, 1358.0], [67.3, 1365.0], [67.4, 1365.0], [67.5, 1375.0], [67.6, 1375.0], [67.7, 1377.0], [67.8, 1383.0], [67.9, 1384.0], [68.0, 1389.0], [68.1, 1400.0], [68.2, 1415.0], [68.3, 1436.0], [68.4, 1440.0], [68.5, 1443.0], [68.6, 1454.0], [68.7, 1458.0], [68.8, 1461.0], [68.9, 1477.0], [69.0, 1478.0], [69.1, 1480.0], [69.2, 1488.0], [69.3, 1495.0], [69.4, 1496.0], [69.5, 1496.0], [69.6, 1501.0], [69.7, 1508.0], [69.8, 1509.0], [69.9, 1514.0], [70.0, 1521.0], [70.1, 1521.0], [70.2, 1524.0], [70.3, 1526.0], [70.4, 1529.0], [70.5, 1537.0], [70.6, 1539.0], [70.7, 1539.0], [70.8, 1544.0], [70.9, 1545.0], [71.0, 1547.0], [71.1, 1548.0], [71.2, 1552.0], [71.3, 1553.0], [71.4, 1555.0], [71.5, 1556.0], [71.6, 1561.0], [71.7, 1563.0], [71.8, 1566.0], [71.9, 1567.0], [72.0, 1570.0], [72.1, 1572.0], [72.2, 1573.0], [72.3, 1575.0], [72.4, 1577.0], [72.5, 1578.0], [72.6, 1580.0], [72.7, 1581.0], [72.8, 1582.0], [72.9, 1584.0], [73.0, 1588.0], [73.1, 1588.0], [73.2, 1592.0], [73.3, 1592.0], [73.4, 1594.0], [73.5, 1598.0], [73.6, 1600.0], [73.7, 1601.0], [73.8, 1602.0], [73.9, 1602.0], [74.0, 1604.0], [74.1, 1604.0], [74.2, 1604.0], [74.3, 1607.0], [74.4, 1608.0], [74.5, 1612.0], [74.6, 1614.0], [74.7, 1615.0], [74.8, 1618.0], [74.9, 1619.0], [75.0, 1620.0], [75.1, 1620.0], [75.2, 1622.0], [75.3, 1623.0], [75.4, 1624.0], [75.5, 1625.0], [75.6, 1626.0], [75.7, 1626.0], [75.8, 1628.0], [75.9, 1630.0], [76.0, 1630.0], [76.1, 1631.0], [76.2, 1633.0], [76.3, 1633.0], [76.4, 1636.0], [76.5, 1637.0], [76.6, 1640.0], [76.7, 1644.0], [76.8, 1645.0], [76.9, 1652.0], [77.0, 1655.0], [77.1, 1656.0], [77.2, 1657.0], [77.3, 1657.0], [77.4, 1659.0], [77.5, 1666.0], [77.6, 1667.0], [77.7, 1671.0], [77.8, 1671.0], [77.9, 1672.0], [78.0, 1672.0], [78.1, 1674.0], [78.2, 1675.0], [78.3, 1676.0], [78.4, 1681.0], [78.5, 1681.0], [78.6, 1683.0], [78.7, 1684.0], [78.8, 1686.0], [78.9, 1687.0], [79.0, 1689.0], [79.1, 1689.0], [79.2, 1693.0], [79.3, 1693.0], [79.4, 1693.0], [79.5, 1696.0], [79.6, 1697.0], [79.7, 1699.0], [79.8, 1701.0], [79.9, 1702.0], [80.0, 1703.0], [80.1, 1703.0], [80.2, 1703.0], [80.3, 1704.0], [80.4, 1704.0], [80.5, 1706.0], [80.6, 1706.0], [80.7, 1706.0], [80.8, 1708.0], [80.9, 1708.0], [81.0, 1708.0], [81.1, 1711.0], [81.2, 1711.0], [81.3, 1712.0], [81.4, 1716.0], [81.5, 1716.0], [81.6, 1717.0], [81.7, 1717.0], [81.8, 1717.0], [81.9, 1720.0], [82.0, 1720.0], [82.1, 1722.0], [82.2, 1723.0], [82.3, 1724.0], [82.4, 1725.0], [82.5, 1726.0], [82.6, 1727.0], [82.7, 1730.0], [82.8, 1730.0], [82.9, 1730.0], [83.0, 1730.0], [83.1, 1732.0], [83.2, 1733.0], [83.3, 1734.0], [83.4, 1734.0], [83.5, 1735.0], [83.6, 1735.0], [83.7, 1735.0], [83.8, 1738.0], [83.9, 1738.0], [84.0, 1741.0], [84.1, 1745.0], [84.2, 1747.0], [84.3, 1750.0], [84.4, 1750.0], [84.5, 1751.0], [84.6, 1753.0], [84.7, 1756.0], [84.8, 1756.0], [84.9, 1757.0], [85.0, 1759.0], [85.1, 1761.0], [85.2, 1764.0], [85.3, 1764.0], [85.4, 1766.0], [85.5, 1771.0], [85.6, 1773.0], [85.7, 1774.0], [85.8, 1777.0], [85.9, 1778.0], [86.0, 1784.0], [86.1, 1785.0], [86.2, 1788.0], [86.3, 1791.0], [86.4, 1793.0], [86.5, 1800.0], [86.6, 1801.0], [86.7, 1801.0], [86.8, 1804.0], [86.9, 1806.0], [87.0, 1811.0], [87.1, 1812.0], [87.2, 1812.0], [87.3, 1819.0], [87.4, 1822.0], [87.5, 1822.0], [87.6, 1829.0], [87.7, 1829.0], [87.8, 1830.0], [87.9, 1834.0], [88.0, 1835.0], [88.1, 1841.0], [88.2, 1842.0], [88.3, 1847.0], [88.4, 1851.0], [88.5, 1853.0], [88.6, 1853.0], [88.7, 1854.0], [88.8, 1855.0], [88.9, 1861.0], [89.0, 1861.0], [89.1, 1862.0], [89.2, 1863.0], [89.3, 1866.0], [89.4, 1867.0], [89.5, 1868.0], [89.6, 1868.0], [89.7, 1871.0], [89.8, 1878.0], [89.9, 1878.0], [90.0, 1879.0], [90.1, 1881.0], [90.2, 1884.0], [90.3, 1885.0], [90.4, 1885.0], [90.5, 1886.0], [90.6, 1886.0], [90.7, 1888.0], [90.8, 1893.0], [90.9, 1893.0], [91.0, 1895.0], [91.1, 1898.0], [91.2, 1901.0], [91.3, 1904.0], [91.4, 1912.0], [91.5, 1912.0], [91.6, 1913.0], [91.7, 1915.0], [91.8, 1915.0], [91.9, 1917.0], [92.0, 1919.0], [92.1, 1920.0], [92.2, 1923.0], [92.3, 1929.0], [92.4, 1930.0], [92.5, 1932.0], [92.6, 1933.0], [92.7, 1935.0], [92.8, 1938.0], [92.9, 1940.0], [93.0, 1944.0], [93.1, 1945.0], [93.2, 1945.0], [93.3, 1947.0], [93.4, 1947.0], [93.5, 1950.0], [93.6, 1950.0], [93.7, 1953.0], [93.8, 1954.0], [93.9, 1956.0], [94.0, 1957.0], [94.1, 1958.0], [94.2, 1960.0], [94.3, 1962.0], [94.4, 1972.0], [94.5, 1982.0], [94.6, 1985.0], [94.7, 1991.0], [94.8, 1994.0], [94.9, 2009.0], [95.0, 2010.0], [95.1, 2018.0], [95.2, 2037.0], [95.3, 2046.0], [95.4, 2053.0], [95.5, 2054.0], [95.6, 2056.0], [95.7, 2097.0], [95.8, 2105.0], [95.9, 2134.0], [96.0, 2156.0], [96.1, 2192.0], [96.2, 2198.0], [96.3, 2300.0], [96.4, 2329.0], [96.5, 2341.0], [96.6, 2342.0], [96.7, 2343.0], [96.8, 2351.0], [96.9, 2354.0], [97.0, 2355.0], [97.1, 2361.0], [97.2, 2365.0], [97.3, 2372.0], [97.4, 2377.0], [97.5, 2380.0], [97.6, 2390.0], [97.7, 2394.0], [97.8, 2401.0], [97.9, 2410.0], [98.0, 2414.0], [98.1, 2416.0], [98.2, 2430.0], [98.3, 2432.0], [98.4, 2440.0], [98.5, 2441.0], [98.6, 2442.0], [98.7, 2444.0], [98.8, 2448.0], [98.9, 2459.0], [99.0, 4890.0], [99.1, 5031.0], [99.2, 5232.0], [99.3, 5625.0], [99.4, 7809.0], [99.5, 8959.0], [99.6, 9010.0], [99.7, 9285.0], [99.8, 11752.0], [99.9, 12238.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 118.0, "series": [{"data": [[0.0, 67.0], [8900.0, 1.0], [9000.0, 1.0], [9200.0, 1.0], [600.0, 70.0], [11200.0, 1.0], [700.0, 86.0], [11700.0, 1.0], [12200.0, 1.0], [12500.0, 1.0], [800.0, 76.0], [900.0, 62.0], [1000.0, 27.0], [1100.0, 59.0], [1200.0, 28.0], [1300.0, 27.0], [1400.0, 20.0], [1500.0, 55.0], [100.0, 66.0], [1600.0, 85.0], [1700.0, 92.0], [1800.0, 64.0], [1900.0, 51.0], [2000.0, 12.0], [2100.0, 6.0], [2300.0, 20.0], [2200.0, 1.0], [2400.0, 17.0], [200.0, 90.0], [4800.0, 1.0], [300.0, 118.0], [5100.0, 1.0], [5000.0, 1.0], [5200.0, 1.0], [5600.0, 1.0], [400.0, 90.0], [7800.0, 1.0], [7900.0, 1.0], [500.0, 66.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 519.0, "series": [{"data": [[0.0, 431.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 519.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 417.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 716.2558139534885, "minX": 1.62643648E12, "maxY": 1991.4285714285716, "series": [{"data": [[1.62643653E12, 1457.975877192984], [1.62643652E12, 1715.419354838709], [1.62643655E12, 716.2558139534885], [1.62643654E12, 1004.7242888402619], [1.62643649E12, 1909.962686567164], [1.62643648E12, 1991.4285714285716], [1.62643651E12, 1794.6249999999993]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62643655E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 46.0, "minX": 652.0, "maxY": 12547.0, "series": [{"data": [[668.0, 54.0], [671.0, 50.0], [657.0, 53.0], [656.0, 51.0], [659.0, 52.0], [658.0, 61.0], [661.0, 57.0], [660.0, 51.0], [670.0, 62.0], [669.0, 53.0], [667.0, 71.0], [666.0, 55.0], [665.0, 53.0], [664.0, 46.0], [655.0, 51.0], [654.0, 60.0], [653.0, 56.0], [652.0, 48.0], [663.0, 56.0], [662.0, 49.0], [700.0, 198.0], [703.0, 181.0], [689.0, 52.0], [688.0, 63.0], [691.0, 54.0], [690.0, 61.0], [693.0, 61.0], [692.0, 56.0], [702.0, 163.0], [701.0, 194.0], [699.0, 55.0], [698.0, 61.0], [697.0, 69.0], [696.0, 54.0], [687.0, 60.0], [673.0, 54.0], [672.0, 54.0], [675.0, 47.0], [674.0, 54.0], [677.0, 67.0], [676.0, 53.0], [679.0, 56.0], [678.0, 48.0], [686.0, 54.0], [685.0, 52.0], [684.0, 51.0], [683.0, 49.0], [682.0, 61.0], [681.0, 62.0], [680.0, 51.0], [695.0, 59.0], [694.0, 62.0], [730.0, 411.0], [734.0, 443.0], [735.0, 443.0], [733.0, 437.0], [732.0, 198.0], [731.0, 430.0], [719.0, 422.0], [705.0, 155.0], [704.0, 164.0], [707.0, 162.0], [706.0, 156.0], [709.0, 149.0], [708.0, 153.0], [711.0, 128.0], [710.0, 136.0], [718.0, 435.0], [717.0, 446.0], [716.0, 106.0], [715.0, 108.0], [714.0, 105.0], [713.0, 112.0], [712.0, 106.0], [727.0, 451.0], [726.0, 437.5], [725.0, 440.75], [723.0, 447.0], [761.0, 390.0], [765.0, 356.0], [766.0, 366.0], [753.0, 359.0], [755.0, 377.5], [754.0, 368.0], [757.0, 372.0], [756.0, 378.0], [764.0, 347.0], [763.0, 363.0], [762.0, 366.0], [760.0, 353.0], [743.0, 422.0], [742.0, 424.5], [740.0, 408.0], [739.0, 436.0], [738.0, 425.0], [737.0, 439.0], [736.0, 414.0], [751.0, 409.0], [750.0, 412.0], [749.0, 415.0], [748.0, 396.0], [747.0, 419.0], [746.0, 409.0], [745.0, 426.0], [744.0, 424.0], [759.0, 372.0], [758.0, 383.0], [796.0, 239.5], [788.0, 236.0], [799.0, 248.0], [784.0, 248.0], [794.0, 237.0], [792.0, 236.0], [783.0, 253.0], [768.0, 361.5], [771.0, 364.0], [769.0, 385.0], [773.0, 337.0], [772.0, 359.5], [775.0, 340.0], [774.0, 374.0], [782.0, 257.0], [781.0, 258.0], [780.0, 363.0], [779.0, 365.0], [778.0, 344.0], [777.0, 373.0], [776.0, 337.0], [791.0, 241.0], [790.0, 237.0], [789.0, 230.0], [787.0, 232.0], [785.0, 253.0], [825.0, 645.0], [830.0, 638.0], [831.0, 677.0], [817.0, 697.0], [816.0, 694.0], [819.0, 731.0], [818.0, 657.0], [821.0, 661.0], [820.0, 678.0], [829.0, 717.0], [828.0, 702.5], [827.0, 696.0], [824.0, 658.0], [807.0, 102.0], [806.0, 217.0], [805.0, 233.0], [804.0, 227.0], [803.0, 227.66666666666666], [802.0, 236.0], [801.0, 232.0], [800.0, 239.0], [815.0, 700.0], [814.0, 686.5], [812.0, 100.0], [811.0, 88.0], [810.0, 89.0], [809.0, 99.0], [808.0, 105.0], [823.0, 721.0], [822.0, 728.0], [862.0, 586.5], [852.0, 618.0], [863.0, 574.0], [848.0, 648.0], [851.0, 635.0], [849.0, 617.0], [859.0, 540.0], [858.0, 535.0], [857.0, 555.5], [839.0, 648.0], [838.0, 632.0], [837.0, 664.0], [836.0, 653.0], [835.0, 674.0], [834.0, 674.0], [833.0, 628.0], [832.0, 670.0], [847.0, 622.0], [846.0, 649.0], [845.0, 646.0], [844.0, 654.0], [843.0, 665.0], [842.0, 612.0], [841.0, 665.0], [840.0, 661.0], [855.0, 566.0], [854.0, 613.0], [853.0, 566.0], [889.0, 424.0], [894.0, 393.0], [895.0, 393.0], [880.0, 562.0], [882.0, 513.0], [881.0, 522.0], [884.0, 550.0], [883.0, 549.0], [893.0, 413.0], [892.0, 442.0], [891.0, 437.5], [888.0, 488.5], [871.0, 498.0], [870.0, 529.5], [868.0, 555.0], [867.0, 555.0], [866.0, 521.0], [865.0, 580.0], [864.0, 571.0], [879.0, 496.0], [878.0, 560.5], [877.0, 525.0], [876.0, 536.5], [874.0, 535.0], [873.0, 520.0], [872.0, 552.0], [886.0, 458.0], [885.0, 462.0], [924.0, 323.0], [927.0, 328.0], [912.0, 362.0], [914.0, 365.0], [913.0, 353.0], [917.0, 341.0], [916.0, 339.0], [926.0, 342.0], [925.0, 347.0], [923.0, 325.0], [922.0, 335.0], [921.0, 351.0], [920.0, 340.0], [911.0, 361.0], [896.0, 439.0], [898.0, 424.0], [897.0, 378.0], [901.0, 417.0], [900.0, 370.0], [903.0, 346.0], [902.0, 344.0], [910.0, 383.0], [909.0, 375.0], [908.0, 369.0], [907.0, 329.0], [906.0, 362.0], [905.0, 386.0], [904.0, 388.0], [919.0, 331.0], [918.0, 333.0], [956.0, 222.0], [959.0, 218.0], [945.0, 261.0], [944.0, 260.0], [947.0, 251.0], [946.0, 259.0], [949.0, 261.0], [948.0, 225.0], [958.0, 219.0], [957.0, 226.0], [955.0, 223.0], [954.0, 205.0], [953.0, 220.0], [952.0, 220.0], [943.0, 268.0], [929.0, 319.0], [928.0, 340.0], [931.0, 311.0], [930.0, 315.0], [933.0, 305.0], [932.0, 314.0], [935.0, 309.0], [934.0, 322.0], [942.0, 291.0], [941.0, 304.0], [940.0, 283.0], [939.0, 314.0], [938.0, 317.0], [937.0, 309.0], [936.0, 311.0], [951.0, 179.0], [950.0, 252.0], [984.0, 48.0], [989.0, 102.0], [991.0, 102.0], [977.0, 95.0], [976.0, 95.0], [979.0, 92.0], [978.0, 100.0], [988.0, 104.0], [986.0, 105.0], [985.0, 70.0], [975.0, 100.0], [962.0, 222.0], [960.0, 224.0], [964.0, 216.0], [963.0, 212.0], [967.0, 215.0], [966.0, 215.5], [974.0, 107.0], [973.0, 103.0], [972.0, 170.0], [971.0, 166.0], [970.0, 204.0], [969.0, 206.0], [968.0, 206.0], [983.0, 50.0], [982.0, 59.0], [981.0, 90.0], [980.0, 94.0], [1016.0, 712.0], [1020.0, 645.0], [1023.0, 1788.0], [1008.0, 772.0], [1012.0, 758.0], [1010.0, 728.0], [1022.0, 600.0], [1021.0, 634.0], [1019.0, 715.0], [1018.0, 1866.0], [1017.0, 742.0], [1007.0, 773.0], [993.0, 99.0], [995.0, 113.5], [994.0, 134.0], [997.0, 56.0], [996.0, 103.0], [999.0, 717.3636363636363], [998.0, 63.0], [1005.0, 802.0], [1003.0, 782.5], [1002.0, 791.0], [1001.0, 760.0], [1015.0, 822.0], [1014.0, 665.5], [1082.0, 1953.0], [1086.0, 1912.0], [1056.0, 1881.0], [1064.0, 1730.0], [1068.0, 1947.0], [1080.0, 1952.0], [1078.0, 1725.0], [1038.0, 1957.6666666666667], [1036.0, 1760.0], [1030.0, 2053.0], [1028.0, 2062.0], [1054.0, 1835.0], [1052.0, 1843.0], [1050.0, 1824.6], [1046.0, 1991.0], [1044.0, 1904.0], [1144.0, 1575.0], [1148.0, 1352.0], [1120.0, 1521.0], [1122.0, 1480.0], [1124.0, 1703.0], [1126.0, 1604.0], [1128.0, 1400.0], [1130.0, 1594.0], [1150.0, 1555.0], [1146.0, 1577.0], [1142.0, 1470.5], [1140.0, 1395.0], [1138.0, 1604.0], [1136.0, 1572.0], [1102.0, 1842.0], [1090.0, 1658.0], [1088.0, 1671.5], [1118.0, 1521.0], [1116.0, 1544.0], [1114.0, 1673.0], [1110.0, 1725.0], [1108.0, 1855.0], [1208.0, 1446.0], [1204.0, 1215.0], [1212.0, 1223.0], [1184.0, 1592.0], [1186.0, 1344.0], [1188.0, 1307.0], [1190.0, 1302.0], [1192.0, 1539.0], [1194.0, 1324.0], [1196.0, 1529.0], [1198.0, 1287.0], [1214.0, 1389.0], [1210.0, 1440.0], [1206.0, 1229.0], [1202.0, 1270.0], [1200.0, 1299.0], [1152.0, 1556.0], [1154.0, 1601.0], [1158.0, 1584.0], [1160.0, 1435.5], [1162.0, 1592.0], [1166.0, 1333.0], [1182.0, 1601.0], [1180.0, 1521.0], [1178.0, 1358.0], [1176.0, 1607.0], [1174.0, 1365.0], [1172.0, 1637.0], [1170.0, 1496.0], [1168.0, 1542.0], [1270.0, 1203.0], [1266.0, 1169.0], [1274.0, 1239.0], [1248.0, 1234.0], [1250.0, 1199.0], [1256.0, 1211.0], [1254.0, 1163.0], [1258.0, 1195.0], [1260.0, 1208.0], [1262.0, 1158.0], [1278.0, 1167.0], [1272.0, 1210.0], [1268.0, 1133.0], [1264.0, 1152.0], [1216.0, 1436.0], [1218.0, 1203.0], [1220.0, 1162.0], [1222.0, 1148.0], [1224.0, 1040.0], [1226.0, 1240.0], [1228.0, 893.0], [1230.0, 965.0], [1246.0, 1153.0], [1244.0, 1247.0], [1242.0, 252.0], [1240.0, 510.0], [1238.0, 774.0], [1236.0, 861.0], [1234.0, 942.0], [1232.0, 809.0], [1336.0, 979.0], [1330.0, 971.0], [1312.0, 1089.0], [1314.0, 1045.0], [1316.0, 1101.0], [1318.0, 1017.0], [1320.0, 1003.0], [1324.0, 1074.0], [1326.0, 1084.5], [1340.0, 1018.0], [1334.0, 1043.0], [1332.0, 997.0], [1328.0, 1017.0], [1280.0, 1160.0], [1282.0, 1139.0], [1286.0, 1131.0], [1284.0, 1104.0], [1288.0, 1216.0], [1290.0, 1163.0], [1292.0, 1195.0], [1294.0, 1128.5], [1310.0, 1130.0], [1308.0, 1061.0], [1306.0, 1122.0], [1304.0, 1131.5], [1302.0, 1135.0], [1300.0, 1149.0], [1298.0, 1151.0], [1296.0, 1085.0], [1394.0, 771.0], [1402.0, 714.0], [1406.0, 1623.0], [1386.0, 880.0], [1388.0, 844.0], [1390.0, 785.5], [1404.0, 650.0], [1400.0, 706.0], [1398.0, 803.0], [1396.0, 811.0], [1392.0, 723.0], [1344.0, 933.5], [1346.0, 891.0], [1348.0, 949.0], [1350.0, 932.0], [1352.0, 1006.0], [1354.0, 979.0], [1356.0, 943.0], [1368.0, 919.0], [1366.0, 935.0], [1364.0, 849.0], [1362.0, 896.0], [1360.0, 877.0], [1464.0, 1652.0], [1446.0, 1756.0], [1470.0, 1725.0], [1442.0, 1706.0], [1444.0, 1693.0], [1448.0, 1750.0], [1452.0, 1712.0], [1454.0, 1733.0], [1468.0, 1722.0], [1466.0, 1547.0], [1460.0, 1738.0], [1422.0, 1720.0], [1418.0, 1703.0], [1416.0, 1732.0], [1414.0, 1706.5], [1412.0, 1630.0], [1408.0, 1716.0], [1436.0, 1708.0], [1434.0, 1697.0], [1432.0, 1773.0], [1430.0, 1703.0], [1428.0, 1791.0], [1426.0, 1693.0], [1424.0, 1708.0], [1524.0, 2365.0], [1512.0, 1674.0], [1504.0, 2407.0], [1506.0, 1514.0], [1508.0, 1642.0], [1510.0, 1636.0], [1514.0, 1615.0], [1516.0, 2370.5], [1526.0, 1657.0], [1522.0, 1588.0], [1520.0, 1673.0], [1476.0, 1697.0], [1474.0, 1620.0], [1478.0, 1640.0], [1480.0, 1692.0], [1486.0, 1712.0], [1482.0, 1689.0], [1502.0, 2444.0], [1500.0, 1629.5], [1498.0, 1684.0], [1496.0, 2444.0], [1518.0, 2343.0], [1588.0, 1868.0], [1596.0, 1917.0], [1568.0, 1926.5], [1570.0, 1898.0], [1572.0, 1946.0], [1574.0, 1774.0], [1576.0, 1909.0], [1598.0, 1885.0], [1594.0, 1935.0], [1592.0, 1948.0], [1590.0, 1913.0], [1586.0, 1895.0], [1584.0, 1919.0], [1550.0, 2139.0], [1548.0, 1461.0], [1546.0, 2361.0], [1544.0, 1454.0], [1542.0, 2416.0], [1540.0, 2372.0], [1538.0, 1652.0], [1566.0, 1893.0], [1564.0, 1919.0], [1558.0, 1958.0], [1554.0, 2105.0], [1552.0, 2198.0], [1656.0, 1580.0], [1652.0, 1734.0], [1660.0, 1545.0], [1632.0, 1764.0], [1634.0, 1689.0], [1636.0, 1723.0], [1638.0, 1749.0], [1640.0, 1704.0], [1642.0, 1736.0], [1644.0, 1702.0], [1662.0, 1597.0], [1658.0, 1628.0], [1654.0, 1614.0], [1650.0, 1620.0], [1648.0, 1619.0], [1600.0, 1800.0], [1602.0, 1933.0], [1604.0, 1885.0], [1606.0, 1920.0], [1608.0, 1888.0], [1610.0, 1824.0], [1612.0, 1940.0], [1614.0, 1923.0], [1630.0, 1803.0], [1628.0, 1757.0], [1626.0, 1886.0], [1622.0, 1879.0], [1620.0, 1806.0], [1618.0, 1822.0], [1616.0, 1867.0], [1714.0, 420.0], [1724.0, 395.0], [1698.0, 425.0], [1702.0, 432.0], [1704.0, 431.0], [1726.0, 378.0], [1722.0, 402.0], [1718.0, 404.0], [1716.0, 404.0], [1664.0, 1539.0], [1668.0, 1254.0], [1670.0, 1098.0], [1694.0, 411.0], [1692.0, 408.0], [1690.0, 425.0], [1688.0, 413.0], [1686.0, 427.0], [1684.0, 451.0], [1682.0, 890.0], [1784.0, 806.0], [1788.0, 887.0], [1762.0, 924.5], [1760.0, 824.0], [1764.0, 957.5], [1768.0, 929.0], [1770.0, 764.0], [1774.0, 753.0], [1790.0, 872.0], [1786.0, 809.5], [1780.0, 746.0], [1778.0, 741.0], [1776.0, 928.0], [1742.0, 134.0], [1740.0, 133.0], [1738.0, 130.0], [1736.0, 137.0], [1732.0, 64.0], [1730.0, 322.0], [1728.0, 347.0], [1756.0, 934.5], [1748.0, 964.0], [1746.0, 941.0], [1744.0, 122.0], [1852.0, 732.5], [1824.0, 657.0], [1826.0, 813.0], [1828.0, 804.0], [1830.0, 610.0], [1832.0, 710.0], [1834.0, 645.0], [1836.0, 569.5], [1838.0, 611.0], [1854.0, 700.0], [1850.0, 743.0], [1848.0, 752.0], [1846.0, 745.0], [1844.0, 756.5], [1842.0, 748.0], [1840.0, 328.0], [1794.0, 901.0], [1798.0, 866.5], [1822.0, 656.0], [1820.0, 700.0], [1818.0, 814.0], [1816.0, 891.0], [1814.0, 687.0], [1812.0, 797.5], [1810.0, 847.0], [1808.0, 880.0], [1914.0, 470.0], [1916.0, 480.0], [1900.0, 531.5], [1902.0, 537.8333333333334], [1910.0, 521.0], [1904.0, 520.5], [1864.0, 685.0], [1862.0, 729.0], [1860.0, 727.5], [1858.0, 727.0], [1856.0, 718.0], [1886.0, 549.0], [1884.0, 546.3333333333334], [1880.0, 617.0], [1878.0, 569.0], [1876.0, 640.5], [1872.0, 662.7142857142857], [1976.0, 8959.0], [1972.0, 11752.0], [1980.0, 5232.0], [1954.0, 330.0], [1956.0, 305.0], [1958.0, 257.0], [1960.0, 265.0], [1962.0, 245.0], [1964.0, 249.0], [1966.0, 167.0], [1982.0, 140.0], [1978.0, 7809.0], [1974.0, 9285.0], [1970.0, 12547.0], [1968.0, 166.5], [1922.0, 232.0], [1924.0, 212.0], [1926.0, 217.0], [1928.0, 186.0], [1930.0, 374.0], [1932.0, 347.0], [1934.0, 344.0], [1950.0, 374.0], [1948.0, 426.0], [1946.0, 357.0], [1942.0, 510.0], [1940.0, 312.5], [1936.0, 336.0], [1988.0, 350.0], [1996.0, 269.0], [2000.0, 1138.1818181818182], [1984.0, 151.0], [1986.0, 136.0], [1998.0, 269.0], [1994.0, 317.0], [1992.0, 350.0], [1990.0, 358.0], [1081.0, 1932.0], [1059.0, 1757.0], [1067.0, 1840.0], [1065.0, 1821.4285714285713], [1069.0, 1958.0], [1085.0, 1926.3333333333333], [1077.0, 1850.5], [1075.0, 1830.5], [1073.0, 1823.5], [1039.0, 1756.0], [1037.0, 1854.3333333333333], [1033.0, 1909.5], [1031.0, 1919.5], [1025.0, 1934.0], [1053.0, 1735.0], [1043.0, 1881.5], [1149.0, 1614.0], [1151.0, 1608.0], [1121.0, 1702.0], [1123.0, 1477.0], [1125.0, 1606.0], [1127.0, 1424.0], [1129.0, 1377.0], [1133.0, 1566.5], [1131.0, 1537.0], [1147.0, 1630.0], [1145.0, 1602.0], [1143.0, 1589.0], [1139.0, 1383.0], [1137.0, 1640.0], [1091.0, 1837.0], [1119.0, 1735.0], [1117.0, 1822.0], [1115.0, 1552.0], [1111.0, 1879.0], [1107.0, 1785.4666666666667], [1213.0, 1375.0], [1215.0, 1365.0], [1185.0, 1566.0], [1187.0, 1540.0], [1189.0, 1322.0], [1191.0, 1458.0], [1193.0, 1488.0], [1195.0, 1329.0], [1197.0, 1496.0], [1199.0, 1496.0], [1211.0, 1175.0], [1209.0, 1415.0], [1207.0, 1478.0], [1205.0, 1242.0], [1203.0, 1486.0], [1201.0, 1524.0], [1183.0, 1343.0], [1153.0, 1365.0], [1157.0, 1561.0], [1155.0, 1626.0], [1159.0, 1548.0], [1161.0, 1384.0], [1163.0, 1600.0], [1165.0, 1528.0], [1181.0, 1526.0], [1179.0, 1350.0], [1177.0, 1342.0], [1175.0, 1375.0], [1173.0, 1533.5], [1171.0, 1353.0], [1169.0, 1503.0], [1271.0, 1188.0], [1279.0, 1166.0], [1249.0, 1214.0], [1251.0, 1213.0], [1259.0, 1154.0], [1261.0, 1142.0], [1263.0, 1193.0], [1277.0, 1191.0], [1273.0, 1118.0], [1269.0, 1159.0], [1267.0, 1197.0], [1265.0, 1189.0], [1247.0, 1193.0], [1217.0, 1443.0], [1219.0, 1165.0], [1221.0, 1134.0], [1223.0, 1344.0], [1225.0, 1236.0], [1227.0, 969.0], [1229.0, 931.0], [1231.0, 944.0], [1245.0, 1248.0], [1243.0, 1243.0], [1241.0, 378.0], [1239.0, 418.0], [1237.0, 815.0], [1235.0, 582.0], [1233.0, 997.0], [1339.0, 1014.0], [1343.0, 967.0], [1313.0, 1113.0], [1315.0, 1036.0], [1317.0, 1008.0], [1319.0, 1004.0], [1323.0, 1063.0], [1321.0, 1014.0], [1325.0, 1064.0], [1327.0, 1006.0], [1341.0, 923.0], [1337.0, 952.0], [1335.0, 955.0], [1333.0, 974.0], [1331.0, 1010.0], [1329.0, 1028.0], [1311.0, 1052.0], [1281.0, 1121.0], [1283.0, 1158.0], [1287.0, 1109.0], [1289.0, 1213.0], [1291.0, 1126.0], [1295.0, 1168.0], [1309.0, 1163.0], [1307.0, 1170.0], [1305.0, 1171.0], [1303.0, 1194.0], [1301.0, 1148.0], [1299.0, 1198.0], [1297.0, 1115.0], [1395.0, 712.0], [1385.0, 850.0625], [1387.0, 872.0], [1389.0, 860.0], [1391.0, 823.0], [1403.0, 693.0], [1401.0, 693.0], [1399.0, 700.0], [1397.0, 759.0], [1393.0, 825.0], [1369.0, 911.0], [1345.0, 962.0], [1347.0, 948.0], [1349.0, 1013.0], [1351.0, 887.0], [1353.0, 916.0], [1355.0, 870.0], [1359.0, 883.0], [1357.0, 900.0], [1367.0, 898.0], [1365.0, 840.0], [1363.0, 834.0], [1361.0, 927.0], [1463.0, 1715.5], [1467.0, 1657.0], [1441.0, 1678.0], [1443.0, 1706.0], [1445.0, 1672.0], [1447.0, 1679.0], [1449.0, 1667.0], [1451.0, 1715.0], [1453.0, 1745.0], [1469.0, 2440.0], [1465.0, 1723.0], [1461.0, 2482.0], [1457.0, 1636.0], [1423.0, 1693.0], [1421.0, 2075.0], [1419.0, 2089.0], [1417.0, 1708.0], [1415.0, 1730.0], [1413.0, 1733.0], [1411.0, 1801.0], [1439.0, 1728.5], [1437.0, 1732.5], [1435.0, 1717.0], [1433.0, 1778.0], [1431.0, 1706.0], [1429.0, 1683.0], [1427.0, 1730.0], [1425.0, 1795.0], [1521.0, 2442.0], [1527.0, 2430.0], [1505.0, 2342.0], [1507.0, 1924.3333333333333], [1511.0, 2414.0], [1513.0, 2388.0], [1515.0, 2012.0], [1517.0, 1681.0], [1525.0, 2401.0], [1523.0, 2380.0], [1503.0, 2427.0], [1479.0, 1632.0], [1481.0, 1622.0], [1501.0, 2441.0], [1499.0, 1623.0], [1497.0, 1699.0], [1495.0, 1607.0], [1493.0, 2046.5], [1491.0, 1666.0], [1489.0, 2354.0], [1519.0, 1581.0], [1597.0, 1886.0], [1599.0, 1972.0], [1569.0, 1945.0], [1571.0, 1994.0], [1573.0, 1915.0], [1575.0, 1950.0], [1579.0, 1963.0], [1577.0, 1879.0], [1583.0, 1892.5], [1581.0, 1915.5], [1595.0, 1853.0], [1593.0, 1871.0], [1591.0, 1985.0], [1589.0, 1916.5], [1587.0, 1945.0], [1551.0, 2097.0], [1549.0, 2192.0], [1547.0, 2134.0], [1545.0, 1558.0], [1543.0, 2390.0], [1541.0, 2349.0], [1539.0, 1566.0], [1537.0, 2048.230769230769], [1565.0, 1888.5], [1557.0, 1309.0], [1555.0, 1995.0], [1553.0, 2156.0], [1661.0, 1598.0], [1663.0, 1533.0], [1633.0, 1728.0], [1635.0, 1671.0], [1637.0, 1676.0], [1639.0, 1701.0], [1641.0, 1629.0], [1643.0, 1719.0], [1647.0, 1686.5], [1645.0, 1724.0], [1659.0, 1578.0], [1657.0, 1567.0], [1655.0, 1655.0], [1653.0, 1625.0], [1651.0, 1735.0], [1649.0, 1714.0], [1631.0, 1727.0], [1601.0, 1847.5], [1603.0, 1832.0], [1605.0, 1916.0], [1607.0, 1862.0], [1609.0, 1829.0], [1611.0, 1829.0], [1613.0, 1860.0], [1615.0, 1804.0], [1629.0, 1777.0], [1627.0, 1812.0], [1625.0, 1856.5], [1623.0, 1778.0], [1619.0, 1801.0], [1617.0, 1808.0], [1725.0, 372.0], [1727.0, 356.0], [1697.0, 438.0], [1699.0, 425.0], [1701.0, 410.0], [1703.0, 407.0], [1707.0, 426.5], [1705.0, 401.0], [1711.0, 398.5], [1709.0, 386.5], [1723.0, 405.0], [1721.0, 376.5], [1719.0, 376.0], [1717.0, 412.0], [1715.0, 384.0], [1713.0, 402.5], [1695.0, 399.0], [1665.0, 1519.0], [1667.0, 1286.0], [1669.0, 1193.0], [1693.0, 426.0], [1691.0, 416.0], [1689.0, 431.0], [1687.0, 439.0], [1683.0, 773.5], [1681.0, 911.7], [1777.0, 890.6666666666666], [1791.0, 893.0], [1767.0, 886.3333333333334], [1769.0, 782.0], [1773.0, 934.0], [1775.0, 746.0], [1789.0, 880.0], [1787.0, 924.0], [1781.0, 917.0], [1779.0, 862.0], [1743.0, 91.0], [1741.0, 134.0], [1739.0, 138.0], [1737.0, 131.0], [1735.0, 140.0], [1733.0, 140.0], [1731.0, 68.0], [1729.0, 347.0], [1747.0, 991.0], [1745.0, 126.0], [1853.0, 755.0], [1831.0, 717.0], [1855.0, 690.0], [1825.0, 797.0], [1827.0, 807.0], [1829.0, 615.0], [1833.0, 529.0], [1837.0, 498.0], [1839.0, 589.0], [1845.0, 762.0], [1841.0, 503.0], [1823.0, 786.0], [1793.0, 727.5], [1795.0, 711.0], [1799.0, 863.0], [1803.0, 833.0], [1801.0, 784.0], [1807.0, 785.5], [1805.0, 806.0], [1821.0, 681.0], [1819.0, 865.0], [1817.0, 706.0], [1815.0, 851.0], [1813.0, 845.0], [1809.0, 720.0], [1913.0, 491.5], [1907.0, 497.6666666666667], [1895.0, 518.0], [1897.0, 521.0], [1903.0, 517.3333333333333], [1915.0, 474.0], [1911.0, 454.0], [1909.0, 482.5], [1871.0, 643.0], [1863.0, 723.0], [1885.0, 570.0], [1881.0, 554.0], [1879.0, 608.5], [1877.0, 602.0], [1875.0, 670.0], [1981.0, 5031.0], [1983.0, 132.0], [1953.0, 344.0], [1955.0, 284.0], [1957.0, 282.0], [1959.0, 255.0], [1961.0, 242.0], [1963.0, 257.0], [1965.0, 158.0], [1979.0, 5625.0], [1977.0, 7972.0], [1975.0, 9010.0], [1973.0, 11269.0], [1971.0, 12238.0], [1969.0, 153.0], [1951.0, 184.0], [1923.0, 217.0], [1925.0, 207.0], [1927.0, 193.0], [1929.0, 198.0], [1931.0, 178.0], [1933.0, 340.0], [1935.0, 519.0], [1949.0, 398.0], [1947.0, 288.0], [1943.0, 498.0], [1941.0, 312.5], [1939.0, 323.0], [1993.0, 326.0], [1985.0, 146.0], [1987.0, 141.0], [1989.0, 363.0], [1999.0, 273.0], [1997.0, 296.0], [1995.0, 315.0], [1991.0, 333.0]], "isOverall": false, "label": "Sunstar Search", "isController": false}, {"data": [[1329.91526661797, 1043.8173849525188]], "isOverall": false, "label": "Sunstar Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 682.5, "minX": 1.62643648E12, "maxY": 324753.3, "series": [{"data": [[1.62643653E12, 324033.6], [1.62643652E12, 44057.2], [1.62643655E12, 90784.0], [1.62643654E12, 324753.3], [1.62643649E12, 95221.2], [1.62643648E12, 24862.6], [1.62643651E12, 68218.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62643653E12, 8892.0], [1.62643652E12, 1209.0], [1.62643655E12, 2476.5], [1.62643654E12, 8911.5], [1.62643649E12, 2613.0], [1.62643648E12, 682.5], [1.62643651E12, 1872.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62643655E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 236.0930232558138, "minX": 1.62643648E12, "maxY": 1651.8000000000002, "series": [{"data": [[1.62643653E12, 1482.3903508771932], [1.62643652E12, 335.2903225806452], [1.62643655E12, 236.0930232558138], [1.62643654E12, 962.8424507658639], [1.62643649E12, 946.3582089552235], [1.62643648E12, 1651.8000000000002], [1.62643651E12, 803.4166666666669]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62643655E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 234.85271317829455, "minX": 1.62643648E12, "maxY": 1647.8857142857144, "series": [{"data": [[1.62643653E12, 1473.2938596491224], [1.62643652E12, 332.5483870967741], [1.62643655E12, 234.85271317829455], [1.62643654E12, 951.3304157549247], [1.62643649E12, 922.5447761194029], [1.62643648E12, 1647.8857142857144], [1.62643651E12, 801.65625]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62643655E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 223.8294573643411, "minX": 1.62643648E12, "maxY": 1437.6798245614032, "series": [{"data": [[1.62643653E12, 1437.6798245614032], [1.62643652E12, 323.04838709677426], [1.62643655E12, 223.8294573643411], [1.62643654E12, 917.9978118161926], [1.62643649E12, 408.4253731343285], [1.62643648E12, 230.0857142857143], [1.62643651E12, 785.71875]], "isOverall": false, "label": "Sunstar Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62643655E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 47.0, "minX": 1.62643648E12, "maxY": 12547.0, "series": [{"data": [[1.62643653E12, 2482.0], [1.62643652E12, 451.0], [1.62643655E12, 452.0], [1.62643654E12, 2062.0], [1.62643649E12, 12547.0], [1.62643648E12, 8959.0], [1.62643651E12, 991.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62643653E12, 252.0], [1.62643652E12, 64.0], [1.62643655E12, 47.0], [1.62643654E12, 48.0], [1.62643649E12, 153.0], [1.62643648E12, 132.0], [1.62643651E12, 328.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62643653E12, 2025.6000000000013], [1.62643652E12, 431.0], [1.62643655E12, 439.0], [1.62643654E12, 1847.6], [1.62643649E12, 746.5], [1.62643648E12, 6498.599999999997], [1.62643651E12, 941.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62643653E12, 2444.0], [1.62643652E12, 451.0], [1.62643655E12, 451.72], [1.62643654E12, 2052.42], [1.62643649E12, 12438.850000000002], [1.62643648E12, 8959.0], [1.62643651E12, 991.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62643653E12, 2372.75], [1.62643652E12, 437.4], [1.62643655E12, 443.6], [1.62643654E12, 1938.8999999999996], [1.62643649E12, 2833.75], [1.62643648E12, 8169.399999999996], [1.62643651E12, 959.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62643655E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 46.0, "minX": 1.0, "maxY": 10114.0, "series": [{"data": [[2.0, 7890.5], [32.0, 234.0], [142.0, 1708.0], [162.0, 1032.0], [47.0, 407.0], [12.0, 94.5], [48.0, 316.0], [53.0, 265.0], [13.0, 91.0], [233.0, 1582.0], [15.0, 815.0], [1.0, 10114.0], [64.0, 408.0], [17.0, 153.0], [75.0, 597.0], [18.0, 720.0], [20.0, 104.0], [95.0, 563.0], [96.0, 839.0], [29.0, 285.0], [119.0, 1862.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 61.0], [13.0, 46.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 233.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10113.5, "series": [{"data": [[2.0, 7890.0], [32.0, 234.0], [142.0, 1708.0], [162.0, 1031.5], [47.0, 407.0], [12.0, 94.0], [48.0, 315.5], [53.0, 265.0], [13.0, 91.0], [233.0, 1575.0], [15.0, 815.0], [1.0, 10113.5], [64.0, 407.0], [17.0, 152.0], [75.0, 570.0], [18.0, 720.0], [20.0, 104.0], [95.0, 562.0], [96.0, 838.5], [29.0, 278.0], [119.0, 1853.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 0.0], [13.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 233.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62643647E12, "maxY": 66.2, "series": [{"data": [[1.62643653E12, 66.2], [1.62643652E12, 6.2], [1.62643655E12, 12.9], [1.62643654E12, 25.1], [1.62643649E12, 12.8], [1.62643648E12, 4.0], [1.62643651E12, 9.6], [1.62643647E12, 0.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62643655E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62643648E12, "maxY": 45.7, "series": [{"data": [[1.62643655E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62643653E12, 45.6], [1.62643652E12, 6.2], [1.62643655E12, 12.7], [1.62643654E12, 45.7], [1.62643649E12, 13.4], [1.62643648E12, 3.5], [1.62643651E12, 9.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62643655E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62643655E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62643648E12, "maxY": 45.7, "series": [{"data": [[1.62643653E12, 45.6], [1.62643652E12, 6.2], [1.62643655E12, 12.7], [1.62643654E12, 45.7], [1.62643649E12, 13.4], [1.62643648E12, 3.5], [1.62643651E12, 9.6]], "isOverall": false, "label": "Sunstar Search-success", "isController": false}, {"data": [[1.62643655E12, 0.2]], "isOverall": false, "label": "Sunstar Search-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62643655E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62643648E12, "maxY": 45.7, "series": [{"data": [[1.62643653E12, 45.6], [1.62643652E12, 6.2], [1.62643655E12, 12.7], [1.62643654E12, 45.7], [1.62643649E12, 13.4], [1.62643648E12, 3.5], [1.62643651E12, 9.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62643655E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62643655E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

