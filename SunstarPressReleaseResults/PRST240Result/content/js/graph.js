/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "maxY": 29222.0, "series": [{"data": [[0.0, 16.0], [0.1, 17.0], [0.2, 17.0], [0.3, 17.0], [0.4, 18.0], [0.5, 19.0], [0.6, 21.0], [0.7, 22.0], [0.8, 25.0], [0.9, 28.0], [1.0, 32.0], [1.1, 36.0], [1.2, 41.0], [1.3, 44.0], [1.4, 52.0], [1.5, 55.0], [1.6, 61.0], [1.7, 65.0], [1.8, 73.0], [1.9, 78.0], [2.0, 80.0], [2.1, 82.0], [2.2, 83.0], [2.3, 84.0], [2.4, 85.0], [2.5, 88.0], [2.6, 90.0], [2.7, 91.0], [2.8, 92.0], [2.9, 92.0], [3.0, 93.0], [3.1, 95.0], [3.2, 96.0], [3.3, 97.0], [3.4, 99.0], [3.5, 100.0], [3.6, 103.0], [3.7, 104.0], [3.8, 104.0], [3.9, 106.0], [4.0, 107.0], [4.1, 108.0], [4.2, 109.0], [4.3, 109.0], [4.4, 110.0], [4.5, 111.0], [4.6, 113.0], [4.7, 114.0], [4.8, 117.0], [4.9, 118.0], [5.0, 120.0], [5.1, 121.0], [5.2, 122.0], [5.3, 124.0], [5.4, 125.0], [5.5, 126.0], [5.6, 128.0], [5.7, 130.0], [5.8, 131.0], [5.9, 133.0], [6.0, 134.0], [6.1, 135.0], [6.2, 137.0], [6.3, 138.0], [6.4, 139.0], [6.5, 141.0], [6.6, 144.0], [6.7, 145.0], [6.8, 147.0], [6.9, 148.0], [7.0, 150.0], [7.1, 151.0], [7.2, 152.0], [7.3, 154.0], [7.4, 156.0], [7.5, 156.0], [7.6, 157.0], [7.7, 159.0], [7.8, 160.0], [7.9, 161.0], [8.0, 162.0], [8.1, 165.0], [8.2, 167.0], [8.3, 168.0], [8.4, 169.0], [8.5, 170.0], [8.6, 171.0], [8.7, 172.0], [8.8, 173.0], [8.9, 174.0], [9.0, 175.0], [9.1, 176.0], [9.2, 178.0], [9.3, 179.0], [9.4, 180.0], [9.5, 180.0], [9.6, 180.0], [9.7, 181.0], [9.8, 184.0], [9.9, 184.0], [10.0, 186.0], [10.1, 189.0], [10.2, 191.0], [10.3, 192.0], [10.4, 194.0], [10.5, 195.0], [10.6, 197.0], [10.7, 198.0], [10.8, 200.0], [10.9, 201.0], [11.0, 202.0], [11.1, 205.0], [11.2, 206.0], [11.3, 207.0], [11.4, 210.0], [11.5, 212.0], [11.6, 216.0], [11.7, 217.0], [11.8, 219.0], [11.9, 221.0], [12.0, 224.0], [12.1, 226.0], [12.2, 227.0], [12.3, 228.0], [12.4, 231.0], [12.5, 234.0], [12.6, 235.0], [12.7, 237.0], [12.8, 240.0], [12.9, 242.0], [13.0, 244.0], [13.1, 247.0], [13.2, 252.0], [13.3, 256.0], [13.4, 258.0], [13.5, 260.0], [13.6, 263.0], [13.7, 269.0], [13.8, 272.0], [13.9, 274.0], [14.0, 277.0], [14.1, 281.0], [14.2, 283.0], [14.3, 287.0], [14.4, 289.0], [14.5, 290.0], [14.6, 293.0], [14.7, 296.0], [14.8, 298.0], [14.9, 299.0], [15.0, 302.0], [15.1, 303.0], [15.2, 304.0], [15.3, 308.0], [15.4, 309.0], [15.5, 310.0], [15.6, 312.0], [15.7, 315.0], [15.8, 318.0], [15.9, 320.0], [16.0, 323.0], [16.1, 324.0], [16.2, 327.0], [16.3, 329.0], [16.4, 331.0], [16.5, 332.0], [16.6, 333.0], [16.7, 335.0], [16.8, 336.0], [16.9, 337.0], [17.0, 338.0], [17.1, 339.0], [17.2, 341.0], [17.3, 344.0], [17.4, 348.0], [17.5, 350.0], [17.6, 352.0], [17.7, 354.0], [17.8, 358.0], [17.9, 359.0], [18.0, 360.0], [18.1, 361.0], [18.2, 363.0], [18.3, 364.0], [18.4, 366.0], [18.5, 368.0], [18.6, 370.0], [18.7, 371.0], [18.8, 374.0], [18.9, 376.0], [19.0, 378.0], [19.1, 379.0], [19.2, 382.0], [19.3, 384.0], [19.4, 386.0], [19.5, 388.0], [19.6, 391.0], [19.7, 396.0], [19.8, 397.0], [19.9, 398.0], [20.0, 400.0], [20.1, 403.0], [20.2, 406.0], [20.3, 407.0], [20.4, 410.0], [20.5, 413.0], [20.6, 415.0], [20.7, 416.0], [20.8, 421.0], [20.9, 425.0], [21.0, 430.0], [21.1, 433.0], [21.2, 434.0], [21.3, 438.0], [21.4, 440.0], [21.5, 444.0], [21.6, 447.0], [21.7, 450.0], [21.8, 453.0], [21.9, 458.0], [22.0, 459.0], [22.1, 461.0], [22.2, 462.0], [22.3, 464.0], [22.4, 467.0], [22.5, 469.0], [22.6, 471.0], [22.7, 473.0], [22.8, 477.0], [22.9, 478.0], [23.0, 480.0], [23.1, 483.0], [23.2, 485.0], [23.3, 487.0], [23.4, 489.0], [23.5, 496.0], [23.6, 500.0], [23.7, 505.0], [23.8, 508.0], [23.9, 511.0], [24.0, 514.0], [24.1, 516.0], [24.2, 519.0], [24.3, 521.0], [24.4, 524.0], [24.5, 525.0], [24.6, 528.0], [24.7, 536.0], [24.8, 538.0], [24.9, 545.0], [25.0, 548.0], [25.1, 552.0], [25.2, 554.0], [25.3, 555.0], [25.4, 558.0], [25.5, 564.0], [25.6, 569.0], [25.7, 571.0], [25.8, 579.0], [25.9, 583.0], [26.0, 585.0], [26.1, 587.0], [26.2, 592.0], [26.3, 596.0], [26.4, 600.0], [26.5, 603.0], [26.6, 608.0], [26.7, 612.0], [26.8, 616.0], [26.9, 619.0], [27.0, 619.0], [27.1, 623.0], [27.2, 626.0], [27.3, 628.0], [27.4, 631.0], [27.5, 635.0], [27.6, 636.0], [27.7, 637.0], [27.8, 638.0], [27.9, 641.0], [28.0, 645.0], [28.1, 649.0], [28.2, 655.0], [28.3, 659.0], [28.4, 664.0], [28.5, 668.0], [28.6, 670.0], [28.7, 678.0], [28.8, 680.0], [28.9, 684.0], [29.0, 688.0], [29.1, 692.0], [29.2, 697.0], [29.3, 701.0], [29.4, 703.0], [29.5, 707.0], [29.6, 709.0], [29.7, 711.0], [29.8, 715.0], [29.9, 718.0], [30.0, 721.0], [30.1, 723.0], [30.2, 727.0], [30.3, 731.0], [30.4, 733.0], [30.5, 735.0], [30.6, 736.0], [30.7, 738.0], [30.8, 738.0], [30.9, 739.0], [31.0, 741.0], [31.1, 744.0], [31.2, 746.0], [31.3, 749.0], [31.4, 752.0], [31.5, 755.0], [31.6, 757.0], [31.7, 759.0], [31.8, 760.0], [31.9, 764.0], [32.0, 766.0], [32.1, 769.0], [32.2, 770.0], [32.3, 773.0], [32.4, 775.0], [32.5, 777.0], [32.6, 781.0], [32.7, 783.0], [32.8, 786.0], [32.9, 793.0], [33.0, 796.0], [33.1, 799.0], [33.2, 801.0], [33.3, 804.0], [33.4, 805.0], [33.5, 809.0], [33.6, 812.0], [33.7, 813.0], [33.8, 816.0], [33.9, 819.0], [34.0, 823.0], [34.1, 826.0], [34.2, 830.0], [34.3, 832.0], [34.4, 834.0], [34.5, 838.0], [34.6, 841.0], [34.7, 848.0], [34.8, 850.0], [34.9, 855.0], [35.0, 857.0], [35.1, 860.0], [35.2, 866.0], [35.3, 868.0], [35.4, 872.0], [35.5, 875.0], [35.6, 881.0], [35.7, 884.0], [35.8, 894.0], [35.9, 897.0], [36.0, 900.0], [36.1, 904.0], [36.2, 907.0], [36.3, 911.0], [36.4, 917.0], [36.5, 924.0], [36.6, 925.0], [36.7, 932.0], [36.8, 940.0], [36.9, 947.0], [37.0, 951.0], [37.1, 957.0], [37.2, 962.0], [37.3, 965.0], [37.4, 972.0], [37.5, 975.0], [37.6, 983.0], [37.7, 990.0], [37.8, 996.0], [37.9, 1003.0], [38.0, 1014.0], [38.1, 1021.0], [38.2, 1025.0], [38.3, 1029.0], [38.4, 1034.0], [38.5, 1039.0], [38.6, 1044.0], [38.7, 1053.0], [38.8, 1059.0], [38.9, 1063.0], [39.0, 1068.0], [39.1, 1075.0], [39.2, 1079.0], [39.3, 1083.0], [39.4, 1087.0], [39.5, 1092.0], [39.6, 1098.0], [39.7, 1099.0], [39.8, 1108.0], [39.9, 1113.0], [40.0, 1118.0], [40.1, 1121.0], [40.2, 1133.0], [40.3, 1135.0], [40.4, 1147.0], [40.5, 1150.0], [40.6, 1153.0], [40.7, 1159.0], [40.8, 1164.0], [40.9, 1167.0], [41.0, 1176.0], [41.1, 1179.0], [41.2, 1188.0], [41.3, 1192.0], [41.4, 1204.0], [41.5, 1210.0], [41.6, 1212.0], [41.7, 1222.0], [41.8, 1225.0], [41.9, 1228.0], [42.0, 1235.0], [42.1, 1242.0], [42.2, 1249.0], [42.3, 1251.0], [42.4, 1259.0], [42.5, 1266.0], [42.6, 1268.0], [42.7, 1271.0], [42.8, 1275.0], [42.9, 1279.0], [43.0, 1281.0], [43.1, 1285.0], [43.2, 1291.0], [43.3, 1300.0], [43.4, 1304.0], [43.5, 1308.0], [43.6, 1318.0], [43.7, 1323.0], [43.8, 1327.0], [43.9, 1329.0], [44.0, 1331.0], [44.1, 1335.0], [44.2, 1340.0], [44.3, 1350.0], [44.4, 1356.0], [44.5, 1358.0], [44.6, 1365.0], [44.7, 1369.0], [44.8, 1374.0], [44.9, 1379.0], [45.0, 1385.0], [45.1, 1395.0], [45.2, 1397.0], [45.3, 1402.0], [45.4, 1411.0], [45.5, 1413.0], [45.6, 1416.0], [45.7, 1421.0], [45.8, 1428.0], [45.9, 1432.0], [46.0, 1438.0], [46.1, 1442.0], [46.2, 1446.0], [46.3, 1452.0], [46.4, 1455.0], [46.5, 1458.0], [46.6, 1461.0], [46.7, 1464.0], [46.8, 1467.0], [46.9, 1470.0], [47.0, 1477.0], [47.1, 1481.0], [47.2, 1485.0], [47.3, 1492.0], [47.4, 1495.0], [47.5, 1500.0], [47.6, 1504.0], [47.7, 1506.0], [47.8, 1509.0], [47.9, 1516.0], [48.0, 1523.0], [48.1, 1530.0], [48.2, 1534.0], [48.3, 1535.0], [48.4, 1543.0], [48.5, 1545.0], [48.6, 1550.0], [48.7, 1556.0], [48.8, 1562.0], [48.9, 1572.0], [49.0, 1577.0], [49.1, 1580.0], [49.2, 1589.0], [49.3, 1593.0], [49.4, 1597.0], [49.5, 1601.0], [49.6, 1603.0], [49.7, 1606.0], [49.8, 1610.0], [49.9, 1614.0], [50.0, 1619.0], [50.1, 1625.0], [50.2, 1630.0], [50.3, 1635.0], [50.4, 1640.0], [50.5, 1644.0], [50.6, 1651.0], [50.7, 1656.0], [50.8, 1660.0], [50.9, 1663.0], [51.0, 1667.0], [51.1, 1671.0], [51.2, 1679.0], [51.3, 1683.0], [51.4, 1690.0], [51.5, 1693.0], [51.6, 1698.0], [51.7, 1706.0], [51.8, 1710.0], [51.9, 1713.0], [52.0, 1717.0], [52.1, 1720.0], [52.2, 1726.0], [52.3, 1729.0], [52.4, 1731.0], [52.5, 1738.0], [52.6, 1740.0], [52.7, 1741.0], [52.8, 1743.0], [52.9, 1752.0], [53.0, 1757.0], [53.1, 1762.0], [53.2, 1768.0], [53.3, 1773.0], [53.4, 1774.0], [53.5, 1780.0], [53.6, 1784.0], [53.7, 1787.0], [53.8, 1789.0], [53.9, 1795.0], [54.0, 1798.0], [54.1, 1800.0], [54.2, 1809.0], [54.3, 1812.0], [54.4, 1813.0], [54.5, 1815.0], [54.6, 1820.0], [54.7, 1823.0], [54.8, 1825.0], [54.9, 1832.0], [55.0, 1834.0], [55.1, 1838.0], [55.2, 1842.0], [55.3, 1844.0], [55.4, 1848.0], [55.5, 1852.0], [55.6, 1857.0], [55.7, 1859.0], [55.8, 1863.0], [55.9, 1865.0], [56.0, 1867.0], [56.1, 1870.0], [56.2, 1875.0], [56.3, 1878.0], [56.4, 1881.0], [56.5, 1884.0], [56.6, 1886.0], [56.7, 1888.0], [56.8, 1895.0], [56.9, 1899.0], [57.0, 1903.0], [57.1, 1905.0], [57.2, 1907.0], [57.3, 1910.0], [57.4, 1915.0], [57.5, 1919.0], [57.6, 1923.0], [57.7, 1925.0], [57.8, 1930.0], [57.9, 1933.0], [58.0, 1937.0], [58.1, 1939.0], [58.2, 1944.0], [58.3, 1949.0], [58.4, 1950.0], [58.5, 1952.0], [58.6, 1955.0], [58.7, 1957.0], [58.8, 1960.0], [58.9, 1961.0], [59.0, 1963.0], [59.1, 1968.0], [59.2, 1969.0], [59.3, 1973.0], [59.4, 1976.0], [59.5, 1979.0], [59.6, 1982.0], [59.7, 1983.0], [59.8, 1988.0], [59.9, 1994.0], [60.0, 1995.0], [60.1, 2001.0], [60.2, 2008.0], [60.3, 2016.0], [60.4, 2017.0], [60.5, 2023.0], [60.6, 2026.0], [60.7, 2029.0], [60.8, 2035.0], [60.9, 2039.0], [61.0, 2043.0], [61.1, 2045.0], [61.2, 2047.0], [61.3, 2050.0], [61.4, 2053.0], [61.5, 2064.0], [61.6, 2068.0], [61.7, 2073.0], [61.8, 2075.0], [61.9, 2080.0], [62.0, 2083.0], [62.1, 2084.0], [62.2, 2088.0], [62.3, 2090.0], [62.4, 2092.0], [62.5, 2096.0], [62.6, 2101.0], [62.7, 2104.0], [62.8, 2108.0], [62.9, 2112.0], [63.0, 2118.0], [63.1, 2122.0], [63.2, 2126.0], [63.3, 2129.0], [63.4, 2132.0], [63.5, 2134.0], [63.6, 2139.0], [63.7, 2142.0], [63.8, 2147.0], [63.9, 2153.0], [64.0, 2156.0], [64.1, 2162.0], [64.2, 2166.0], [64.3, 2171.0], [64.4, 2173.0], [64.5, 2181.0], [64.6, 2185.0], [64.7, 2194.0], [64.8, 2199.0], [64.9, 2201.0], [65.0, 2203.0], [65.1, 2209.0], [65.2, 2211.0], [65.3, 2217.0], [65.4, 2221.0], [65.5, 2223.0], [65.6, 2226.0], [65.7, 2230.0], [65.8, 2233.0], [65.9, 2237.0], [66.0, 2243.0], [66.1, 2245.0], [66.2, 2247.0], [66.3, 2254.0], [66.4, 2259.0], [66.5, 2264.0], [66.6, 2270.0], [66.7, 2273.0], [66.8, 2276.0], [66.9, 2278.0], [67.0, 2287.0], [67.1, 2293.0], [67.2, 2296.0], [67.3, 2302.0], [67.4, 2306.0], [67.5, 2309.0], [67.6, 2312.0], [67.7, 2316.0], [67.8, 2318.0], [67.9, 2321.0], [68.0, 2323.0], [68.1, 2326.0], [68.2, 2328.0], [68.3, 2331.0], [68.4, 2333.0], [68.5, 2337.0], [68.6, 2339.0], [68.7, 2340.0], [68.8, 2342.0], [68.9, 2345.0], [69.0, 2351.0], [69.1, 2354.0], [69.2, 2359.0], [69.3, 2364.0], [69.4, 2367.0], [69.5, 2373.0], [69.6, 2375.0], [69.7, 2379.0], [69.8, 2381.0], [69.9, 2384.0], [70.0, 2392.0], [70.1, 2399.0], [70.2, 2404.0], [70.3, 2411.0], [70.4, 2416.0], [70.5, 2422.0], [70.6, 2428.0], [70.7, 2432.0], [70.8, 2441.0], [70.9, 2445.0], [71.0, 2447.0], [71.1, 2450.0], [71.2, 2456.0], [71.3, 2463.0], [71.4, 2474.0], [71.5, 2476.0], [71.6, 2480.0], [71.7, 2483.0], [71.8, 2487.0], [71.9, 2492.0], [72.0, 2500.0], [72.1, 2503.0], [72.2, 2515.0], [72.3, 2524.0], [72.4, 2529.0], [72.5, 2533.0], [72.6, 2541.0], [72.7, 2548.0], [72.8, 2558.0], [72.9, 2562.0], [73.0, 2568.0], [73.1, 2575.0], [73.2, 2580.0], [73.3, 2586.0], [73.4, 2590.0], [73.5, 2600.0], [73.6, 2605.0], [73.7, 2609.0], [73.8, 2613.0], [73.9, 2616.0], [74.0, 2626.0], [74.1, 2630.0], [74.2, 2632.0], [74.3, 2637.0], [74.4, 2642.0], [74.5, 2645.0], [74.6, 2652.0], [74.7, 2655.0], [74.8, 2659.0], [74.9, 2663.0], [75.0, 2667.0], [75.1, 2670.0], [75.2, 2672.0], [75.3, 2677.0], [75.4, 2679.0], [75.5, 2691.0], [75.6, 2695.0], [75.7, 2698.0], [75.8, 2701.0], [75.9, 2706.0], [76.0, 2712.0], [76.1, 2718.0], [76.2, 2719.0], [76.3, 2726.0], [76.4, 2734.0], [76.5, 2742.0], [76.6, 2750.0], [76.7, 2754.0], [76.8, 2761.0], [76.9, 2771.0], [77.0, 2775.0], [77.1, 2780.0], [77.2, 2786.0], [77.3, 2792.0], [77.4, 2796.0], [77.5, 2803.0], [77.6, 2810.0], [77.7, 2814.0], [77.8, 2817.0], [77.9, 2823.0], [78.0, 2826.0], [78.1, 2830.0], [78.2, 2837.0], [78.3, 2844.0], [78.4, 2848.0], [78.5, 2851.0], [78.6, 2860.0], [78.7, 2865.0], [78.8, 2869.0], [78.9, 2877.0], [79.0, 2882.0], [79.1, 2887.0], [79.2, 2894.0], [79.3, 2905.0], [79.4, 2909.0], [79.5, 2912.0], [79.6, 2923.0], [79.7, 2929.0], [79.8, 2937.0], [79.9, 2944.0], [80.0, 2952.0], [80.1, 2956.0], [80.2, 2965.0], [80.3, 2972.0], [80.4, 2984.0], [80.5, 2994.0], [80.6, 3001.0], [80.7, 3005.0], [80.8, 3011.0], [80.9, 3025.0], [81.0, 3035.0], [81.1, 3047.0], [81.2, 3052.0], [81.3, 3064.0], [81.4, 3070.0], [81.5, 3085.0], [81.6, 3099.0], [81.7, 3108.0], [81.8, 3116.0], [81.9, 3125.0], [82.0, 3136.0], [82.1, 3150.0], [82.2, 3158.0], [82.3, 3182.0], [82.4, 3190.0], [82.5, 3207.0], [82.6, 3216.0], [82.7, 3224.0], [82.8, 3236.0], [82.9, 3245.0], [83.0, 3262.0], [83.1, 3273.0], [83.2, 3287.0], [83.3, 3294.0], [83.4, 3312.0], [83.5, 3326.0], [83.6, 3335.0], [83.7, 3351.0], [83.8, 3361.0], [83.9, 3369.0], [84.0, 3391.0], [84.1, 3407.0], [84.2, 3416.0], [84.3, 3427.0], [84.4, 3445.0], [84.5, 3466.0], [84.6, 3478.0], [84.7, 3492.0], [84.8, 3499.0], [84.9, 3516.0], [85.0, 3529.0], [85.1, 3551.0], [85.2, 3572.0], [85.3, 3580.0], [85.4, 3600.0], [85.5, 3608.0], [85.6, 3624.0], [85.7, 3637.0], [85.8, 3649.0], [85.9, 3660.0], [86.0, 3667.0], [86.1, 3672.0], [86.2, 3682.0], [86.3, 3692.0], [86.4, 3695.0], [86.5, 3708.0], [86.6, 3718.0], [86.7, 3732.0], [86.8, 3742.0], [86.9, 3749.0], [87.0, 3766.0], [87.1, 3780.0], [87.2, 3784.0], [87.3, 3796.0], [87.4, 3808.0], [87.5, 3817.0], [87.6, 3823.0], [87.7, 3836.0], [87.8, 3848.0], [87.9, 3865.0], [88.0, 3871.0], [88.1, 3881.0], [88.2, 3893.0], [88.3, 3899.0], [88.4, 3912.0], [88.5, 3920.0], [88.6, 3940.0], [88.7, 3946.0], [88.8, 3959.0], [88.9, 3967.0], [89.0, 3980.0], [89.1, 3988.0], [89.2, 4007.0], [89.3, 4016.0], [89.4, 4028.0], [89.5, 4040.0], [89.6, 4050.0], [89.7, 4067.0], [89.8, 4075.0], [89.9, 4081.0], [90.0, 4095.0], [90.1, 4116.0], [90.2, 4124.0], [90.3, 4133.0], [90.4, 4148.0], [90.5, 4154.0], [90.6, 4168.0], [90.7, 4177.0], [90.8, 4185.0], [90.9, 4199.0], [91.0, 4205.0], [91.1, 4213.0], [91.2, 4221.0], [91.3, 4231.0], [91.4, 4238.0], [91.5, 4261.0], [91.6, 4275.0], [91.7, 4290.0], [91.8, 4304.0], [91.9, 4310.0], [92.0, 4325.0], [92.1, 4336.0], [92.2, 4353.0], [92.3, 4367.0], [92.4, 4375.0], [92.5, 4381.0], [92.6, 4393.0], [92.7, 4403.0], [92.8, 4408.0], [92.9, 4424.0], [93.0, 4439.0], [93.1, 4451.0], [93.2, 4465.0], [93.3, 4483.0], [93.4, 4489.0], [93.5, 4491.0], [93.6, 4512.0], [93.7, 4513.0], [93.8, 4528.0], [93.9, 4541.0], [94.0, 4563.0], [94.1, 4594.0], [94.2, 4599.0], [94.3, 4621.0], [94.4, 4631.0], [94.5, 4647.0], [94.6, 4652.0], [94.7, 4679.0], [94.8, 4691.0], [94.9, 4698.0], [95.0, 4710.0], [95.1, 4724.0], [95.2, 4728.0], [95.3, 4736.0], [95.4, 4749.0], [95.5, 4761.0], [95.6, 4774.0], [95.7, 4788.0], [95.8, 4800.0], [95.9, 4813.0], [96.0, 4838.0], [96.1, 4865.0], [96.2, 4891.0], [96.3, 4899.0], [96.4, 4952.0], [96.5, 4987.0], [96.6, 5021.0], [96.7, 5041.0], [96.8, 5059.0], [96.9, 5070.0], [97.0, 5098.0], [97.1, 5129.0], [97.2, 5151.0], [97.3, 5187.0], [97.4, 5203.0], [97.5, 5232.0], [97.6, 5245.0], [97.7, 5275.0], [97.8, 5317.0], [97.9, 5353.0], [98.0, 5374.0], [98.1, 5410.0], [98.2, 5446.0], [98.3, 5485.0], [98.4, 5506.0], [98.5, 5691.0], [98.6, 5777.0], [98.7, 5849.0], [98.8, 5879.0], [98.9, 5971.0], [99.0, 6067.0], [99.1, 6154.0], [99.2, 6271.0], [99.3, 6322.0], [99.4, 6550.0], [99.5, 6980.0], [99.6, 8319.0], [99.7, 11830.0], [99.8, 19419.0], [99.9, 26158.0], [100.0, 29222.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 364.0, "series": [{"data": [[0.0, 169.0], [600.0, 143.0], [700.0, 190.0], [800.0, 141.0], [900.0, 93.0], [1000.0, 91.0], [1100.0, 80.0], [1200.0, 97.0], [1300.0, 97.0], [1400.0, 110.0], [1500.0, 99.0], [1600.0, 105.0], [1700.0, 120.0], [1800.0, 144.0], [1900.0, 154.0], [2000.0, 123.0], [2100.0, 113.0], [2200.0, 118.0], [2300.0, 141.0], [2400.0, 93.0], [2500.0, 72.0], [2600.0, 115.0], [2800.0, 89.0], [2700.0, 82.0], [2900.0, 67.0], [3000.0, 50.0], [3100.0, 43.0], [3300.0, 36.0], [3200.0, 42.0], [3400.0, 37.0], [3500.0, 29.0], [3600.0, 51.0], [3700.0, 44.0], [3800.0, 49.0], [3900.0, 42.0], [4000.0, 42.0], [4200.0, 42.0], [4100.0, 45.0], [4300.0, 43.0], [4600.0, 36.0], [4400.0, 45.0], [4500.0, 32.0], [4700.0, 42.0], [4800.0, 26.0], [5000.0, 24.0], [4900.0, 10.0], [5100.0, 18.0], [5300.0, 15.0], [5200.0, 21.0], [5400.0, 15.0], [5500.0, 4.0], [5600.0, 1.0], [5700.0, 7.0], [5800.0, 9.0], [5900.0, 4.0], [6000.0, 8.0], [6100.0, 3.0], [6200.0, 6.0], [6300.0, 4.0], [6400.0, 2.0], [6500.0, 3.0], [6700.0, 2.0], [6900.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7600.0, 2.0], [7800.0, 1.0], [8400.0, 1.0], [8300.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9300.0, 1.0], [11800.0, 1.0], [13000.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [16000.0, 1.0], [19400.0, 1.0], [19500.0, 1.0], [21500.0, 1.0], [22000.0, 1.0], [22600.0, 1.0], [26100.0, 1.0], [26600.0, 1.0], [100.0, 364.0], [28600.0, 1.0], [29100.0, 1.0], [29200.0, 1.0], [200.0, 203.0], [300.0, 250.0], [400.0, 179.0], [500.0, 137.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1166.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2590.0, "series": [{"data": [[0.0, 1166.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1181.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2590.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.62775698E12, "maxY": 709.3654822335025, "series": [{"data": [[1.62775705E12, 709.3654822335025], [1.62775704E12, 620.9928514694202], [1.62775699E12, 14.0], [1.62775698E12, 19.0], [1.62775701E12, 26.824879227053163], [1.627757E12, 7.0], [1.62775703E12, 339.81104199066885], [1.62775702E12, 135.08239375542058]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775705E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.0, "minX": 2.0, "maxY": 26617.0, "series": [{"data": [[2.0, 2959.45], [3.0, 14358.0], [4.0, 26617.0], [5.0, 13118.5], [6.0, 22633.0], [7.0, 22078.0], [8.0, 377.36363636363643], [9.0, 971.9545454545454], [10.0, 19533.0], [11.0, 16046.0], [12.0, 15551.0], [13.0, 280.06451612903226], [14.0, 6572.5], [15.0, 5961.0], [16.0, 9351.0], [17.0, 9006.0], [18.0, 223.75000000000003], [19.0, 4465.0], [20.0, 2201.5], [22.0, 161.66666666666666], [23.0, 190.14655172413788], [24.0, 210.4], [25.0, 192.66666666666666], [26.0, 191.66666666666669], [27.0, 217.0], [29.0, 239.08771929824564], [30.0, 264.8333333333333], [31.0, 302.0], [32.0, 208.5], [33.0, 241.0], [34.0, 230.0], [35.0, 235.5], [36.0, 248.66666666666666], [37.0, 274.0], [38.0, 257.6], [39.0, 263.5], [40.0, 301.75], [41.0, 292.0], [42.0, 319.3333333333333], [43.0, 298.3333333333333], [44.0, 295.0], [45.0, 343.0], [46.0, 380.5702479338844], [47.0, 342.2], [48.0, 356.5], [49.0, 355.4444444444445], [50.0, 360.00000000000006], [51.0, 370.0], [52.0, 386.0], [53.0, 376.3333333333333], [54.0, 378.6666666666667], [55.0, 388.75], [56.0, 383.66666666666663], [57.0, 398.6190476190476], [58.0, 408.37600000000003], [60.0, 576.25], [88.0, 673.8333333333334], [89.0, 830.2857142857143], [90.0, 519.25], [91.0, 611.0], [94.0, 660.375], [95.0, 759.75], [93.0, 658.75], [92.0, 614.0], [96.0, 773.2], [97.0, 765.4166666666666], [98.0, 817.0], [99.0, 741.1818181818181], [100.0, 669.6363636363637], [101.0, 729.0588235294118], [102.0, 786.7142857142857], [103.0, 570.8461538461539], [109.0, 405.3333333333333], [110.0, 585.0], [111.0, 688.8], [112.0, 730.75], [113.0, 855.5], [114.0, 1001.25], [115.0, 780.8571428571428], [116.0, 894.0909090909091], [117.0, 961.8181818181818], [118.0, 877.6250000000001], [119.0, 779.7500000000001], [120.0, 786.0526315789473], [121.0, 920.2307692307693], [123.0, 914.16], [139.0, 629.0], [140.0, 841.0], [141.0, 840.2857142857143], [142.0, 735.0], [144.0, 858.5], [147.0, 881.75], [148.0, 878.25], [149.0, 1053.083333333333], [150.0, 789.0], [151.0, 1120.4230769230771], [152.0, 1016.087719298245], [153.0, 1027.4750000000001], [154.0, 656.5], [155.0, 501.2], [156.0, 370.4642857142856], [157.0, 418.5], [158.0, 555.0], [160.0, 430.0], [161.0, 450.0], [162.0, 636.1666666666666], [163.0, 460.6666666666667], [164.0, 449.52631578947364], [165.0, 466.26666666666665], [166.0, 530.2857142857142], [167.0, 487.3333333333333], [168.0, 462.3333333333333], [169.0, 488.0], [170.0, 469.3333333333333], [171.0, 482.14285714285717], [172.0, 485.2962962962963], [173.0, 2503.8636363636365], [174.0, 1564.25], [177.0, 413.0], [182.0, 670.0], [183.0, 1784.5714285714287], [184.0, 2429.166666666667], [185.0, 1455.3999999999999], [186.0, 2386.3846153846152], [187.0, 1890.0], [188.0, 1149.0], [189.0, 1394.6], [190.0, 1714.1904761904761], [191.0, 1567.7659574468082], [204.0, 1187.0], [206.0, 745.0], [207.0, 1978.9999999999998], [208.0, 1773.0], [218.0, 1673.0], [232.0, 3499.0], [248.0, 3434.25], [249.0, 2527.0], [250.0, 2159.0], [251.0, 1850.6666666666667], [254.0, 1711.0], [255.0, 1949.2142857142849], [256.0, 1955.0624999999998], [257.0, 1937.4444444444443], [258.0, 1913.3409090909104], [259.0, 2193.3333333333335], [260.0, 3047.0], [296.0, 1678.076923076923], [295.0, 1612.0], [297.0, 2376.3999999999983], [298.0, 2242.4366197183103], [302.0, 1669.9393939393938], [303.0, 2070.88], [299.0, 1958.8750000000002], [301.0, 1147.25], [300.0, 1409.7142857142856], [304.0, 1778.057142857143], [318.0, 1593.0], [319.0, 1465.0], [332.0, 1474.0], [327.0, 1608.5], [320.0, 1413.0], [326.0, 1424.0], [328.0, 1687.0], [329.0, 2025.313253012048], [330.0, 2120.5882352941176], [331.0, 2432.6923076923076], [333.0, 1588.6666666666667], [334.0, 1606.2142857142856], [337.0, 722.0], [344.0, 1262.0], [345.0, 2238.833333333333], [346.0, 1860.6956521739132], [347.0, 2096.0], [354.0, 2052.5], [355.0, 1562.0], [357.0, 1739.0], [358.0, 1743.0], [359.0, 2042.0], [364.0, 1981.0], [365.0, 1853.5], [367.0, 1593.0], [369.0, 1633.0], [371.0, 1692.3333333333333], [373.0, 1800.2222222222222], [374.0, 1881.0], [376.0, 1575.0], [379.0, 1895.0], [380.0, 1595.0], [381.0, 2047.0], [384.0, 2321.0], [385.0, 2321.0], [387.0, 2810.0], [392.0, 1713.0], [395.0, 3122.0], [396.0, 1854.0], [417.0, 902.0], [424.0, 1599.0], [428.0, 2970.0], [429.0, 3214.5], [436.0, 3125.0], [440.0, 1960.0], [442.0, 2314.0], [476.0, 3145.0], [540.0, 2429.676258992806], [541.0, 2432.0], [542.0, 1371.6666666666667], [543.0, 2702.8125000000005], [544.0, 1063.2739726027403], [549.0, 2905.0], [554.0, 1467.5], [560.0, 1794.0], [562.0, 1662.0], [566.0, 1700.4999999999998], [570.0, 2113.75], [574.0, 2904.1190476190477], [589.0, 3591.125], [584.0, 2533.0], [587.0, 4122.1241830065355], [588.0, 2922.272727272727], [590.0, 4441.199288256226], [591.0, 4098.163934426229], [592.0, 4303.0], [602.0, 5010.0], [600.0, 4898.0], [601.0, 5751.666666666667], [612.0, 3174.5], [613.0, 1545.6666666666667], [616.0, 1308.0], [618.0, 1553.5], [619.0, 1505.0], [620.0, 1754.0], [621.0, 4987.0], [633.0, 2990.666666666667], [635.0, 2635.9637681159425], [685.0, 1291.7333333333333], [677.0, 3433.6666666666665], [678.0, 3420.412820512822], [679.0, 4946.0], [696.0, 319.6666666666667], [697.0, 203.0], [699.0, 136.0], [700.0, 113.0], [702.0, 89.0], [688.0, 574.6666666666666], [689.0, 664.7499999999999], [692.0, 364.66666666666663], [693.0, 610.2352941176471], [694.0, 351.22222222222223], [695.0, 242.0], [682.0, 4472.0], [683.0, 2372.723809523811], [684.0, 1734.608695652174], [686.0, 837.5], [687.0, 733.0], [706.0, 39.0], [740.0, 38.0], [743.0, 67.0], [746.0, 40.0], [747.0, 21.0], [757.0, 60.0], [760.0, 53.0], [762.0, 41.0], [763.0, 32.0], [793.0, 63.0], [774.0, 30.0], [781.0, 28.0], [783.0, 68.0], [796.0, 66.5], [797.0, 100.0], [785.0, 22.0], [784.0, 32.0], [787.0, 91.0], [786.0, 134.0], [789.0, 130.0], [788.0, 132.0], [795.0, 120.0], [794.0, 117.0], [791.0, 137.0], [790.0, 106.0], [827.0, 35.333333333333336], [800.0, 51.25], [805.0, 24.5], [804.0, 17.0], [803.0, 18.0], [802.0, 19.0], [801.0, 828.0], [806.0, 16.0], [824.0, 18.0], [807.0, 16.0], [826.0, 17.0], [825.0, 18.0], [814.0, 33.0], [813.0, 25.0], [812.0, 29.0], [811.0, 21.0], [810.0, 20.0], [809.0, 17.0], [808.0, 18.0], [815.0, 26.0], [816.0, 30.0], [820.0, 25.5], [819.0, 17.0], [818.0, 18.0], [817.0, 17.0], [821.0, 19.0], [823.0, 17.0], [822.0, 17.0], [830.0, 22.5], [831.0, 18.0], [829.0, 17.0], [828.0, 17.0], [832.0, 22.5], [835.0, 22.5], [834.0, 17.0], [833.0, 17.0]], "isOverall": false, "label": "Press Release", "isController": false}, {"data": [[337.7010330160024, 1881.0921612315155]], "isOverall": false, "label": "Press Release-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 835.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 49.5, "minX": 1.62775698E12, "maxY": 5366349.4, "series": [{"data": [[1.62775705E12, 1644122.6], [1.62775704E12, 5253681.1], [1.62775699E12, 29220.2], [1.62775698E12, 12524.0], [1.62775701E12, 3455063.9], [1.627757E12, 29218.5], [1.62775703E12, 5366349.4], [1.62775702E12, 4811332.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62775705E12, 6501.0], [1.62775704E12, 20773.5], [1.62775699E12, 115.5], [1.62775698E12, 49.5], [1.62775701E12, 13662.0], [1.627757E12, 115.5], [1.62775703E12, 21219.0], [1.62775702E12, 19024.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775705E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 322.5652173913042, "minX": 1.62775698E12, "maxY": 22564.428571428572, "series": [{"data": [[1.62775705E12, 1552.0507614213209], [1.62775704E12, 3441.0460683081856], [1.62775699E12, 12851.571428571428], [1.62775698E12, 8519.0], [1.62775701E12, 322.5652173913042], [1.627757E12, 22564.428571428572], [1.62775703E12, 2103.6057542768262], [1.62775702E12, 951.7580225498697]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775705E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 318.70893719806764, "minX": 1.62775698E12, "maxY": 22519.428571428572, "series": [{"data": [[1.62775705E12, 1545.3984771573614], [1.62775704E12, 3401.876886417794], [1.62775699E12, 12751.714285714286], [1.62775698E12, 8300.333333333334], [1.62775701E12, 318.70893719806764], [1.627757E12, 22519.428571428572], [1.62775703E12, 2059.4486780715392], [1.62775702E12, 913.0745880312242]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775705E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 73.71428571428571, "minX": 1.62775698E12, "maxY": 3293.501985702939, "series": [{"data": [[1.62775705E12, 1507.6446700507588], [1.62775704E12, 3293.501985702939], [1.62775699E12, 73.71428571428571], [1.62775698E12, 194.66666666666669], [1.62775701E12, 204.88043478260872], [1.627757E12, 94.14285714285714], [1.62775703E12, 2004.2169517884938], [1.62775702E12, 850.0589765828261]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775705E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.62775698E12, "maxY": 29222.0, "series": [{"data": [[1.62775705E12, 5151.0], [1.62775704E12, 7804.0], [1.62775699E12, 16046.0], [1.62775698E12, 8813.0], [1.62775701E12, 29222.0], [1.627757E12, 26617.0], [1.62775703E12, 4637.0], [1.62775702E12, 3946.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62775705E12, 16.0], [1.62775704E12, 184.0], [1.62775699E12, 9006.0], [1.62775698E12, 8319.0], [1.62775701E12, 25.0], [1.627757E12, 19419.0], [1.62775703E12, 549.0], [1.62775702E12, 235.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62775705E12, 3684.0], [1.62775704E12, 5107.0], [1.62775699E12, 16046.0], [1.62775698E12, 8813.0], [1.62775701E12, 375.0], [1.627757E12, 26617.0], [1.62775703E12, 2920.8999999999996], [1.62775702E12, 1683.2000000000023]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62775705E12, 4951.550000000001], [1.62775704E12, 6437.000000000002], [1.62775699E12, 16046.0], [1.62775698E12, 8813.0], [1.62775701E12, 530.1300000000001], [1.627757E12, 26617.0], [1.62775703E12, 3532.1499999999933], [1.62775702E12, 2954.760000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62775705E12, 4484.0], [1.62775704E12, 5489.0], [1.62775699E12, 16046.0], [1.62775698E12, 8813.0], [1.62775701E12, 417.0999999999999], [1.627757E12, 26617.0], [1.62775703E12, 3130.8499999999985], [1.62775702E12, 2645.2999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775705E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18.0, "minX": 1.0, "maxY": 15338.0, "series": [{"data": [[2.0, 15338.0], [34.0, 18.0], [3.0, 91.0], [53.0, 91.0], [57.0, 631.0], [4.0, 14351.5], [72.0, 1823.5], [79.0, 1322.0], [83.0, 1948.0], [89.0, 97.0], [88.0, 2105.0], [97.0, 669.0], [6.0, 5546.0], [104.0, 1912.5], [109.0, 127.0], [110.0, 178.0], [108.0, 320.0], [114.0, 1653.5], [118.0, 236.0], [119.0, 739.0], [121.0, 863.0], [120.0, 1032.5], [122.0, 818.0], [127.0, 371.0], [124.0, 398.0], [128.0, 1406.0], [134.0, 1855.5], [141.0, 1925.0], [138.0, 2488.0], [143.0, 2679.0], [146.0, 486.5], [149.0, 2173.0], [160.0, 4305.5], [11.0, 2718.0], [196.0, 2540.0], [197.0, 965.0], [205.0, 2140.0], [15.0, 112.0], [1.0, 13052.0], [359.0, 4229.0], [24.0, 2932.5], [393.0, 3411.0], [28.0, 2672.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 393.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.5, "minX": 1.0, "maxY": 15278.5, "series": [{"data": [[2.0, 15278.5], [34.0, 16.5], [3.0, 90.0], [53.0, 86.0], [57.0, 617.0], [4.0, 14332.5], [72.0, 1364.5], [79.0, 1321.0], [83.0, 1794.0], [89.0, 93.0], [88.0, 1892.5], [97.0, 664.0], [6.0, 5258.0], [104.0, 1825.5], [109.0, 124.0], [110.0, 175.0], [108.0, 319.0], [114.0, 1550.5], [118.0, 231.5], [119.0, 732.0], [121.0, 854.0], [120.0, 1018.5], [122.0, 797.5], [127.0, 368.0], [124.0, 397.0], [128.0, 1321.0], [134.0, 1768.0], [141.0, 1910.0], [138.0, 2462.5], [143.0, 2654.0], [146.0, 476.5], [149.0, 2153.0], [160.0, 4299.0], [11.0, 2712.0], [196.0, 2530.5], [197.0, 956.0], [205.0, 2121.0], [15.0, 111.0], [1.0, 12992.0], [359.0, 4220.0], [24.0, 2886.0], [393.0, 3410.0], [28.0, 2526.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 393.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.62775697E12, "maxY": 136.0, "series": [{"data": [[1.62775705E12, 16.9], [1.62775704E12, 123.8], [1.62775697E12, 0.2], [1.62775698E12, 1.8], [1.62775701E12, 87.3], [1.62775703E12, 127.7], [1.62775702E12, 136.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775705E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62775698E12, "maxY": 128.6, "series": [{"data": [[1.62775705E12, 39.4], [1.62775704E12, 125.9], [1.62775699E12, 0.7], [1.62775698E12, 0.3], [1.62775701E12, 82.8], [1.627757E12, 0.7], [1.62775703E12, 128.6], [1.62775702E12, 115.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775705E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62775698E12, "maxY": 128.6, "series": [{"data": [[1.62775705E12, 39.4], [1.62775704E12, 125.9], [1.62775699E12, 0.7], [1.62775698E12, 0.3], [1.62775701E12, 82.8], [1.627757E12, 0.7], [1.62775703E12, 128.6], [1.62775702E12, 115.3]], "isOverall": false, "label": "Press Release-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775705E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62775698E12, "maxY": 128.6, "series": [{"data": [[1.62775705E12, 39.4], [1.62775704E12, 125.9], [1.62775699E12, 0.7], [1.62775698E12, 0.3], [1.62775701E12, 82.8], [1.627757E12, 0.7], [1.62775703E12, 128.6], [1.62775702E12, 115.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775705E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

