/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 18148.0, "series": [{"data": [[0.0, 35.0], [0.1, 41.0], [0.2, 46.0], [0.3, 47.0], [0.4, 48.0], [0.5, 49.0], [0.6, 50.0], [0.7, 50.0], [0.8, 51.0], [0.9, 51.0], [1.0, 52.0], [1.1, 53.0], [1.2, 54.0], [1.3, 54.0], [1.4, 55.0], [1.5, 56.0], [1.6, 56.0], [1.7, 57.0], [1.8, 57.0], [1.9, 58.0], [2.0, 59.0], [2.1, 59.0], [2.2, 60.0], [2.3, 60.0], [2.4, 61.0], [2.5, 61.0], [2.6, 62.0], [2.7, 63.0], [2.8, 64.0], [2.9, 64.0], [3.0, 64.0], [3.1, 64.0], [3.2, 65.0], [3.3, 65.0], [3.4, 66.0], [3.5, 66.0], [3.6, 67.0], [3.7, 68.0], [3.8, 68.0], [3.9, 69.0], [4.0, 69.0], [4.1, 70.0], [4.2, 71.0], [4.3, 71.0], [4.4, 72.0], [4.5, 72.0], [4.6, 73.0], [4.7, 74.0], [4.8, 74.0], [4.9, 75.0], [5.0, 75.0], [5.1, 75.0], [5.2, 76.0], [5.3, 76.0], [5.4, 77.0], [5.5, 77.0], [5.6, 78.0], [5.7, 78.0], [5.8, 78.0], [5.9, 79.0], [6.0, 79.0], [6.1, 80.0], [6.2, 80.0], [6.3, 80.0], [6.4, 81.0], [6.5, 81.0], [6.6, 81.0], [6.7, 82.0], [6.8, 82.0], [6.9, 82.0], [7.0, 83.0], [7.1, 83.0], [7.2, 83.0], [7.3, 84.0], [7.4, 84.0], [7.5, 84.0], [7.6, 85.0], [7.7, 85.0], [7.8, 86.0], [7.9, 86.0], [8.0, 86.0], [8.1, 87.0], [8.2, 87.0], [8.3, 87.0], [8.4, 88.0], [8.5, 88.0], [8.6, 88.0], [8.7, 88.0], [8.8, 89.0], [8.9, 89.0], [9.0, 89.0], [9.1, 89.0], [9.2, 90.0], [9.3, 90.0], [9.4, 90.0], [9.5, 90.0], [9.6, 91.0], [9.7, 91.0], [9.8, 91.0], [9.9, 92.0], [10.0, 92.0], [10.1, 92.0], [10.2, 92.0], [10.3, 93.0], [10.4, 93.0], [10.5, 93.0], [10.6, 93.0], [10.7, 94.0], [10.8, 94.0], [10.9, 94.0], [11.0, 94.0], [11.1, 95.0], [11.2, 95.0], [11.3, 95.0], [11.4, 96.0], [11.5, 96.0], [11.6, 96.0], [11.7, 96.0], [11.8, 97.0], [11.9, 97.0], [12.0, 97.0], [12.1, 97.0], [12.2, 98.0], [12.3, 98.0], [12.4, 98.0], [12.5, 99.0], [12.6, 99.0], [12.7, 99.0], [12.8, 100.0], [12.9, 100.0], [13.0, 100.0], [13.1, 100.0], [13.2, 101.0], [13.3, 101.0], [13.4, 102.0], [13.5, 102.0], [13.6, 102.0], [13.7, 103.0], [13.8, 103.0], [13.9, 103.0], [14.0, 104.0], [14.1, 104.0], [14.2, 105.0], [14.3, 105.0], [14.4, 105.0], [14.5, 106.0], [14.6, 106.0], [14.7, 106.0], [14.8, 107.0], [14.9, 107.0], [15.0, 107.0], [15.1, 108.0], [15.2, 108.0], [15.3, 109.0], [15.4, 109.0], [15.5, 110.0], [15.6, 110.0], [15.7, 111.0], [15.8, 111.0], [15.9, 111.0], [16.0, 112.0], [16.1, 112.0], [16.2, 112.0], [16.3, 113.0], [16.4, 113.0], [16.5, 113.0], [16.6, 114.0], [16.7, 114.0], [16.8, 114.0], [16.9, 114.0], [17.0, 115.0], [17.1, 115.0], [17.2, 116.0], [17.3, 116.0], [17.4, 116.0], [17.5, 117.0], [17.6, 118.0], [17.7, 118.0], [17.8, 118.0], [17.9, 119.0], [18.0, 119.0], [18.1, 120.0], [18.2, 120.0], [18.3, 121.0], [18.4, 121.0], [18.5, 121.0], [18.6, 122.0], [18.7, 123.0], [18.8, 123.0], [18.9, 123.0], [19.0, 124.0], [19.1, 124.0], [19.2, 125.0], [19.3, 125.0], [19.4, 126.0], [19.5, 127.0], [19.6, 127.0], [19.7, 128.0], [19.8, 128.0], [19.9, 129.0], [20.0, 129.0], [20.1, 129.0], [20.2, 130.0], [20.3, 131.0], [20.4, 131.0], [20.5, 132.0], [20.6, 132.0], [20.7, 133.0], [20.8, 133.0], [20.9, 134.0], [21.0, 134.0], [21.1, 135.0], [21.2, 135.0], [21.3, 135.0], [21.4, 136.0], [21.5, 136.0], [21.6, 137.0], [21.7, 137.0], [21.8, 138.0], [21.9, 139.0], [22.0, 139.0], [22.1, 140.0], [22.2, 140.0], [22.3, 141.0], [22.4, 142.0], [22.5, 143.0], [22.6, 144.0], [22.7, 144.0], [22.8, 144.0], [22.9, 145.0], [23.0, 146.0], [23.1, 146.0], [23.2, 147.0], [23.3, 147.0], [23.4, 148.0], [23.5, 148.0], [23.6, 149.0], [23.7, 149.0], [23.8, 150.0], [23.9, 150.0], [24.0, 151.0], [24.1, 151.0], [24.2, 152.0], [24.3, 152.0], [24.4, 153.0], [24.5, 153.0], [24.6, 154.0], [24.7, 155.0], [24.8, 155.0], [24.9, 155.0], [25.0, 155.0], [25.1, 156.0], [25.2, 156.0], [25.3, 157.0], [25.4, 157.0], [25.5, 157.0], [25.6, 158.0], [25.7, 158.0], [25.8, 159.0], [25.9, 159.0], [26.0, 160.0], [26.1, 160.0], [26.2, 161.0], [26.3, 161.0], [26.4, 162.0], [26.5, 163.0], [26.6, 164.0], [26.7, 165.0], [26.8, 165.0], [26.9, 166.0], [27.0, 167.0], [27.1, 168.0], [27.2, 168.0], [27.3, 169.0], [27.4, 170.0], [27.5, 170.0], [27.6, 171.0], [27.7, 172.0], [27.8, 172.0], [27.9, 173.0], [28.0, 174.0], [28.1, 175.0], [28.2, 175.0], [28.3, 176.0], [28.4, 177.0], [28.5, 178.0], [28.6, 179.0], [28.7, 180.0], [28.8, 180.0], [28.9, 180.0], [29.0, 182.0], [29.1, 183.0], [29.2, 184.0], [29.3, 185.0], [29.4, 186.0], [29.5, 188.0], [29.6, 190.0], [29.7, 191.0], [29.8, 192.0], [29.9, 193.0], [30.0, 194.0], [30.1, 194.0], [30.2, 195.0], [30.3, 196.0], [30.4, 197.0], [30.5, 197.0], [30.6, 198.0], [30.7, 199.0], [30.8, 200.0], [30.9, 201.0], [31.0, 202.0], [31.1, 203.0], [31.2, 204.0], [31.3, 206.0], [31.4, 207.0], [31.5, 208.0], [31.6, 208.0], [31.7, 210.0], [31.8, 211.0], [31.9, 212.0], [32.0, 213.0], [32.1, 214.0], [32.2, 216.0], [32.3, 217.0], [32.4, 218.0], [32.5, 220.0], [32.6, 220.0], [32.7, 222.0], [32.8, 223.0], [32.9, 224.0], [33.0, 226.0], [33.1, 226.0], [33.2, 228.0], [33.3, 230.0], [33.4, 232.0], [33.5, 233.0], [33.6, 234.0], [33.7, 234.0], [33.8, 236.0], [33.9, 237.0], [34.0, 238.0], [34.1, 240.0], [34.2, 240.0], [34.3, 241.0], [34.4, 243.0], [34.5, 245.0], [34.6, 247.0], [34.7, 249.0], [34.8, 250.0], [34.9, 252.0], [35.0, 255.0], [35.1, 257.0], [35.2, 258.0], [35.3, 260.0], [35.4, 260.0], [35.5, 264.0], [35.6, 265.0], [35.7, 267.0], [35.8, 268.0], [35.9, 269.0], [36.0, 270.0], [36.1, 272.0], [36.2, 275.0], [36.3, 277.0], [36.4, 279.0], [36.5, 281.0], [36.6, 282.0], [36.7, 284.0], [36.8, 285.0], [36.9, 286.0], [37.0, 288.0], [37.1, 291.0], [37.2, 292.0], [37.3, 296.0], [37.4, 299.0], [37.5, 301.0], [37.6, 304.0], [37.7, 306.0], [37.8, 307.0], [37.9, 309.0], [38.0, 310.0], [38.1, 312.0], [38.2, 314.0], [38.3, 316.0], [38.4, 320.0], [38.5, 321.0], [38.6, 325.0], [38.7, 328.0], [38.8, 330.0], [38.9, 333.0], [39.0, 337.0], [39.1, 339.0], [39.2, 342.0], [39.3, 344.0], [39.4, 347.0], [39.5, 348.0], [39.6, 351.0], [39.7, 355.0], [39.8, 357.0], [39.9, 360.0], [40.0, 362.0], [40.1, 364.0], [40.2, 367.0], [40.3, 372.0], [40.4, 374.0], [40.5, 375.0], [40.6, 377.0], [40.7, 378.0], [40.8, 381.0], [40.9, 382.0], [41.0, 385.0], [41.1, 388.0], [41.2, 390.0], [41.3, 392.0], [41.4, 393.0], [41.5, 395.0], [41.6, 397.0], [41.7, 399.0], [41.8, 401.0], [41.9, 405.0], [42.0, 406.0], [42.1, 411.0], [42.2, 413.0], [42.3, 415.0], [42.4, 417.0], [42.5, 421.0], [42.6, 424.0], [42.7, 426.0], [42.8, 430.0], [42.9, 433.0], [43.0, 436.0], [43.1, 440.0], [43.2, 442.0], [43.3, 444.0], [43.4, 446.0], [43.5, 448.0], [43.6, 451.0], [43.7, 453.0], [43.8, 454.0], [43.9, 455.0], [44.0, 459.0], [44.1, 463.0], [44.2, 467.0], [44.3, 468.0], [44.4, 471.0], [44.5, 473.0], [44.6, 476.0], [44.7, 478.0], [44.8, 479.0], [44.9, 481.0], [45.0, 485.0], [45.1, 489.0], [45.2, 492.0], [45.3, 493.0], [45.4, 495.0], [45.5, 497.0], [45.6, 500.0], [45.7, 503.0], [45.8, 506.0], [45.9, 509.0], [46.0, 510.0], [46.1, 513.0], [46.2, 516.0], [46.3, 518.0], [46.4, 521.0], [46.5, 523.0], [46.6, 527.0], [46.7, 528.0], [46.8, 529.0], [46.9, 532.0], [47.0, 534.0], [47.1, 537.0], [47.2, 539.0], [47.3, 541.0], [47.4, 544.0], [47.5, 546.0], [47.6, 548.0], [47.7, 550.0], [47.8, 552.0], [47.9, 554.0], [48.0, 557.0], [48.1, 561.0], [48.2, 563.0], [48.3, 565.0], [48.4, 568.0], [48.5, 571.0], [48.6, 573.0], [48.7, 577.0], [48.8, 580.0], [48.9, 581.0], [49.0, 583.0], [49.1, 585.0], [49.2, 588.0], [49.3, 592.0], [49.4, 595.0], [49.5, 600.0], [49.6, 603.0], [49.7, 605.0], [49.8, 607.0], [49.9, 609.0], [50.0, 611.0], [50.1, 613.0], [50.2, 615.0], [50.3, 619.0], [50.4, 621.0], [50.5, 625.0], [50.6, 626.0], [50.7, 632.0], [50.8, 637.0], [50.9, 639.0], [51.0, 641.0], [51.1, 643.0], [51.2, 644.0], [51.3, 645.0], [51.4, 648.0], [51.5, 650.0], [51.6, 652.0], [51.7, 656.0], [51.8, 658.0], [51.9, 659.0], [52.0, 662.0], [52.1, 663.0], [52.2, 665.0], [52.3, 668.0], [52.4, 670.0], [52.5, 672.0], [52.6, 676.0], [52.7, 678.0], [52.8, 682.0], [52.9, 684.0], [53.0, 688.0], [53.1, 690.0], [53.2, 692.0], [53.3, 694.0], [53.4, 697.0], [53.5, 698.0], [53.6, 700.0], [53.7, 702.0], [53.8, 705.0], [53.9, 709.0], [54.0, 711.0], [54.1, 714.0], [54.2, 717.0], [54.3, 719.0], [54.4, 724.0], [54.5, 725.0], [54.6, 728.0], [54.7, 732.0], [54.8, 735.0], [54.9, 738.0], [55.0, 742.0], [55.1, 744.0], [55.2, 746.0], [55.3, 747.0], [55.4, 748.0], [55.5, 752.0], [55.6, 754.0], [55.7, 758.0], [55.8, 762.0], [55.9, 766.0], [56.0, 770.0], [56.1, 772.0], [56.2, 773.0], [56.3, 775.0], [56.4, 779.0], [56.5, 782.0], [56.6, 784.0], [56.7, 786.0], [56.8, 789.0], [56.9, 792.0], [57.0, 794.0], [57.1, 797.0], [57.2, 799.0], [57.3, 803.0], [57.4, 805.0], [57.5, 806.0], [57.6, 808.0], [57.7, 809.0], [57.8, 814.0], [57.9, 817.0], [58.0, 822.0], [58.1, 825.0], [58.2, 827.0], [58.3, 829.0], [58.4, 833.0], [58.5, 836.0], [58.6, 840.0], [58.7, 844.0], [58.8, 849.0], [58.9, 852.0], [59.0, 855.0], [59.1, 857.0], [59.2, 859.0], [59.3, 862.0], [59.4, 866.0], [59.5, 867.0], [59.6, 869.0], [59.7, 871.0], [59.8, 875.0], [59.9, 877.0], [60.0, 878.0], [60.1, 880.0], [60.2, 883.0], [60.3, 888.0], [60.4, 892.0], [60.5, 895.0], [60.6, 898.0], [60.7, 902.0], [60.8, 910.0], [60.9, 911.0], [61.0, 914.0], [61.1, 920.0], [61.2, 923.0], [61.3, 927.0], [61.4, 931.0], [61.5, 934.0], [61.6, 938.0], [61.7, 940.0], [61.8, 944.0], [61.9, 947.0], [62.0, 950.0], [62.1, 952.0], [62.2, 956.0], [62.3, 959.0], [62.4, 961.0], [62.5, 964.0], [62.6, 965.0], [62.7, 968.0], [62.8, 971.0], [62.9, 974.0], [63.0, 975.0], [63.1, 978.0], [63.2, 981.0], [63.3, 983.0], [63.4, 986.0], [63.5, 989.0], [63.6, 991.0], [63.7, 994.0], [63.8, 996.0], [63.9, 998.0], [64.0, 1001.0], [64.1, 1003.0], [64.2, 1007.0], [64.3, 1009.0], [64.4, 1011.0], [64.5, 1015.0], [64.6, 1017.0], [64.7, 1018.0], [64.8, 1019.0], [64.9, 1022.0], [65.0, 1026.0], [65.1, 1027.0], [65.2, 1029.0], [65.3, 1033.0], [65.4, 1035.0], [65.5, 1038.0], [65.6, 1039.0], [65.7, 1041.0], [65.8, 1044.0], [65.9, 1047.0], [66.0, 1050.0], [66.1, 1052.0], [66.2, 1053.0], [66.3, 1055.0], [66.4, 1057.0], [66.5, 1060.0], [66.6, 1061.0], [66.7, 1064.0], [66.8, 1065.0], [66.9, 1067.0], [67.0, 1069.0], [67.1, 1071.0], [67.2, 1073.0], [67.3, 1075.0], [67.4, 1078.0], [67.5, 1084.0], [67.6, 1086.0], [67.7, 1090.0], [67.8, 1095.0], [67.9, 1097.0], [68.0, 1100.0], [68.1, 1102.0], [68.2, 1107.0], [68.3, 1109.0], [68.4, 1110.0], [68.5, 1112.0], [68.6, 1113.0], [68.7, 1118.0], [68.8, 1121.0], [68.9, 1124.0], [69.0, 1126.0], [69.1, 1131.0], [69.2, 1133.0], [69.3, 1136.0], [69.4, 1140.0], [69.5, 1143.0], [69.6, 1145.0], [69.7, 1147.0], [69.8, 1148.0], [69.9, 1150.0], [70.0, 1151.0], [70.1, 1153.0], [70.2, 1154.0], [70.3, 1156.0], [70.4, 1158.0], [70.5, 1162.0], [70.6, 1164.0], [70.7, 1166.0], [70.8, 1169.0], [70.9, 1171.0], [71.0, 1175.0], [71.1, 1178.0], [71.2, 1180.0], [71.3, 1183.0], [71.4, 1186.0], [71.5, 1188.0], [71.6, 1193.0], [71.7, 1196.0], [71.8, 1198.0], [71.9, 1201.0], [72.0, 1204.0], [72.1, 1206.0], [72.2, 1209.0], [72.3, 1212.0], [72.4, 1214.0], [72.5, 1219.0], [72.6, 1221.0], [72.7, 1223.0], [72.8, 1225.0], [72.9, 1227.0], [73.0, 1230.0], [73.1, 1232.0], [73.2, 1234.0], [73.3, 1238.0], [73.4, 1242.0], [73.5, 1246.0], [73.6, 1249.0], [73.7, 1252.0], [73.8, 1254.0], [73.9, 1255.0], [74.0, 1258.0], [74.1, 1260.0], [74.2, 1263.0], [74.3, 1265.0], [74.4, 1269.0], [74.5, 1270.0], [74.6, 1273.0], [74.7, 1277.0], [74.8, 1279.0], [74.9, 1282.0], [75.0, 1285.0], [75.1, 1287.0], [75.2, 1291.0], [75.3, 1293.0], [75.4, 1295.0], [75.5, 1297.0], [75.6, 1299.0], [75.7, 1301.0], [75.8, 1302.0], [75.9, 1304.0], [76.0, 1308.0], [76.1, 1309.0], [76.2, 1314.0], [76.3, 1317.0], [76.4, 1320.0], [76.5, 1323.0], [76.6, 1326.0], [76.7, 1328.0], [76.8, 1331.0], [76.9, 1335.0], [77.0, 1337.0], [77.1, 1340.0], [77.2, 1343.0], [77.3, 1346.0], [77.4, 1349.0], [77.5, 1351.0], [77.6, 1353.0], [77.7, 1356.0], [77.8, 1357.0], [77.9, 1359.0], [78.0, 1361.0], [78.1, 1364.0], [78.2, 1366.0], [78.3, 1368.0], [78.4, 1370.0], [78.5, 1373.0], [78.6, 1374.0], [78.7, 1378.0], [78.8, 1381.0], [78.9, 1384.0], [79.0, 1386.0], [79.1, 1388.0], [79.2, 1392.0], [79.3, 1392.0], [79.4, 1395.0], [79.5, 1397.0], [79.6, 1399.0], [79.7, 1401.0], [79.8, 1404.0], [79.9, 1407.0], [80.0, 1409.0], [80.1, 1415.0], [80.2, 1420.0], [80.3, 1423.0], [80.4, 1425.0], [80.5, 1429.0], [80.6, 1433.0], [80.7, 1436.0], [80.8, 1439.0], [80.9, 1441.0], [81.0, 1445.0], [81.1, 1447.0], [81.2, 1449.0], [81.3, 1451.0], [81.4, 1453.0], [81.5, 1455.0], [81.6, 1457.0], [81.7, 1459.0], [81.8, 1464.0], [81.9, 1465.0], [82.0, 1468.0], [82.1, 1470.0], [82.2, 1473.0], [82.3, 1475.0], [82.4, 1477.0], [82.5, 1483.0], [82.6, 1486.0], [82.7, 1491.0], [82.8, 1494.0], [82.9, 1497.0], [83.0, 1499.0], [83.1, 1500.0], [83.2, 1501.0], [83.3, 1505.0], [83.4, 1510.0], [83.5, 1513.0], [83.6, 1516.0], [83.7, 1518.0], [83.8, 1523.0], [83.9, 1525.0], [84.0, 1528.0], [84.1, 1531.0], [84.2, 1533.0], [84.3, 1536.0], [84.4, 1540.0], [84.5, 1544.0], [84.6, 1549.0], [84.7, 1552.0], [84.8, 1556.0], [84.9, 1560.0], [85.0, 1564.0], [85.1, 1567.0], [85.2, 1571.0], [85.3, 1574.0], [85.4, 1578.0], [85.5, 1580.0], [85.6, 1585.0], [85.7, 1588.0], [85.8, 1593.0], [85.9, 1597.0], [86.0, 1600.0], [86.1, 1606.0], [86.2, 1607.0], [86.3, 1612.0], [86.4, 1613.0], [86.5, 1620.0], [86.6, 1623.0], [86.7, 1626.0], [86.8, 1632.0], [86.9, 1636.0], [87.0, 1642.0], [87.1, 1646.0], [87.2, 1650.0], [87.3, 1655.0], [87.4, 1660.0], [87.5, 1665.0], [87.6, 1670.0], [87.7, 1672.0], [87.8, 1679.0], [87.9, 1682.0], [88.0, 1685.0], [88.1, 1691.0], [88.2, 1695.0], [88.3, 1699.0], [88.4, 1705.0], [88.5, 1711.0], [88.6, 1717.0], [88.7, 1720.0], [88.8, 1726.0], [88.9, 1729.0], [89.0, 1734.0], [89.1, 1738.0], [89.2, 1744.0], [89.3, 1746.0], [89.4, 1750.0], [89.5, 1756.0], [89.6, 1760.0], [89.7, 1765.0], [89.8, 1768.0], [89.9, 1775.0], [90.0, 1780.0], [90.1, 1788.0], [90.2, 1794.0], [90.3, 1801.0], [90.4, 1809.0], [90.5, 1814.0], [90.6, 1820.0], [90.7, 1823.0], [90.8, 1828.0], [90.9, 1834.0], [91.0, 1837.0], [91.1, 1844.0], [91.2, 1850.0], [91.3, 1860.0], [91.4, 1873.0], [91.5, 1878.0], [91.6, 1883.0], [91.7, 1890.0], [91.8, 1901.0], [91.9, 1907.0], [92.0, 1911.0], [92.1, 1917.0], [92.2, 1926.0], [92.3, 1929.0], [92.4, 1932.0], [92.5, 1938.0], [92.6, 1947.0], [92.7, 1952.0], [92.8, 1960.0], [92.9, 1970.0], [93.0, 1975.0], [93.1, 1979.0], [93.2, 1991.0], [93.3, 2000.0], [93.4, 2012.0], [93.5, 2017.0], [93.6, 2021.0], [93.7, 2029.0], [93.8, 2041.0], [93.9, 2050.0], [94.0, 2054.0], [94.1, 2065.0], [94.2, 2076.0], [94.3, 2085.0], [94.4, 2094.0], [94.5, 2103.0], [94.6, 2108.0], [94.7, 2122.0], [94.8, 2131.0], [94.9, 2148.0], [95.0, 2170.0], [95.1, 2175.0], [95.2, 2185.0], [95.3, 2196.0], [95.4, 2207.0], [95.5, 2235.0], [95.6, 2253.0], [95.7, 2265.0], [95.8, 2276.0], [95.9, 2299.0], [96.0, 2320.0], [96.1, 2329.0], [96.2, 2348.0], [96.3, 2358.0], [96.4, 2381.0], [96.5, 2395.0], [96.6, 2414.0], [96.7, 2427.0], [96.8, 2452.0], [96.9, 2478.0], [97.0, 2502.0], [97.1, 2527.0], [97.2, 2557.0], [97.3, 2574.0], [97.4, 2600.0], [97.5, 2630.0], [97.6, 2682.0], [97.7, 2709.0], [97.8, 2735.0], [97.9, 2783.0], [98.0, 2852.0], [98.1, 2893.0], [98.2, 2933.0], [98.3, 2956.0], [98.4, 2985.0], [98.5, 3023.0], [98.6, 3084.0], [98.7, 3108.0], [98.8, 3174.0], [98.9, 3228.0], [99.0, 3266.0], [99.1, 3290.0], [99.2, 3319.0], [99.3, 3347.0], [99.4, 3365.0], [99.5, 3418.0], [99.6, 3498.0], [99.7, 3795.0], [99.8, 5860.0], [99.9, 13653.0], [100.0, 18148.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1251.0, "series": [{"data": [[0.0, 881.0], [600.0, 285.0], [700.0, 250.0], [800.0, 237.0], [900.0, 231.0], [1000.0, 279.0], [1100.0, 269.0], [1200.0, 263.0], [1300.0, 276.0], [1400.0, 238.0], [1500.0, 204.0], [1600.0, 160.0], [1700.0, 138.0], [1800.0, 103.0], [1900.0, 105.0], [2000.0, 81.0], [2100.0, 59.0], [2300.0, 44.0], [2200.0, 41.0], [2400.0, 31.0], [2500.0, 28.0], [2600.0, 19.0], [2700.0, 18.0], [2800.0, 14.0], [2900.0, 25.0], [3000.0, 11.0], [3100.0, 14.0], [3300.0, 25.0], [3200.0, 18.0], [3400.0, 10.0], [3700.0, 5.0], [3600.0, 2.0], [3800.0, 1.0], [4200.0, 2.0], [5000.0, 1.0], [5300.0, 1.0], [5500.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [7500.0, 1.0], [8900.0, 1.0], [10300.0, 1.0], [10500.0, 1.0], [11100.0, 1.0], [13600.0, 1.0], [14700.0, 1.0], [15700.0, 1.0], [15900.0, 2.0], [17300.0, 1.0], [18100.0, 1.0], [100.0, 1251.0], [200.0, 464.0], [300.0, 296.0], [400.0, 268.0], [500.0, 272.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1170.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3163.0, "series": [{"data": [[0.0, 3163.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2602.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1170.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.910233393177736, "minX": 1.62705209E12, "maxY": 660.5, "series": [{"data": [[1.6270521E12, 16.38202247191012], [1.62705211E12, 12.910233393177736], [1.62705209E12, 16.0], [1.62705214E12, 210.66737438075023], [1.62705215E12, 386.05836849507705], [1.62705212E12, 33.00837138508374], [1.62705213E12, 117.89267585206669], [1.62705216E12, 660.5]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705216E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 46.0, "minX": 5.0, "maxY": 13653.0, "series": [{"data": [[5.0, 1757.6071428571433], [6.0, 7389.0], [7.0, 13653.0], [8.0, 11173.0], [9.0, 10562.0], [10.0, 185.55263157894737], [11.0, 103.09234234234228], [12.0, 160.224], [13.0, 155.32773109243695], [14.0, 152.81538461538457], [15.0, 1847.0], [16.0, 163.18320610687033], [17.0, 1307.3333333333335], [18.0, 259.81860465116256], [19.0, 939.4], [20.0, 179.03007518796994], [21.0, 235.01863354037275], [23.0, 166.78571428571422], [25.0, 194.625], [26.0, 189.08593750000009], [27.0, 220.0], [28.0, 184.33333333333334], [29.0, 201.66666666666669], [30.0, 215.93430656934314], [31.0, 199.0], [32.0, 207.8], [33.0, 214.33333333333331], [34.0, 246.951724137931], [35.0, 248.5], [36.0, 266.0], [37.0, 240.66666666666666], [38.0, 256.25], [39.0, 275.5], [40.0, 291.5694444444445], [41.0, 304.0], [42.0, 292.0], [43.0, 278.72727272727275], [44.0, 289.6666666666667], [45.0, 302.75], [46.0, 330.0], [47.0, 301.0], [48.0, 307.75], [49.0, 307.75], [50.0, 331.625], [51.0, 347.0], [52.0, 342.14285714285717], [53.0, 354.1666666666667], [54.0, 350.54545454545456], [55.0, 397.07333333333344], [56.0, 356.0], [57.0, 390.0], [58.0, 374.0], [59.0, 396.0], [60.0, 421.25], [61.0, 403.3333333333333], [62.0, 345.78260869565213], [63.0, 532.0], [68.0, 475.29479768786103], [69.0, 461.15789473684214], [70.0, 312.4], [71.0, 394.5], [72.0, 484.9230769230769], [73.0, 653.0], [75.0, 544.3846153846154], [76.0, 611.5], [84.0, 532.5967741935484], [85.0, 475.0], [88.0, 629.6], [89.0, 531.75], [90.0, 481.1], [91.0, 528.8333333333333], [92.0, 606.0], [93.0, 347.0], [94.0, 400.5], [95.0, 657.1666666666666], [96.0, 736.7142857142857], [97.0, 720.75], [98.0, 631.4285714285717], [99.0, 683.2142857142857], [100.0, 731.0769230769231], [101.0, 663.2142857142857], [102.0, 647.8571428571429], [103.0, 691.25], [105.0, 573.3333333333334], [106.0, 499.6666666666667], [107.0, 640.8604651162791], [108.0, 726.75], [109.0, 782.7857142857142], [110.0, 897.5625], [111.0, 824.380281690141], [112.0, 761.0], [113.0, 763.6153846153846], [114.0, 758.3749999999999], [115.0, 665.5454545454547], [116.0, 698.9642857142858], [117.0, 717.1428571428571], [119.0, 556.5], [120.0, 678.6923076923078], [121.0, 632.1363636363635], [122.0, 703.8461538461538], [123.0, 951.1200000000001], [124.0, 968.1428571428571], [125.0, 925.0], [126.0, 865.7692307692307], [127.0, 756.9999999999999], [128.0, 805.3928571428572], [129.0, 898.5333333333333], [130.0, 855.25], [131.0, 784.4130434782611], [132.0, 929.3333333333335], [139.0, 832.0], [141.0, 747.0], [146.0, 1039.0], [152.0, 395.0], [156.0, 520.25], [157.0, 1037.0329670329675], [158.0, 1111.1538461538462], [159.0, 1050.086956521739], [160.0, 1144.875], [161.0, 1091.4848484848483], [163.0, 903.1666666666667], [164.0, 1045.8], [165.0, 1129.3833333333337], [170.0, 510.5], [171.0, 1022.5584415584419], [172.0, 990.375], [173.0, 1115.7727272727268], [174.0, 1099.0], [175.0, 1270.0], [176.0, 1171.5], [178.0, 626.0], [179.0, 826.5000000000001], [180.0, 1277.1025641025644], [181.0, 844.2], [182.0, 816.625], [183.0, 1096.1176470588236], [184.0, 1068.6603773584907], [185.0, 1102.6909090909091], [196.0, 3108.3333333333335], [197.0, 943.0], [201.0, 790.1666666666667], [202.0, 802.3333333333334], [203.0, 1000.7499999999999], [204.0, 1147.5], [205.0, 1382.1000000000001], [206.0, 1072.909090909091], [207.0, 1653.897435897436], [208.0, 1498.8695652173913], [209.0, 1378.0], [211.0, 1498.7999999999995], [212.0, 1409.4999999999998], [213.0, 1349.0959999999993], [214.0, 1682.2], [215.0, 1113.2586206896551], [218.0, 1318.7692307692307], [217.0, 1436.7391304347825], [219.0, 1220.7826086956525], [216.0, 1143.28], [220.0, 1261.8869565217394], [221.0, 1438.5], [222.0, 1360.8461538461538], [223.0, 1332.1538461538462], [224.0, 1446.6666666666667], [225.0, 1592.5882352941176], [226.0, 1505.4583333333323], [229.0, 1536.7368421052631], [230.0, 1330.041666666666], [243.0, 1597.0], [247.0, 1557.0], [262.0, 1546.2], [264.0, 1567.0], [265.0, 1684.0], [275.0, 1916.0], [282.0, 1655.9719626168226], [283.0, 2120.363636363636], [284.0, 1695.0], [285.0, 1679.3999999999999], [286.0, 1735.0], [290.0, 1119.3809523809525], [291.0, 950.75], [302.0, 1395.0], [315.0, 1243.0], [319.0, 1658.5], [321.0, 2186.872641509435], [322.0, 1895.7037037037037], [323.0, 2175.7692307692305], [324.0, 2320.5], [325.0, 2369.5], [326.0, 1167.5], [327.0, 1438.2115384615383], [362.0, 1455.0], [375.0, 1029.0], [382.0, 1085.0], [383.0, 1708.0], [385.0, 1932.0], [386.0, 1204.0], [387.0, 2130.2367346938786], [395.0, 1514.9621848739487], [397.0, 1092.0], [399.0, 1162.0], [400.0, 1068.6666666666667], [409.0, 1318.75], [410.0, 881.7419354838711], [411.0, 717.0], [412.0, 473.99999999999994], [413.0, 440.6470588235294], [414.0, 133.0], [415.0, 303.3333333333333], [417.0, 392.0], [416.0, 372.0], [418.0, 310.5], [419.0, 214.0], [420.0, 236.14285714285714], [421.0, 229.14285714285714], [423.0, 198.0], [426.0, 162.0], [429.0, 109.33333333333333], [427.0, 137.6], [432.0, 137.0], [434.0, 90.0], [435.0, 85.0], [440.0, 465.5], [447.0, 330.33333333333337], [450.0, 67.0], [451.0, 70.0], [452.0, 71.0], [458.0, 63.0], [468.0, 64.0], [471.0, 65.0], [472.0, 51.0], [477.0, 58.333333333333336], [481.0, 97.0], [498.0, 92.0], [499.0, 93.66666666666667], [501.0, 133.0], [509.0, 81.33333333333333], [517.0, 61.0], [512.0, 88.33333333333333], [514.0, 68.0], [515.0, 58.0], [518.0, 72.0], [519.0, 63.0], [526.0, 83.0], [533.0, 64.0], [537.0, 64.0], [535.0, 84.0], [545.0, 58.0], [582.0, 59.0], [583.0, 64.0], [636.0, 49.0], [619.0, 102.5], [618.0, 121.0], [617.0, 125.0], [616.0, 123.0], [620.0, 118.0], [621.0, 89.5], [635.0, 56.0], [639.0, 51.0], [625.0, 113.0], [624.0, 113.0], [627.0, 71.0], [626.0, 111.0], [629.0, 52.0], [628.0, 51.0], [631.0, 52.0], [630.0, 49.0], [638.0, 49.0], [637.0, 55.0], [634.0, 55.0], [633.0, 46.0], [632.0, 51.0], [623.0, 114.0], [615.0, 59.0], [614.0, 60.0], [613.0, 51.0], [612.0, 50.0], [611.0, 49.0], [610.0, 57.0], [609.0, 50.0], [608.0, 57.0], [622.0, 114.0], [668.0, 66.0], [649.0, 68.5], [648.0, 47.0], [651.0, 54.0], [650.0, 54.0], [653.0, 54.0], [652.0, 58.0], [655.0, 53.0], [641.0, 58.0], [640.0, 62.0], [643.0, 46.0], [642.0, 46.0], [645.0, 47.0], [644.0, 47.0], [647.0, 54.0], [646.0, 56.0], [654.0, 50.0], [671.0, 74.0], [657.0, 50.0], [656.0, 51.0], [659.0, 59.0], [658.0, 58.0], [661.0, 72.0], [660.0, 59.0], [663.0, 56.0], [662.0, 63.0], [670.0, 56.0], [669.0, 52.0], [667.0, 60.0], [666.0, 63.0], [665.0, 56.0], [664.0, 58.0], [700.0, 61.0], [676.0, 70.66666666666667], [675.0, 60.0], [674.0, 56.0], [673.0, 66.0], [672.0, 54.0], [677.0, 57.0], [679.0, 47.0], [678.0, 58.0], [687.0, 74.0], [686.0, 61.0], [685.0, 74.0], [684.0, 59.0], [683.0, 73.0], [682.0, 55.0], [681.0, 63.0], [680.0, 48.0], [703.0, 76.0], [689.0, 97.0], [688.0, 75.0], [691.0, 51.0], [690.0, 92.0], [693.0, 77.0], [692.0, 66.0], [695.0, 70.0], [694.0, 57.0], [702.0, 55.0], [701.0, 76.0], [699.0, 57.0], [698.0, 65.0], [697.0, 51.0], [696.0, 47.0], [730.0, 88.0], [734.0, 85.0], [713.0, 78.0], [712.0, 61.0], [716.0, 66.0], [714.0, 63.0], [717.0, 75.6], [720.0, 68.5], [725.0, 77.5], [724.0, 65.0], [723.0, 72.0], [722.0, 88.0], [721.0, 88.0], [727.0, 94.0], [726.0, 78.0], [728.0, 62.0], [719.0, 74.0], [711.0, 64.0], [710.0, 59.0], [709.0, 62.0], [708.0, 64.0], [707.0, 64.0], [706.0, 68.0], [705.0, 82.0], [704.0, 68.0], [718.0, 61.0], [729.0, 64.0], [731.0, 78.0], [735.0, 56.0], [733.0, 87.0], [732.0, 78.0], [763.0, 184.0], [740.0, 82.66666666666667], [737.0, 86.5], [736.0, 81.0], [739.0, 87.0], [738.0, 76.0], [741.0, 86.5], [742.0, 123.0], [760.0, 118.0], [743.0, 118.0], [762.0, 185.0], [761.0, 86.0], [746.0, 119.0], [745.0, 107.0], [744.0, 114.0], [748.0, 151.0], [747.0, 155.0], [750.0, 154.0], [749.0, 135.0], [751.0, 147.0], [758.0, 88.5], [757.0, 124.0], [756.0, 132.0], [755.0, 87.0], [754.0, 87.0], [753.0, 93.0], [752.0, 96.0], [759.0, 119.0], [765.0, 117.66666666666667], [767.0, 166.0], [766.0, 167.0], [764.0, 64.0], [772.0, 50.0], [779.0, 87.5], [773.0, 96.8], [776.0, 80.66666666666667], [778.0, 107.0], [777.0, 128.0], [775.0, 65.0], [774.0, 66.0], [771.0, 116.0], [770.0, 131.0], [769.0, 133.0], [768.0, 153.0]], "isOverall": false, "label": "Press Release", "isController": false}, {"data": [[163.32271088680602, 824.5516943042531]], "isOverall": false, "label": "Press Release-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 779.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 148.5, "minX": 1.62705209E12, "maxY": 6687811.7, "series": [{"data": [[1.6270521E12, 837147.1], [1.62705211E12, 5239164.8], [1.62705209E12, 42334.0], [1.62705214E12, 6645529.5], [1.62705215E12, 6687811.7], [1.62705212E12, 6179873.4], [1.62705213E12, 6485574.9], [1.62705216E12, 498528.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6270521E12, 2937.0], [1.62705211E12, 18381.0], [1.62705209E12, 148.5], [1.62705214E12, 23314.5], [1.62705215E12, 23463.0], [1.62705212E12, 21681.0], [1.62705213E12, 22753.5], [1.62705216E12, 1749.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705216E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 65.11320754716982, "minX": 1.62705209E12, "maxY": 5285.222222222223, "series": [{"data": [[1.6270521E12, 889.6123595505621], [1.62705211E12, 113.74057450628376], [1.62705209E12, 5285.222222222223], [1.62705214E12, 1330.3821656050964], [1.62705215E12, 1518.037974683545], [1.62705212E12, 235.80441400304417], [1.62705213E12, 747.216823785351], [1.62705216E12, 65.11320754716982]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705216E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 58.40566037735848, "minX": 1.62705209E12, "maxY": 5126.777777777777, "series": [{"data": [[1.6270521E12, 869.3314606741571], [1.62705211E12, 108.5610412926392], [1.62705209E12, 5126.777777777777], [1.62705214E12, 1272.0835102618557], [1.62705215E12, 1470.6990154711648], [1.62705212E12, 223.34550989345522], [1.62705213E12, 711.9260333575055], [1.62705216E12, 58.40566037735848]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705216E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 47.83018867924529, "minX": 1.62705209E12, "maxY": 1421.4191279887498, "series": [{"data": [[1.6270521E12, 121.88202247191008], [1.62705211E12, 85.70377019748658], [1.62705209E12, 138.11111111111111], [1.62705214E12, 1234.7607926397736], [1.62705215E12, 1421.4191279887498], [1.62705212E12, 215.28462709284622], [1.62705213E12, 689.8941261783909], [1.62705216E12, 47.83018867924529]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705216E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.62705209E12, "maxY": 18148.0, "series": [{"data": [[1.6270521E12, 17327.0], [1.62705211E12, 18148.0], [1.62705209E12, 7546.0], [1.62705214E12, 3793.0], [1.62705215E12, 3859.0], [1.62705212E12, 547.0], [1.62705213E12, 1971.0], [1.62705216E12, 125.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6270521E12, 40.0], [1.62705211E12, 35.0], [1.62705209E12, 3710.0], [1.62705214E12, 111.0], [1.62705215E12, 50.0], [1.62705212E12, 93.0], [1.62705213E12, 150.0], [1.62705216E12, 46.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6270521E12, 220.69999999999996], [1.62705211E12, 128.0], [1.62705209E12, 7546.0], [1.62705214E12, 1720.0], [1.62705215E12, 2599.4], [1.62705212E12, 381.0], [1.62705213E12, 1112.0], [1.62705216E12, 111.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6270521E12, 16221.790000000012], [1.62705211E12, 171.8499999999999], [1.62705209E12, 7546.0], [1.62705214E12, 3154.0399999999986], [1.62705215E12, 3376.93], [1.62705212E12, 491.6999999999998], [1.62705213E12, 1452.6000000000001], [1.62705216E12, 124.85999999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6270521E12, 10374.849999999997], [1.62705211E12, 142.25], [1.62705209E12, 7546.0], [1.62705214E12, 1850.0], [1.62705215E12, 2988.3999999999996], [1.62705212E12, 424.0], [1.62705213E12, 1254.0], [1.62705216E12, 116.94999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705216E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.0, "minX": 1.0, "maxY": 7936.5, "series": [{"data": [[2.0, 2135.5], [34.0, 52.0], [3.0, 7936.5], [53.0, 1564.0], [52.0, 62.5], [65.0, 134.0], [68.0, 88.0], [75.0, 1496.0], [83.0, 1404.0], [99.0, 159.0], [97.0, 92.0], [101.0, 107.0], [107.0, 76.5], [108.0, 79.5], [111.0, 222.0], [112.0, 81.5], [115.0, 96.0], [114.0, 830.5], [119.0, 262.5], [118.0, 1517.5], [122.0, 112.0], [120.0, 1116.5], [125.0, 213.0], [124.0, 350.0], [8.0, 104.5], [131.0, 172.0], [128.0, 343.5], [133.0, 308.0], [130.0, 645.5], [137.0, 202.0], [136.0, 299.0], [138.0, 830.0], [140.0, 1081.0], [155.0, 536.0], [156.0, 1419.0], [167.0, 684.0], [160.0, 1030.5], [182.0, 1446.0], [177.0, 1934.0], [185.0, 1378.0], [194.0, 1365.5], [211.0, 1947.0], [210.0, 2105.0], [221.0, 1684.0], [217.0, 883.0], [1.0, 6831.5], [17.0, 113.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 221.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 44.5, "minX": 1.0, "maxY": 7658.0, "series": [{"data": [[2.0, 2040.0], [34.0, 44.5], [3.0, 7658.0], [53.0, 1404.0], [52.0, 56.5], [65.0, 131.0], [68.0, 81.5], [75.0, 1495.0], [83.0, 1301.0], [99.0, 152.0], [97.0, 86.0], [101.0, 100.0], [107.0, 69.5], [108.0, 75.0], [111.0, 221.0], [112.0, 77.0], [115.0, 92.0], [114.0, 776.0], [119.0, 261.0], [118.0, 1438.0], [122.0, 106.0], [120.0, 1073.0], [125.0, 206.0], [124.0, 335.5], [8.0, 61.0], [131.0, 162.0], [128.0, 340.0], [133.0, 290.5], [130.0, 621.5], [137.0, 188.0], [136.0, 274.5], [138.0, 797.0], [140.0, 1028.0], [155.0, 508.0], [156.0, 1375.5], [167.0, 666.0], [160.0, 984.0], [182.0, 1445.0], [177.0, 1843.0], [185.0, 1347.0], [194.0, 1302.5], [211.0, 1830.0], [210.0, 2050.5], [221.0, 1674.0], [217.0, 862.0], [1.0, 6707.0], [17.0, 106.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 221.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62705208E12, "maxY": 148.7, "series": [{"data": [[1.6270521E12, 17.8], [1.62705211E12, 111.9], [1.62705208E12, 0.3], [1.62705209E12, 1.7], [1.62705214E12, 147.4], [1.62705215E12, 119.6], [1.62705212E12, 136.0], [1.62705213E12, 148.7], [1.62705216E12, 10.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705216E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.62705209E12, "maxY": 142.2, "series": [{"data": [[1.6270521E12, 17.8], [1.62705211E12, 111.4], [1.62705209E12, 0.9], [1.62705214E12, 141.3], [1.62705215E12, 142.2], [1.62705212E12, 131.4], [1.62705213E12, 137.9], [1.62705216E12, 10.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62705216E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.62705209E12, "maxY": 142.2, "series": [{"data": [[1.6270521E12, 17.8], [1.62705211E12, 111.4], [1.62705209E12, 0.9], [1.62705214E12, 141.3], [1.62705215E12, 142.2], [1.62705212E12, 131.4], [1.62705213E12, 137.9], [1.62705216E12, 10.6]], "isOverall": false, "label": "Press Release-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705216E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.62705209E12, "maxY": 142.2, "series": [{"data": [[1.6270521E12, 17.8], [1.62705211E12, 111.4], [1.62705209E12, 0.9], [1.62705214E12, 141.3], [1.62705215E12, 142.2], [1.62705212E12, 131.4], [1.62705213E12, 137.9], [1.62705216E12, 10.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62705216E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

