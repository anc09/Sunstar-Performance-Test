/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 19788.0, "series": [{"data": [[0.0, 23.0], [0.1, 25.0], [0.2, 28.0], [0.3, 35.0], [0.4, 39.0], [0.5, 41.0], [0.6, 45.0], [0.7, 50.0], [0.8, 55.0], [0.9, 59.0], [1.0, 64.0], [1.1, 66.0], [1.2, 70.0], [1.3, 72.0], [1.4, 77.0], [1.5, 78.0], [1.6, 81.0], [1.7, 82.0], [1.8, 86.0], [1.9, 89.0], [2.0, 91.0], [2.1, 92.0], [2.2, 95.0], [2.3, 96.0], [2.4, 98.0], [2.5, 101.0], [2.6, 102.0], [2.7, 105.0], [2.8, 108.0], [2.9, 114.0], [3.0, 121.0], [3.1, 126.0], [3.2, 128.0], [3.3, 131.0], [3.4, 139.0], [3.5, 142.0], [3.6, 148.0], [3.7, 152.0], [3.8, 155.0], [3.9, 159.0], [4.0, 160.0], [4.1, 164.0], [4.2, 167.0], [4.3, 169.0], [4.4, 171.0], [4.5, 173.0], [4.6, 178.0], [4.7, 182.0], [4.8, 184.0], [4.9, 187.0], [5.0, 190.0], [5.1, 196.0], [5.2, 206.0], [5.3, 210.0], [5.4, 219.0], [5.5, 227.0], [5.6, 238.0], [5.7, 243.0], [5.8, 251.0], [5.9, 256.0], [6.0, 265.0], [6.1, 273.0], [6.2, 296.0], [6.3, 308.0], [6.4, 323.0], [6.5, 336.0], [6.6, 355.0], [6.7, 361.0], [6.8, 370.0], [6.9, 384.0], [7.0, 392.0], [7.1, 402.0], [7.2, 410.0], [7.3, 421.0], [7.4, 431.0], [7.5, 436.0], [7.6, 442.0], [7.7, 446.0], [7.8, 454.0], [7.9, 459.0], [8.0, 462.0], [8.1, 465.0], [8.2, 470.0], [8.3, 478.0], [8.4, 481.0], [8.5, 487.0], [8.6, 492.0], [8.7, 498.0], [8.8, 507.0], [8.9, 517.0], [9.0, 527.0], [9.1, 538.0], [9.2, 544.0], [9.3, 553.0], [9.4, 577.0], [9.5, 582.0], [9.6, 591.0], [9.7, 602.0], [9.8, 609.0], [9.9, 614.0], [10.0, 619.0], [10.1, 625.0], [10.2, 628.0], [10.3, 634.0], [10.4, 641.0], [10.5, 646.0], [10.6, 650.0], [10.7, 653.0], [10.8, 657.0], [10.9, 661.0], [11.0, 664.0], [11.1, 667.0], [11.2, 671.0], [11.3, 675.0], [11.4, 678.0], [11.5, 687.0], [11.6, 695.0], [11.7, 699.0], [11.8, 710.0], [11.9, 714.0], [12.0, 726.0], [12.1, 735.0], [12.2, 741.0], [12.3, 751.0], [12.4, 759.0], [12.5, 771.0], [12.6, 775.0], [12.7, 789.0], [12.8, 795.0], [12.9, 807.0], [13.0, 816.0], [13.1, 822.0], [13.2, 829.0], [13.3, 839.0], [13.4, 846.0], [13.5, 858.0], [13.6, 863.0], [13.7, 867.0], [13.8, 880.0], [13.9, 891.0], [14.0, 900.0], [14.1, 910.0], [14.2, 920.0], [14.3, 931.0], [14.4, 943.0], [14.5, 948.0], [14.6, 955.0], [14.7, 959.0], [14.8, 969.0], [14.9, 980.0], [15.0, 989.0], [15.1, 1000.0], [15.2, 1009.0], [15.3, 1018.0], [15.4, 1024.0], [15.5, 1033.0], [15.6, 1040.0], [15.7, 1048.0], [15.8, 1065.0], [15.9, 1082.0], [16.0, 1100.0], [16.1, 1105.0], [16.2, 1108.0], [16.3, 1116.0], [16.4, 1125.0], [16.5, 1130.0], [16.6, 1138.0], [16.7, 1148.0], [16.8, 1157.0], [16.9, 1167.0], [17.0, 1177.0], [17.1, 1186.0], [17.2, 1193.0], [17.3, 1198.0], [17.4, 1205.0], [17.5, 1210.0], [17.6, 1216.0], [17.7, 1223.0], [17.8, 1225.0], [17.9, 1234.0], [18.0, 1235.0], [18.1, 1239.0], [18.2, 1244.0], [18.3, 1249.0], [18.4, 1252.0], [18.5, 1255.0], [18.6, 1261.0], [18.7, 1267.0], [18.8, 1271.0], [18.9, 1274.0], [19.0, 1276.0], [19.1, 1285.0], [19.2, 1287.0], [19.3, 1292.0], [19.4, 1296.0], [19.5, 1306.0], [19.6, 1313.0], [19.7, 1317.0], [19.8, 1322.0], [19.9, 1327.0], [20.0, 1329.0], [20.1, 1332.0], [20.2, 1340.0], [20.3, 1343.0], [20.4, 1351.0], [20.5, 1353.0], [20.6, 1357.0], [20.7, 1361.0], [20.8, 1364.0], [20.9, 1366.0], [21.0, 1373.0], [21.1, 1379.0], [21.2, 1381.0], [21.3, 1385.0], [21.4, 1388.0], [21.5, 1394.0], [21.6, 1397.0], [21.7, 1400.0], [21.8, 1404.0], [21.9, 1410.0], [22.0, 1415.0], [22.1, 1418.0], [22.2, 1423.0], [22.3, 1425.0], [22.4, 1433.0], [22.5, 1436.0], [22.6, 1444.0], [22.7, 1448.0], [22.8, 1455.0], [22.9, 1460.0], [23.0, 1464.0], [23.1, 1471.0], [23.2, 1479.0], [23.3, 1483.0], [23.4, 1491.0], [23.5, 1496.0], [23.6, 1500.0], [23.7, 1505.0], [23.8, 1512.0], [23.9, 1515.0], [24.0, 1523.0], [24.1, 1528.0], [24.2, 1531.0], [24.3, 1538.0], [24.4, 1544.0], [24.5, 1546.0], [24.6, 1550.0], [24.7, 1557.0], [24.8, 1564.0], [24.9, 1573.0], [25.0, 1579.0], [25.1, 1582.0], [25.2, 1586.0], [25.3, 1589.0], [25.4, 1594.0], [25.5, 1597.0], [25.6, 1601.0], [25.7, 1606.0], [25.8, 1612.0], [25.9, 1618.0], [26.0, 1623.0], [26.1, 1630.0], [26.2, 1634.0], [26.3, 1643.0], [26.4, 1650.0], [26.5, 1657.0], [26.6, 1668.0], [26.7, 1677.0], [26.8, 1685.0], [26.9, 1691.0], [27.0, 1701.0], [27.1, 1705.0], [27.2, 1710.0], [27.3, 1717.0], [27.4, 1725.0], [27.5, 1733.0], [27.6, 1740.0], [27.7, 1744.0], [27.8, 1751.0], [27.9, 1769.0], [28.0, 1777.0], [28.1, 1789.0], [28.2, 1800.0], [28.3, 1812.0], [28.4, 1827.0], [28.5, 1846.0], [28.6, 1855.0], [28.7, 1868.0], [28.8, 1895.0], [28.9, 1901.0], [29.0, 1913.0], [29.1, 1929.0], [29.2, 1938.0], [29.3, 1945.0], [29.4, 1959.0], [29.5, 1967.0], [29.6, 1973.0], [29.7, 1999.0], [29.8, 2019.0], [29.9, 2042.0], [30.0, 2067.0], [30.1, 2094.0], [30.2, 2116.0], [30.3, 2135.0], [30.4, 2155.0], [30.5, 2166.0], [30.6, 2181.0], [30.7, 2213.0], [30.8, 2239.0], [30.9, 2263.0], [31.0, 2287.0], [31.1, 2310.0], [31.2, 2340.0], [31.3, 2353.0], [31.4, 2377.0], [31.5, 2384.0], [31.6, 2393.0], [31.7, 2407.0], [31.8, 2412.0], [31.9, 2429.0], [32.0, 2444.0], [32.1, 2454.0], [32.2, 2467.0], [32.3, 2481.0], [32.4, 2491.0], [32.5, 2499.0], [32.6, 2505.0], [32.7, 2508.0], [32.8, 2513.0], [32.9, 2524.0], [33.0, 2534.0], [33.1, 2538.0], [33.2, 2550.0], [33.3, 2554.0], [33.4, 2560.0], [33.5, 2570.0], [33.6, 2575.0], [33.7, 2580.0], [33.8, 2584.0], [33.9, 2589.0], [34.0, 2593.0], [34.1, 2600.0], [34.2, 2609.0], [34.3, 2613.0], [34.4, 2618.0], [34.5, 2623.0], [34.6, 2628.0], [34.7, 2633.0], [34.8, 2641.0], [34.9, 2645.0], [35.0, 2654.0], [35.1, 2658.0], [35.2, 2670.0], [35.3, 2678.0], [35.4, 2687.0], [35.5, 2694.0], [35.6, 2703.0], [35.7, 2708.0], [35.8, 2714.0], [35.9, 2718.0], [36.0, 2726.0], [36.1, 2737.0], [36.2, 2742.0], [36.3, 2748.0], [36.4, 2760.0], [36.5, 2764.0], [36.6, 2769.0], [36.7, 2777.0], [36.8, 2780.0], [36.9, 2787.0], [37.0, 2791.0], [37.1, 2798.0], [37.2, 2805.0], [37.3, 2810.0], [37.4, 2812.0], [37.5, 2819.0], [37.6, 2829.0], [37.7, 2841.0], [37.8, 2843.0], [37.9, 2849.0], [38.0, 2851.0], [38.1, 2859.0], [38.2, 2865.0], [38.3, 2868.0], [38.4, 2876.0], [38.5, 2884.0], [38.6, 2895.0], [38.7, 2897.0], [38.8, 2901.0], [38.9, 2904.0], [39.0, 2908.0], [39.1, 2916.0], [39.2, 2932.0], [39.3, 2938.0], [39.4, 2948.0], [39.5, 2955.0], [39.6, 2961.0], [39.7, 2967.0], [39.8, 2975.0], [39.9, 2979.0], [40.0, 2990.0], [40.1, 2996.0], [40.2, 3001.0], [40.3, 3012.0], [40.4, 3023.0], [40.5, 3033.0], [40.6, 3036.0], [40.7, 3045.0], [40.8, 3051.0], [40.9, 3057.0], [41.0, 3065.0], [41.1, 3080.0], [41.2, 3086.0], [41.3, 3091.0], [41.4, 3095.0], [41.5, 3102.0], [41.6, 3107.0], [41.7, 3112.0], [41.8, 3118.0], [41.9, 3124.0], [42.0, 3130.0], [42.1, 3136.0], [42.2, 3144.0], [42.3, 3147.0], [42.4, 3149.0], [42.5, 3161.0], [42.6, 3166.0], [42.7, 3180.0], [42.8, 3185.0], [42.9, 3192.0], [43.0, 3204.0], [43.1, 3210.0], [43.2, 3219.0], [43.3, 3228.0], [43.4, 3234.0], [43.5, 3239.0], [43.6, 3248.0], [43.7, 3257.0], [43.8, 3267.0], [43.9, 3276.0], [44.0, 3280.0], [44.1, 3288.0], [44.2, 3293.0], [44.3, 3296.0], [44.4, 3303.0], [44.5, 3311.0], [44.6, 3322.0], [44.7, 3332.0], [44.8, 3335.0], [44.9, 3341.0], [45.0, 3349.0], [45.1, 3354.0], [45.2, 3359.0], [45.3, 3365.0], [45.4, 3370.0], [45.5, 3380.0], [45.6, 3386.0], [45.7, 3393.0], [45.8, 3402.0], [45.9, 3407.0], [46.0, 3412.0], [46.1, 3419.0], [46.2, 3426.0], [46.3, 3435.0], [46.4, 3439.0], [46.5, 3444.0], [46.6, 3448.0], [46.7, 3455.0], [46.8, 3461.0], [46.9, 3464.0], [47.0, 3468.0], [47.1, 3475.0], [47.2, 3479.0], [47.3, 3485.0], [47.4, 3488.0], [47.5, 3493.0], [47.6, 3501.0], [47.7, 3508.0], [47.8, 3513.0], [47.9, 3518.0], [48.0, 3522.0], [48.1, 3528.0], [48.2, 3533.0], [48.3, 3538.0], [48.4, 3546.0], [48.5, 3551.0], [48.6, 3560.0], [48.7, 3572.0], [48.8, 3582.0], [48.9, 3585.0], [49.0, 3590.0], [49.1, 3595.0], [49.2, 3601.0], [49.3, 3610.0], [49.4, 3614.0], [49.5, 3618.0], [49.6, 3622.0], [49.7, 3629.0], [49.8, 3634.0], [49.9, 3639.0], [50.0, 3649.0], [50.1, 3656.0], [50.2, 3661.0], [50.3, 3665.0], [50.4, 3669.0], [50.5, 3672.0], [50.6, 3684.0], [50.7, 3688.0], [50.8, 3693.0], [50.9, 3700.0], [51.0, 3711.0], [51.1, 3721.0], [51.2, 3733.0], [51.3, 3739.0], [51.4, 3742.0], [51.5, 3748.0], [51.6, 3760.0], [51.7, 3770.0], [51.8, 3776.0], [51.9, 3785.0], [52.0, 3790.0], [52.1, 3796.0], [52.2, 3801.0], [52.3, 3813.0], [52.4, 3820.0], [52.5, 3837.0], [52.6, 3846.0], [52.7, 3851.0], [52.8, 3859.0], [52.9, 3865.0], [53.0, 3876.0], [53.1, 3883.0], [53.2, 3890.0], [53.3, 3897.0], [53.4, 3905.0], [53.5, 3915.0], [53.6, 3928.0], [53.7, 3938.0], [53.8, 3951.0], [53.9, 3963.0], [54.0, 3977.0], [54.1, 3989.0], [54.2, 4002.0], [54.3, 4016.0], [54.4, 4020.0], [54.5, 4029.0], [54.6, 4031.0], [54.7, 4047.0], [54.8, 4062.0], [54.9, 4077.0], [55.0, 4103.0], [55.1, 4116.0], [55.2, 4121.0], [55.3, 4132.0], [55.4, 4167.0], [55.5, 4183.0], [55.6, 4193.0], [55.7, 4199.0], [55.8, 4222.0], [55.9, 4238.0], [56.0, 4250.0], [56.1, 4259.0], [56.2, 4265.0], [56.3, 4283.0], [56.4, 4299.0], [56.5, 4305.0], [56.6, 4324.0], [56.7, 4330.0], [56.8, 4345.0], [56.9, 4361.0], [57.0, 4371.0], [57.1, 4376.0], [57.2, 4385.0], [57.3, 4397.0], [57.4, 4403.0], [57.5, 4416.0], [57.6, 4426.0], [57.7, 4435.0], [57.8, 4445.0], [57.9, 4452.0], [58.0, 4457.0], [58.1, 4465.0], [58.2, 4471.0], [58.3, 4481.0], [58.4, 4487.0], [58.5, 4500.0], [58.6, 4505.0], [58.7, 4512.0], [58.8, 4530.0], [58.9, 4547.0], [59.0, 4559.0], [59.1, 4570.0], [59.2, 4575.0], [59.3, 4592.0], [59.4, 4602.0], [59.5, 4610.0], [59.6, 4629.0], [59.7, 4639.0], [59.8, 4645.0], [59.9, 4653.0], [60.0, 4663.0], [60.1, 4678.0], [60.2, 4685.0], [60.3, 4689.0], [60.4, 4700.0], [60.5, 4721.0], [60.6, 4729.0], [60.7, 4741.0], [60.8, 4752.0], [60.9, 4762.0], [61.0, 4775.0], [61.1, 4793.0], [61.2, 4800.0], [61.3, 4823.0], [61.4, 4845.0], [61.5, 4860.0], [61.6, 4869.0], [61.7, 4872.0], [61.8, 4885.0], [61.9, 4904.0], [62.0, 4920.0], [62.1, 4932.0], [62.2, 4947.0], [62.3, 4950.0], [62.4, 4963.0], [62.5, 4971.0], [62.6, 4984.0], [62.7, 5002.0], [62.8, 5010.0], [62.9, 5033.0], [63.0, 5040.0], [63.1, 5050.0], [63.2, 5056.0], [63.3, 5081.0], [63.4, 5090.0], [63.5, 5102.0], [63.6, 5108.0], [63.7, 5114.0], [63.8, 5140.0], [63.9, 5154.0], [64.0, 5158.0], [64.1, 5174.0], [64.2, 5180.0], [64.3, 5193.0], [64.4, 5209.0], [64.5, 5214.0], [64.6, 5221.0], [64.7, 5226.0], [64.8, 5233.0], [64.9, 5240.0], [65.0, 5248.0], [65.1, 5254.0], [65.2, 5264.0], [65.3, 5269.0], [65.4, 5273.0], [65.5, 5278.0], [65.6, 5289.0], [65.7, 5297.0], [65.8, 5305.0], [65.9, 5312.0], [66.0, 5321.0], [66.1, 5324.0], [66.2, 5327.0], [66.3, 5330.0], [66.4, 5334.0], [66.5, 5346.0], [66.6, 5355.0], [66.7, 5360.0], [66.8, 5366.0], [66.9, 5372.0], [67.0, 5375.0], [67.1, 5383.0], [67.2, 5393.0], [67.3, 5398.0], [67.4, 5402.0], [67.5, 5408.0], [67.6, 5417.0], [67.7, 5423.0], [67.8, 5432.0], [67.9, 5438.0], [68.0, 5444.0], [68.1, 5456.0], [68.2, 5464.0], [68.3, 5471.0], [68.4, 5473.0], [68.5, 5488.0], [68.6, 5492.0], [68.7, 5498.0], [68.8, 5512.0], [68.9, 5518.0], [69.0, 5527.0], [69.1, 5538.0], [69.2, 5550.0], [69.3, 5562.0], [69.4, 5571.0], [69.5, 5576.0], [69.6, 5582.0], [69.7, 5584.0], [69.8, 5592.0], [69.9, 5600.0], [70.0, 5605.0], [70.1, 5612.0], [70.2, 5618.0], [70.3, 5627.0], [70.4, 5633.0], [70.5, 5641.0], [70.6, 5650.0], [70.7, 5658.0], [70.8, 5666.0], [70.9, 5670.0], [71.0, 5682.0], [71.1, 5695.0], [71.2, 5703.0], [71.3, 5727.0], [71.4, 5735.0], [71.5, 5742.0], [71.6, 5753.0], [71.7, 5757.0], [71.8, 5768.0], [71.9, 5773.0], [72.0, 5781.0], [72.1, 5792.0], [72.2, 5799.0], [72.3, 5804.0], [72.4, 5820.0], [72.5, 5834.0], [72.6, 5839.0], [72.7, 5848.0], [72.8, 5856.0], [72.9, 5863.0], [73.0, 5877.0], [73.1, 5887.0], [73.2, 5895.0], [73.3, 5899.0], [73.4, 5902.0], [73.5, 5908.0], [73.6, 5911.0], [73.7, 5923.0], [73.8, 5941.0], [73.9, 5954.0], [74.0, 5964.0], [74.1, 5974.0], [74.2, 5981.0], [74.3, 5993.0], [74.4, 6002.0], [74.5, 6010.0], [74.6, 6017.0], [74.7, 6027.0], [74.8, 6039.0], [74.9, 6044.0], [75.0, 6063.0], [75.1, 6071.0], [75.2, 6081.0], [75.3, 6092.0], [75.4, 6102.0], [75.5, 6109.0], [75.6, 6115.0], [75.7, 6123.0], [75.8, 6137.0], [75.9, 6146.0], [76.0, 6153.0], [76.1, 6160.0], [76.2, 6167.0], [76.3, 6183.0], [76.4, 6189.0], [76.5, 6204.0], [76.6, 6208.0], [76.7, 6217.0], [76.8, 6223.0], [76.9, 6233.0], [77.0, 6245.0], [77.1, 6249.0], [77.2, 6254.0], [77.3, 6260.0], [77.4, 6263.0], [77.5, 6272.0], [77.6, 6276.0], [77.7, 6284.0], [77.8, 6289.0], [77.9, 6303.0], [78.0, 6309.0], [78.1, 6320.0], [78.2, 6328.0], [78.3, 6332.0], [78.4, 6342.0], [78.5, 6352.0], [78.6, 6355.0], [78.7, 6359.0], [78.8, 6367.0], [78.9, 6372.0], [79.0, 6379.0], [79.1, 6385.0], [79.2, 6398.0], [79.3, 6407.0], [79.4, 6411.0], [79.5, 6414.0], [79.6, 6434.0], [79.7, 6443.0], [79.8, 6451.0], [79.9, 6460.0], [80.0, 6479.0], [80.1, 6486.0], [80.2, 6499.0], [80.3, 6517.0], [80.4, 6524.0], [80.5, 6530.0], [80.6, 6544.0], [80.7, 6553.0], [80.8, 6564.0], [80.9, 6574.0], [81.0, 6582.0], [81.1, 6588.0], [81.2, 6598.0], [81.3, 6604.0], [81.4, 6617.0], [81.5, 6628.0], [81.6, 6632.0], [81.7, 6638.0], [81.8, 6646.0], [81.9, 6654.0], [82.0, 6669.0], [82.1, 6681.0], [82.2, 6692.0], [82.3, 6697.0], [82.4, 6703.0], [82.5, 6714.0], [82.6, 6720.0], [82.7, 6730.0], [82.8, 6735.0], [82.9, 6743.0], [83.0, 6746.0], [83.1, 6751.0], [83.2, 6765.0], [83.3, 6778.0], [83.4, 6784.0], [83.5, 6795.0], [83.6, 6801.0], [83.7, 6808.0], [83.8, 6822.0], [83.9, 6834.0], [84.0, 6837.0], [84.1, 6847.0], [84.2, 6855.0], [84.3, 6864.0], [84.4, 6869.0], [84.5, 6876.0], [84.6, 6885.0], [84.7, 6890.0], [84.8, 6895.0], [84.9, 6901.0], [85.0, 6906.0], [85.1, 6913.0], [85.2, 6923.0], [85.3, 6927.0], [85.4, 6940.0], [85.5, 6950.0], [85.6, 6965.0], [85.7, 6975.0], [85.8, 6985.0], [85.9, 6991.0], [86.0, 7001.0], [86.1, 7014.0], [86.2, 7023.0], [86.3, 7043.0], [86.4, 7054.0], [86.5, 7061.0], [86.6, 7085.0], [86.7, 7092.0], [86.8, 7118.0], [86.9, 7140.0], [87.0, 7174.0], [87.1, 7182.0], [87.2, 7198.0], [87.3, 7232.0], [87.4, 7250.0], [87.5, 7270.0], [87.6, 7294.0], [87.7, 7309.0], [87.8, 7319.0], [87.9, 7343.0], [88.0, 7353.0], [88.1, 7381.0], [88.2, 7406.0], [88.3, 7416.0], [88.4, 7437.0], [88.5, 7452.0], [88.6, 7468.0], [88.7, 7490.0], [88.8, 7496.0], [88.9, 7514.0], [89.0, 7531.0], [89.1, 7547.0], [89.2, 7567.0], [89.3, 7589.0], [89.4, 7609.0], [89.5, 7620.0], [89.6, 7644.0], [89.7, 7661.0], [89.8, 7683.0], [89.9, 7701.0], [90.0, 7716.0], [90.1, 7757.0], [90.2, 7805.0], [90.3, 7870.0], [90.4, 7900.0], [90.5, 7928.0], [90.6, 7959.0], [90.7, 8007.0], [90.8, 8058.0], [90.9, 8091.0], [91.0, 8123.0], [91.1, 8148.0], [91.2, 8160.0], [91.3, 8185.0], [91.4, 8228.0], [91.5, 8244.0], [91.6, 8266.0], [91.7, 8284.0], [91.8, 8293.0], [91.9, 8313.0], [92.0, 8319.0], [92.1, 8342.0], [92.2, 8355.0], [92.3, 8381.0], [92.4, 8409.0], [92.5, 8421.0], [92.6, 8443.0], [92.7, 8480.0], [92.8, 8493.0], [92.9, 8514.0], [93.0, 8538.0], [93.1, 8567.0], [93.2, 8606.0], [93.3, 8617.0], [93.4, 8631.0], [93.5, 8651.0], [93.6, 8683.0], [93.7, 8715.0], [93.8, 8733.0], [93.9, 8748.0], [94.0, 8791.0], [94.1, 8845.0], [94.2, 8862.0], [94.3, 8886.0], [94.4, 8921.0], [94.5, 8931.0], [94.6, 8944.0], [94.7, 8979.0], [94.8, 9024.0], [94.9, 9076.0], [95.0, 9115.0], [95.1, 9199.0], [95.2, 9233.0], [95.3, 9301.0], [95.4, 9362.0], [95.5, 9403.0], [95.6, 9434.0], [95.7, 9478.0], [95.8, 9521.0], [95.9, 9563.0], [96.0, 9592.0], [96.1, 9635.0], [96.2, 9656.0], [96.3, 9702.0], [96.4, 9724.0], [96.5, 9773.0], [96.6, 9808.0], [96.7, 9832.0], [96.8, 9898.0], [96.9, 9920.0], [97.0, 9961.0], [97.1, 10041.0], [97.2, 10103.0], [97.3, 10162.0], [97.4, 10208.0], [97.5, 10323.0], [97.6, 10396.0], [97.7, 10453.0], [97.8, 10514.0], [97.9, 10554.0], [98.0, 10594.0], [98.1, 10647.0], [98.2, 10683.0], [98.3, 10699.0], [98.4, 10766.0], [98.5, 10802.0], [98.6, 10830.0], [98.7, 10858.0], [98.8, 10929.0], [98.9, 11007.0], [99.0, 11065.0], [99.1, 11103.0], [99.2, 11136.0], [99.3, 11227.0], [99.4, 11278.0], [99.5, 11337.0], [99.6, 11519.0], [99.7, 12035.0], [99.8, 12585.0], [99.9, 15368.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 169.0, "series": [{"data": [[0.0, 154.0], [100.0, 169.0], [200.0, 71.0], [300.0, 54.0], [400.0, 103.0], [500.0, 59.0], [600.0, 130.0], [700.0, 72.0], [800.0, 72.0], [900.0, 70.0], [1000.0, 57.0], [1100.0, 84.0], [1200.0, 133.0], [1300.0, 141.0], [1400.0, 121.0], [1500.0, 127.0], [1600.0, 89.0], [1700.0, 76.0], [1800.0, 44.0], [1900.0, 52.0], [2000.0, 27.0], [2100.0, 34.0], [2300.0, 38.0], [2200.0, 23.0], [2400.0, 57.0], [2500.0, 98.0], [2600.0, 94.0], [2800.0, 103.0], [2700.0, 99.0], [2900.0, 89.0], [3000.0, 82.0], [3100.0, 93.0], [3200.0, 87.0], [3300.0, 90.0], [3400.0, 115.0], [3500.0, 101.0], [3700.0, 83.0], [3600.0, 108.0], [3800.0, 71.0], [3900.0, 54.0], [4000.0, 52.0], [4200.0, 44.0], [4100.0, 45.0], [4300.0, 60.0], [4600.0, 65.0], [4400.0, 70.0], [4500.0, 57.0], [4700.0, 49.0], [4800.0, 43.0], [5100.0, 52.0], [5000.0, 51.0], [4900.0, 52.0], [5300.0, 102.0], [5200.0, 89.0], [5400.0, 87.0], [5500.0, 75.0], [5600.0, 78.0], [5700.0, 69.0], [5800.0, 70.0], [6000.0, 62.0], [5900.0, 68.0], [6100.0, 65.0], [6300.0, 85.0], [6200.0, 93.0], [6400.0, 62.0], [6600.0, 69.0], [6500.0, 66.0], [6900.0, 69.0], [6700.0, 76.0], [6800.0, 84.0], [7000.0, 49.0], [7100.0, 31.0], [7400.0, 43.0], [7200.0, 25.0], [7300.0, 34.0], [7500.0, 31.0], [7600.0, 35.0], [7800.0, 13.0], [7700.0, 19.0], [7900.0, 18.0], [8100.0, 26.0], [8000.0, 14.0], [8500.0, 23.0], [8600.0, 28.0], [8400.0, 29.0], [8300.0, 35.0], [8700.0, 25.0], [8200.0, 31.0], [9100.0, 9.0], [8800.0, 21.0], [8900.0, 27.0], [9000.0, 12.0], [9200.0, 11.0], [9400.0, 18.0], [9700.0, 19.0], [9500.0, 15.0], [9600.0, 18.0], [9300.0, 13.0], [9900.0, 16.0], [10100.0, 10.0], [9800.0, 13.0], [10000.0, 9.0], [10200.0, 8.0], [10500.0, 15.0], [10600.0, 19.0], [10400.0, 9.0], [10700.0, 10.0], [10300.0, 9.0], [11200.0, 10.0], [10800.0, 20.0], [11000.0, 13.0], [11100.0, 12.0], [10900.0, 7.0], [11300.0, 7.0], [11400.0, 2.0], [11700.0, 3.0], [11500.0, 1.0], [12000.0, 4.0], [11900.0, 1.0], [11800.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [12800.0, 2.0], [13600.0, 1.0], [13700.0, 1.0], [13400.0, 1.0], [15300.0, 1.0], [15400.0, 1.0], [17900.0, 1.0], [18400.0, 1.0], [18600.0, 1.0], [19600.0, 1.0], [19700.0, 1.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4823.0, "series": [{"data": [[0.0, 551.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 941.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4823.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.5, "minX": 1.62625361E12, "maxY": 925.8765243902444, "series": [{"data": [[1.62625363E12, 163.43474347434756], [1.62625362E12, 25.538226299694188], [1.62625361E12, 15.5], [1.62625367E12, 813.6591375770024], [1.62625366E12, 696.4711191335741], [1.62625365E12, 540.6429906542057], [1.62625364E12, 442.0902255639096], [1.62625368E12, 925.8765243902444]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625368E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 24.0, "minX": 5.0, "maxY": 15368.0, "series": [{"data": [[5.0, 1150.5625000000002], [6.0, 7737.0], [7.0, 15368.0], [8.0, 13783.0], [9.0, 13661.0], [10.0, 813.0714285714284], [11.0, 1773.0], [12.0, 9986.0], [13.0, 9431.0], [14.0, 9153.0], [15.0, 9115.0], [16.0, 5193.0], [17.0, 6017.0], [18.0, 2421.5], [19.0, 565.8545454545458], [20.0, 2463.5], [22.0, 200.0], [23.0, 246.0], [24.0, 130.0], [26.0, 165.0], [27.0, 197.25], [28.0, 240.5], [29.0, 235.0], [31.0, 280.0], [32.0, 209.6], [33.0, 211.75], [35.0, 256.0], [36.0, 234.0], [37.0, 237.5], [38.0, 239.5], [39.0, 269.8], [40.0, 250.0], [41.0, 253.33333333333331], [42.0, 264.25], [43.0, 436.7777777777778], [44.0, 288.0], [46.0, 366.5], [47.0, 326.5], [48.0, 347.6666666666667], [49.0, 333.2], [50.0, 380.2857142857143], [51.0, 451.6], [53.0, 431.73333333333335], [54.0, 470.8571428571429], [55.0, 464.75], [56.0, 499.44444444444446], [57.0, 435.83333333333337], [58.0, 416.0], [60.0, 390.0], [61.0, 405.8], [62.0, 485.1666666666667], [64.0, 530.5], [65.0, 498.5], [66.0, 477.8571428571429], [67.0, 467.0], [71.0, 221.0], [73.0, 395.0], [74.0, 457.7777777777778], [75.0, 618.0], [76.0, 631.0], [77.0, 597.3333333333334], [79.0, 680.1818181818182], [80.0, 700.75], [81.0, 707.2], [82.0, 712.1538461538461], [83.0, 623.4166666666667], [84.0, 584.1428571428571], [85.0, 633.6999999999999], [86.0, 672.5], [87.0, 465.12499999999994], [88.0, 521.25], [91.0, 454.0], [92.0, 545.0], [93.0, 555.0], [94.0, 547.1666666666666], [95.0, 575.3333333333334], [98.0, 733.90625], [97.0, 658.3333333333334], [96.0, 637.0], [99.0, 928.9], [100.0, 986.25], [101.0, 896.0833333333333], [102.0, 686.2307692307692], [103.0, 689.0909090909091], [105.0, 845.0], [106.0, 700.0], [109.0, 732.0], [112.0, 598.7777777777778], [118.0, 1496.0], [127.0, 445.0], [131.0, 801.4], [132.0, 768.5], [133.0, 935.8378378378379], [130.0, 578.0], [129.0, 494.0], [128.0, 361.0], [134.0, 1289.6666666666665], [135.0, 1262.181818181818], [136.0, 1292.333333333333], [137.0, 1136.1034482758619], [138.0, 883.5999999999999], [139.0, 1199.0], [162.0, 677.0], [165.0, 865.0], [167.0, 1217.0], [168.0, 1349.6666666666667], [169.0, 1198.0], [170.0, 1263.8], [171.0, 1314.9696969696975], [179.0, 1247.0], [180.0, 1297.3684210526317], [181.0, 1572.1999999999998], [182.0, 1498.1587301587301], [183.0, 1364.5555555555557], [184.0, 1288.5], [185.0, 1508.5], [186.0, 1062.947368421053], [188.0, 1207.0], [189.0, 955.0], [190.0, 1558.746268656716], [191.0, 1652.75], [192.0, 1575.1000000000001], [193.0, 1381.375], [194.0, 1267.3636363636363], [195.0, 1425.3076923076922], [197.0, 1521.935483870968], [233.0, 1234.0], [236.0, 1317.0], [242.0, 1750.0], [246.0, 1307.0], [248.0, 1527.5], [250.0, 1816.0], [255.0, 1615.8181818181813], [269.0, 1969.0], [256.0, 1839.0973451327432], [271.0, 1083.5], [268.0, 1131.0], [257.0, 1538.0], [267.0, 182.0], [266.0, 2014.3333333333333], [265.0, 1228.2], [264.0, 879.75], [263.0, 1882.7], [262.0, 1099.3333333333333], [261.0, 1618.2222222222224], [286.0, 73.25], [287.0, 2263.0], [285.0, 104.0], [283.0, 95.0], [282.0, 62.0], [280.0, 101.0], [279.0, 1951.0], [276.0, 81.6], [275.0, 126.0], [274.0, 123.75], [272.0, 223.0], [290.0, 2293.0], [301.0, 3795.0], [300.0, 56.0], [299.0, 65.33333333333333], [298.0, 76.5], [297.0, 77.0], [294.0, 93.0], [293.0, 80.5], [292.0, 1190.0], [289.0, 743.0], [288.0, 2263.0], [318.0, 2556.0], [316.0, 906.3333333333334], [307.0, 1224.5], [306.0, 2410.0], [305.0, 2329.0], [304.0, 612.0], [315.0, 63.0], [314.0, 72.0], [313.0, 101.0], [312.0, 99.5], [311.0, 2235.0], [310.0, 59.0], [309.0, 1620.3333333333333], [308.0, 907.6666666666666], [334.0, 85.0], [335.0, 2723.0], [333.0, 97.0], [332.0, 101.66666666666667], [331.0, 102.0], [329.0, 93.0], [328.0, 113.0], [327.0, 936.0], [323.0, 1087.0], [326.0, 884.4], [325.0, 2612.0], [348.0, 54.0], [350.0, 4238.0], [351.0, 1238.5], [349.0, 53.0], [347.0, 48.0], [345.0, 969.3333333333334], [343.0, 2766.0], [336.0, 1425.3333333333333], [339.0, 73.5], [337.0, 1046.0], [342.0, 1409.5], [341.0, 48.0], [366.0, 44.0], [367.0, 65.5], [365.0, 1283.5], [364.0, 1441.0], [363.0, 874.6666666666666], [362.0, 1257.5], [361.0, 513.0], [359.0, 108.5], [353.0, 2352.0], [352.0, 2352.0], [355.0, 1259.5], [354.0, 128.0], [358.0, 129.0], [357.0, 1324.0], [356.0, 865.0], [382.0, 38.333333333333336], [383.0, 24.0], [381.0, 55.0], [371.0, 1301.0], [370.0, 2675.0], [369.0, 1007.6666666666666], [379.0, 43.0], [377.0, 1439.5], [376.0, 1446.5], [374.0, 2275.0], [373.0, 1479.0], [372.0, 1368.0], [386.0, 1477.5], [394.0, 3530.75], [393.0, 3023.0], [390.0, 1245.3333333333333], [389.0, 1086.3333333333333], [388.0, 1368.5], [387.0, 1472.0], [385.0, 2901.0], [384.0, 2232.0], [421.0, 3783.0], [424.0, 3523.0], [426.0, 169.0], [428.0, 3278.0], [429.0, 3308.000000000001], [423.0, 3347.0], [439.0, 2612.178571428571], [440.0, 2658.1724137931033], [441.0, 2903.0074074074073], [465.0, 3421.0], [468.0, 3435.1875], [470.0, 3433.6666666666665], [471.0, 3570.166666666667], [469.0, 3816.0], [472.0, 3599.214285714286], [474.0, 3820.0], [476.0, 3606.0], [477.0, 3467.0], [479.0, 3686.242990654205], [495.0, 5099.666666666667], [496.0, 2973.764705882353], [497.0, 3415.9970674486813], [498.0, 3299.866666666667], [499.0, 3881.5], [515.0, 4384.0], [514.0, 3406.0], [518.0, 4532.0], [539.0, 1568.857142857143], [540.0, 3471.687179487178], [541.0, 4495.730158730158], [542.0, 4789.858108108105], [522.0, 4394.6184971098255], [523.0, 3822.0852272727257], [526.0, 1690.0], [528.0, 891.0], [529.0, 1342.1666666666667], [530.0, 1468.096774193549], [531.0, 1509.1666666666667], [532.0, 1433.0], [553.0, 5224.090909090908], [554.0, 2997.4], [591.0, 4443.785714285714], [592.0, 5357.0], [597.0, 6841.57894736842], [598.0, 6018.857142857142], [612.0, 4511.5], [639.0, 6479.764705882353], [642.0, 6047.333333333333], [643.0, 5491.0], [644.0, 5837.6], [646.0, 6014.008368200836], [647.0, 3262.3333333333335], [648.0, 2499.0], [653.0, 7390.5], [654.0, 7017.473684210526], [723.0, 3857.9869281045762], [725.0, 5762.5602836879425], [727.0, 4581.0], [729.0, 5513.682352941175], [730.0, 6255.428571428572], [731.0, 5688.095238095236], [793.0, 3569.6666666666665], [774.0, 3626.5714285714284], [775.0, 5070.0], [777.0, 5930.5], [778.0, 6211.710000000002], [794.0, 3066.0], [795.0, 3501.0], [796.0, 3227.5], [797.0, 3040.0], [798.0, 4341.833333333333], [800.0, 3822.0000000000005], [801.0, 3515.0], [804.0, 5749.667519181589], [807.0, 7435.857142857143], [834.0, 6930.0], [836.0, 5778.309090909092], [838.0, 6760.333333333333], [840.0, 7487.666666666667], [841.0, 10139.0], [842.0, 7791.5], [843.0, 6136.971830985915], [877.0, 6414.0], [878.0, 8296.542635658912], [925.0, 6672.416666666664], [923.0, 5775.5], [922.0, 5781.0], [924.0, 4270.0], [921.0, 7994.0], [920.0, 7141.0], [903.0, 3684.0], [911.0, 1376.0], [910.0, 4044.0], [909.0, 3518.0], [908.0, 6205.0], [907.0, 6240.0], [906.0, 5134.0], [905.0, 7556.0], [904.0, 4559.0], [918.0, 10493.0], [919.0, 1206.0], [917.0, 8513.666666666666], [916.0, 5769.5], [915.0, 6208.0], [914.0, 7084.0], [927.0, 6893.0], [913.0, 7115.0], [912.0, 7312.0], [926.0, 6323.5], [929.0, 8118.496296296302], [930.0, 5084.435483870968], [928.0, 3752.0]], "isOverall": false, "label": "Press Release", "isController": false}, {"data": [[537.9507911392398, 4064.8286392405107]], "isOverall": false, "label": "Press Release-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 930.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 165.0, "minX": 1.62625361E12, "maxY": 5225091.3, "series": [{"data": [[1.62625363E12, 5225091.3], [1.62625362E12, 1537902.9], [1.62625361E12, 47045.7], [1.62625367E12, 4580836.7], [1.62625366E12, 5211036.8], [1.62625365E12, 5032317.0], [1.62625364E12, 5004098.4], [1.62625368E12, 3063412.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62625363E12, 18331.5], [1.62625362E12, 5395.5], [1.62625361E12, 165.0], [1.62625367E12, 16071.0], [1.62625366E12, 18282.0], [1.62625365E12, 17655.0], [1.62625364E12, 17556.0], [1.62625368E12, 10741.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625368E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 707.8960244648318, "minX": 1.62625361E12, "maxY": 7322.1, "series": [{"data": [[1.62625363E12, 1186.8370837083726], [1.62625362E12, 707.8960244648318], [1.62625361E12, 7322.1], [1.62625367E12, 6307.494866529764], [1.62625366E12, 5426.14259927798], [1.62625365E12, 3961.3009345794394], [1.62625364E12, 2779.7922932330825], [1.62625368E12, 7186.708841463418]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625368E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 697.0214067278284, "minX": 1.62625361E12, "maxY": 7199.1, "series": [{"data": [[1.62625363E12, 1137.3681368136804], [1.62625362E12, 697.0214067278284], [1.62625361E12, 7199.1], [1.62625367E12, 6190.52566735113], [1.62625366E12, 5369.421480144415], [1.62625365E12, 3812.5943925233623], [1.62625364E12, 2713.9661654135325], [1.62625368E12, 7029.397865853653]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625368E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 189.43119266055047, "minX": 1.62625361E12, "maxY": 6893.899390243902, "series": [{"data": [[1.62625363E12, 1092.2358235823574], [1.62625362E12, 189.43119266055047], [1.62625361E12, 206.5], [1.62625367E12, 6077.547227926078], [1.62625366E12, 5292.743682310471], [1.62625365E12, 3620.6672897196236], [1.62625364E12, 2615.7265037594034], [1.62625368E12, 6893.899390243902]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625368E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.62625361E12, "maxY": 19788.0, "series": [{"data": [[1.62625363E12, 3263.0], [1.62625362E12, 19788.0], [1.62625361E12, 10127.0], [1.62625367E12, 12095.0], [1.62625366E12, 12065.0], [1.62625365E12, 9929.0], [1.62625364E12, 6319.0], [1.62625368E12, 13450.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62625363E12, 221.0], [1.62625362E12, 23.0], [1.62625361E12, 4697.0], [1.62625367E12, 2381.0], [1.62625366E12, 396.0], [1.62625365E12, 582.0], [1.62625364E12, 24.0], [1.62625368E12, 127.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62625363E12, 1733.0], [1.62625362E12, 439.99999999999994], [1.62625361E12, 10112.9], [1.62625367E12, 8981.5], [1.62625366E12, 7195.4], [1.62625365E12, 6877.4], [1.62625364E12, 3878.0], [1.62625368E12, 10798.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62625363E12, 2907.88], [1.62625362E12, 18593.399999999994], [1.62625361E12, 10127.0], [1.62625367E12, 10880.5], [1.62625366E12, 10680.480000000003], [1.62625365E12, 8752.22], [1.62625364E12, 5411.699999999996], [1.62625368E12, 12015.840000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62625363E12, 1959.3999999999999], [1.62625362E12, 546.9999999999977], [1.62625361E12, 10127.0], [1.62625367E12, 9721.0], [1.62625366E12, 7717.1], [1.62625365E12, 7760.449999999985], [1.62625364E12, 4898.5], [1.62625368E12, 11105.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625368E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 70.0, "minX": 1.0, "maxY": 13722.0, "series": [{"data": [[2.0, 13722.0], [3.0, 9986.0], [4.0, 2565.5], [5.0, 4788.0], [6.0, 3637.5], [18.0, 3296.5], [19.0, 7884.0], [22.0, 6205.0], [27.0, 7340.0], [28.0, 6572.5], [30.0, 6016.0], [33.0, 5226.0], [34.0, 5413.0], [37.0, 70.0], [45.0, 4949.0], [57.0, 2599.0], [65.0, 3665.0], [70.0, 1202.5], [69.0, 4854.5], [87.0, 113.0], [94.0, 1540.5], [92.0, 3471.0], [93.0, 3513.0], [96.0, 178.5], [98.0, 2624.5], [99.0, 5432.0], [97.0, 8255.0], [102.0, 328.0], [101.0, 1622.5], [103.0, 1531.0], [100.0, 5752.5], [107.0, 479.0], [111.0, 4465.0], [121.0, 726.5], [125.0, 1512.5], [133.0, 6087.0], [132.0, 5135.5], [128.0, 8162.0], [144.0, 1412.0], [159.0, 3617.0], [165.0, 1263.0], [160.0, 5004.5], [171.0, 178.0], [173.0, 3228.0], [176.0, 3232.5], [183.0, 3679.0], [207.0, 6567.0], [211.0, 5489.0], [209.0, 6524.5], [210.0, 4775.0], [220.0, 2810.0], [237.0, 6744.0], [1.0, 12836.0], [261.0, 5991.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[30.0, 6063.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 261.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 13559.5, "series": [{"data": [[2.0, 13559.5], [3.0, 9868.0], [4.0, 2528.5], [5.0, 4633.0], [6.0, 3416.0], [18.0, 2965.0], [19.0, 7883.0], [22.0, 5808.5], [27.0, 6691.0], [28.0, 5817.5], [30.0, 6015.0], [33.0, 5009.0], [34.0, 5273.0], [37.0, 69.0], [45.0, 4880.0], [57.0, 2559.0], [65.0, 3638.0], [70.0, 1014.0], [69.0, 4774.0], [87.0, 112.0], [94.0, 1517.0], [92.0, 3455.0], [93.0, 3512.0], [96.0, 172.0], [98.0, 2623.0], [99.0, 5304.0], [97.0, 8241.0], [102.0, 312.0], [101.0, 1591.0], [103.0, 1430.0], [100.0, 5614.5], [107.0, 465.0], [111.0, 4446.0], [121.0, 690.0], [125.0, 1382.5], [133.0, 6078.0], [132.0, 5109.0], [128.0, 8102.5], [144.0, 1379.5], [159.0, 3392.0], [165.0, 1260.0], [160.0, 5002.0], [171.0, 175.0], [173.0, 3220.0], [176.0, 3183.0], [183.0, 3638.0], [207.0, 6442.0], [211.0, 5404.5], [209.0, 6520.0], [210.0, 4761.5], [220.0, 2792.0], [237.0, 6723.0], [1.0, 12649.0], [261.0, 5793.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 261.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.6262536E12, "maxY": 144.2, "series": [{"data": [[1.62625363E12, 120.0], [1.62625362E12, 37.2], [1.6262536E12, 2.0], [1.62625367E12, 85.1], [1.62625366E12, 132.2], [1.62625365E12, 110.4], [1.62625364E12, 144.2], [1.62625368E12, 0.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625368E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62625361E12, "maxY": 111.1, "series": [{"data": [[1.62625368E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62625363E12, 111.1], [1.62625362E12, 32.7], [1.62625361E12, 1.0], [1.62625367E12, 97.4], [1.62625366E12, 110.8], [1.62625365E12, 107.0], [1.62625364E12, 106.4], [1.62625368E12, 65.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62625368E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.impl.execchain.RequestAbortedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625368E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62625361E12, "maxY": 111.1, "series": [{"data": [[1.62625368E12, 0.5]], "isOverall": false, "label": "Press Release-failure", "isController": false}, {"data": [[1.62625363E12, 111.1], [1.62625362E12, 32.7], [1.62625361E12, 1.0], [1.62625367E12, 97.4], [1.62625366E12, 110.8], [1.62625365E12, 107.0], [1.62625364E12, 106.4], [1.62625368E12, 65.1]], "isOverall": false, "label": "Press Release-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625368E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62625361E12, "maxY": 111.1, "series": [{"data": [[1.62625363E12, 111.1], [1.62625362E12, 32.7], [1.62625361E12, 1.0], [1.62625367E12, 97.4], [1.62625366E12, 110.8], [1.62625365E12, 107.0], [1.62625364E12, 106.4], [1.62625368E12, 65.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62625368E12, 0.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625368E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

