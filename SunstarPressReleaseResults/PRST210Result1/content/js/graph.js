/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "maxY": 26978.0, "series": [{"data": [[0.0, 12.0], [0.1, 13.0], [0.2, 14.0], [0.3, 15.0], [0.4, 16.0], [0.5, 16.0], [0.6, 16.0], [0.7, 16.0], [0.8, 16.0], [0.9, 17.0], [1.0, 17.0], [1.1, 17.0], [1.2, 18.0], [1.3, 18.0], [1.4, 20.0], [1.5, 21.0], [1.6, 22.0], [1.7, 23.0], [1.8, 24.0], [1.9, 25.0], [2.0, 26.0], [2.1, 26.0], [2.2, 28.0], [2.3, 29.0], [2.4, 29.0], [2.5, 31.0], [2.6, 32.0], [2.7, 35.0], [2.8, 37.0], [2.9, 39.0], [3.0, 41.0], [3.1, 43.0], [3.2, 44.0], [3.3, 45.0], [3.4, 46.0], [3.5, 48.0], [3.6, 51.0], [3.7, 52.0], [3.8, 54.0], [3.9, 57.0], [4.0, 61.0], [4.1, 67.0], [4.2, 70.0], [4.3, 76.0], [4.4, 80.0], [4.5, 82.0], [4.6, 83.0], [4.7, 85.0], [4.8, 86.0], [4.9, 87.0], [5.0, 89.0], [5.1, 91.0], [5.2, 92.0], [5.3, 93.0], [5.4, 94.0], [5.5, 96.0], [5.6, 98.0], [5.7, 100.0], [5.8, 100.0], [5.9, 101.0], [6.0, 104.0], [6.1, 105.0], [6.2, 107.0], [6.3, 108.0], [6.4, 110.0], [6.5, 111.0], [6.6, 112.0], [6.7, 113.0], [6.8, 115.0], [6.9, 116.0], [7.0, 118.0], [7.1, 119.0], [7.2, 120.0], [7.3, 121.0], [7.4, 123.0], [7.5, 124.0], [7.6, 125.0], [7.7, 126.0], [7.8, 127.0], [7.9, 128.0], [8.0, 128.0], [8.1, 129.0], [8.2, 131.0], [8.3, 132.0], [8.4, 133.0], [8.5, 134.0], [8.6, 135.0], [8.7, 135.0], [8.8, 138.0], [8.9, 139.0], [9.0, 139.0], [9.1, 141.0], [9.2, 142.0], [9.3, 143.0], [9.4, 144.0], [9.5, 144.0], [9.6, 145.0], [9.7, 146.0], [9.8, 147.0], [9.9, 147.0], [10.0, 147.0], [10.1, 148.0], [10.2, 149.0], [10.3, 150.0], [10.4, 151.0], [10.5, 152.0], [10.6, 152.0], [10.7, 153.0], [10.8, 154.0], [10.9, 155.0], [11.0, 155.0], [11.1, 155.0], [11.2, 156.0], [11.3, 157.0], [11.4, 158.0], [11.5, 159.0], [11.6, 159.0], [11.7, 159.0], [11.8, 159.0], [11.9, 160.0], [12.0, 160.0], [12.1, 160.0], [12.2, 161.0], [12.3, 162.0], [12.4, 163.0], [12.5, 164.0], [12.6, 165.0], [12.7, 165.0], [12.8, 166.0], [12.9, 167.0], [13.0, 167.0], [13.1, 168.0], [13.2, 169.0], [13.3, 169.0], [13.4, 169.0], [13.5, 170.0], [13.6, 171.0], [13.7, 171.0], [13.8, 171.0], [13.9, 173.0], [14.0, 173.0], [14.1, 174.0], [14.2, 174.0], [14.3, 175.0], [14.4, 176.0], [14.5, 176.0], [14.6, 177.0], [14.7, 178.0], [14.8, 179.0], [14.9, 179.0], [15.0, 180.0], [15.1, 182.0], [15.2, 183.0], [15.3, 184.0], [15.4, 184.0], [15.5, 185.0], [15.6, 185.0], [15.7, 187.0], [15.8, 187.0], [15.9, 188.0], [16.0, 189.0], [16.1, 190.0], [16.2, 191.0], [16.3, 191.0], [16.4, 192.0], [16.5, 193.0], [16.6, 194.0], [16.7, 195.0], [16.8, 196.0], [16.9, 197.0], [17.0, 198.0], [17.1, 199.0], [17.2, 200.0], [17.3, 200.0], [17.4, 201.0], [17.5, 203.0], [17.6, 203.0], [17.7, 204.0], [17.8, 205.0], [17.9, 207.0], [18.0, 208.0], [18.1, 210.0], [18.2, 211.0], [18.3, 212.0], [18.4, 214.0], [18.5, 215.0], [18.6, 216.0], [18.7, 217.0], [18.8, 219.0], [18.9, 222.0], [19.0, 223.0], [19.1, 224.0], [19.2, 226.0], [19.3, 227.0], [19.4, 228.0], [19.5, 229.0], [19.6, 232.0], [19.7, 234.0], [19.8, 236.0], [19.9, 238.0], [20.0, 238.0], [20.1, 240.0], [20.2, 242.0], [20.3, 243.0], [20.4, 246.0], [20.5, 250.0], [20.6, 251.0], [20.7, 251.0], [20.8, 254.0], [20.9, 256.0], [21.0, 256.0], [21.1, 257.0], [21.2, 258.0], [21.3, 259.0], [21.4, 259.0], [21.5, 261.0], [21.6, 262.0], [21.7, 265.0], [21.8, 266.0], [21.9, 267.0], [22.0, 269.0], [22.1, 270.0], [22.2, 273.0], [22.3, 273.0], [22.4, 276.0], [22.5, 277.0], [22.6, 278.0], [22.7, 280.0], [22.8, 282.0], [22.9, 283.0], [23.0, 284.0], [23.1, 286.0], [23.2, 287.0], [23.3, 288.0], [23.4, 290.0], [23.5, 292.0], [23.6, 293.0], [23.7, 295.0], [23.8, 296.0], [23.9, 297.0], [24.0, 299.0], [24.1, 300.0], [24.2, 301.0], [24.3, 303.0], [24.4, 305.0], [24.5, 307.0], [24.6, 307.0], [24.7, 309.0], [24.8, 310.0], [24.9, 312.0], [25.0, 317.0], [25.1, 321.0], [25.2, 324.0], [25.3, 325.0], [25.4, 327.0], [25.5, 329.0], [25.6, 331.0], [25.7, 333.0], [25.8, 335.0], [25.9, 336.0], [26.0, 339.0], [26.1, 341.0], [26.2, 342.0], [26.3, 343.0], [26.4, 346.0], [26.5, 348.0], [26.6, 348.0], [26.7, 351.0], [26.8, 352.0], [26.9, 352.0], [27.0, 355.0], [27.1, 359.0], [27.2, 360.0], [27.3, 364.0], [27.4, 365.0], [27.5, 367.0], [27.6, 369.0], [27.7, 371.0], [27.8, 373.0], [27.9, 375.0], [28.0, 376.0], [28.1, 380.0], [28.2, 382.0], [28.3, 385.0], [28.4, 389.0], [28.5, 391.0], [28.6, 392.0], [28.7, 394.0], [28.8, 396.0], [28.9, 399.0], [29.0, 402.0], [29.1, 403.0], [29.2, 405.0], [29.3, 406.0], [29.4, 408.0], [29.5, 411.0], [29.6, 412.0], [29.7, 416.0], [29.8, 418.0], [29.9, 422.0], [30.0, 425.0], [30.1, 430.0], [30.2, 432.0], [30.3, 435.0], [30.4, 439.0], [30.5, 443.0], [30.6, 445.0], [30.7, 446.0], [30.8, 450.0], [30.9, 452.0], [31.0, 455.0], [31.1, 458.0], [31.2, 461.0], [31.3, 463.0], [31.4, 464.0], [31.5, 466.0], [31.6, 468.0], [31.7, 471.0], [31.8, 473.0], [31.9, 475.0], [32.0, 478.0], [32.1, 482.0], [32.2, 485.0], [32.3, 486.0], [32.4, 489.0], [32.5, 491.0], [32.6, 492.0], [32.7, 495.0], [32.8, 497.0], [32.9, 498.0], [33.0, 500.0], [33.1, 503.0], [33.2, 504.0], [33.3, 507.0], [33.4, 509.0], [33.5, 511.0], [33.6, 511.0], [33.7, 515.0], [33.8, 520.0], [33.9, 523.0], [34.0, 524.0], [34.1, 525.0], [34.2, 527.0], [34.3, 528.0], [34.4, 531.0], [34.5, 534.0], [34.6, 536.0], [34.7, 537.0], [34.8, 540.0], [34.9, 543.0], [35.0, 544.0], [35.1, 546.0], [35.2, 548.0], [35.3, 550.0], [35.4, 552.0], [35.5, 556.0], [35.6, 557.0], [35.7, 558.0], [35.8, 560.0], [35.9, 561.0], [36.0, 564.0], [36.1, 565.0], [36.2, 567.0], [36.3, 568.0], [36.4, 569.0], [36.5, 572.0], [36.6, 573.0], [36.7, 575.0], [36.8, 577.0], [36.9, 579.0], [37.0, 579.0], [37.1, 583.0], [37.2, 585.0], [37.3, 587.0], [37.4, 588.0], [37.5, 591.0], [37.6, 595.0], [37.7, 598.0], [37.8, 600.0], [37.9, 602.0], [38.0, 603.0], [38.1, 605.0], [38.2, 608.0], [38.3, 610.0], [38.4, 612.0], [38.5, 613.0], [38.6, 615.0], [38.7, 618.0], [38.8, 620.0], [38.9, 626.0], [39.0, 628.0], [39.1, 630.0], [39.2, 634.0], [39.3, 636.0], [39.4, 639.0], [39.5, 640.0], [39.6, 642.0], [39.7, 644.0], [39.8, 649.0], [39.9, 651.0], [40.0, 655.0], [40.1, 656.0], [40.2, 658.0], [40.3, 660.0], [40.4, 663.0], [40.5, 666.0], [40.6, 668.0], [40.7, 671.0], [40.8, 673.0], [40.9, 675.0], [41.0, 678.0], [41.1, 680.0], [41.2, 685.0], [41.3, 687.0], [41.4, 691.0], [41.5, 694.0], [41.6, 698.0], [41.7, 699.0], [41.8, 702.0], [41.9, 704.0], [42.0, 707.0], [42.1, 710.0], [42.2, 713.0], [42.3, 716.0], [42.4, 717.0], [42.5, 719.0], [42.6, 720.0], [42.7, 722.0], [42.8, 724.0], [42.9, 726.0], [43.0, 726.0], [43.1, 729.0], [43.2, 732.0], [43.3, 734.0], [43.4, 736.0], [43.5, 739.0], [43.6, 741.0], [43.7, 744.0], [43.8, 745.0], [43.9, 749.0], [44.0, 750.0], [44.1, 753.0], [44.2, 755.0], [44.3, 759.0], [44.4, 760.0], [44.5, 762.0], [44.6, 763.0], [44.7, 767.0], [44.8, 771.0], [44.9, 773.0], [45.0, 775.0], [45.1, 776.0], [45.2, 779.0], [45.3, 781.0], [45.4, 782.0], [45.5, 784.0], [45.6, 787.0], [45.7, 787.0], [45.8, 790.0], [45.9, 795.0], [46.0, 797.0], [46.1, 799.0], [46.2, 802.0], [46.3, 804.0], [46.4, 805.0], [46.5, 805.0], [46.6, 809.0], [46.7, 811.0], [46.8, 812.0], [46.9, 815.0], [47.0, 819.0], [47.1, 822.0], [47.2, 823.0], [47.3, 825.0], [47.4, 828.0], [47.5, 830.0], [47.6, 835.0], [47.7, 837.0], [47.8, 839.0], [47.9, 843.0], [48.0, 846.0], [48.1, 849.0], [48.2, 850.0], [48.3, 852.0], [48.4, 856.0], [48.5, 857.0], [48.6, 859.0], [48.7, 864.0], [48.8, 866.0], [48.9, 869.0], [49.0, 871.0], [49.1, 874.0], [49.2, 876.0], [49.3, 878.0], [49.4, 881.0], [49.5, 883.0], [49.6, 886.0], [49.7, 887.0], [49.8, 890.0], [49.9, 893.0], [50.0, 896.0], [50.1, 898.0], [50.2, 902.0], [50.3, 906.0], [50.4, 910.0], [50.5, 917.0], [50.6, 919.0], [50.7, 921.0], [50.8, 922.0], [50.9, 925.0], [51.0, 928.0], [51.1, 932.0], [51.2, 936.0], [51.3, 937.0], [51.4, 942.0], [51.5, 945.0], [51.6, 949.0], [51.7, 950.0], [51.8, 951.0], [51.9, 954.0], [52.0, 958.0], [52.1, 962.0], [52.2, 966.0], [52.3, 968.0], [52.4, 969.0], [52.5, 972.0], [52.6, 973.0], [52.7, 978.0], [52.8, 982.0], [52.9, 985.0], [53.0, 988.0], [53.1, 993.0], [53.2, 995.0], [53.3, 1002.0], [53.4, 1008.0], [53.5, 1011.0], [53.6, 1012.0], [53.7, 1018.0], [53.8, 1021.0], [53.9, 1024.0], [54.0, 1028.0], [54.1, 1031.0], [54.2, 1033.0], [54.3, 1039.0], [54.4, 1040.0], [54.5, 1045.0], [54.6, 1047.0], [54.7, 1051.0], [54.8, 1055.0], [54.9, 1059.0], [55.0, 1062.0], [55.1, 1063.0], [55.2, 1066.0], [55.3, 1068.0], [55.4, 1071.0], [55.5, 1077.0], [55.6, 1081.0], [55.7, 1083.0], [55.8, 1085.0], [55.9, 1087.0], [56.0, 1091.0], [56.1, 1099.0], [56.2, 1102.0], [56.3, 1107.0], [56.4, 1110.0], [56.5, 1113.0], [56.6, 1116.0], [56.7, 1121.0], [56.8, 1124.0], [56.9, 1126.0], [57.0, 1129.0], [57.1, 1132.0], [57.2, 1136.0], [57.3, 1138.0], [57.4, 1139.0], [57.5, 1142.0], [57.6, 1145.0], [57.7, 1146.0], [57.8, 1150.0], [57.9, 1154.0], [58.0, 1157.0], [58.1, 1160.0], [58.2, 1163.0], [58.3, 1168.0], [58.4, 1170.0], [58.5, 1173.0], [58.6, 1174.0], [58.7, 1177.0], [58.8, 1179.0], [58.9, 1181.0], [59.0, 1183.0], [59.1, 1188.0], [59.2, 1191.0], [59.3, 1194.0], [59.4, 1196.0], [59.5, 1198.0], [59.6, 1203.0], [59.7, 1206.0], [59.8, 1210.0], [59.9, 1212.0], [60.0, 1214.0], [60.1, 1216.0], [60.2, 1218.0], [60.3, 1219.0], [60.4, 1221.0], [60.5, 1224.0], [60.6, 1226.0], [60.7, 1227.0], [60.8, 1229.0], [60.9, 1232.0], [61.0, 1233.0], [61.1, 1237.0], [61.2, 1241.0], [61.3, 1243.0], [61.4, 1246.0], [61.5, 1247.0], [61.6, 1249.0], [61.7, 1251.0], [61.8, 1256.0], [61.9, 1258.0], [62.0, 1260.0], [62.1, 1263.0], [62.2, 1268.0], [62.3, 1270.0], [62.4, 1273.0], [62.5, 1279.0], [62.6, 1281.0], [62.7, 1283.0], [62.8, 1286.0], [62.9, 1288.0], [63.0, 1293.0], [63.1, 1294.0], [63.2, 1297.0], [63.3, 1305.0], [63.4, 1310.0], [63.5, 1312.0], [63.6, 1315.0], [63.7, 1319.0], [63.8, 1321.0], [63.9, 1325.0], [64.0, 1332.0], [64.1, 1334.0], [64.2, 1336.0], [64.3, 1340.0], [64.4, 1342.0], [64.5, 1343.0], [64.6, 1347.0], [64.7, 1351.0], [64.8, 1353.0], [64.9, 1355.0], [65.0, 1358.0], [65.1, 1362.0], [65.2, 1367.0], [65.3, 1373.0], [65.4, 1376.0], [65.5, 1379.0], [65.6, 1382.0], [65.7, 1385.0], [65.8, 1386.0], [65.9, 1391.0], [66.0, 1395.0], [66.1, 1397.0], [66.2, 1398.0], [66.3, 1404.0], [66.4, 1405.0], [66.5, 1408.0], [66.6, 1411.0], [66.7, 1412.0], [66.8, 1416.0], [66.9, 1421.0], [67.0, 1424.0], [67.1, 1429.0], [67.2, 1431.0], [67.3, 1435.0], [67.4, 1436.0], [67.5, 1442.0], [67.6, 1446.0], [67.7, 1447.0], [67.8, 1451.0], [67.9, 1454.0], [68.0, 1458.0], [68.1, 1459.0], [68.2, 1463.0], [68.3, 1467.0], [68.4, 1470.0], [68.5, 1473.0], [68.6, 1474.0], [68.7, 1476.0], [68.8, 1479.0], [68.9, 1482.0], [69.0, 1485.0], [69.1, 1490.0], [69.2, 1492.0], [69.3, 1494.0], [69.4, 1496.0], [69.5, 1499.0], [69.6, 1502.0], [69.7, 1505.0], [69.8, 1508.0], [69.9, 1514.0], [70.0, 1517.0], [70.1, 1521.0], [70.2, 1523.0], [70.3, 1526.0], [70.4, 1528.0], [70.5, 1534.0], [70.6, 1537.0], [70.7, 1541.0], [70.8, 1543.0], [70.9, 1544.0], [71.0, 1545.0], [71.1, 1546.0], [71.2, 1550.0], [71.3, 1554.0], [71.4, 1557.0], [71.5, 1560.0], [71.6, 1561.0], [71.7, 1564.0], [71.8, 1566.0], [71.9, 1568.0], [72.0, 1570.0], [72.1, 1572.0], [72.2, 1575.0], [72.3, 1576.0], [72.4, 1578.0], [72.5, 1581.0], [72.6, 1585.0], [72.7, 1586.0], [72.8, 1588.0], [72.9, 1593.0], [73.0, 1596.0], [73.1, 1599.0], [73.2, 1605.0], [73.3, 1607.0], [73.4, 1609.0], [73.5, 1611.0], [73.6, 1614.0], [73.7, 1617.0], [73.8, 1620.0], [73.9, 1624.0], [74.0, 1626.0], [74.1, 1629.0], [74.2, 1631.0], [74.3, 1635.0], [74.4, 1639.0], [74.5, 1642.0], [74.6, 1642.0], [74.7, 1644.0], [74.8, 1646.0], [74.9, 1648.0], [75.0, 1651.0], [75.1, 1652.0], [75.2, 1658.0], [75.3, 1660.0], [75.4, 1663.0], [75.5, 1666.0], [75.6, 1670.0], [75.7, 1670.0], [75.8, 1672.0], [75.9, 1675.0], [76.0, 1676.0], [76.1, 1677.0], [76.2, 1678.0], [76.3, 1683.0], [76.4, 1686.0], [76.5, 1688.0], [76.6, 1694.0], [76.7, 1695.0], [76.8, 1698.0], [76.9, 1701.0], [77.0, 1704.0], [77.1, 1708.0], [77.2, 1713.0], [77.3, 1714.0], [77.4, 1716.0], [77.5, 1719.0], [77.6, 1721.0], [77.7, 1725.0], [77.8, 1731.0], [77.9, 1735.0], [78.0, 1738.0], [78.1, 1740.0], [78.2, 1741.0], [78.3, 1744.0], [78.4, 1747.0], [78.5, 1751.0], [78.6, 1758.0], [78.7, 1765.0], [78.8, 1772.0], [78.9, 1775.0], [79.0, 1781.0], [79.1, 1783.0], [79.2, 1787.0], [79.3, 1791.0], [79.4, 1793.0], [79.5, 1797.0], [79.6, 1798.0], [79.7, 1805.0], [79.8, 1809.0], [79.9, 1813.0], [80.0, 1815.0], [80.1, 1820.0], [80.2, 1821.0], [80.3, 1823.0], [80.4, 1830.0], [80.5, 1834.0], [80.6, 1837.0], [80.7, 1841.0], [80.8, 1843.0], [80.9, 1846.0], [81.0, 1847.0], [81.1, 1851.0], [81.2, 1854.0], [81.3, 1856.0], [81.4, 1863.0], [81.5, 1867.0], [81.6, 1870.0], [81.7, 1880.0], [81.8, 1883.0], [81.9, 1886.0], [82.0, 1889.0], [82.1, 1892.0], [82.2, 1895.0], [82.3, 1899.0], [82.4, 1904.0], [82.5, 1908.0], [82.6, 1912.0], [82.7, 1917.0], [82.8, 1922.0], [82.9, 1929.0], [83.0, 1933.0], [83.1, 1935.0], [83.2, 1938.0], [83.3, 1940.0], [83.4, 1947.0], [83.5, 1951.0], [83.6, 1954.0], [83.7, 1957.0], [83.8, 1962.0], [83.9, 1964.0], [84.0, 1965.0], [84.1, 1970.0], [84.2, 1977.0], [84.3, 1982.0], [84.4, 1986.0], [84.5, 1989.0], [84.6, 1994.0], [84.7, 2001.0], [84.8, 2004.0], [84.9, 2012.0], [85.0, 2017.0], [85.1, 2021.0], [85.2, 2028.0], [85.3, 2032.0], [85.4, 2045.0], [85.5, 2054.0], [85.6, 2058.0], [85.7, 2062.0], [85.8, 2071.0], [85.9, 2076.0], [86.0, 2083.0], [86.1, 2089.0], [86.2, 2092.0], [86.3, 2094.0], [86.4, 2096.0], [86.5, 2102.0], [86.6, 2107.0], [86.7, 2112.0], [86.8, 2118.0], [86.9, 2123.0], [87.0, 2127.0], [87.1, 2138.0], [87.2, 2144.0], [87.3, 2150.0], [87.4, 2154.0], [87.5, 2157.0], [87.6, 2161.0], [87.7, 2169.0], [87.8, 2175.0], [87.9, 2183.0], [88.0, 2192.0], [88.1, 2195.0], [88.2, 2201.0], [88.3, 2208.0], [88.4, 2222.0], [88.5, 2233.0], [88.6, 2242.0], [88.7, 2252.0], [88.8, 2256.0], [88.9, 2260.0], [89.0, 2270.0], [89.1, 2273.0], [89.2, 2283.0], [89.3, 2291.0], [89.4, 2296.0], [89.5, 2300.0], [89.6, 2305.0], [89.7, 2310.0], [89.8, 2313.0], [89.9, 2319.0], [90.0, 2330.0], [90.1, 2338.0], [90.2, 2343.0], [90.3, 2347.0], [90.4, 2348.0], [90.5, 2353.0], [90.6, 2361.0], [90.7, 2368.0], [90.8, 2377.0], [90.9, 2384.0], [91.0, 2387.0], [91.1, 2401.0], [91.2, 2408.0], [91.3, 2417.0], [91.4, 2422.0], [91.5, 2427.0], [91.6, 2432.0], [91.7, 2437.0], [91.8, 2446.0], [91.9, 2456.0], [92.0, 2461.0], [92.1, 2469.0], [92.2, 2473.0], [92.3, 2480.0], [92.4, 2494.0], [92.5, 2500.0], [92.6, 2511.0], [92.7, 2519.0], [92.8, 2527.0], [92.9, 2528.0], [93.0, 2542.0], [93.1, 2551.0], [93.2, 2560.0], [93.3, 2567.0], [93.4, 2584.0], [93.5, 2590.0], [93.6, 2596.0], [93.7, 2599.0], [93.8, 2611.0], [93.9, 2617.0], [94.0, 2623.0], [94.1, 2661.0], [94.2, 2674.0], [94.3, 2687.0], [94.4, 2695.0], [94.5, 2700.0], [94.6, 2706.0], [94.7, 2718.0], [94.8, 2749.0], [94.9, 2771.0], [95.0, 2774.0], [95.1, 2789.0], [95.2, 2814.0], [95.3, 2832.0], [95.4, 2850.0], [95.5, 2859.0], [95.6, 2889.0], [95.7, 2896.0], [95.8, 2914.0], [95.9, 2926.0], [96.0, 2940.0], [96.1, 2955.0], [96.2, 2973.0], [96.3, 2981.0], [96.4, 2996.0], [96.5, 3017.0], [96.6, 3040.0], [96.7, 3050.0], [96.8, 3060.0], [96.9, 3068.0], [97.0, 3085.0], [97.1, 3094.0], [97.2, 3116.0], [97.3, 3130.0], [97.4, 3160.0], [97.5, 3184.0], [97.6, 3211.0], [97.7, 3237.0], [97.8, 3251.0], [97.9, 3259.0], [98.0, 3276.0], [98.1, 3333.0], [98.2, 3420.0], [98.3, 3536.0], [98.4, 3649.0], [98.5, 3693.0], [98.6, 3720.0], [98.7, 3787.0], [98.8, 3810.0], [98.9, 3848.0], [99.0, 3874.0], [99.1, 3957.0], [99.2, 4113.0], [99.3, 4280.0], [99.4, 4350.0], [99.5, 4395.0], [99.6, 7124.0], [99.7, 10716.0], [99.8, 16473.0], [99.9, 24197.0], [100.0, 26978.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 572.0, "series": [{"data": [[0.0, 283.0], [600.0, 196.0], [700.0, 219.0], [800.0, 200.0], [900.0, 155.0], [1000.0, 143.0], [1100.0, 170.0], [1200.0, 185.0], [1300.0, 150.0], [1400.0, 162.0], [1500.0, 179.0], [1600.0, 185.0], [1700.0, 140.0], [1800.0, 133.0], [1900.0, 117.0], [2000.0, 89.0], [2100.0, 86.0], [2200.0, 66.0], [2300.0, 79.0], [2400.0, 70.0], [2500.0, 61.0], [2600.0, 39.0], [2700.0, 35.0], [2800.0, 27.0], [2900.0, 33.0], [3000.0, 36.0], [3100.0, 23.0], [3200.0, 22.0], [3300.0, 7.0], [3400.0, 5.0], [3500.0, 4.0], [3600.0, 8.0], [3700.0, 10.0], [3800.0, 15.0], [3900.0, 6.0], [4000.0, 3.0], [4300.0, 10.0], [4200.0, 2.0], [4100.0, 4.0], [4400.0, 2.0], [4600.0, 1.0], [4500.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [10700.0, 1.0], [11100.0, 1.0], [11600.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [16400.0, 1.0], [17200.0, 1.0], [18200.0, 1.0], [19700.0, 1.0], [20500.0, 1.0], [24100.0, 1.0], [24700.0, 1.0], [24800.0, 1.0], [26100.0, 1.0], [100.0, 572.0], [26900.0, 1.0], [200.0, 342.0], [300.0, 242.0], [400.0, 203.0], [500.0, 239.0]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1518.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1814.0, "series": [{"data": [[0.0, 1647.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1814.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1518.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.061643835616438, "minX": 1.62775214E12, "maxY": 437.5, "series": [{"data": [[1.62775214E12, 18.0], [1.62775215E12, 11.5], [1.6277522E12, 370.91598023064216], [1.62775221E12, 437.5], [1.62775218E12, 108.28377230246393], [1.62775219E12, 240.16031746031751], [1.62775216E12, 8.061643835616438], [1.62775217E12, 30.53327417923691]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775221E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.0, "minX": 2.0, "maxY": 24197.0, "series": [{"data": [[2.0, 1117.916666666666], [3.0, 12457.5], [4.0, 12377.0], [5.0, 24197.0], [6.0, 20521.0], [7.0, 19719.0], [8.0, 651.9012345679013], [9.0, 8646.5], [10.0, 16473.0], [11.0, 2799.2000000000003], [12.0, 3445.2500000000005], [13.0, 234.29702970297035], [14.0, 11663.0], [15.0, 5402.5], [16.0, 2551.666666666667], [17.0, 210.26315789473674], [18.0, 7690.0], [19.0, 3624.5], [20.0, 228.88333333333327], [22.0, 177.74400000000006], [23.0, 192.0], [24.0, 194.1282051282051], [25.0, 233.33333333333331], [26.0, 293.0], [27.0, 290.25], [29.0, 280.5], [30.0, 342.0], [31.0, 187.5], [32.0, 263.89075630252097], [33.0, 329.0], [34.0, 344.0], [35.0, 276.44628099173565], [36.0, 302.0], [37.0, 363.5], [39.0, 264.25], [40.0, 216.33333333333334], [41.0, 403.5], [42.0, 345.0694444444445], [43.0, 406.5], [44.0, 553.0], [45.0, 324.6], [46.0, 296.0], [47.0, 369.25000000000006], [48.0, 387.5], [49.0, 423.6666666666667], [50.0, 408.8], [52.0, 373.8571428571428], [53.0, 390.0], [54.0, 405.25], [55.0, 402.0], [56.0, 372.25], [57.0, 379.6], [58.0, 404.6666666666667], [59.0, 430.0], [61.0, 494.77235772357716], [62.0, 449.42857142857144], [63.0, 483.75000000000006], [64.0, 495.8333333333333], [65.0, 500.0], [66.0, 501.40000000000003], [67.0, 496.33333333333337], [68.0, 527.0], [69.0, 530.7142857142857], [70.0, 482.0], [71.0, 393.5], [74.0, 565.1250000000001], [75.0, 589.1130434782606], [76.0, 597.8], [77.0, 488.53846153846155], [78.0, 578.8], [79.0, 578.1666666666667], [81.0, 519.8], [82.0, 598.5], [83.0, 704.5208333333334], [84.0, 633.75], [86.0, 639.0], [87.0, 639.0], [88.0, 409.5], [89.0, 663.84375], [90.0, 678.75], [91.0, 503.02857142857147], [92.0, 1028.0], [93.0, 710.375], [94.0, 854.7777777777778], [95.0, 874.7142857142858], [96.0, 829.3333333333334], [97.0, 814.5833333333333], [98.0, 735.8666666666667], [99.0, 735.7826086956521], [100.0, 839.25], [103.0, 370.0], [104.0, 743.7368421052632], [105.0, 867.4520547945204], [106.0, 921.0], [107.0, 825.0], [108.0, 653.4], [109.0, 649.4545454545454], [110.0, 641.2], [111.0, 739.9999999999999], [113.0, 703.6], [114.0, 936.3725490196081], [116.0, 622.1666666666667], [117.0, 565.0], [120.0, 719.1111111111111], [122.0, 780.5], [123.0, 1173.8888888888887], [124.0, 1080.4285714285713], [125.0, 1101.8039215686279], [126.0, 993.9999999999998], [127.0, 967.8], [128.0, 1101.0], [129.0, 1269.0], [130.0, 711.3], [145.0, 787.0], [146.0, 738.6666666666667], [156.0, 721.5714285714286], [157.0, 961.7777777777778], [158.0, 1032.3333333333333], [159.0, 1157.6153846153843], [160.0, 1214.5], [163.0, 1074.3333333333333], [164.0, 1211.5063291139236], [166.0, 1159.0869565217392], [167.0, 965.0], [165.0, 1055.1875], [192.0, 1011.0], [193.0, 1006.1999999999999], [194.0, 1039.6666666666667], [195.0, 1016.0], [196.0, 1086.0], [197.0, 1152.75], [198.0, 1517.7692307692307], [199.0, 1182.0], [200.0, 1520.4], [201.0, 1697.7777777777778], [202.0, 1650.0540540540542], [203.0, 1619.3823529411764], [204.0, 1451.8965517241377], [207.0, 439.0], [208.0, 847.0], [209.0, 1146.8], [210.0, 1312.857142857143], [211.0, 1785.6818181818182], [212.0, 1698.3404255319151], [213.0, 1744.7916666666667], [214.0, 1643.928571428571], [215.0, 1598.6666666666665], [217.0, 1230.75], [218.0, 1505.241379310345], [230.0, 2068.9090909090905], [231.0, 2008.6938775510203], [232.0, 1574.1489361702131], [233.0, 1438.5135135135133], [234.0, 1302.4125000000001], [235.0, 1742.25], [236.0, 2014.2068965517242], [237.0, 1798.3225806451615], [239.0, 1576.6818181818182], [240.0, 1392.5], [241.0, 1454.9374999999998], [242.0, 1566.5806451612907], [243.0, 1829.4444444444443], [244.0, 1605.9259259259259], [245.0, 3672.730769230769], [275.0, 1097.4107142857144], [273.0, 1838.5882352941173], [272.0, 1828.4], [274.0, 1650.535714285714], [276.0, 1846.5614035087715], [277.0, 2007.5666666666666], [282.0, 2473.0], [286.0, 2212.777777777778], [287.0, 2222.114583333334], [284.0, 699.0], [285.0, 2437.2727272727275], [288.0, 1735.0], [289.0, 1641.5], [290.0, 1886.6271186440679], [291.0, 1980.0], [292.0, 2119.857142857143], [306.0, 1554.0], [307.0, 2086.0], [308.0, 894.0], [322.0, 1632.0], [323.0, 3013.172413793103], [324.0, 2191.666666666667], [329.0, 1078.1666666666667], [363.0, 1423.0], [367.0, 1492.0], [369.0, 2258.45328719723], [368.0, 1749.357142857143], [370.0, 1736.3703703703704], [371.0, 1042.4285714285716], [375.0, 1496.396825396825], [374.0, 1972.6], [373.0, 1839.8205128205132], [372.0, 1507.5714285714287], [378.0, 1444.0], [382.0, 1903.5], [383.0, 1496.9347826086955], [380.0, 1822.0], [381.0, 812.0], [385.0, 996.8333333333334], [384.0, 1250.1086956521742], [386.0, 771.6999999999999], [396.0, 171.0], [397.0, 197.5], [398.0, 174.0], [389.0, 521.0], [390.0, 647.2325581395348], [391.0, 447.0], [392.0, 406.7142857142857], [393.0, 342.2857142857143], [394.0, 353.6666666666667], [395.0, 239.25], [402.0, 154.0], [400.0, 242.0], [403.0, 69.0], [412.0, 48.0], [414.0, 43.0], [404.0, 144.0], [405.0, 137.0], [406.0, 85.66666666666667], [407.0, 124.5], [408.0, 46.0], [409.0, 86.0], [431.0, 39.5], [418.0, 31.0], [421.0, 27.5], [420.0, 16.0], [423.0, 15.0], [417.0, 16.0], [422.0, 13.0], [424.0, 35.0], [425.0, 30.5], [426.0, 38.0], [427.0, 63.0], [430.0, 59.0], [429.0, 57.0], [428.0, 51.0], [419.0, 25.0], [447.0, 16.0], [438.0, 33.0], [437.0, 21.0], [436.0, 17.0], [442.0, 26.333333333333332], [445.0, 24.0], [446.0, 16.0], [444.0, 13.0], [439.0, 12.0], [432.0, 54.0], [434.0, 52.0], [433.0, 53.0], [435.0, 45.0], [443.0, 14.0], [441.0, 12.0], [440.0, 16.0], [461.0, 79.0], [450.0, 38.0], [449.0, 38.0], [448.0, 16.0], [455.0, 15.0], [454.0, 17.0], [451.0, 41.0], [460.0, 23.0], [452.0, 21.5], [453.0, 30.0], [456.0, 22.0], [458.0, 33.0], [457.0, 20.0], [459.0, 16.0], [463.0, 48.0], [462.0, 25.0], [479.0, 15.0], [466.0, 46.75], [465.0, 46.0], [464.0, 49.0], [467.0, 17.0], [471.0, 16.0], [470.0, 16.0], [469.0, 16.0], [468.0, 16.0], [474.0, 39.5], [476.0, 35.5], [477.0, 37.333333333333336], [478.0, 15.0], [475.0, 18.0], [473.0, 16.0], [472.0, 16.0], [492.0, 40.5], [480.0, 36.0], [487.0, 35.0], [486.0, 37.0], [485.0, 26.0], [484.0, 26.0], [481.0, 27.0], [483.0, 28.0], [482.0, 18.0], [490.0, 41.0], [495.0, 67.0], [493.0, 85.0], [491.0, 51.0], [489.0, 55.0], [488.0, 32.0], [499.0, 20.0], [496.0, 52.0], [501.0, 37.0], [502.0, 42.0], [505.0, 28.0], [511.0, 39.0], [510.0, 94.625], [500.0, 21.684210526315784], [498.0, 26.0], [497.0, 70.0], [514.0, 57.0], [513.0, 62.5], [512.0, 89.0], [515.0, 29.0], [518.0, 42.5], [521.0, 43.5], [522.0, 44.0], [520.0, 26.0], [517.0, 71.0], [516.0, 76.5]], "isOverall": false, "label": "Press Release", "isController": false}, {"data": [[186.5392649126327, 1143.2890138582006]], "isOverall": false, "label": "Press Release-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 522.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 82.5, "minX": 1.62775214E12, "maxY": 5257854.0, "series": [{"data": [[1.62775214E12, 20872.2], [1.62775215E12, 33393.3], [1.6277522E12, 5065900.6], [1.62775221E12, 175261.8], [1.62775218E12, 4911503.3], [1.62775219E12, 5257854.0], [1.62775216E12, 609225.3], [1.62775217E12, 4702773.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62775214E12, 82.5], [1.62775215E12, 132.0], [1.6277522E12, 20031.0], [1.62775221E12, 693.0], [1.62775218E12, 19420.5], [1.62775219E12, 20790.0], [1.62775216E12, 2409.0], [1.62775217E12, 18595.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775221E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.642857142857142, "minX": 1.62775214E12, "maxY": 14057.875, "series": [{"data": [[1.62775214E12, 7463.0], [1.62775215E12, 14057.875], [1.6277522E12, 1658.4052718286653], [1.62775221E12, 24.642857142857142], [1.62775218E12, 794.3101104502966], [1.62775219E12, 1693.08492063492], [1.62775216E12, 1230.2123287671227], [1.62775217E12, 248.90683229813666]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775221E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.33333333333333, "minX": 1.62775214E12, "maxY": 14003.375, "series": [{"data": [[1.62775214E12, 7318.0], [1.62775215E12, 14003.375], [1.6277522E12, 1638.8476112026397], [1.62775221E12, 24.33333333333333], [1.62775218E12, 776.8402718776542], [1.62775219E12, 1648.9277777777788], [1.62775216E12, 1226.0410958904104], [1.62775217E12, 245.02129547471128]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775221E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 23.095238095238088, "minX": 1.62775214E12, "maxY": 1601.5494233937402, "series": [{"data": [[1.62775214E12, 183.8], [1.62775215E12, 84.5], [1.6277522E12, 1601.5494233937402], [1.62775221E12, 23.095238095238088], [1.62775218E12, 750.9201359388267], [1.62775219E12, 1563.359523809522], [1.62775216E12, 82.91780821917806], [1.62775217E12, 234.09316770186305]], "isOverall": false, "label": "Press Release", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775221E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.62775214E12, "maxY": 26978.0, "series": [{"data": [[1.62775214E12, 7719.0], [1.62775215E12, 18239.0], [1.6277522E12, 4516.0], [1.62775221E12, 63.0], [1.62775218E12, 1614.0], [1.62775219E12, 4645.0], [1.62775216E12, 26978.0], [1.62775217E12, 745.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62775214E12, 7124.0], [1.62775215E12, 10716.0], [1.6277522E12, 15.0], [1.62775221E12, 12.0], [1.62775218E12, 110.0], [1.62775219E12, 439.0], [1.62775216E12, 21.0], [1.62775217E12, 88.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62775214E12, 7719.0], [1.62775215E12, 18239.0], [1.6277522E12, 3025.0], [1.62775221E12, 56.10000000000001], [1.62775218E12, 1218.4], [1.62775219E12, 2386.9], [1.62775216E12, 144.90000000000003], [1.62775217E12, 397.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62775214E12, 7719.0], [1.62775215E12, 18239.0], [1.6277522E12, 4039.249999999994], [1.62775221E12, 63.0], [1.62775218E12, 1520.22], [1.62775219E12, 3954.5600000000004], [1.62775216E12, 26609.99], [1.62775217E12, 600.7600000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62775214E12, 7719.0], [1.62775215E12, 18239.0], [1.6277522E12, 3270.5], [1.62775221E12, 58.7], [1.62775218E12, 1334.4999999999995], [1.62775219E12, 2577.9], [1.62775216E12, 12870.90000000011], [1.62775217E12, 473.7999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775221E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 15037.5, "series": [{"data": [[2.0, 15037.5], [42.0, 1614.5], [43.0, 23.0], [3.0, 7690.0], [48.0, 1967.5], [51.0, 75.0], [60.0, 24.5], [4.0, 41.5], [64.0, 1230.0], [76.0, 989.5], [86.0, 100.5], [94.0, 1705.5], [99.0, 127.0], [100.0, 615.0], [101.0, 780.0], [111.0, 151.0], [109.0, 422.0], [112.0, 197.5], [113.0, 286.0], [115.0, 341.0], [114.0, 820.0], [117.0, 187.0], [121.0, 584.0], [120.0, 490.0], [122.0, 1138.0], [133.0, 1951.0], [143.0, 618.0], [139.0, 741.0], [141.0, 1170.0], [140.0, 1529.0], [136.0, 840.5], [152.0, 1712.5], [157.0, 2259.0], [153.0, 2988.0], [160.0, 1566.0], [194.0, 1276.5], [15.0, 51.0], [1.0, 11123.0], [262.0, 2313.5], [23.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 262.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 14997.0, "series": [{"data": [[2.0, 14997.0], [42.0, 1429.5], [43.0, 23.0], [3.0, 7555.0], [48.0, 1945.0], [51.0, 74.0], [60.0, 23.5], [4.0, 40.5], [64.0, 998.0], [76.0, 917.5], [86.0, 98.0], [94.0, 1582.5], [99.0, 125.0], [100.0, 607.5], [101.0, 766.0], [111.0, 149.0], [109.0, 415.0], [112.0, 193.5], [113.0, 283.0], [115.0, 338.0], [114.0, 803.5], [117.0, 182.0], [121.0, 578.0], [120.0, 481.5], [122.0, 1135.0], [133.0, 1938.0], [143.0, 608.0], [139.0, 721.0], [141.0, 1148.0], [140.0, 1525.0], [136.0, 839.5], [152.0, 1651.0], [157.0, 2203.0], [153.0, 2969.0], [160.0, 1547.5], [194.0, 1259.0], [15.0, 50.0], [1.0, 11031.0], [262.0, 2307.5], [23.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 262.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.62775213E12, "maxY": 137.8, "series": [{"data": [[1.62775214E12, 1.7], [1.62775213E12, 0.3], [1.6277522E12, 93.2], [1.62775221E12, 4.2], [1.62775218E12, 128.4], [1.62775219E12, 137.8], [1.62775216E12, 15.1], [1.62775217E12, 117.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775221E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62775214E12, "maxY": 126.0, "series": [{"data": [[1.62775214E12, 0.5], [1.62775215E12, 0.8], [1.6277522E12, 121.4], [1.62775221E12, 4.2], [1.62775218E12, 117.7], [1.62775219E12, 126.0], [1.62775216E12, 14.6], [1.62775217E12, 112.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62775221E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62775214E12, "maxY": 126.0, "series": [{"data": [[1.62775214E12, 0.5], [1.62775215E12, 0.8], [1.6277522E12, 121.4], [1.62775221E12, 4.2], [1.62775218E12, 117.7], [1.62775219E12, 126.0], [1.62775216E12, 14.6], [1.62775217E12, 112.7]], "isOverall": false, "label": "Press Release-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775221E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62775214E12, "maxY": 126.0, "series": [{"data": [[1.62775214E12, 0.5], [1.62775215E12, 0.8], [1.6277522E12, 121.4], [1.62775221E12, 4.2], [1.62775218E12, 117.7], [1.62775219E12, 126.0], [1.62775216E12, 14.6], [1.62775217E12, 112.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62775221E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

