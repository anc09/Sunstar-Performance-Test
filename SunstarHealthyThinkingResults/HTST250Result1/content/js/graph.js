/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 4829.0, "series": [{"data": [[0.0, 15.0], [0.1, 16.0], [0.2, 16.0], [0.3, 17.0], [0.4, 17.0], [0.5, 17.0], [0.6, 18.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 20.0], [1.2, 20.0], [1.3, 21.0], [1.4, 21.0], [1.5, 21.0], [1.6, 21.0], [1.7, 21.0], [1.8, 22.0], [1.9, 22.0], [2.0, 22.0], [2.1, 22.0], [2.2, 22.0], [2.3, 22.0], [2.4, 23.0], [2.5, 23.0], [2.6, 23.0], [2.7, 23.0], [2.8, 23.0], [2.9, 23.0], [3.0, 23.0], [3.1, 23.0], [3.2, 24.0], [3.3, 24.0], [3.4, 24.0], [3.5, 24.0], [3.6, 24.0], [3.7, 24.0], [3.8, 24.0], [3.9, 24.0], [4.0, 25.0], [4.1, 25.0], [4.2, 25.0], [4.3, 25.0], [4.4, 25.0], [4.5, 25.0], [4.6, 25.0], [4.7, 25.0], [4.8, 25.0], [4.9, 26.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 26.0], [5.6, 26.0], [5.7, 26.0], [5.8, 27.0], [5.9, 27.0], [6.0, 27.0], [6.1, 27.0], [6.2, 27.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 28.0], [6.8, 28.0], [6.9, 28.0], [7.0, 28.0], [7.1, 28.0], [7.2, 28.0], [7.3, 28.0], [7.4, 28.0], [7.5, 28.0], [7.6, 28.0], [7.7, 28.0], [7.8, 29.0], [7.9, 29.0], [8.0, 29.0], [8.1, 29.0], [8.2, 29.0], [8.3, 29.0], [8.4, 29.0], [8.5, 29.0], [8.6, 29.0], [8.7, 29.0], [8.8, 29.0], [8.9, 29.0], [9.0, 29.0], [9.1, 29.0], [9.2, 30.0], [9.3, 30.0], [9.4, 30.0], [9.5, 30.0], [9.6, 30.0], [9.7, 30.0], [9.8, 30.0], [9.9, 30.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 30.0], [10.4, 30.0], [10.5, 31.0], [10.6, 31.0], [10.7, 31.0], [10.8, 31.0], [10.9, 31.0], [11.0, 31.0], [11.1, 31.0], [11.2, 31.0], [11.3, 31.0], [11.4, 31.0], [11.5, 32.0], [11.6, 32.0], [11.7, 32.0], [11.8, 32.0], [11.9, 32.0], [12.0, 32.0], [12.1, 32.0], [12.2, 32.0], [12.3, 32.0], [12.4, 32.0], [12.5, 32.0], [12.6, 32.0], [12.7, 32.0], [12.8, 33.0], [12.9, 33.0], [13.0, 33.0], [13.1, 33.0], [13.2, 33.0], [13.3, 33.0], [13.4, 33.0], [13.5, 33.0], [13.6, 34.0], [13.7, 34.0], [13.8, 34.0], [13.9, 34.0], [14.0, 34.0], [14.1, 34.0], [14.2, 34.0], [14.3, 34.0], [14.4, 34.0], [14.5, 34.0], [14.6, 35.0], [14.7, 35.0], [14.8, 35.0], [14.9, 35.0], [15.0, 35.0], [15.1, 35.0], [15.2, 35.0], [15.3, 36.0], [15.4, 36.0], [15.5, 36.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 36.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 38.0], [16.8, 38.0], [16.9, 38.0], [17.0, 38.0], [17.1, 38.0], [17.2, 38.0], [17.3, 38.0], [17.4, 39.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 39.0], [18.1, 40.0], [18.2, 40.0], [18.3, 40.0], [18.4, 40.0], [18.5, 40.0], [18.6, 40.0], [18.7, 40.0], [18.8, 41.0], [18.9, 41.0], [19.0, 41.0], [19.1, 41.0], [19.2, 41.0], [19.3, 41.0], [19.4, 41.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 43.0], [20.1, 43.0], [20.2, 43.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 44.0], [20.7, 44.0], [20.8, 44.0], [20.9, 44.0], [21.0, 44.0], [21.1, 44.0], [21.2, 44.0], [21.3, 45.0], [21.4, 45.0], [21.5, 45.0], [21.6, 45.0], [21.7, 45.0], [21.8, 45.0], [21.9, 45.0], [22.0, 46.0], [22.1, 46.0], [22.2, 46.0], [22.3, 46.0], [22.4, 46.0], [22.5, 46.0], [22.6, 47.0], [22.7, 47.0], [22.8, 47.0], [22.9, 47.0], [23.0, 47.0], [23.1, 47.0], [23.2, 47.0], [23.3, 47.0], [23.4, 48.0], [23.5, 48.0], [23.6, 48.0], [23.7, 48.0], [23.8, 48.0], [23.9, 49.0], [24.0, 49.0], [24.1, 49.0], [24.2, 49.0], [24.3, 49.0], [24.4, 50.0], [24.5, 50.0], [24.6, 50.0], [24.7, 50.0], [24.8, 50.0], [24.9, 51.0], [25.0, 51.0], [25.1, 51.0], [25.2, 51.0], [25.3, 51.0], [25.4, 51.0], [25.5, 52.0], [25.6, 52.0], [25.7, 52.0], [25.8, 52.0], [25.9, 52.0], [26.0, 53.0], [26.1, 53.0], [26.2, 53.0], [26.3, 53.0], [26.4, 53.0], [26.5, 54.0], [26.6, 54.0], [26.7, 54.0], [26.8, 55.0], [26.9, 55.0], [27.0, 55.0], [27.1, 55.0], [27.2, 55.0], [27.3, 56.0], [27.4, 56.0], [27.5, 56.0], [27.6, 56.0], [27.7, 57.0], [27.8, 57.0], [27.9, 57.0], [28.0, 58.0], [28.1, 58.0], [28.2, 58.0], [28.3, 59.0], [28.4, 59.0], [28.5, 59.0], [28.6, 59.0], [28.7, 60.0], [28.8, 60.0], [28.9, 60.0], [29.0, 61.0], [29.1, 61.0], [29.2, 61.0], [29.3, 62.0], [29.4, 62.0], [29.5, 62.0], [29.6, 62.0], [29.7, 63.0], [29.8, 63.0], [29.9, 63.0], [30.0, 64.0], [30.1, 64.0], [30.2, 64.0], [30.3, 65.0], [30.4, 65.0], [30.5, 65.0], [30.6, 66.0], [30.7, 66.0], [30.8, 66.0], [30.9, 66.0], [31.0, 67.0], [31.1, 67.0], [31.2, 67.0], [31.3, 68.0], [31.4, 68.0], [31.5, 68.0], [31.6, 68.0], [31.7, 68.0], [31.8, 69.0], [31.9, 69.0], [32.0, 69.0], [32.1, 69.0], [32.2, 70.0], [32.3, 70.0], [32.4, 70.0], [32.5, 70.0], [32.6, 71.0], [32.7, 71.0], [32.8, 71.0], [32.9, 71.0], [33.0, 71.0], [33.1, 71.0], [33.2, 72.0], [33.3, 72.0], [33.4, 72.0], [33.5, 72.0], [33.6, 73.0], [33.7, 73.0], [33.8, 73.0], [33.9, 73.0], [34.0, 74.0], [34.1, 74.0], [34.2, 74.0], [34.3, 74.0], [34.4, 75.0], [34.5, 75.0], [34.6, 75.0], [34.7, 75.0], [34.8, 76.0], [34.9, 76.0], [35.0, 76.0], [35.1, 76.0], [35.2, 76.0], [35.3, 77.0], [35.4, 77.0], [35.5, 77.0], [35.6, 77.0], [35.7, 78.0], [35.8, 78.0], [35.9, 78.0], [36.0, 78.0], [36.1, 79.0], [36.2, 79.0], [36.3, 79.0], [36.4, 79.0], [36.5, 80.0], [36.6, 80.0], [36.7, 80.0], [36.8, 81.0], [36.9, 81.0], [37.0, 81.0], [37.1, 82.0], [37.2, 82.0], [37.3, 82.0], [37.4, 82.0], [37.5, 83.0], [37.6, 83.0], [37.7, 83.0], [37.8, 83.0], [37.9, 83.0], [38.0, 83.0], [38.1, 84.0], [38.2, 84.0], [38.3, 84.0], [38.4, 84.0], [38.5, 84.0], [38.6, 85.0], [38.7, 85.0], [38.8, 85.0], [38.9, 86.0], [39.0, 86.0], [39.1, 86.0], [39.2, 87.0], [39.3, 87.0], [39.4, 87.0], [39.5, 88.0], [39.6, 88.0], [39.7, 88.0], [39.8, 89.0], [39.9, 89.0], [40.0, 90.0], [40.1, 91.0], [40.2, 91.0], [40.3, 91.0], [40.4, 92.0], [40.5, 92.0], [40.6, 93.0], [40.7, 93.0], [40.8, 94.0], [40.9, 94.0], [41.0, 95.0], [41.1, 95.0], [41.2, 96.0], [41.3, 97.0], [41.4, 98.0], [41.5, 98.0], [41.6, 99.0], [41.7, 99.0], [41.8, 100.0], [41.9, 100.0], [42.0, 100.0], [42.1, 101.0], [42.2, 102.0], [42.3, 102.0], [42.4, 103.0], [42.5, 103.0], [42.6, 104.0], [42.7, 105.0], [42.8, 105.0], [42.9, 106.0], [43.0, 106.0], [43.1, 107.0], [43.2, 107.0], [43.3, 108.0], [43.4, 108.0], [43.5, 109.0], [43.6, 109.0], [43.7, 110.0], [43.8, 111.0], [43.9, 111.0], [44.0, 112.0], [44.1, 112.0], [44.2, 113.0], [44.3, 115.0], [44.4, 115.0], [44.5, 116.0], [44.6, 117.0], [44.7, 117.0], [44.8, 118.0], [44.9, 118.0], [45.0, 119.0], [45.1, 120.0], [45.2, 120.0], [45.3, 121.0], [45.4, 121.0], [45.5, 122.0], [45.6, 122.0], [45.7, 122.0], [45.8, 123.0], [45.9, 124.0], [46.0, 124.0], [46.1, 124.0], [46.2, 125.0], [46.3, 125.0], [46.4, 126.0], [46.5, 126.0], [46.6, 127.0], [46.7, 127.0], [46.8, 128.0], [46.9, 128.0], [47.0, 129.0], [47.1, 129.0], [47.2, 130.0], [47.3, 130.0], [47.4, 131.0], [47.5, 132.0], [47.6, 132.0], [47.7, 133.0], [47.8, 134.0], [47.9, 134.0], [48.0, 135.0], [48.1, 136.0], [48.2, 136.0], [48.3, 137.0], [48.4, 138.0], [48.5, 139.0], [48.6, 139.0], [48.7, 140.0], [48.8, 141.0], [48.9, 141.0], [49.0, 142.0], [49.1, 143.0], [49.2, 144.0], [49.3, 144.0], [49.4, 145.0], [49.5, 146.0], [49.6, 147.0], [49.7, 147.0], [49.8, 148.0], [49.9, 149.0], [50.0, 150.0], [50.1, 151.0], [50.2, 152.0], [50.3, 152.0], [50.4, 154.0], [50.5, 155.0], [50.6, 155.0], [50.7, 156.0], [50.8, 156.0], [50.9, 157.0], [51.0, 158.0], [51.1, 159.0], [51.2, 160.0], [51.3, 161.0], [51.4, 161.0], [51.5, 163.0], [51.6, 163.0], [51.7, 164.0], [51.8, 165.0], [51.9, 165.0], [52.0, 166.0], [52.1, 167.0], [52.2, 167.0], [52.3, 168.0], [52.4, 169.0], [52.5, 169.0], [52.6, 170.0], [52.7, 170.0], [52.8, 171.0], [52.9, 172.0], [53.0, 173.0], [53.1, 175.0], [53.2, 175.0], [53.3, 176.0], [53.4, 177.0], [53.5, 179.0], [53.6, 180.0], [53.7, 181.0], [53.8, 182.0], [53.9, 184.0], [54.0, 184.0], [54.1, 186.0], [54.2, 187.0], [54.3, 188.0], [54.4, 189.0], [54.5, 190.0], [54.6, 191.0], [54.7, 193.0], [54.8, 195.0], [54.9, 196.0], [55.0, 197.0], [55.1, 198.0], [55.2, 198.0], [55.3, 199.0], [55.4, 201.0], [55.5, 203.0], [55.6, 204.0], [55.7, 205.0], [55.8, 206.0], [55.9, 207.0], [56.0, 208.0], [56.1, 211.0], [56.2, 212.0], [56.3, 214.0], [56.4, 216.0], [56.5, 218.0], [56.6, 220.0], [56.7, 221.0], [56.8, 223.0], [56.9, 226.0], [57.0, 229.0], [57.1, 232.0], [57.2, 234.0], [57.3, 236.0], [57.4, 239.0], [57.5, 241.0], [57.6, 243.0], [57.7, 245.0], [57.8, 247.0], [57.9, 250.0], [58.0, 252.0], [58.1, 255.0], [58.2, 257.0], [58.3, 259.0], [58.4, 262.0], [58.5, 264.0], [58.6, 265.0], [58.7, 267.0], [58.8, 270.0], [58.9, 271.0], [59.0, 272.0], [59.1, 274.0], [59.2, 277.0], [59.3, 279.0], [59.4, 280.0], [59.5, 281.0], [59.6, 284.0], [59.7, 286.0], [59.8, 287.0], [59.9, 289.0], [60.0, 290.0], [60.1, 291.0], [60.2, 292.0], [60.3, 294.0], [60.4, 295.0], [60.5, 297.0], [60.6, 299.0], [60.7, 300.0], [60.8, 301.0], [60.9, 303.0], [61.0, 304.0], [61.1, 306.0], [61.2, 307.0], [61.3, 309.0], [61.4, 310.0], [61.5, 311.0], [61.6, 312.0], [61.7, 313.0], [61.8, 316.0], [61.9, 318.0], [62.0, 319.0], [62.1, 321.0], [62.2, 324.0], [62.3, 326.0], [62.4, 328.0], [62.5, 330.0], [62.6, 332.0], [62.7, 335.0], [62.8, 337.0], [62.9, 338.0], [63.0, 340.0], [63.1, 342.0], [63.2, 345.0], [63.3, 347.0], [63.4, 350.0], [63.5, 352.0], [63.6, 355.0], [63.7, 357.0], [63.8, 359.0], [63.9, 363.0], [64.0, 366.0], [64.1, 368.0], [64.2, 372.0], [64.3, 375.0], [64.4, 378.0], [64.5, 380.0], [64.6, 384.0], [64.7, 388.0], [64.8, 392.0], [64.9, 395.0], [65.0, 399.0], [65.1, 401.0], [65.2, 405.0], [65.3, 411.0], [65.4, 414.0], [65.5, 419.0], [65.6, 422.0], [65.7, 426.0], [65.8, 430.0], [65.9, 433.0], [66.0, 440.0], [66.1, 447.0], [66.2, 453.0], [66.3, 457.0], [66.4, 459.0], [66.5, 462.0], [66.6, 466.0], [66.7, 473.0], [66.8, 476.0], [66.9, 479.0], [67.0, 485.0], [67.1, 487.0], [67.2, 489.0], [67.3, 497.0], [67.4, 503.0], [67.5, 506.0], [67.6, 511.0], [67.7, 515.0], [67.8, 519.0], [67.9, 524.0], [68.0, 526.0], [68.1, 531.0], [68.2, 534.0], [68.3, 537.0], [68.4, 540.0], [68.5, 544.0], [68.6, 547.0], [68.7, 549.0], [68.8, 551.0], [68.9, 554.0], [69.0, 556.0], [69.1, 558.0], [69.2, 560.0], [69.3, 562.0], [69.4, 564.0], [69.5, 566.0], [69.6, 569.0], [69.7, 572.0], [69.8, 575.0], [69.9, 576.0], [70.0, 579.0], [70.1, 581.0], [70.2, 583.0], [70.3, 585.0], [70.4, 586.0], [70.5, 587.0], [70.6, 590.0], [70.7, 591.0], [70.8, 593.0], [70.9, 595.0], [71.0, 596.0], [71.1, 599.0], [71.2, 603.0], [71.3, 605.0], [71.4, 609.0], [71.5, 610.0], [71.6, 612.0], [71.7, 613.0], [71.8, 616.0], [71.9, 617.0], [72.0, 619.0], [72.1, 623.0], [72.2, 625.0], [72.3, 628.0], [72.4, 630.0], [72.5, 631.0], [72.6, 632.0], [72.7, 634.0], [72.8, 636.0], [72.9, 640.0], [73.0, 641.0], [73.1, 644.0], [73.2, 648.0], [73.3, 650.0], [73.4, 651.0], [73.5, 653.0], [73.6, 655.0], [73.7, 657.0], [73.8, 659.0], [73.9, 660.0], [74.0, 662.0], [74.1, 664.0], [74.2, 666.0], [74.3, 668.0], [74.4, 671.0], [74.5, 672.0], [74.6, 673.0], [74.7, 675.0], [74.8, 677.0], [74.9, 678.0], [75.0, 680.0], [75.1, 682.0], [75.2, 684.0], [75.3, 685.0], [75.4, 687.0], [75.5, 688.0], [75.6, 690.0], [75.7, 692.0], [75.8, 695.0], [75.9, 696.0], [76.0, 697.0], [76.1, 701.0], [76.2, 703.0], [76.3, 706.0], [76.4, 707.0], [76.5, 709.0], [76.6, 711.0], [76.7, 714.0], [76.8, 716.0], [76.9, 719.0], [77.0, 720.0], [77.1, 722.0], [77.2, 724.0], [77.3, 726.0], [77.4, 729.0], [77.5, 730.0], [77.6, 732.0], [77.7, 733.0], [77.8, 735.0], [77.9, 737.0], [78.0, 739.0], [78.1, 741.0], [78.2, 744.0], [78.3, 747.0], [78.4, 750.0], [78.5, 751.0], [78.6, 753.0], [78.7, 756.0], [78.8, 759.0], [78.9, 762.0], [79.0, 765.0], [79.1, 767.0], [79.2, 769.0], [79.3, 772.0], [79.4, 775.0], [79.5, 776.0], [79.6, 780.0], [79.7, 783.0], [79.8, 784.0], [79.9, 787.0], [80.0, 790.0], [80.1, 792.0], [80.2, 795.0], [80.3, 797.0], [80.4, 801.0], [80.5, 803.0], [80.6, 806.0], [80.7, 808.0], [80.8, 812.0], [80.9, 815.0], [81.0, 818.0], [81.1, 821.0], [81.2, 824.0], [81.3, 827.0], [81.4, 832.0], [81.5, 835.0], [81.6, 839.0], [81.7, 842.0], [81.8, 845.0], [81.9, 850.0], [82.0, 857.0], [82.1, 859.0], [82.2, 867.0], [82.3, 870.0], [82.4, 876.0], [82.5, 880.0], [82.6, 883.0], [82.7, 891.0], [82.8, 897.0], [82.9, 900.0], [83.0, 908.0], [83.1, 915.0], [83.2, 921.0], [83.3, 925.0], [83.4, 931.0], [83.5, 940.0], [83.6, 945.0], [83.7, 951.0], [83.8, 959.0], [83.9, 967.0], [84.0, 976.0], [84.1, 984.0], [84.2, 990.0], [84.3, 998.0], [84.4, 1010.0], [84.5, 1015.0], [84.6, 1022.0], [84.7, 1028.0], [84.8, 1034.0], [84.9, 1044.0], [85.0, 1048.0], [85.1, 1052.0], [85.2, 1055.0], [85.3, 1063.0], [85.4, 1068.0], [85.5, 1071.0], [85.6, 1078.0], [85.7, 1087.0], [85.8, 1094.0], [85.9, 1098.0], [86.0, 1104.0], [86.1, 1110.0], [86.2, 1116.0], [86.3, 1123.0], [86.4, 1130.0], [86.5, 1135.0], [86.6, 1139.0], [86.7, 1143.0], [86.8, 1145.0], [86.9, 1155.0], [87.0, 1158.0], [87.1, 1166.0], [87.2, 1171.0], [87.3, 1175.0], [87.4, 1184.0], [87.5, 1193.0], [87.6, 1200.0], [87.7, 1208.0], [87.8, 1212.0], [87.9, 1218.0], [88.0, 1222.0], [88.1, 1226.0], [88.2, 1232.0], [88.3, 1237.0], [88.4, 1242.0], [88.5, 1246.0], [88.6, 1251.0], [88.7, 1256.0], [88.8, 1260.0], [88.9, 1267.0], [89.0, 1272.0], [89.1, 1277.0], [89.2, 1288.0], [89.3, 1294.0], [89.4, 1300.0], [89.5, 1305.0], [89.6, 1316.0], [89.7, 1320.0], [89.8, 1329.0], [89.9, 1335.0], [90.0, 1339.0], [90.1, 1345.0], [90.2, 1349.0], [90.3, 1354.0], [90.4, 1359.0], [90.5, 1364.0], [90.6, 1367.0], [90.7, 1370.0], [90.8, 1374.0], [90.9, 1378.0], [91.0, 1381.0], [91.1, 1385.0], [91.2, 1392.0], [91.3, 1396.0], [91.4, 1403.0], [91.5, 1406.0], [91.6, 1411.0], [91.7, 1418.0], [91.8, 1427.0], [91.9, 1430.0], [92.0, 1438.0], [92.1, 1441.0], [92.2, 1444.0], [92.3, 1446.0], [92.4, 1450.0], [92.5, 1453.0], [92.6, 1459.0], [92.7, 1468.0], [92.8, 1475.0], [92.9, 1485.0], [93.0, 1489.0], [93.1, 1498.0], [93.2, 1502.0], [93.3, 1506.0], [93.4, 1513.0], [93.5, 1520.0], [93.6, 1525.0], [93.7, 1530.0], [93.8, 1538.0], [93.9, 1543.0], [94.0, 1549.0], [94.1, 1556.0], [94.2, 1568.0], [94.3, 1574.0], [94.4, 1580.0], [94.5, 1586.0], [94.6, 1591.0], [94.7, 1598.0], [94.8, 1604.0], [94.9, 1613.0], [95.0, 1621.0], [95.1, 1626.0], [95.2, 1632.0], [95.3, 1639.0], [95.4, 1648.0], [95.5, 1653.0], [95.6, 1663.0], [95.7, 1672.0], [95.8, 1675.0], [95.9, 1684.0], [96.0, 1690.0], [96.1, 1699.0], [96.2, 1705.0], [96.3, 1716.0], [96.4, 1728.0], [96.5, 1732.0], [96.6, 1745.0], [96.7, 1755.0], [96.8, 1769.0], [96.9, 1778.0], [97.0, 1791.0], [97.1, 1798.0], [97.2, 1808.0], [97.3, 1824.0], [97.4, 1843.0], [97.5, 1856.0], [97.6, 1868.0], [97.7, 1877.0], [97.8, 1891.0], [97.9, 1915.0], [98.0, 1936.0], [98.1, 1948.0], [98.2, 1968.0], [98.3, 1999.0], [98.4, 2014.0], [98.5, 2033.0], [98.6, 2063.0], [98.7, 2084.0], [98.8, 2205.0], [98.9, 2265.0], [99.0, 2302.0], [99.1, 2374.0], [99.2, 2407.0], [99.3, 2447.0], [99.4, 2492.0], [99.5, 2513.0], [99.6, 2707.0], [99.7, 2790.0], [99.8, 3439.0], [99.9, 4268.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3438.0, "series": [{"data": [[0.0, 3438.0], [600.0, 409.0], [700.0, 353.0], [800.0, 206.0], [900.0, 118.0], [1000.0, 134.0], [1100.0, 136.0], [1200.0, 149.0], [1300.0, 158.0], [1400.0, 148.0], [1500.0, 134.0], [100.0, 1114.0], [1600.0, 114.0], [1700.0, 82.0], [1800.0, 60.0], [1900.0, 38.0], [2000.0, 33.0], [2100.0, 7.0], [2300.0, 14.0], [2200.0, 16.0], [2400.0, 22.0], [2500.0, 12.0], [2600.0, 1.0], [2700.0, 10.0], [2800.0, 3.0], [2900.0, 1.0], [3000.0, 1.0], [200.0, 442.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 2.0], [3500.0, 2.0], [3800.0, 1.0], [4300.0, 3.0], [4200.0, 5.0], [4100.0, 2.0], [4600.0, 1.0], [300.0, 357.0], [4800.0, 1.0], [400.0, 189.0], [500.0, 312.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 567.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5544.0, "series": [{"data": [[0.0, 5544.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2119.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 567.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.376271186440678, "minX": 1.62720886E12, "maxY": 466.47864768683286, "series": [{"data": [[1.62720886E12, 4.462121212121214], [1.62720887E12, 3.376271186440678], [1.62720892E12, 265.05834305717644], [1.62720893E12, 466.47864768683286], [1.62720894E12, 396.0], [1.62720888E12, 7.780564263322887], [1.62720889E12, 8.251655629139073], [1.6272089E12, 23.904430379746863], [1.62720891E12, 97.57546012269924]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62720894E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.0, "minX": 3.0, "maxY": 2825.5, "series": [{"data": [[3.0, 34.10033444816056], [4.0, 73.24770642201835], [5.0, 32.90526315789474], [6.0, 40.689873417721564], [7.0, 38.576470588235374], [8.0, 139.21395348837214], [9.0, 66.57042253521129], [10.0, 127.0], [11.0, 61.17903930131006], [12.0, 75.53658536585367], [13.0, 80.7134146341463], [14.0, 92.89156626506023], [15.0, 71.0], [16.0, 102.48447204968943], [17.0, 85.33333333333333], [18.0, 113.26415094339626], [19.0, 93.8], [20.0, 154.42857142857142], [21.0, 127.96273291925465], [22.0, 42.87301587301587], [23.0, 140.0], [24.0, 145.20253164556954], [25.0, 143.58333333333331], [26.0, 157.5], [27.0, 164.1], [28.0, 166.58928571428567], [29.0, 201.44444444444446], [30.0, 203.0], [31.0, 184.0], [32.0, 194.5], [33.0, 199.9367088607595], [34.0, 193.5], [35.0, 216.0], [36.0, 263.0], [37.0, 182.79999999999998], [39.0, 221.83333333333331], [40.0, 328.0], [41.0, 268.1], [42.0, 279.0], [43.0, 257.0], [44.0, 253.8], [45.0, 252.21428571428572], [46.0, 274.0], [47.0, 284.04545454545445], [48.0, 329.75], [50.0, 334.25000000000006], [51.0, 269.5], [52.0, 260.0], [53.0, 295.75], [54.0, 288.8571428571429], [55.0, 331.2303370786517], [56.0, 361.4], [57.0, 375.0], [58.0, 335.7142857142857], [59.0, 339.2777777777778], [60.0, 318.14285714285717], [61.0, 328.6666666666667], [64.0, 364.75], [65.0, 298.125], [66.0, 272.2105263157895], [67.0, 459.4782608695652], [68.0, 393.6666666666667], [69.0, 392.5], [70.0, 358.5614035087719], [71.0, 503.0], [73.0, 424.6666666666667], [75.0, 50.333333333333336], [76.0, 51.0], [77.0, 76.0], [78.0, 73.66666666666667], [79.0, 66.0], [80.0, 90.2], [81.0, 80.33333333333333], [83.0, 81.66666666666667], [84.0, 114.0], [85.0, 99.0], [86.0, 116.0], [87.0, 121.2], [88.0, 128.5], [89.0, 322.8], [90.0, 160.0], [91.0, 146.8], [92.0, 172.0], [93.0, 170.4], [94.0, 175.5], [95.0, 182.0], [96.0, 184.6], [97.0, 185.75], [98.0, 182.0], [99.0, 1282.25], [100.0, 701.8650000000002], [101.0, 600.5333333333333], [102.0, 565.6176470588235], [103.0, 578.1111111111111], [104.0, 582.5384615384617], [105.0, 552.5], [106.0, 599.3333333333334], [107.0, 560.6666666666669], [108.0, 604.8269230769232], [110.0, 360.0], [109.0, 174.0], [112.0, 653.7215189873418], [113.0, 616.7083333333335], [114.0, 614.7142857142859], [116.0, 647.0], [117.0, 609.139534883721], [118.0, 635.3508771929825], [119.0, 702.6949152542371], [120.0, 739.5172413793105], [121.0, 696.2368421052631], [122.0, 726.6153846153846], [123.0, 802.6666666666666], [124.0, 686.6597938144332], [125.0, 753.8169014084503], [126.0, 806.3529411764707], [127.0, 731.3749999999999], [128.0, 688.1785714285712], [129.0, 688.4444444444445], [130.0, 684.2222222222222], [132.0, 810.9843749999997], [133.0, 695.8285714285714], [134.0, 782.6956521739131], [135.0, 767.0], [136.0, 695.3529411764705], [137.0, 748.4186046511627], [138.0, 831.25], [139.0, 724.0], [140.0, 791.0], [141.0, 797.0], [142.0, 673.5], [153.0, 551.5], [155.0, 657.0], [157.0, 674.0], [165.0, 546.0], [170.0, 672.0], [172.0, 428.0], [178.0, 694.0], [181.0, 730.0], [182.0, 724.0], [187.0, 531.0], [194.0, 717.0], [197.0, 749.0], [202.0, 759.0], [205.0, 737.0], [209.0, 723.0], [210.0, 821.0], [211.0, 870.0], [216.0, 727.0], [222.0, 732.0], [225.0, 792.0], [231.0, 815.0], [233.0, 821.6666666666666], [238.0, 789.0], [244.0, 806.5], [251.0, 820.0], [252.0, 863.5], [255.0, 820.5], [261.0, 833.0], [262.0, 822.0], [267.0, 851.25], [268.0, 925.5], [269.0, 1310.4807692307693], [270.0, 1896.5], [271.0, 1304.706806282723], [273.0, 1047.6], [272.0, 1637.896551724138], [275.0, 1318.6666666666667], [284.0, 2022.4418604651169], [285.0, 1474.6603773584907], [286.0, 1742.6226415094347], [287.0, 1409.944881889763], [276.0, 1535.2539682539682], [278.0, 295.0], [279.0, 294.0], [280.0, 672.0], [281.0, 1479.5384615384617], [283.0, 1726.8333333333333], [288.0, 1378.1626506024093], [332.0, 412.1], [326.0, 1115.7123287671234], [325.0, 1418.5714285714287], [327.0, 869.1648351648354], [328.0, 749.375], [329.0, 513.3571428571428], [330.0, 498.73333333333335], [331.0, 552.4117647058822], [333.0, 568.0], [334.0, 426.99999999999994], [335.0, 442.6666666666667], [348.0, 123.0], [336.0, 314.0], [338.0, 302.0], [349.0, 91.33333333333333], [350.0, 58.0], [351.0, 102.33333333333334], [341.0, 233.6], [342.0, 162.50000000000003], [343.0, 243.0], [344.0, 251.5], [345.0, 160.33333333333331], [346.0, 186.8], [347.0, 95.0], [355.0, 34.0], [357.0, 95.0], [358.0, 88.5], [359.0, 1179.5], [363.0, 957.6666666666667], [367.0, 59.5], [370.0, 39.5], [369.0, 2788.0], [371.0, 1877.6666666666667], [375.0, 1422.0], [376.0, 1726.0], [377.0, 2825.5], [378.0, 774.6666666666666], [379.0, 53.5], [382.0, 58.25], [398.0, 102.07142857142858], [387.0, 36.0], [389.0, 90.75], [391.0, 132.5], [392.0, 179.0], [393.0, 83.0], [394.0, 89.0], [399.0, 21.0], [397.0, 26.0], [396.0, 26.0], [402.0, 59.0], [400.0, 61.0], [401.0, 21.0], [403.0, 37.0], [413.0, 21.0], [412.0, 21.0], [414.0, 30.25], [415.0, 21.0], [404.0, 41.0], [405.0, 20.0], [406.0, 25.0], [407.0, 38.5], [408.0, 38.333333333333336], [410.0, 28.0], [409.0, 22.0], [411.0, 35.5], [416.0, 27.0], [420.0, 35.333333333333336], [421.0, 21.0], [422.0, 27.5], [423.0, 26.0], [425.0, 35.5], [424.0, 21.0], [427.0, 22.0], [426.0, 21.0], [428.0, 36.0], [419.0, 22.0], [418.0, 22.0], [417.0, 26.0], [429.0, 44.166666666666664], [431.0, 31.0], [430.0, 21.0], [446.0, 69.0], [436.0, 56.0], [437.0, 22.0], [439.0, 24.0], [433.0, 28.0], [432.0, 25.0], [435.0, 43.0], [434.0, 32.0], [438.0, 22.0], [447.0, 67.0], [445.0, 69.0], [444.0, 72.0], [443.0, 25.0], [442.0, 24.0], [441.0, 34.0], [440.0, 22.0], [451.0, 38.0], [463.0, 122.5], [461.0, 123.0], [459.0, 159.5], [458.0, 167.0], [456.0, 134.0], [455.0, 150.0], [454.0, 169.0], [452.0, 154.0], [450.0, 42.0], [449.0, 68.0], [448.0, 68.0], [477.0, 79.0], [467.0, 92.0], [471.0, 88.0], [464.0, 143.0], [466.0, 147.0], [465.0, 156.0], [470.0, 138.0], [469.0, 146.0], [468.0, 141.0], [472.0, 74.0], [474.0, 76.5], [473.0, 144.0], [476.0, 73.5], [479.0, 73.0], [478.0, 138.0], [475.0, 141.0], [494.0, 65.0], [488.0, 44.333333333333336], [481.0, 53.5], [480.0, 90.0], [482.0, 53.0], [487.0, 49.0], [486.0, 47.0], [485.0, 26.0], [484.0, 77.0], [490.0, 65.5], [495.0, 154.0], [493.0, 26.0], [492.0, 117.0], [491.0, 146.0], [489.0, 74.0], [511.0, 74.0], [497.0, 128.5], [503.0, 78.0], [496.0, 166.0], [502.0, 24.0], [501.0, 181.5], [507.0, 39.0], [510.0, 84.0], [509.0, 67.0], [508.0, 49.5], [499.0, 197.0], [498.0, 174.0], [506.0, 33.0], [505.0, 54.0], [504.0, 33.0], [536.0, 129.0], [542.0, 53.5], [514.0, 30.0], [513.0, 78.0], [512.0, 106.0], [515.0, 39.0], [517.0, 53.0], [516.0, 50.0], [519.0, 85.0], [518.0, 33.0], [527.0, 46.0], [526.0, 28.0], [525.0, 68.0], [524.0, 76.0], [523.0, 34.0], [522.0, 54.0], [521.0, 24.0], [520.0, 30.0], [537.0, 37.0], [530.0, 36.0], [532.0, 66.0], [531.0, 27.0], [533.0, 39.333333333333336], [535.0, 70.0], [534.0, 68.0], [538.0, 56.5], [539.0, 58.33333333333333], [543.0, 118.0], [529.0, 61.0], [528.0, 46.0], [541.0, 154.0], [540.0, 66.0], [572.0, 95.0], [550.0, 92.25], [557.0, 51.0], [556.0, 29.0], [555.0, 99.0], [554.0, 97.0], [553.0, 33.0], [552.0, 106.0], [559.0, 33.0], [545.0, 102.0], [544.0, 86.0], [547.0, 98.0], [546.0, 25.0], [558.0, 95.0], [567.0, 47.0], [566.0, 24.0], [565.0, 124.0], [564.0, 126.0], [563.0, 73.0], [562.0, 39.0], [561.0, 23.0], [560.0, 75.0], [570.0, 47.0], [575.0, 74.0], [574.0, 82.0], [573.0, 272.0], [569.0, 83.0], [568.0, 36.0], [551.0, 27.0], [583.0, 120.66666666666666], [578.0, 147.0], [576.0, 55.666666666666664], [577.0, 257.0], [579.0, 66.0], [580.0, 145.5], [581.0, 55.5], [582.0, 227.0], [595.0, 48.0], [596.0, 205.0], [607.0, 50.0], [592.0, 122.0], [594.0, 117.0], [593.0, 212.0], [604.0, 93.5], [603.0, 167.0], [602.0, 80.0], [605.0, 147.0], [606.0, 85.0], [600.0, 93.0], [601.0, 71.66666666666667], [597.0, 82.0], [598.0, 122.0], [599.0, 89.0], [586.0, 129.5], [585.0, 220.0], [584.0, 224.0], [588.0, 64.0], [587.0, 64.0], [589.0, 93.5], [591.0, 95.66666666666666], [590.0, 214.0], [637.0, 101.33333333333334], [613.0, 77.0], [610.0, 29.0], [608.0, 70.0], [609.0, 131.5], [623.0, 147.0], [622.0, 148.0], [611.0, 83.75], [612.0, 130.0], [617.0, 40.0], [616.0, 109.0], [620.0, 119.66666666666667], [618.0, 152.0], [621.0, 71.0], [632.0, 122.0], [615.0, 113.0], [614.0, 164.0], [633.0, 99.0], [635.0, 114.5], [634.0, 211.0], [636.0, 190.0], [639.0, 188.0], [631.0, 219.0], [630.0, 217.0], [629.0, 25.0], [628.0, 26.0], [627.0, 294.0], [626.0, 292.0], [625.0, 301.0], [624.0, 301.0], [638.0, 189.0], [653.0, 57.5], [643.0, 87.0], [642.0, 159.0], [641.0, 151.0], [640.0, 188.0], [644.0, 46.0], [645.0, 40.666666666666664], [646.0, 66.33333333333333], [647.0, 122.0], [651.0, 46.0], [652.0, 76.0], [650.0, 72.0], [649.0, 70.0], [648.0, 107.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}, {"data": [[112.94434993924655, 440.52126366950205]], "isOverall": false, "label": "Healthy Thinking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 653.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22.5, "minX": 1.62720886E12, "maxY": 7781388.6, "series": [{"data": [[1.62720886E12, 599280.0], [1.62720887E12, 1339298.7], [1.62720892E12, 7781388.6], [1.62720893E12, 2551423.8], [1.62720894E12, 4539.9], [1.62720888E12, 4344629.0], [1.62720889E12, 6169741.8], [1.6272089E12, 7173042.0], [1.62720891E12, 7400037.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62720886E12, 2970.0], [1.62720887E12, 6637.5], [1.62720892E12, 38565.0], [1.62720893E12, 12645.0], [1.62720894E12, 22.5], [1.62720888E12, 21532.5], [1.62720889E12, 30577.5], [1.6272089E12, 35550.0], [1.62720891E12, 36675.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62720894E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.62720886E12, "maxY": 1307.410735122521, "series": [{"data": [[1.62720886E12, 76.37878787878788], [1.62720887E12, 46.9186440677966], [1.62720892E12, 1307.410735122521], [1.62720893E12, 199.74021352313167], [1.62720894E12, 26.0], [1.62720888E12, 56.29780564263323], [1.62720889E12, 50.52612214863868], [1.6272089E12, 144.43164556962043], [1.62720891E12, 550.7000000000004]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62720894E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.62720886E12, "maxY": 1264.7281213535616, "series": [{"data": [[1.62720886E12, 70.52272727272728], [1.62720887E12, 44.22033898305085], [1.62720892E12, 1264.7281213535616], [1.62720893E12, 195.98398576512432], [1.62720894E12, 24.0], [1.62720888E12, 51.23197492163012], [1.62720889E12, 47.982339955849824], [1.6272089E12, 140.05126582278484], [1.62720891E12, 535.4073619631897]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62720894E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.62720886E12, "maxY": 1233.1359393232167, "series": [{"data": [[1.62720886E12, 62.80303030303026], [1.62720887E12, 27.220338983050866], [1.62720892E12, 1233.1359393232167], [1.62720893E12, 190.09964412811382], [1.62720894E12, 21.0], [1.62720888E12, 32.578892371995835], [1.62720889E12, 42.894039735099376], [1.6272089E12, 133.79493670886075], [1.62720891E12, 518.1515337423318]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62720894E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.62720886E12, "maxY": 4829.0, "series": [{"data": [[1.62720886E12, 513.0], [1.62720887E12, 3894.0], [1.62720892E12, 4313.0], [1.62720893E12, 2901.0], [1.62720894E12, 26.0], [1.62720888E12, 4829.0], [1.62720889E12, 161.0], [1.6272089E12, 394.0], [1.62720891E12, 1378.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62720886E12, 17.0], [1.62720887E12, 15.0], [1.62720892E12, 269.0], [1.62720893E12, 20.0], [1.62720894E12, 26.0], [1.62720888E12, 15.0], [1.62720889E12, 16.0], [1.6272089E12, 34.0], [1.62720891E12, 44.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62720886E12, 349.40000000000003], [1.62720887E12, 52.400000000000034], [1.62720892E12, 1882.0], [1.62720893E12, 435.09999999999997], [1.62720894E12, 26.0], [1.62720888E12, 64.0], [1.62720889E12, 77.0], [1.6272089E12, 238.0], [1.62720891E12, 831.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62720886E12, 486.26999999999896], [1.62720887E12, 111.4000000000002], [1.62720892E12, 2806.3499999999917], [1.62720893E12, 2788.37], [1.62720894E12, 26.0], [1.62720888E12, 161.41999999999996], [1.62720889E12, 102.40000000000009], [1.6272089E12, 298.3800000000001], [1.62720891E12, 1143.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62720886E12, 415.4], [1.62720887E12, 72.39999999999998], [1.62720892E12, 2188.0], [1.62720893E12, 724.6000000000013], [1.62720894E12, 26.0], [1.62720888E12, 75.0], [1.62720889E12, 84.0], [1.6272089E12, 274.9499999999998], [1.62720891E12, 949.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62720894E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1672.5, "series": [{"data": [[2.0, 279.5], [3.0, 29.0], [4.0, 110.0], [19.0, 22.0], [25.0, 40.0], [30.0, 29.0], [35.0, 33.5], [38.0, 25.5], [42.0, 32.5], [47.0, 26.0], [49.0, 85.0], [50.0, 32.5], [56.0, 46.0], [59.0, 28.0], [60.0, 69.0], [75.0, 1444.0], [74.0, 69.0], [77.0, 147.0], [88.0, 40.0], [89.0, 36.0], [92.0, 626.5], [96.0, 31.0], [101.0, 41.0], [102.0, 39.0], [105.0, 35.0], [108.0, 37.0], [115.0, 39.0], [114.0, 35.5], [120.0, 739.0], [125.0, 31.0], [124.0, 34.0], [135.0, 47.0], [137.0, 32.0], [140.0, 36.0], [136.0, 60.0], [147.0, 147.0], [145.0, 1369.0], [150.0, 1210.0], [156.0, 83.0], [159.0, 118.5], [152.0, 84.0], [158.0, 117.5], [155.0, 211.5], [157.0, 460.0], [153.0, 336.0], [160.0, 140.0], [161.0, 170.0], [162.0, 492.0], [185.0, 573.0], [190.0, 642.0], [186.0, 756.0], [199.0, 1540.0], [202.0, 603.0], [1.0, 26.0], [268.0, 1672.5], [277.0, 1378.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 277.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 1648.5, "series": [{"data": [[2.0, 272.0], [3.0, 26.0], [4.0, 95.0], [19.0, 20.0], [25.0, 36.5], [30.0, 28.0], [35.0, 30.5], [38.0, 24.0], [42.0, 27.5], [47.0, 24.0], [49.0, 56.0], [50.0, 30.5], [56.0, 44.5], [59.0, 25.0], [60.0, 67.0], [75.0, 1439.0], [74.0, 65.5], [77.0, 144.0], [88.0, 38.0], [89.0, 33.0], [92.0, 497.0], [96.0, 29.0], [101.0, 40.0], [102.0, 37.0], [105.0, 32.0], [108.0, 33.0], [115.0, 38.0], [114.0, 33.5], [120.0, 719.0], [125.0, 27.0], [124.0, 32.0], [135.0, 45.0], [137.0, 29.0], [140.0, 33.0], [136.0, 57.5], [147.0, 147.0], [145.0, 1360.0], [150.0, 1160.0], [156.0, 81.0], [159.0, 108.5], [152.0, 82.0], [158.0, 113.0], [155.0, 207.0], [157.0, 441.5], [153.0, 335.0], [160.0, 137.5], [161.0, 167.0], [162.0, 458.5], [185.0, 564.0], [190.0, 629.0], [186.0, 745.0], [199.0, 1525.0], [202.0, 599.5], [1.0, 24.0], [268.0, 1648.5], [277.0, 1360.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 277.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62720886E12, "maxY": 171.5, "series": [{"data": [[1.62720886E12, 13.2], [1.62720887E12, 29.9], [1.62720892E12, 167.2], [1.62720893E12, 47.2], [1.62720894E12, 0.1], [1.62720888E12, 95.9], [1.62720889E12, 136.5], [1.6272089E12, 161.5], [1.62720891E12, 171.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62720894E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62720886E12, "maxY": 171.4, "series": [{"data": [[1.62720886E12, 13.2], [1.62720887E12, 29.5], [1.62720892E12, 171.4], [1.62720893E12, 56.2], [1.62720894E12, 0.1], [1.62720888E12, 95.7], [1.62720889E12, 135.9], [1.6272089E12, 158.0], [1.62720891E12, 163.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62720894E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62720886E12, "maxY": 171.4, "series": [{"data": [[1.62720886E12, 13.2], [1.62720887E12, 29.5], [1.62720892E12, 171.4], [1.62720893E12, 56.2], [1.62720894E12, 0.1], [1.62720888E12, 95.7], [1.62720889E12, 135.9], [1.6272089E12, 158.0], [1.62720891E12, 163.0]], "isOverall": false, "label": "Healthy Thinking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62720894E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62720886E12, "maxY": 171.4, "series": [{"data": [[1.62720886E12, 13.2], [1.62720887E12, 29.5], [1.62720892E12, 171.4], [1.62720893E12, 56.2], [1.62720894E12, 0.1], [1.62720888E12, 95.7], [1.62720889E12, 135.9], [1.6272089E12, 158.0], [1.62720891E12, 163.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62720894E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

