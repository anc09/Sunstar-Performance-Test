/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 7084.0, "series": [{"data": [[0.0, 10.0], [0.1, 10.0], [0.2, 10.0], [0.3, 11.0], [0.4, 11.0], [0.5, 11.0], [0.6, 11.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 11.0], [1.2, 11.0], [1.3, 11.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 11.0], [1.8, 11.0], [1.9, 11.0], [2.0, 11.0], [2.1, 11.0], [2.2, 12.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 12.0], [2.8, 12.0], [2.9, 12.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 12.0], [3.4, 12.0], [3.5, 12.0], [3.6, 12.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 12.0], [4.4, 12.0], [4.5, 12.0], [4.6, 12.0], [4.7, 13.0], [4.8, 13.0], [4.9, 13.0], [5.0, 13.0], [5.1, 13.0], [5.2, 13.0], [5.3, 13.0], [5.4, 13.0], [5.5, 13.0], [5.6, 13.0], [5.7, 13.0], [5.8, 13.0], [5.9, 13.0], [6.0, 13.0], [6.1, 13.0], [6.2, 13.0], [6.3, 13.0], [6.4, 13.0], [6.5, 13.0], [6.6, 13.0], [6.7, 13.0], [6.8, 13.0], [6.9, 13.0], [7.0, 13.0], [7.1, 13.0], [7.2, 13.0], [7.3, 13.0], [7.4, 13.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 14.0], [8.0, 14.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 14.0], [8.6, 14.0], [8.7, 14.0], [8.8, 14.0], [8.9, 14.0], [9.0, 14.0], [9.1, 14.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 14.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 15.0], [14.2, 15.0], [14.3, 15.0], [14.4, 15.0], [14.5, 15.0], [14.6, 15.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 16.0], [16.5, 16.0], [16.6, 16.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 16.0], [18.9, 16.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 17.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 17.0], [19.9, 17.0], [20.0, 17.0], [20.1, 17.0], [20.2, 17.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 17.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 18.0], [21.7, 18.0], [21.8, 18.0], [21.9, 18.0], [22.0, 18.0], [22.1, 18.0], [22.2, 18.0], [22.3, 18.0], [22.4, 18.0], [22.5, 18.0], [22.6, 18.0], [22.7, 18.0], [22.8, 18.0], [22.9, 18.0], [23.0, 18.0], [23.1, 18.0], [23.2, 18.0], [23.3, 18.0], [23.4, 18.0], [23.5, 18.0], [23.6, 19.0], [23.7, 19.0], [23.8, 19.0], [23.9, 19.0], [24.0, 19.0], [24.1, 19.0], [24.2, 19.0], [24.3, 19.0], [24.4, 19.0], [24.5, 19.0], [24.6, 19.0], [24.7, 19.0], [24.8, 19.0], [24.9, 19.0], [25.0, 19.0], [25.1, 19.0], [25.2, 19.0], [25.3, 19.0], [25.4, 19.0], [25.5, 19.0], [25.6, 20.0], [25.7, 20.0], [25.8, 20.0], [25.9, 20.0], [26.0, 20.0], [26.1, 20.0], [26.2, 20.0], [26.3, 20.0], [26.4, 20.0], [26.5, 20.0], [26.6, 20.0], [26.7, 20.0], [26.8, 20.0], [26.9, 20.0], [27.0, 20.0], [27.1, 20.0], [27.2, 20.0], [27.3, 20.0], [27.4, 20.0], [27.5, 20.0], [27.6, 20.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 21.0], [28.1, 21.0], [28.2, 21.0], [28.3, 21.0], [28.4, 21.0], [28.5, 21.0], [28.6, 21.0], [28.7, 21.0], [28.8, 21.0], [28.9, 21.0], [29.0, 21.0], [29.1, 21.0], [29.2, 21.0], [29.3, 21.0], [29.4, 21.0], [29.5, 21.0], [29.6, 21.0], [29.7, 21.0], [29.8, 21.0], [29.9, 21.0], [30.0, 21.0], [30.1, 22.0], [30.2, 22.0], [30.3, 22.0], [30.4, 22.0], [30.5, 22.0], [30.6, 22.0], [30.7, 22.0], [30.8, 22.0], [30.9, 22.0], [31.0, 22.0], [31.1, 22.0], [31.2, 22.0], [31.3, 22.0], [31.4, 22.0], [31.5, 22.0], [31.6, 22.0], [31.7, 22.0], [31.8, 22.0], [31.9, 22.0], [32.0, 22.0], [32.1, 22.0], [32.2, 22.0], [32.3, 22.0], [32.4, 22.0], [32.5, 22.0], [32.6, 22.0], [32.7, 22.0], [32.8, 23.0], [32.9, 23.0], [33.0, 23.0], [33.1, 23.0], [33.2, 23.0], [33.3, 23.0], [33.4, 23.0], [33.5, 23.0], [33.6, 23.0], [33.7, 23.0], [33.8, 23.0], [33.9, 23.0], [34.0, 23.0], [34.1, 23.0], [34.2, 23.0], [34.3, 23.0], [34.4, 23.0], [34.5, 23.0], [34.6, 23.0], [34.7, 23.0], [34.8, 23.0], [34.9, 23.0], [35.0, 23.0], [35.1, 23.0], [35.2, 23.0], [35.3, 23.0], [35.4, 23.0], [35.5, 23.0], [35.6, 23.0], [35.7, 23.0], [35.8, 23.0], [35.9, 24.0], [36.0, 24.0], [36.1, 24.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 24.0], [37.1, 24.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 25.0], [39.1, 25.0], [39.2, 25.0], [39.3, 25.0], [39.4, 25.0], [39.5, 25.0], [39.6, 25.0], [39.7, 25.0], [39.8, 25.0], [39.9, 25.0], [40.0, 25.0], [40.1, 25.0], [40.2, 25.0], [40.3, 25.0], [40.4, 25.0], [40.5, 25.0], [40.6, 25.0], [40.7, 25.0], [40.8, 25.0], [40.9, 25.0], [41.0, 25.0], [41.1, 25.0], [41.2, 25.0], [41.3, 25.0], [41.4, 25.0], [41.5, 25.0], [41.6, 25.0], [41.7, 26.0], [41.8, 26.0], [41.9, 26.0], [42.0, 26.0], [42.1, 26.0], [42.2, 26.0], [42.3, 26.0], [42.4, 26.0], [42.5, 26.0], [42.6, 26.0], [42.7, 26.0], [42.8, 26.0], [42.9, 26.0], [43.0, 26.0], [43.1, 26.0], [43.2, 26.0], [43.3, 26.0], [43.4, 26.0], [43.5, 26.0], [43.6, 26.0], [43.7, 26.0], [43.8, 26.0], [43.9, 26.0], [44.0, 26.0], [44.1, 27.0], [44.2, 27.0], [44.3, 27.0], [44.4, 27.0], [44.5, 27.0], [44.6, 27.0], [44.7, 27.0], [44.8, 27.0], [44.9, 27.0], [45.0, 27.0], [45.1, 27.0], [45.2, 27.0], [45.3, 27.0], [45.4, 27.0], [45.5, 27.0], [45.6, 27.0], [45.7, 27.0], [45.8, 27.0], [45.9, 27.0], [46.0, 27.0], [46.1, 27.0], [46.2, 27.0], [46.3, 27.0], [46.4, 27.0], [46.5, 28.0], [46.6, 28.0], [46.7, 28.0], [46.8, 28.0], [46.9, 28.0], [47.0, 28.0], [47.1, 28.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 28.0], [48.5, 28.0], [48.6, 28.0], [48.7, 28.0], [48.8, 28.0], [48.9, 29.0], [49.0, 29.0], [49.1, 29.0], [49.2, 29.0], [49.3, 29.0], [49.4, 29.0], [49.5, 29.0], [49.6, 29.0], [49.7, 29.0], [49.8, 29.0], [49.9, 29.0], [50.0, 29.0], [50.1, 29.0], [50.2, 29.0], [50.3, 29.0], [50.4, 29.0], [50.5, 29.0], [50.6, 29.0], [50.7, 29.0], [50.8, 29.0], [50.9, 29.0], [51.0, 29.0], [51.1, 29.0], [51.2, 30.0], [51.3, 30.0], [51.4, 30.0], [51.5, 30.0], [51.6, 30.0], [51.7, 30.0], [51.8, 30.0], [51.9, 30.0], [52.0, 30.0], [52.1, 30.0], [52.2, 30.0], [52.3, 30.0], [52.4, 30.0], [52.5, 30.0], [52.6, 30.0], [52.7, 30.0], [52.8, 30.0], [52.9, 30.0], [53.0, 30.0], [53.1, 31.0], [53.2, 31.0], [53.3, 31.0], [53.4, 31.0], [53.5, 31.0], [53.6, 31.0], [53.7, 31.0], [53.8, 31.0], [53.9, 31.0], [54.0, 31.0], [54.1, 31.0], [54.2, 31.0], [54.3, 31.0], [54.4, 31.0], [54.5, 31.0], [54.6, 31.0], [54.7, 32.0], [54.8, 32.0], [54.9, 32.0], [55.0, 32.0], [55.1, 32.0], [55.2, 32.0], [55.3, 32.0], [55.4, 32.0], [55.5, 32.0], [55.6, 32.0], [55.7, 32.0], [55.8, 32.0], [55.9, 33.0], [56.0, 33.0], [56.1, 33.0], [56.2, 33.0], [56.3, 33.0], [56.4, 33.0], [56.5, 33.0], [56.6, 33.0], [56.7, 33.0], [56.8, 33.0], [56.9, 34.0], [57.0, 34.0], [57.1, 34.0], [57.2, 34.0], [57.3, 34.0], [57.4, 34.0], [57.5, 34.0], [57.6, 34.0], [57.7, 35.0], [57.8, 35.0], [57.9, 35.0], [58.0, 35.0], [58.1, 35.0], [58.2, 35.0], [58.3, 35.0], [58.4, 35.0], [58.5, 36.0], [58.6, 36.0], [58.7, 36.0], [58.8, 36.0], [58.9, 36.0], [59.0, 36.0], [59.1, 37.0], [59.2, 37.0], [59.3, 37.0], [59.4, 37.0], [59.5, 38.0], [59.6, 38.0], [59.7, 38.0], [59.8, 38.0], [59.9, 39.0], [60.0, 39.0], [60.1, 39.0], [60.2, 40.0], [60.3, 40.0], [60.4, 40.0], [60.5, 41.0], [60.6, 41.0], [60.7, 42.0], [60.8, 42.0], [60.9, 43.0], [61.0, 44.0], [61.1, 44.0], [61.2, 45.0], [61.3, 45.0], [61.4, 45.0], [61.5, 46.0], [61.6, 46.0], [61.7, 46.0], [61.8, 46.0], [61.9, 46.0], [62.0, 46.0], [62.1, 47.0], [62.2, 47.0], [62.3, 47.0], [62.4, 47.0], [62.5, 47.0], [62.6, 47.0], [62.7, 47.0], [62.8, 47.0], [62.9, 48.0], [63.0, 48.0], [63.1, 48.0], [63.2, 48.0], [63.3, 48.0], [63.4, 48.0], [63.5, 48.0], [63.6, 48.0], [63.7, 48.0], [63.8, 48.0], [63.9, 48.0], [64.0, 49.0], [64.1, 49.0], [64.2, 49.0], [64.3, 49.0], [64.4, 49.0], [64.5, 49.0], [64.6, 49.0], [64.7, 49.0], [64.8, 49.0], [64.9, 49.0], [65.0, 49.0], [65.1, 49.0], [65.2, 49.0], [65.3, 49.0], [65.4, 49.0], [65.5, 49.0], [65.6, 50.0], [65.7, 50.0], [65.8, 50.0], [65.9, 50.0], [66.0, 50.0], [66.1, 50.0], [66.2, 50.0], [66.3, 50.0], [66.4, 50.0], [66.5, 50.0], [66.6, 50.0], [66.7, 50.0], [66.8, 50.0], [66.9, 50.0], [67.0, 50.0], [67.1, 50.0], [67.2, 50.0], [67.3, 50.0], [67.4, 50.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 51.0], [69.3, 51.0], [69.4, 51.0], [69.5, 52.0], [69.6, 52.0], [69.7, 52.0], [69.8, 52.0], [69.9, 52.0], [70.0, 52.0], [70.1, 52.0], [70.2, 52.0], [70.3, 52.0], [70.4, 52.0], [70.5, 52.0], [70.6, 52.0], [70.7, 52.0], [70.8, 52.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 53.0], [71.7, 53.0], [71.8, 53.0], [71.9, 53.0], [72.0, 53.0], [72.1, 53.0], [72.2, 53.0], [72.3, 53.0], [72.4, 53.0], [72.5, 53.0], [72.6, 53.0], [72.7, 53.0], [72.8, 53.0], [72.9, 53.0], [73.0, 53.0], [73.1, 53.0], [73.2, 53.0], [73.3, 53.0], [73.4, 53.0], [73.5, 53.0], [73.6, 53.0], [73.7, 53.0], [73.8, 54.0], [73.9, 54.0], [74.0, 54.0], [74.1, 54.0], [74.2, 54.0], [74.3, 54.0], [74.4, 54.0], [74.5, 54.0], [74.6, 54.0], [74.7, 54.0], [74.8, 54.0], [74.9, 54.0], [75.0, 54.0], [75.1, 54.0], [75.2, 54.0], [75.3, 54.0], [75.4, 54.0], [75.5, 54.0], [75.6, 54.0], [75.7, 54.0], [75.8, 55.0], [75.9, 55.0], [76.0, 55.0], [76.1, 55.0], [76.2, 55.0], [76.3, 55.0], [76.4, 55.0], [76.5, 55.0], [76.6, 55.0], [76.7, 55.0], [76.8, 55.0], [76.9, 55.0], [77.0, 55.0], [77.1, 55.0], [77.2, 55.0], [77.3, 55.0], [77.4, 55.0], [77.5, 55.0], [77.6, 55.0], [77.7, 56.0], [77.8, 56.0], [77.9, 56.0], [78.0, 56.0], [78.1, 56.0], [78.2, 56.0], [78.3, 56.0], [78.4, 56.0], [78.5, 56.0], [78.6, 56.0], [78.7, 56.0], [78.8, 56.0], [78.9, 56.0], [79.0, 56.0], [79.1, 56.0], [79.2, 56.0], [79.3, 57.0], [79.4, 57.0], [79.5, 57.0], [79.6, 57.0], [79.7, 57.0], [79.8, 57.0], [79.9, 57.0], [80.0, 57.0], [80.1, 57.0], [80.2, 57.0], [80.3, 57.0], [80.4, 57.0], [80.5, 57.0], [80.6, 57.0], [80.7, 57.0], [80.8, 58.0], [80.9, 58.0], [81.0, 58.0], [81.1, 58.0], [81.2, 58.0], [81.3, 58.0], [81.4, 58.0], [81.5, 58.0], [81.6, 58.0], [81.7, 58.0], [81.8, 58.0], [81.9, 58.0], [82.0, 58.0], [82.1, 59.0], [82.2, 59.0], [82.3, 59.0], [82.4, 59.0], [82.5, 59.0], [82.6, 59.0], [82.7, 59.0], [82.8, 59.0], [82.9, 59.0], [83.0, 59.0], [83.1, 59.0], [83.2, 59.0], [83.3, 60.0], [83.4, 60.0], [83.5, 60.0], [83.6, 60.0], [83.7, 60.0], [83.8, 60.0], [83.9, 60.0], [84.0, 60.0], [84.1, 60.0], [84.2, 60.0], [84.3, 60.0], [84.4, 61.0], [84.5, 61.0], [84.6, 61.0], [84.7, 61.0], [84.8, 61.0], [84.9, 61.0], [85.0, 61.0], [85.1, 61.0], [85.2, 61.0], [85.3, 62.0], [85.4, 62.0], [85.5, 62.0], [85.6, 62.0], [85.7, 62.0], [85.8, 62.0], [85.9, 62.0], [86.0, 62.0], [86.1, 63.0], [86.2, 63.0], [86.3, 63.0], [86.4, 63.0], [86.5, 63.0], [86.6, 63.0], [86.7, 63.0], [86.8, 64.0], [86.9, 64.0], [87.0, 64.0], [87.1, 64.0], [87.2, 64.0], [87.3, 64.0], [87.4, 64.0], [87.5, 65.0], [87.6, 65.0], [87.7, 65.0], [87.8, 65.0], [87.9, 65.0], [88.0, 65.0], [88.1, 66.0], [88.2, 66.0], [88.3, 66.0], [88.4, 66.0], [88.5, 66.0], [88.6, 67.0], [88.7, 67.0], [88.8, 67.0], [88.9, 67.0], [89.0, 68.0], [89.1, 68.0], [89.2, 68.0], [89.3, 68.0], [89.4, 69.0], [89.5, 69.0], [89.6, 69.0], [89.7, 69.0], [89.8, 70.0], [89.9, 70.0], [90.0, 70.0], [90.1, 71.0], [90.2, 71.0], [90.3, 71.0], [90.4, 72.0], [90.5, 72.0], [90.6, 72.0], [90.7, 73.0], [90.8, 73.0], [90.9, 74.0], [91.0, 74.0], [91.1, 74.0], [91.2, 75.0], [91.3, 75.0], [91.4, 76.0], [91.5, 76.0], [91.6, 77.0], [91.7, 77.0], [91.8, 78.0], [91.9, 78.0], [92.0, 79.0], [92.1, 79.0], [92.2, 80.0], [92.3, 81.0], [92.4, 81.0], [92.5, 82.0], [92.6, 83.0], [92.7, 83.0], [92.8, 84.0], [92.9, 84.0], [93.0, 85.0], [93.1, 86.0], [93.2, 87.0], [93.3, 87.0], [93.4, 88.0], [93.5, 89.0], [93.6, 90.0], [93.7, 91.0], [93.8, 91.0], [93.9, 92.0], [94.0, 93.0], [94.1, 94.0], [94.2, 95.0], [94.3, 95.0], [94.4, 96.0], [94.5, 97.0], [94.6, 98.0], [94.7, 99.0], [94.8, 100.0], [94.9, 101.0], [95.0, 102.0], [95.1, 103.0], [95.2, 104.0], [95.3, 105.0], [95.4, 106.0], [95.5, 107.0], [95.6, 109.0], [95.7, 109.0], [95.8, 111.0], [95.9, 112.0], [96.0, 113.0], [96.1, 114.0], [96.2, 115.0], [96.3, 117.0], [96.4, 118.0], [96.5, 120.0], [96.6, 122.0], [96.7, 124.0], [96.8, 126.0], [96.9, 127.0], [97.0, 129.0], [97.1, 132.0], [97.2, 134.0], [97.3, 136.0], [97.4, 140.0], [97.5, 143.0], [97.6, 148.0], [97.7, 152.0], [97.8, 158.0], [97.9, 165.0], [98.0, 176.0], [98.1, 193.0], [98.2, 219.0], [98.3, 307.0], [98.4, 377.0], [98.5, 412.0], [98.6, 503.0], [98.7, 598.0], [98.8, 667.0], [98.9, 705.0], [99.0, 747.0], [99.1, 786.0], [99.2, 829.0], [99.3, 880.0], [99.4, 914.0], [99.5, 950.0], [99.6, 981.0], [99.7, 1016.0], [99.8, 1063.0], [99.9, 1159.0], [100.0, 7084.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 75576.0, "series": [{"data": [[0.0, 75576.0], [600.0, 141.0], [700.0, 202.0], [200.0, 128.0], [800.0, 172.0], [900.0, 248.0], [1000.0, 141.0], [1100.0, 82.0], [4700.0, 2.0], [300.0, 137.0], [1200.0, 32.0], [5000.0, 1.0], [4900.0, 1.0], [1300.0, 6.0], [1400.0, 1.0], [5700.0, 1.0], [100.0, 2693.0], [400.0, 104.0], [6700.0, 1.0], [6800.0, 3.0], [7000.0, 1.0], [500.0, 84.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 78639.0, "series": [{"data": [[0.0, 78639.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1108.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5049504950495054, "minX": 1.62584207E12, "maxY": 1394.5, "series": [{"data": [[1.62584221E12, 8.903225806451617], [1.62584281E12, 4.827993254637436], [1.62584264E12, 3.0], [1.62584255E12, 4.422393822393821], [1.62584238E12, 12.0], [1.62584213E12, 1030.0334190231351], [1.6258429E12, 7.0], [1.62584273E12, 6.995741660752309], [1.62584256E12, 3.0], [1.62584247E12, 4.7311926605504535], [1.6258423E12, 4.518684603886393], [1.6258422E12, 15.0], [1.62584297E12, 3.0], [1.6258428E12, 3.3749999999999996], [1.62584271E12, 5.09660226515656], [1.62584254E12, 5.1468282252316495], [1.62584237E12, 12.0], [1.62584212E12, 1249.433734939759], [1.62584289E12, 7.0], [1.62584272E12, 6.0], [1.62584263E12, 3.0], [1.62584246E12, 3.9418052256532055], [1.62584229E12, 3.4840182648401834], [1.62584296E12, 3.0], [1.62584287E12, 6.393453573814301], [1.6258427E12, 5.0], [1.62584253E12, 5.648074369189911], [1.62584219E12, 17.434999999999974], [1.62584236E12, 11.094188376753499], [1.62584288E12, 7.0], [1.62584279E12, 3.0], [1.62584262E12, 3.0], [1.62584245E12, 3.1062394603709937], [1.62584211E12, 1301.2307692307693], [1.62584228E12, 6.089179548156954], [1.62584235E12, 9.561995597945694], [1.62584286E12, 12.008010680907883], [1.62584218E12, 22.730820995962308], [1.62584269E12, 6.718498659517431], [1.62584252E12, 11.0], [1.62584227E12, 4.426644182124784], [1.62584295E12, 3.0], [1.62584278E12, 3.0], [1.6258421E12, 1344.409090909091], [1.62584261E12, 3.0], [1.62584244E12, 3.0], [1.62584251E12, 11.0], [1.62584234E12, 4.0], [1.62584217E12, 17.959699453551888], [1.62584285E12, 12.228906823184145], [1.62584268E12, 10.287553648068666], [1.62584243E12, 3.0], [1.62584226E12, 3.349710982658959], [1.62584209E12, 1373.9411764705883], [1.62584294E12, 3.0], [1.62584277E12, 3.0], [1.6258426E12, 3.0], [1.62584267E12, 4.0], [1.6258425E12, 9.592151366503142], [1.62584233E12, 4.0], [1.62584207E12, 1394.5], [1.62584216E12, 155.6204268292681], [1.62584284E12, 8.814425244177304], [1.62584259E12, 3.0], [1.62584242E12, 3.0], [1.62584208E12, 1385.625], [1.62584225E12, 2.5049504950495054], [1.62584293E12, 3.0], [1.62584276E12, 3.0], [1.62584283E12, 7.211926605504588], [1.62584266E12, 3.714925373134324], [1.62584249E12, 6.0], [1.62584223E12, 5.0], [1.62584232E12, 5.37554269175109], [1.62584275E12, 3.0], [1.62584258E12, 3.0], [1.62584241E12, 4.101895734597159], [1.62584215E12, 511.00704225352143], [1.62584224E12, 2.9827586206896575], [1.62584292E12, 4.71748492678725], [1.62584282E12, 6.901425178147271], [1.62584222E12, 7.474885844748854], [1.62584265E12, 3.0963302752293576], [1.62584248E12, 5.6185489902767385], [1.62584239E12, 7.356209150326804], [1.62584291E12, 7.0], [1.62584274E12, 6.281303602058312], [1.62584214E12, 750.6989247311827], [1.62584257E12, 3.0], [1.6258424E12, 6.0], [1.62584231E12, 5.139204545454546]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584297E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.625457067204486, "minX": 1.0, "maxY": 6776.0, "series": [{"data": [[2.0, 36.630653266331635], [3.0, 20.625457067204486], [4.0, 25.141771277208303], [5.0, 27.91417842095623], [6.0, 36.10553678190789], [7.0, 32.51300507115969], [8.0, 39.9100704517198], [9.0, 57.48330842052816], [10.0, 67.28969539857417], [11.0, 59.857076205287804], [12.0, 58.00999091734793], [13.0, 56.56999161777036], [14.0, 85.52870813397129], [15.0, 78.75603864734302], [16.0, 38.82706766917295], [17.0, 116.9205776173285], [18.0, 112.5960264900663], [19.0, 105.90384615384612], [20.0, 115.79104477611939], [21.0, 99.0271493212668], [22.0, 112.11221122112207], [23.0, 119.09407665505225], [24.0, 156.85714285714286], [25.0, 113.91583610188263], [26.0, 375.0], [27.0, 389.0], [28.0, 391.0], [29.0, 382.0], [30.0, 390.0], [31.0, 388.5], [32.0, 380.0], [35.0, 373.0], [34.0, 376.5], [37.0, 379.0], [36.0, 384.0], [39.0, 365.0], [38.0, 379.0], [41.0, 373.0], [40.0, 364.0], [43.0, 358.0], [42.0, 364.5], [45.0, 352.5], [47.0, 657.0], [46.0, 361.0], [49.0, 976.0], [51.0, 980.0], [50.0, 996.5], [53.0, 988.0], [52.0, 974.0], [55.0, 975.0], [54.0, 994.0], [57.0, 983.0], [56.0, 998.0], [59.0, 974.0], [58.0, 976.0], [61.0, 947.0], [60.0, 976.0], [63.0, 941.0], [62.0, 957.0], [64.0, 963.0], [71.0, 909.0], [70.0, 924.0], [75.0, 901.0], [74.0, 902.3333333333334], [72.0, 896.0], [79.0, 867.0], [78.0, 879.0], [77.0, 632.0], [76.0, 913.0], [83.0, 858.0], [82.0, 880.0], [81.0, 857.0], [80.0, 834.0], [87.0, 783.0], [86.0, 819.5], [85.0, 838.0], [84.0, 824.0], [91.0, 743.0], [90.0, 814.0], [89.0, 781.0], [88.0, 781.0], [95.0, 768.0], [94.0, 732.0], [93.0, 739.0], [92.0, 766.0], [99.0, 668.0], [98.0, 647.0], [97.0, 610.5], [96.0, 672.5], [102.0, 645.0], [101.0, 280.0], [100.0, 667.0], [135.0, 500.4814814814815], [134.0, 577.0], [133.0, 574.0], [131.0, 607.0], [130.0, 604.0], [129.0, 564.0], [128.0, 597.0], [143.0, 148.0], [142.0, 116.0], [141.0, 129.0], [140.0, 157.0], [139.0, 238.0], [138.0, 378.0], [137.0, 407.0], [136.0, 449.0], [151.0, 67.0], [150.0, 71.0], [149.0, 78.0], [148.0, 92.0], [147.0, 90.0], [146.0, 96.5], [144.0, 97.0], [159.0, 1096.0], [158.0, 1023.0], [157.0, 68.0], [156.0, 67.0], [155.0, 69.66666666666667], [152.0, 76.0], [163.0, 1027.0], [162.0, 1010.0], [161.0, 1080.0], [160.0, 1082.0], [183.0, 1083.0], [182.0, 1079.0], [190.0, 1081.0], [189.0, 1064.0], [187.0, 1040.0], [185.0, 1025.0], [184.0, 1084.0], [198.0, 1043.0], [196.0, 1041.0], [195.0, 994.0], [193.0, 995.0], [192.0, 1007.0], [207.0, 1018.5], [204.0, 1030.0], [203.0, 1001.0], [201.0, 1032.6666666666667], [200.0, 1044.0], [215.0, 1007.0], [214.0, 1017.0], [212.0, 1067.0], [211.0, 1055.0], [210.0, 984.0], [209.0, 1016.0], [208.0, 1013.0], [223.0, 1044.0], [222.0, 1043.0], [221.0, 1046.0], [220.0, 967.0], [219.0, 998.0], [218.0, 1053.0], [217.0, 1050.0], [216.0, 1036.0], [231.0, 990.5], [229.0, 986.7692307692307], [226.0, 996.0], [225.0, 959.0], [224.0, 1022.0], [239.0, 941.0], [238.0, 981.0], [236.0, 959.0], [235.0, 984.0], [234.0, 945.0], [233.0, 940.0], [232.0, 958.0], [247.0, 927.0], [246.0, 936.5], [245.0, 1005.0], [244.0, 998.0], [243.0, 993.0], [242.0, 962.0], [241.0, 1003.0], [240.0, 937.0], [255.0, 996.0], [253.0, 923.0], [252.0, 986.0], [251.0, 963.6666666666666], [250.0, 919.0], [249.0, 923.5], [248.0, 989.0], [259.0, 962.0], [271.0, 803.0], [270.0, 827.0], [268.0, 880.0], [267.0, 882.0], [260.0, 887.0], [258.0, 900.3333333333334], [257.0, 938.0], [256.0, 981.0], [286.0, 869.5], [287.0, 874.0], [285.0, 867.0], [272.0, 884.0], [283.0, 845.0], [282.0, 855.0], [281.0, 883.0], [280.0, 885.0], [279.0, 827.0], [278.0, 868.0], [277.0, 879.5], [276.0, 885.0], [302.0, 815.0], [303.0, 843.0], [301.0, 791.0], [300.0, 830.0], [299.0, 860.0], [298.0, 815.0], [297.0, 829.75], [296.0, 822.5], [295.0, 822.0], [288.0, 854.5], [291.0, 809.0], [289.0, 861.0], [294.0, 857.0], [293.0, 823.0], [292.0, 814.0], [319.0, 1033.0], [311.0, 985.0], [307.0, 1022.0], [306.0, 1014.0], [305.0, 784.0], [304.0, 854.0], [321.0, 1011.0], [367.0, 1019.0], [362.0, 982.0], [399.0, 890.5555555555555], [393.0, 960.0666666666667], [391.0, 995.0], [390.0, 936.0], [389.0, 991.0], [387.0, 986.5], [394.0, 979.6666666666666], [395.0, 982.0], [398.0, 933.0], [414.0, 789.0], [415.0, 778.0], [413.0, 752.5], [403.0, 841.0], [402.0, 830.0], [401.0, 831.0], [411.0, 796.0], [410.0, 787.0], [409.0, 822.0], [408.0, 826.0], [407.0, 782.5], [406.0, 823.5], [405.0, 818.0], [404.0, 815.3333333333334], [430.0, 307.0], [431.0, 310.0], [429.0, 310.0], [428.0, 365.0], [427.0, 721.0], [426.0, 727.0], [425.0, 737.0], [424.0, 770.0], [423.0, 718.0], [417.0, 776.0], [416.0, 785.0], [419.0, 775.0], [418.0, 792.0], [422.0, 762.0], [421.0, 771.0], [420.0, 769.0], [434.0, 284.0], [447.0, 1059.0], [440.0, 1001.0], [439.0, 1043.0], [438.0, 1013.0], [437.0, 1029.0], [435.0, 333.0], [433.0, 358.0], [432.0, 327.0], [462.0, 993.0], [463.0, 1046.0], [461.0, 1023.0], [460.0, 1046.0], [459.0, 967.0], [458.0, 1069.0], [457.0, 1043.0], [456.0, 1016.6666666666666], [455.0, 1059.0], [449.0, 1024.0], [448.0, 999.0], [453.0, 1064.0], [452.0, 997.0], [478.0, 1026.0], [479.0, 976.0], [477.0, 1036.0], [476.0, 1006.0], [467.0, 1002.0], [466.0, 1038.0], [465.0, 960.0], [464.0, 1066.0], [475.0, 1015.0], [474.0, 1047.0], [473.0, 1041.0], [472.0, 1046.0], [470.0, 1056.0], [469.0, 1020.0], [468.0, 986.0], [494.0, 980.0], [495.0, 927.0], [493.0, 988.3333333333334], [483.0, 978.5], [482.0, 966.0], [481.0, 989.0], [480.0, 1017.0], [491.0, 1019.0], [490.0, 933.0], [489.0, 1010.5], [487.0, 988.0], [486.0, 935.0], [485.0, 981.0], [499.0, 941.0], [511.0, 934.5], [509.0, 905.5], [507.0, 925.0], [506.0, 916.0], [504.0, 912.0], [503.0, 939.0], [502.0, 980.0], [500.0, 974.0], [498.0, 962.0], [497.0, 996.0], [496.0, 964.0], [537.0, 838.5], [542.0, 849.0], [543.0, 798.0], [531.0, 941.0], [529.0, 879.0], [533.0, 901.0], [532.0, 848.0], [540.0, 819.0], [539.0, 871.5], [538.0, 882.0], [536.0, 845.0], [518.0, 978.0], [517.0, 904.0], [516.0, 889.5], [515.0, 894.0], [514.0, 932.5], [527.0, 943.0], [525.0, 937.0], [524.0, 889.0], [522.0, 961.0], [521.0, 916.0], [535.0, 880.0], [534.0, 929.0], [572.0, 86.0], [575.0, 87.0], [561.0, 763.5], [560.0, 771.0], [563.0, 750.0], [562.0, 714.0], [565.0, 768.0], [564.0, 755.0], [574.0, 86.0], [573.0, 88.0], [571.0, 91.0], [570.0, 90.0], [569.0, 748.0], [568.0, 776.0], [559.0, 726.0], [545.0, 843.0], [544.0, 792.0], [547.0, 858.0], [546.0, 801.0], [549.0, 777.0], [548.0, 779.0], [551.0, 794.0], [550.0, 760.0], [558.0, 774.0], [557.0, 783.5], [556.0, 748.0], [555.0, 825.0], [554.0, 826.0], [553.0, 751.0], [552.0, 792.3333333333334], [567.0, 752.0], [566.0, 743.0], [603.0, 1259.0], [596.0, 160.0], [600.0, 102.0], [583.0, 205.0], [581.0, 173.0], [580.0, 208.0], [578.0, 195.0], [577.0, 77.0], [576.0, 83.0], [591.0, 195.0], [590.0, 194.0], [588.0, 196.0], [587.0, 184.0], [586.0, 202.0], [585.0, 199.0], [584.0, 202.0], [599.0, 145.0], [598.0, 154.0], [597.0, 156.0], [595.0, 165.0], [594.0, 170.0], [593.0, 187.0], [592.0, 156.0], [625.0, 963.0], [637.0, 1177.5], [635.0, 1131.0], [634.0, 1139.0], [632.0, 1048.5], [623.0, 1163.0], [613.0, 970.0], [610.0, 1145.0], [615.0, 1199.0], [614.0, 1262.0], [622.0, 958.0], [621.0, 1134.0], [620.0, 968.0], [617.0, 1149.0], [616.0, 1150.0], [631.0, 1115.5], [629.0, 1116.0], [626.0, 1160.0], [624.0, 1056.5], [667.0, 944.0], [652.0, 1352.0], [646.0, 1240.0], [645.0, 1118.0], [640.0, 1132.0], [696.0, 1097.0], [680.0, 937.0], [676.0, 936.0], [734.0, 1140.5], [735.0, 1063.0], [733.0, 1116.0], [732.0, 900.0], [731.0, 912.0], [712.0, 934.0], [723.0, 1188.0], [722.0, 1125.0], [721.0, 1111.0], [720.0, 1099.0], [764.0, 642.0], [767.0, 53.0], [753.0, 698.0], [752.0, 1067.0], [755.0, 690.0], [754.0, 696.0], [757.0, 706.5], [756.0, 702.0], [766.0, 269.0], [765.0, 631.0], [763.0, 673.0], [762.0, 763.0], [761.0, 778.0], [760.0, 856.0], [751.0, 541.0], [737.0, 1070.0], [736.0, 911.0], [741.0, 1170.0], [738.0, 1091.0], [743.0, 1069.0], [742.0, 1058.0], [750.0, 680.0], [748.0, 902.0], [747.0, 1078.8586956521738], [746.0, 1043.0], [745.0, 1060.0], [759.0, 922.0], [758.0, 698.0], [772.0, 741.0], [771.0, 736.0], [769.0, 783.0], [830.0, 715.0], [831.0, 717.0], [817.0, 758.0], [821.0, 701.0], [820.0, 726.0], [828.0, 712.0], [827.0, 738.0], [826.0, 690.0], [825.0, 745.0], [824.0, 747.0], [823.0, 701.0], [822.0, 755.0], [858.0, 574.0], [852.0, 608.5], [859.0, 550.0], [849.0, 671.5], [848.0, 699.0], [857.0, 586.0], [856.0, 279.0], [846.0, 707.0], [833.0, 686.0], [832.0, 742.5], [837.0, 679.0], [835.0, 697.0], [839.0, 737.0], [838.0, 703.0], [844.0, 691.0], [843.0, 717.0], [842.0, 728.0], [841.0, 741.0], [840.0, 738.0], [855.0, 610.0], [854.0, 612.0], [853.0, 595.0], [851.0, 635.0], [850.0, 671.0217391304348], [894.0, 489.0], [895.0, 719.0], [880.0, 770.5], [883.0, 748.0], [882.0, 547.5], [885.0, 988.0], [884.0, 624.5], [893.0, 499.5], [891.0, 506.0], [890.0, 1003.0], [889.0, 936.0], [888.0, 499.0], [871.0, 688.875], [866.0, 544.0], [868.0, 562.0], [878.0, 566.0], [877.0, 557.0], [876.0, 543.0], [875.0, 515.0], [874.0, 901.0], [872.0, 553.0], [887.0, 538.0], [886.0, 537.0], [921.0, 760.5], [926.0, 1158.0], [927.0, 1142.0], [913.0, 806.0], [912.0, 1321.0], [916.0, 803.0], [915.0, 804.0], [925.0, 1152.0], [924.0, 1044.0], [923.0, 890.6666666666666], [920.0, 820.0], [899.0, 496.5], [897.0, 714.0], [896.0, 718.0], [911.0, 599.0], [910.0, 645.0], [909.0, 700.0], [908.0, 591.75], [907.0, 497.0], [906.0, 514.0], [905.0, 480.0], [904.0, 507.0], [918.0, 794.0], [917.0, 798.0], [945.0, 974.0], [949.0, 959.0], [947.0, 925.0], [946.0, 961.0], [944.0, 1003.0], [943.0, 878.0], [940.0, 1032.0], [931.0, 912.0], [930.0, 1075.0], [929.0, 665.0], [928.0, 1080.0], [989.0, 576.0], [991.0, 696.0], [977.0, 855.25], [979.0, 713.0], [978.0, 685.0], [981.0, 727.0], [980.0, 495.0], [988.0, 659.0], [987.0, 661.0], [986.0, 661.0], [985.0, 706.0], [984.0, 719.0], [983.0, 704.0], [982.0, 491.0], [1017.0, 722.0], [1022.0, 705.0], [1023.0, 740.0], [1008.0, 786.0], [1010.0, 719.0], [1009.0, 780.0], [1021.0, 753.0], [1020.0, 733.5], [1018.0, 739.0], [1007.0, 743.0], [993.0, 629.0], [992.0, 703.0], [995.0, 639.0], [994.0, 557.0], [997.0, 545.731707317073], [996.0, 677.0], [999.0, 863.8], [998.0, 857.0], [1006.0, 760.5], [1004.0, 757.5], [1003.0, 783.0], [1002.0, 775.0], [1001.0, 795.0], [1000.0, 772.2000000000002], [1015.0, 720.0], [1014.0, 729.0], [1012.0, 717.0], [1011.0, 723.0], [1080.0, 874.0], [1056.0, 903.0], [1058.0, 959.0], [1060.0, 908.0], [1064.0, 901.0], [1066.0, 907.0], [1068.0, 901.0], [1070.0, 894.0], [1082.0, 873.0], [1078.0, 930.5], [1076.0, 898.5], [1074.0, 889.0], [1072.0, 901.0], [1038.0, 701.0], [1036.0, 668.0], [1034.0, 705.0], [1032.0, 692.0], [1030.0, 708.0], [1028.0, 723.5], [1026.0, 698.0], [1024.0, 723.0], [1052.0, 913.0], [1050.0, 249.0], [1046.0, 567.0], [1044.0, 582.0], [1042.0, 614.0], [1040.0, 640.0], [1142.0, 1190.0], [1120.0, 863.0], [1126.0, 848.0], [1128.0, 826.0], [1130.0, 858.0], [1132.0, 1182.0], [1134.0, 594.0], [1148.0, 1157.0], [1146.0, 1194.0], [1140.0, 585.0], [1138.0, 1192.0], [1136.0, 583.6666666666666], [1100.0, 1245.0], [1098.0, 910.0], [1096.0, 907.0], [1094.0, 901.0], [1118.0, 833.0], [1116.0, 1235.0], [1112.0, 846.0], [1110.0, 1230.0], [1154.0, 610.0], [1152.0, 598.0], [1158.0, 646.5], [1160.0, 682.0], [1162.0, 839.0], [1164.0, 702.0], [1166.0, 1145.0], [1182.0, 730.0], [1180.0, 1128.0], [1174.0, 904.0], [1172.0, 888.0], [1184.0, 1033.0], [1186.0, 651.0], [1188.0, 667.0], [1190.0, 115.0], [1198.0, 75.0], [1196.0, 74.0], [1194.0, 110.0], [1192.0, 116.0], [1276.0, 287.0], [1258.0, 394.0], [1254.0, 414.0], [1260.0, 413.5], [1262.0, 401.0], [1278.0, 294.0], [1274.0, 287.0], [1272.0, 333.0], [1270.0, 393.0], [1268.0, 377.0], [1266.0, 389.0], [1264.0, 410.0], [1230.0, 297.0], [1228.0, 312.9599999999999], [1226.0, 315.0], [1238.0, 433.0], [1236.0, 427.0], [1234.0, 246.0], [1232.0, 257.0], [1338.0, 407.0], [1318.0, 375.0], [1342.0, 416.0], [1312.0, 407.0], [1314.0, 337.0], [1316.0, 344.0], [1320.0, 326.0], [1322.0, 422.0], [1324.0, 472.0], [1340.0, 401.0], [1336.0, 417.0], [1334.0, 418.0], [1332.0, 407.0], [1330.0, 406.0], [1282.0, 495.0], [1284.0, 508.0], [1288.0, 504.0], [1292.0, 476.0], [1294.0, 486.0], [1310.0, 416.0], [1308.0, 385.0], [1306.0, 474.0], [1302.0, 461.0], [1300.0, 447.0], [1298.0, 450.0], [1296.0, 469.0], [1396.0, 4728.0], [1392.0, 95.0], [1376.0, 159.0], [1380.0, 158.0], [1382.0, 141.0], [1384.0, 124.0], [1386.0, 121.0], [1398.0, 5711.0], [1394.0, 91.0], [1344.0, 401.5], [1346.0, 408.0], [1348.0, 394.5], [1350.0, 384.0], [1352.0, 368.0], [1354.0, 336.0], [1356.0, 365.0], [1358.0, 318.0], [1372.0, 186.0], [1370.0, 192.0], [1364.0, 277.0], [1362.0, 252.0], [1360.0, 295.0], [1390.0, 6776.0], [1079.0, 881.0], [1075.0, 950.0], [1063.0, 951.5], [1083.0, 899.0], [1057.0, 912.0], [1061.0, 900.0], [1067.0, 915.0], [1069.0, 957.0], [1071.0, 902.0], [1081.0, 873.0], [1073.0, 889.0], [1039.0, 671.0], [1037.0, 676.0], [1035.0, 647.0], [1033.0, 658.0], [1031.0, 707.0], [1029.0, 691.0], [1025.0, 731.0], [1055.0, 913.0], [1053.0, 912.0], [1051.0, 262.5], [1049.0, 300.0], [1047.0, 520.0], [1045.0, 583.5], [1043.0, 632.0], [1147.0, 819.0], [1127.0, 825.0], [1151.0, 602.0], [1123.0, 841.5], [1121.0, 832.0], [1125.0, 1021.0], [1129.0, 1214.0], [1131.0, 1100.4615384615386], [1133.0, 1167.0], [1149.0, 811.0], [1145.0, 1189.0], [1143.0, 1142.5], [1141.0, 819.0], [1139.0, 616.0], [1103.0, 1206.0], [1101.0, 903.0], [1099.0, 885.0], [1097.0, 855.0], [1119.0, 868.0], [1117.0, 873.0], [1115.0, 1053.0], [1113.0, 1221.0], [1111.0, 873.0], [1109.0, 1199.0], [1157.0, 884.5], [1191.0, 116.0], [1195.0, 110.0], [1213.0, 348.0], [1183.0, 741.0], [1153.0, 603.0], [1155.0, 619.0], [1159.0, 657.0], [1163.0, 735.0], [1165.0, 686.0], [1167.0, 1129.0], [1181.0, 738.3333333333334], [1179.0, 961.0], [1177.0, 777.5], [1175.0, 930.0], [1173.0, 895.0], [1171.0, 876.0], [1169.0, 829.0], [1185.0, 1022.0], [1187.0, 702.0], [1189.0, 665.0], [1197.0, 78.0], [1193.0, 115.0], [1277.0, 281.0], [1279.0, 294.0], [1249.0, 430.0], [1261.0, 401.0], [1263.0, 417.0], [1275.0, 307.0], [1273.0, 295.0], [1271.0, 386.2], [1269.0, 414.0], [1265.0, 406.0], [1231.0, 277.0], [1229.0, 289.0], [1227.0, 319.0], [1217.0, 340.0], [1239.0, 445.5], [1235.0, 247.0], [1233.0, 254.0], [1337.0, 451.0], [1333.0, 400.0], [1313.0, 357.0], [1315.0, 390.0], [1317.0, 375.0], [1319.0, 313.0], [1321.0, 490.0], [1323.0, 436.0], [1327.0, 412.0], [1339.0, 447.0], [1311.0, 379.0], [1281.0, 286.0], [1283.0, 495.0], [1287.0, 496.0], [1291.0, 507.0], [1289.0, 487.5], [1293.0, 474.0], [1295.0, 455.0], [1309.0, 403.0], [1307.0, 405.0], [1305.0, 466.5], [1303.0, 480.0], [1301.0, 422.0], [1299.0, 434.0], [1297.0, 462.0], [1393.0, 91.0], [1383.0, 135.0], [1399.0, 5009.0], [1377.0, 158.0], [1379.0, 161.0], [1381.0, 152.0], [1385.0, 122.0], [1397.0, 4931.0], [1395.0, 85.0], [1375.0, 186.0], [1345.0, 428.0], [1347.0, 409.0], [1349.0, 410.5], [1351.0, 399.0], [1353.0, 355.0], [1355.0, 359.0], [1357.0, 366.0], [1359.0, 291.0], [1373.0, 178.0], [1369.0, 201.0], [1367.0, 164.0], [1365.0, 200.0], [1363.0, 279.0], [1361.0, 258.0], [1391.0, 4790.0], [1389.0, 107.0], [1387.0, 112.0], [1.0, 55.529411764705884]], "isOverall": false, "label": "Healthy Thinking", "isController": false}, {"data": [[20.056032699324287, 51.931792820692884]], "isOverall": false, "label": "Healthy Thinking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1399.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 135.0, "minX": 1.62584207E12, "maxY": 7168258.8, "series": [{"data": [[1.62584221E12, 4279060.2], [1.62584281E12, 2822561.4], [1.62584264E12, 4012511.4], [1.62584255E12, 6163941.0], [1.62584238E12, 5545167.0], [1.62584213E12, 1851524.0], [1.6258429E12, 7139700.0], [1.62584273E12, 6706417.3], [1.62584256E12, 5549926.8], [1.62584247E12, 5188182.0], [1.6258423E12, 6368612.4], [1.6258422E12, 5554686.6], [1.62584297E12, 28558.8], [1.6258428E12, 1637375.7], [1.62584271E12, 7144309.7], [1.62584254E12, 6677999.4], [1.62584237E12, 6720837.6], [1.62584212E12, 395057.2], [1.62584289E12, 7125420.6], [1.62584272E12, 7125270.9], [1.62584263E12, 2822561.4], [1.62584246E12, 4007751.6], [1.62584229E12, 5212002.9], [1.62584296E12, 832965.0], [1.62584287E12, 7125420.6], [1.6258427E12, 7134790.3], [1.62584253E12, 7168258.8], [1.62584219E12, 6663720.0], [1.62584236E12, 7125420.6], [1.62584288E12, 7134940.2], [1.62584279E12, 461700.6], [1.62584262E12, 1632611.4], [1.62584245E12, 2822561.4], [1.62584211E12, 185631.3], [1.62584228E12, 4002991.8], [1.62584235E12, 6487607.4], [1.62584286E12, 7130180.4], [1.62584218E12, 7073062.8], [1.62584269E12, 7101382.4], [1.62584252E12, 7125420.6], [1.62584227E12, 2822561.4], [1.62584295E12, 1999116.0], [1.62584278E12, 818672.4], [1.6258421E12, 209434.8], [1.62584261E12, 475980.0], [1.62584244E12, 1656426.5], [1.62584251E12, 7134940.2], [1.62584234E12, 7134940.2], [1.62584217E12, 6968244.6], [1.62584285E12, 6487607.4], [1.62584268E12, 2217998.9], [1.62584243E12, 471220.2], [1.62584226E12, 1646890.8], [1.62584209E12, 80920.6], [1.62584294E12, 3193825.8], [1.62584277E12, 2008593.4], [1.6258426E12, 804406.2], [1.62584267E12, 7125420.6], [1.6258425E12, 6792234.6], [1.62584233E12, 7144459.8], [1.62584207E12, 47601.7], [1.62584216E12, 3122363.2], [1.62584284E12, 6335293.8], [1.62584259E12, 1984836.6], [1.62584242E12, 818685.6], [1.62584208E12, 38078.2], [1.62584225E12, 480739.8], [1.62584293E12, 4379016.0], [1.62584276E12, 3188999.0], [1.62584283E12, 5188182.0], [1.62584266E12, 6378132.0], [1.62584249E12, 7115901.0], [1.62584223E12, 2003875.8], [1.62584232E12, 6578043.6], [1.62584275E12, 4369404.6], [1.62584258E12, 3184306.2], [1.62584241E12, 2008635.6], [1.62584215E12, 675877.4], [1.62584224E12, 828205.2], [1.62584292E12, 5526127.8], [1.62584282E12, 4007751.6], [1.62584222E12, 3127188.6], [1.62584265E12, 5188182.0], [1.62584248E12, 6363852.6], [1.62584239E12, 4369496.4], [1.62584291E12, 6701798.4], [1.62584274E12, 5549810.2], [1.62584214E12, 1327956.3], [1.62584257E12, 4369496.4], [1.6258424E12, 3184306.2], [1.62584231E12, 6701798.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62584221E12, 20227.5], [1.62584281E12, 13342.5], [1.62584264E12, 18967.5], [1.62584255E12, 29137.5], [1.62584238E12, 26212.5], [1.62584213E12, 8752.5], [1.6258429E12, 33750.0], [1.62584273E12, 31702.5], [1.62584256E12, 26235.0], [1.62584247E12, 24525.0], [1.6258423E12, 30105.0], [1.6258422E12, 26257.5], [1.62584297E12, 135.0], [1.6258428E12, 7740.0], [1.62584271E12, 33772.5], [1.62584254E12, 31567.5], [1.62584237E12, 31770.0], [1.62584212E12, 1867.5], [1.62584289E12, 33682.5], [1.62584272E12, 33682.5], [1.62584263E12, 13342.5], [1.62584246E12, 18945.0], [1.62584229E12, 24637.5], [1.62584296E12, 3937.5], [1.62584287E12, 33682.5], [1.6258427E12, 33727.5], [1.62584253E12, 33885.0], [1.62584219E12, 31500.0], [1.62584236E12, 33682.5], [1.62584288E12, 33727.5], [1.62584279E12, 2182.5], [1.62584262E12, 7717.5], [1.62584245E12, 13342.5], [1.62584211E12, 877.5], [1.62584228E12, 18922.5], [1.62584235E12, 30667.5], [1.62584286E12, 33705.0], [1.62584218E12, 33435.0], [1.62584269E12, 33570.0], [1.62584252E12, 33682.5], [1.62584227E12, 13342.5], [1.62584295E12, 9450.0], [1.62584278E12, 3870.0], [1.6258421E12, 990.0], [1.62584261E12, 2250.0], [1.62584244E12, 7830.0], [1.62584251E12, 33727.5], [1.62584234E12, 33727.5], [1.62584217E12, 32940.0], [1.62584285E12, 30667.5], [1.62584268E12, 10485.0], [1.62584243E12, 2227.5], [1.62584226E12, 7785.0], [1.62584209E12, 382.5], [1.62584294E12, 15097.5], [1.62584277E12, 9495.0], [1.6258426E12, 3802.5], [1.62584267E12, 33682.5], [1.6258425E12, 32107.5], [1.62584233E12, 33772.5], [1.62584207E12, 225.0], [1.62584216E12, 14760.0], [1.62584284E12, 29947.5], [1.62584259E12, 9382.5], [1.62584242E12, 3870.0], [1.62584208E12, 180.0], [1.62584225E12, 2272.5], [1.62584293E12, 20700.0], [1.62584276E12, 15075.0], [1.62584283E12, 24525.0], [1.62584266E12, 30150.0], [1.62584249E12, 33637.5], [1.62584223E12, 9472.5], [1.62584232E12, 31095.0], [1.62584275E12, 20655.0], [1.62584258E12, 15052.5], [1.62584241E12, 9495.0], [1.62584215E12, 3195.0], [1.62584224E12, 3915.0], [1.62584292E12, 26122.5], [1.62584282E12, 18945.0], [1.62584222E12, 14782.5], [1.62584265E12, 24525.0], [1.62584248E12, 30082.5], [1.62584239E12, 20655.0], [1.62584291E12, 31680.0], [1.62584274E12, 26235.0], [1.62584214E12, 6277.5], [1.62584257E12, 20655.0], [1.6258424E12, 15052.5], [1.62584231E12, 31680.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584297E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13.3155397390273, "minX": 1.62584207E12, "maxY": 3230.7, "series": [{"data": [[1.62584221E12, 61.608453837597295], [1.62584281E12, 52.043844856661075], [1.62584264E12, 13.3155397390273], [1.62584255E12, 19.83706563706565], [1.62584238E12, 55.58197424892705], [1.62584213E12, 756.9614395886889], [1.6258429E12, 28.559333333333335], [1.62584273E12, 26.568488289567057], [1.62584256E12, 15.64665523156087], [1.62584247E12, 27.333027522935822], [1.6258423E12, 17.933482810164428], [1.6258422E12, 75.59211653813196], [1.62584297E12, 50.5], [1.6258428E12, 34.39534883720931], [1.62584271E12, 27.62891405729517], [1.62584254E12, 21.885245901639347], [1.62584237E12, 58.40864022662894], [1.62584212E12, 345.5060240963855], [1.62584289E12, 28.647962591850387], [1.62584272E12, 27.66199064796262], [1.62584263E12, 13.677908937605402], [1.62584246E12, 25.47862232779095], [1.62584229E12, 15.821004566210028], [1.62584296E12, 50.88000000000001], [1.62584287E12, 28.513026052104205], [1.6258427E12, 27.27284856571048], [1.62584253E12, 19.962815405046477], [1.62584219E12, 91.60500000000002], [1.62584236E12, 59.49832999332], [1.62584288E12, 28.77251501000668], [1.62584279E12, 23.628865979381445], [1.62584262E12, 14.78717201166181], [1.62584245E12, 24.485666104553115], [1.62584211E12, 439.1282051282051], [1.62584228E12, 52.92390011890605], [1.62584235E12, 58.218635363169525], [1.62584286E12, 52.21028037383172], [1.62584218E12, 117.56998654104974], [1.62584269E12, 28.058981233243966], [1.62584252E12, 60.56112224448904], [1.62584227E12, 51.308600337268146], [1.62584295E12, 28.083333333333325], [1.62584278E12, 21.965116279069772], [1.6258421E12, 387.2272727272727], [1.62584261E12, 15.83], [1.62584244E12, 25.23275862068965], [1.62584251E12, 60.29886591060706], [1.62584234E12, 18.294863242161483], [1.62584217E12, 107.18442622950819], [1.62584285E12, 70.73074101247241], [1.62584268E12, 90.70171673819736], [1.62584243E12, 50.909090909090914], [1.62584226E12, 51.51156069364162], [1.62584209E12, 173.94117647058823], [1.62584294E12, 21.590163934426243], [1.62584277E12, 21.485781990521332], [1.6258426E12, 15.5207100591716], [1.62584267E12, 17.690714762859034], [1.6258425E12, 59.15557112824103], [1.62584233E12, 18.814123917388432], [1.62584207E12, 3230.7], [1.62584216E12, 539.2179878048792], [1.62584284E12, 55.92561983471074], [1.62584259E12, 15.019184652278176], [1.62584242E12, 50.1220930232558], [1.62584208E12, 121.125], [1.62584225E12, 51.24752475247525], [1.62584293E12, 23.019565217391296], [1.62584276E12, 21.231343283582067], [1.62584283E12, 54.00091743119258], [1.62584266E12, 16.526865671641765], [1.62584249E12, 30.086287625418034], [1.62584223E12, 51.27553444180525], [1.62584232E12, 23.73878437047756], [1.62584275E12, 22.82788671023965], [1.62584258E12, 13.424514200298969], [1.62584241E12, 50.9857819905213], [1.62584215E12, 873.5281690140841], [1.62584224E12, 51.6206896551724], [1.62584292E12, 24.16451335055984], [1.62584282E12, 53.179334916864605], [1.62584222E12, 62.141552511415554], [1.62584265E12, 15.280733944954129], [1.62584248E12, 28.400149588631262], [1.62584239E12, 53.28431372549023], [1.62584291E12, 27.06392045454544], [1.62584274E12, 24.768439108061767], [1.62584214E12, 849.1756272401427], [1.62584257E12, 13.538126361655763], [1.6258424E12, 51.868460388639754], [1.62584231E12, 23.548295454545467]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584297E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13.06642941874257, "minX": 1.62584207E12, "maxY": 3151.5, "series": [{"data": [[1.62584221E12, 54.672969966629516], [1.62584281E12, 44.731871838111324], [1.62584264E12, 13.06642941874257], [1.62584255E12, 19.400772200772188], [1.62584238E12, 48.4660944206009], [1.62584213E12, 726.2159383033418], [1.6258429E12, 26.240666666666666], [1.62584273E12, 24.371894960965243], [1.62584256E12, 15.310463121783888], [1.62584247E12, 24.939449541284393], [1.6258423E12, 17.574738415545553], [1.6258422E12, 68.80976863753227], [1.62584297E12, 42.33333333333333], [1.6258428E12, 30.25290697674418], [1.62584271E12, 25.338441039307142], [1.62584254E12, 21.471846044191004], [1.62584237E12, 51.482294617563774], [1.62584212E12, 332.855421686747], [1.62584289E12, 26.201736806947213], [1.62584272E12, 25.308617234468937], [1.62584263E12, 13.460370994940988], [1.62584246E12, 23.129453681710224], [1.62584229E12, 15.496803652968026], [1.62584296E12, 43.56000000000002], [1.62584287E12, 26.196392785571177], [1.6258427E12, 24.898599066044024], [1.62584253E12, 19.472775564409037], [1.62584219E12, 84.88928571428569], [1.62584236E12, 52.60521042084163], [1.62584288E12, 26.47698465643761], [1.62584279E12, 21.50515463917525], [1.62584262E12, 14.504373177842563], [1.62584245E12, 22.222596964586845], [1.62584211E12, 431.20512820512823], [1.62584228E12, 45.54221165279426], [1.62584235E12, 51.199559794570824], [1.62584286E12, 46.756341789052016], [1.62584218E12, 110.81763122476441], [1.62584269E12, 25.719168900804288], [1.62584252E12, 53.7715430861723], [1.62584227E12, 44.1838111298482], [1.62584295E12, 24.77619047619048], [1.62584278E12, 19.941860465116285], [1.6258421E12, 367.34090909090895], [1.62584261E12, 15.589999999999995], [1.62584244E12, 22.83908045977009], [1.62584251E12, 53.40226817878579], [1.62584234E12, 17.92328218812542], [1.62584217E12, 99.89959016393452], [1.62584285E12, 62.78283198826115], [1.62584268E12, 86.90557939914169], [1.62584243E12, 43.58585858585859], [1.62584226E12, 44.23121387283239], [1.62584209E12, 164.76470588235293], [1.62584294E12, 19.514157973174367], [1.62584277E12, 19.34834123222748], [1.6258426E12, 15.272189349112425], [1.62584267E12, 17.32064128256511], [1.6258425E12, 52.11983181499653], [1.62584233E12, 18.44370419720185], [1.62584207E12, 3151.5], [1.62584216E12, 517.6128048780487], [1.62584284E12, 48.80691209616824], [1.62584259E12, 14.75539568345324], [1.62584242E12, 42.88953488372093], [1.62584208E12, 114.25], [1.62584225E12, 43.999999999999986], [1.62584293E12, 20.930434782608693], [1.62584276E12, 19.183582089552257], [1.62584283E12, 46.73486238532112], [1.62584266E12, 16.211194029850745], [1.62584249E12, 27.524414715719097], [1.62584223E12, 43.99762470308789], [1.62584232E12, 23.308972503617955], [1.62584275E12, 20.736383442265794], [1.62584258E12, 13.174887892376681], [1.62584241E12, 43.62559241706159], [1.62584215E12, 854.5704225352115], [1.62584224E12, 44.3793103448276], [1.62584292E12, 21.99655469422912], [1.62584282E12, 45.901425178147264], [1.62584222E12, 55.200913242009136], [1.62584265E12, 14.982568807339474], [1.62584248E12, 25.909498878085262], [1.62584239E12, 46.05773420479302], [1.62584291E12, 24.765625], [1.62584274E12, 22.54373927958833], [1.62584214E12, 822.1684587813619], [1.62584257E12, 13.278867102396505], [1.6258424E12, 44.530642750373715], [1.62584231E12, 23.178267045454533]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584297E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.177935943060504, "minX": 1.62584207E12, "maxY": 823.9084507042252, "series": [{"data": [[1.62584221E12, 43.832035595105694], [1.62584281E12, 34.743676222596925], [1.62584264E12, 11.177935943060504], [1.62584255E12, 16.985328185328182], [1.62584238E12, 38.051502145922754], [1.62584213E12, 692.6940874035989], [1.6258429E12, 22.131333333333327], [1.62584273E12, 20.43577004968064], [1.62584256E12, 13.109777015437388], [1.62584247E12, 20.322018348623825], [1.6258423E12, 15.385650224215263], [1.6258422E12, 56.14824335904031], [1.62584297E12, 33.5], [1.6258428E12, 23.877906976744182], [1.62584271E12, 21.299800133244492], [1.62584254E12, 18.270848182466146], [1.62584237E12, 40.75212464589238], [1.62584212E12, 307.5542168674699], [1.62584289E12, 22.048764195056766], [1.62584272E12, 21.305945223780856], [1.62584263E12, 11.620573355817873], [1.62584246E12, 18.836104513064164], [1.62584229E12, 13.354337899543383], [1.62584296E12, 33.9542857142857], [1.62584287E12, 22.05210420841681], [1.6258427E12, 21.06737825216811], [1.62584253E12, 16.619521912350574], [1.62584219E12, 72.55214285714298], [1.62584236E12, 41.60988643954569], [1.62584288E12, 22.28352234823217], [1.62584279E12, 18.020618556701024], [1.62584262E12, 12.74927113702624], [1.62584245E12, 17.82630691399664], [1.62584211E12, 405.6153846153846], [1.62584228E12, 35.77170035671816], [1.62584235E12, 40.56786500366834], [1.62584286E12, 37.579439252336456], [1.62584218E12, 97.68438761776584], [1.62584269E12, 21.688337801608537], [1.62584252E12, 42.7762191048764], [1.62584227E12, 34.31028667790892], [1.62584295E12, 20.083333333333318], [1.62584278E12, 16.744186046511633], [1.6258421E12, 349.8863636363637], [1.62584261E12, 13.969999999999999], [1.62584244E12, 18.163793103448256], [1.62584251E12, 42.4743162108072], [1.62584234E12, 15.284189459639757], [1.62584217E12, 87.38797814207672], [1.62584285E12, 51.35803374908288], [1.62584268E12, 24.50429184549357], [1.62584243E12, 33.97979797979799], [1.62584226E12, 34.30924855491329], [1.62584209E12, 150.64705882352942], [1.62584294E12, 16.216095380029817], [1.62584277E12, 16.135071090047383], [1.6258426E12, 13.284023668639055], [1.62584267E12, 14.730126920507683], [1.6258425E12, 41.4393833216539], [1.62584233E12, 15.670219853431048], [1.62584207E12, 158.2], [1.62584216E12, 487.00609756097515], [1.62584284E12, 38.2141247182569], [1.62584259E12, 12.7242206235012], [1.62584242E12, 33.226744186046524], [1.62584208E12, 102.125], [1.62584225E12, 34.42574257425744], [1.62584293E12, 17.416304347826063], [1.62584276E12, 16.07611940298508], [1.62584283E12, 36.682568807339386], [1.62584266E12, 14.06940298507461], [1.62584249E12, 22.674247491638823], [1.62584223E12, 34.3372921615202], [1.62584232E12, 20.310419681620875], [1.62584275E12, 17.37254901960786], [1.62584258E12, 11.37219730941704], [1.62584241E12, 33.78909952606635], [1.62584215E12, 823.9084507042252], [1.62584224E12, 34.396551724137886], [1.62584292E12, 18.495262704565025], [1.62584282E12, 35.87292161520191], [1.62584222E12, 44.49315068493154], [1.62584265E12, 13.086238532110082], [1.62584248E12, 21.36724008975316], [1.62584239E12, 36.23965141612201], [1.62584291E12, 20.709517045454586], [1.62584274E12, 18.95111492281301], [1.62584214E12, 787.6953405017917], [1.62584257E12, 11.554466230936823], [1.6258424E12, 34.83408071748881], [1.62584231E12, 19.77272727272725]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584297E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.62584207E12, "maxY": 7084.0, "series": [{"data": [[1.62584221E12, 174.0], [1.62584281E12, 95.0], [1.62584264E12, 72.0], [1.62584255E12, 697.0], [1.62584238E12, 129.0], [1.62584213E12, 1321.0], [1.6258429E12, 107.0], [1.62584273E12, 92.0], [1.62584256E12, 190.0], [1.62584247E12, 126.0], [1.6258423E12, 178.0], [1.6258422E12, 465.0], [1.62584297E12, 58.0], [1.6258428E12, 88.0], [1.62584271E12, 97.0], [1.62584254E12, 743.0], [1.62584237E12, 108.0], [1.62584212E12, 447.0], [1.62584289E12, 98.0], [1.62584272E12, 82.0], [1.62584263E12, 143.0], [1.62584246E12, 89.0], [1.62584229E12, 215.0], [1.62584296E12, 132.0], [1.62584287E12, 99.0], [1.6258427E12, 110.0], [1.62584253E12, 379.0], [1.62584219E12, 235.0], [1.62584236E12, 141.0], [1.62584288E12, 105.0], [1.62584279E12, 108.0], [1.62584262E12, 96.0], [1.62584245E12, 94.0], [1.62584211E12, 513.0], [1.62584228E12, 297.0], [1.62584235E12, 136.0], [1.62584286E12, 117.0], [1.62584218E12, 308.0], [1.62584269E12, 122.0], [1.62584252E12, 163.0], [1.62584227E12, 103.0], [1.62584295E12, 111.0], [1.62584278E12, 109.0], [1.6258421E12, 490.0], [1.62584261E12, 109.0], [1.62584244E12, 89.0], [1.62584251E12, 154.0], [1.62584234E12, 170.0], [1.62584217E12, 287.0], [1.62584285E12, 774.0], [1.62584268E12, 7084.0], [1.62584243E12, 68.0], [1.62584226E12, 86.0], [1.62584209E12, 201.0], [1.62584294E12, 41.0], [1.62584277E12, 45.0], [1.6258426E12, 174.0], [1.62584267E12, 141.0], [1.6258425E12, 165.0], [1.62584233E12, 159.0], [1.62584207E12, 6776.0], [1.62584216E12, 1096.0], [1.62584284E12, 167.0], [1.62584259E12, 142.0], [1.62584242E12, 77.0], [1.62584208E12, 141.0], [1.62584225E12, 117.0], [1.62584293E12, 50.0], [1.62584276E12, 65.0], [1.62584283E12, 141.0], [1.62584266E12, 177.0], [1.62584249E12, 130.0], [1.62584223E12, 101.0], [1.62584232E12, 668.0], [1.62584275E12, 80.0], [1.62584258E12, 125.0], [1.62584241E12, 142.0], [1.62584215E12, 1069.0], [1.62584224E12, 137.0], [1.62584292E12, 59.0], [1.62584282E12, 172.0], [1.62584222E12, 185.0], [1.62584265E12, 194.0], [1.62584248E12, 117.0], [1.62584239E12, 210.0], [1.62584291E12, 100.0], [1.62584274E12, 68.0], [1.62584214E12, 1412.0], [1.62584257E12, 125.0], [1.6258424E12, 122.0], [1.62584231E12, 670.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62584221E12, 45.0], [1.62584281E12, 45.0], [1.62584264E12, 10.0], [1.62584255E12, 11.0], [1.62584238E12, 45.0], [1.62584213E12, 74.0], [1.6258429E12, 15.0], [1.62584273E12, 14.0], [1.62584256E12, 10.0], [1.62584247E12, 20.0], [1.6258423E12, 10.0], [1.6258422E12, 46.0], [1.62584297E12, 46.0], [1.6258428E12, 14.0], [1.62584271E12, 15.0], [1.62584254E12, 10.0], [1.62584237E12, 46.0], [1.62584212E12, 246.0], [1.62584289E12, 16.0], [1.62584272E12, 16.0], [1.62584263E12, 10.0], [1.62584246E12, 20.0], [1.62584229E12, 10.0], [1.62584296E12, 44.0], [1.62584287E12, 16.0], [1.6258427E12, 15.0], [1.62584253E12, 11.0], [1.62584219E12, 49.0], [1.62584236E12, 46.0], [1.62584288E12, 15.0], [1.62584279E12, 14.0], [1.62584262E12, 10.0], [1.62584245E12, 20.0], [1.62584211E12, 313.0], [1.62584228E12, 44.0], [1.62584235E12, 14.0], [1.62584286E12, 15.0], [1.62584218E12, 54.0], [1.62584269E12, 15.0], [1.62584252E12, 46.0], [1.62584227E12, 45.0], [1.62584295E12, 14.0], [1.62584278E12, 14.0], [1.6258421E12, 252.0], [1.62584261E12, 10.0], [1.62584244E12, 20.0], [1.62584251E12, 47.0], [1.62584234E12, 10.0], [1.62584217E12, 53.0], [1.62584285E12, 47.0], [1.62584268E12, 16.0], [1.62584243E12, 44.0], [1.62584226E12, 44.0], [1.62584209E12, 139.0], [1.62584294E12, 14.0], [1.62584277E12, 13.0], [1.6258426E12, 10.0], [1.62584267E12, 11.0], [1.6258425E12, 24.0], [1.62584233E12, 11.0], [1.62584207E12, 85.0], [1.62584216E12, 48.0], [1.62584284E12, 46.0], [1.62584259E12, 10.0], [1.62584242E12, 44.0], [1.62584208E12, 101.0], [1.62584225E12, 45.0], [1.62584293E12, 14.0], [1.62584276E12, 14.0], [1.62584283E12, 45.0], [1.62584266E12, 11.0], [1.62584249E12, 21.0], [1.62584223E12, 45.0], [1.62584232E12, 11.0], [1.62584275E12, 14.0], [1.62584258E12, 10.0], [1.62584241E12, 44.0], [1.62584215E12, 77.0], [1.62584224E12, 45.0], [1.62584292E12, 14.0], [1.62584282E12, 45.0], [1.62584222E12, 45.0], [1.62584265E12, 10.0], [1.62584248E12, 21.0], [1.62584239E12, 45.0], [1.62584291E12, 14.0], [1.62584274E12, 15.0], [1.62584214E12, 53.0], [1.62584257E12, 10.0], [1.6258424E12, 45.0], [1.62584231E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62584221E12, 81.0], [1.62584281E12, 57.0], [1.62584264E12, 16.0], [1.62584255E12, 25.0], [1.62584238E12, 62.0], [1.62584213E12, 1136.0], [1.6258429E12, 37.0], [1.62584273E12, 34.0], [1.62584256E12, 20.0], [1.62584247E12, 33.0], [1.6258423E12, 27.0], [1.6258422E12, 102.0], [1.62584297E12, 58.0], [1.6258428E12, 54.0], [1.62584271E12, 35.0], [1.62584254E12, 31.0], [1.62584237E12, 68.0], [1.62584212E12, 415.8], [1.62584289E12, 36.0], [1.62584272E12, 35.200000000000045], [1.62584263E12, 16.0], [1.62584246E12, 31.0], [1.62584229E12, 20.0], [1.62584296E12, 56.400000000000006], [1.62584287E12, 37.0], [1.6258427E12, 35.0], [1.62584253E12, 26.0], [1.62584219E12, 127.0], [1.62584236E12, 69.0], [1.62584288E12, 37.0], [1.62584279E12, 29.0], [1.62584262E12, 17.0], [1.62584245E12, 28.0], [1.62584211E12, 503.0], [1.62584228E12, 57.0], [1.62584235E12, 68.0], [1.62584286E12, 71.0], [1.62584218E12, 160.0], [1.62584269E12, 35.0], [1.62584252E12, 70.0], [1.62584227E12, 56.0], [1.62584295E12, 50.0], [1.62584278E12, 27.700000000000017], [1.6258421E12, 445.0], [1.62584261E12, 17.0], [1.62584244E12, 30.0], [1.62584251E12, 71.0], [1.62584234E12, 24.0], [1.62584217E12, 139.0], [1.62584285E12, 85.0], [1.62584268E12, 46.0], [1.62584243E12, 54.0], [1.62584226E12, 58.0], [1.62584209E12, 200.2], [1.62584294E12, 28.0], [1.62584277E12, 27.0], [1.6258426E12, 18.0], [1.62584267E12, 23.0], [1.6258425E12, 70.0], [1.62584233E12, 24.0], [1.62584207E12, 6669.5], [1.62584216E12, 994.3000000000001], [1.62584284E12, 62.0], [1.62584259E12, 18.0], [1.62584242E12, 55.0], [1.62584208E12, 141.0], [1.62584225E12, 55.0], [1.62584293E12, 29.0], [1.62584276E12, 28.0], [1.62584283E12, 60.0], [1.62584266E12, 21.0], [1.62584249E12, 37.0], [1.62584223E12, 56.0], [1.62584232E12, 34.0], [1.62584275E12, 29.0], [1.62584258E12, 16.0], [1.62584241E12, 55.0], [1.62584215E12, 1042.4], [1.62584224E12, 55.0], [1.62584292E12, 31.0], [1.62584282E12, 57.700000000000045], [1.62584222E12, 84.0], [1.62584265E12, 18.0], [1.62584248E12, 33.200000000000045], [1.62584239E12, 58.0], [1.62584291E12, 35.0], [1.62584274E12, 32.0], [1.62584214E12, 1196.0], [1.62584257E12, 16.0], [1.6258424E12, 56.0], [1.62584231E12, 36.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62584221E12, 129.0], [1.62584281E12, 80.05999999999995], [1.62584264E12, 38.559999999999945], [1.62584255E12, 104.03999999999996], [1.62584238E12, 85.33999999999992], [1.62584213E12, 1235.6000000000001], [1.6258429E12, 51.99000000000001], [1.62584273E12, 46.0], [1.62584256E12, 45.659999999999854], [1.62584247E12, 55.0], [1.6258423E12, 53.2199999999998], [1.6258422E12, 152.0], [1.62584297E12, 58.0], [1.6258428E12, 76.10000000000002], [1.62584271E12, 47.98000000000002], [1.62584254E12, 63.0], [1.62584237E12, 82.0], [1.62584212E12, 447.0], [1.62584289E12, 52.01999999999998], [1.62584272E12, 48.0], [1.62584263E12, 41.41999999999962], [1.62584246E12, 50.0], [1.62584229E12, 51.11999999999989], [1.62584296E12, 83.36000000000058], [1.62584287E12, 51.01999999999998], [1.6258427E12, 45.0], [1.62584253E12, 77.93000000000006], [1.62584219E12, 183.0], [1.62584236E12, 91.01999999999998], [1.62584288E12, 51.0], [1.62584279E12, 108.0], [1.62584262E12, 57.88000000000005], [1.62584245E12, 53.059999999999945], [1.62584211E12, 513.0], [1.62584228E12, 71.58000000000004], [1.62584235E12, 84.3599999999999], [1.62584286E12, 93.01999999999998], [1.62584218E12, 220.25999999999976], [1.62584269E12, 51.13999999999987], [1.62584252E12, 89.01999999999998], [1.62584227E12, 73.0], [1.62584295E12, 60.58000000000004], [1.62584278E12, 54.98000000000076], [1.6258421E12, 490.0], [1.62584261E12, 108.88999999999994], [1.62584244E12, 68.6099999999999], [1.62584251E12, 95.0], [1.62584234E12, 54.0], [1.62584217E12, 201.39999999999964], [1.62584285E12, 358.1599999999994], [1.62584268E12, 2338.6799999998934], [1.62584243E12, 68.0], [1.62584226E12, 78.0], [1.62584209E12, 201.0], [1.62584294E12, 35.27999999999997], [1.62584277E12, 33.0], [1.6258426E12, 144.60000000000048], [1.62584267E12, 41.0], [1.6258425E12, 92.72000000000003], [1.62584233E12, 54.92000000000007], [1.62584207E12, 6776.0], [1.62584216E12, 1079.4299999999998], [1.62584284E12, 88.0], [1.62584259E12, 62.2999999999999], [1.62584242E12, 68.24000000000012], [1.62584208E12, 141.0], [1.62584225E12, 116.40000000000012], [1.62584293E12, 39.159999999999854], [1.62584276E12, 37.0], [1.62584283E12, 82.35999999999967], [1.62584266E12, 48.0], [1.62584249E12, 54.039999999999964], [1.62584223E12, 74.77999999999997], [1.62584232E12, 142.0600000000013], [1.62584275E12, 36.0], [1.62584258E12, 44.2999999999995], [1.62584241E12, 73.07999999999993], [1.62584215E12, 1067.71], [1.62584224E12, 125.0], [1.62584292E12, 41.0], [1.62584282E12, 80.70999999999981], [1.62584222E12, 126.41999999999996], [1.62584265E12, 68.17999999999984], [1.62584248E12, 59.61999999999989], [1.62584239E12, 84.42999999999984], [1.62584291E12, 52.91000000000008], [1.62584274E12, 46.32999999999993], [1.62584214E12, 1349.6], [1.62584257E12, 35.809999999999945], [1.6258424E12, 75.89999999999986], [1.62584231E12, 85.19000000000074]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62584221E12, 97.0], [1.62584281E12, 60.0], [1.62584264E12, 20.0], [1.62584255E12, 31.0], [1.62584238E12, 66.0], [1.62584213E12, 1188.0], [1.6258429E12, 40.0], [1.62584273E12, 37.0], [1.62584256E12, 23.0], [1.62584247E12, 37.450000000000045], [1.6258423E12, 35.0], [1.6258422E12, 114.59999999999991], [1.62584297E12, 58.0], [1.6258428E12, 55.0], [1.62584271E12, 38.0], [1.62584254E12, 40.0], [1.62584237E12, 71.0], [1.62584212E12, 432.4], [1.62584289E12, 41.0], [1.62584272E12, 39.0], [1.62584263E12, 19.0], [1.62584246E12, 36.0], [1.62584229E12, 26.0], [1.62584296E12, 61.19999999999999], [1.62584287E12, 41.0], [1.6258427E12, 38.0], [1.62584253E12, 40.0], [1.62584219E12, 143.0], [1.62584236E12, 73.0], [1.62584288E12, 42.0], [1.62584279E12, 30.099999999999994], [1.62584262E12, 22.600000000000023], [1.62584245E12, 34.0], [1.62584211E12, 508.0], [1.62584228E12, 60.89999999999998], [1.62584235E12, 73.0], [1.62584286E12, 76.0], [1.62584218E12, 177.0], [1.62584269E12, 39.0], [1.62584252E12, 75.0], [1.62584227E12, 62.0], [1.62584295E12, 52.94999999999999], [1.62584278E12, 29.0], [1.6258421E12, 466.75], [1.62584261E12, 22.899999999999977], [1.62584244E12, 36.0], [1.62584251E12, 76.0], [1.62584234E12, 28.0], [1.62584217E12, 153.0], [1.62584285E12, 106.0], [1.62584268E12, 61.0], [1.62584243E12, 57.0], [1.62584226E12, 62.0], [1.62584209E12, 201.0], [1.62584294E12, 29.0], [1.62584277E12, 28.0], [1.6258426E12, 23.5], [1.62584267E12, 26.0], [1.6258425E12, 75.0], [1.62584233E12, 29.0], [1.62584207E12, 6776.0], [1.62584216E12, 1027.15], [1.62584284E12, 68.0], [1.62584259E12, 25.099999999999966], [1.62584242E12, 57.349999999999994], [1.62584208E12, 141.0], [1.62584225E12, 62.49999999999996], [1.62584293E12, 31.0], [1.62584276E12, 28.0], [1.62584283E12, 64.0], [1.62584266E12, 24.0], [1.62584249E12, 41.200000000000045], [1.62584223E12, 58.89999999999998], [1.62584232E12, 46.0], [1.62584275E12, 30.0], [1.62584258E12, 19.5], [1.62584241E12, 57.0], [1.62584215E12, 1053.4], [1.62584224E12, 58.25], [1.62584292E12, 32.0], [1.62584282E12, 62.0], [1.62584222E12, 99.0], [1.62584265E12, 24.0], [1.62584248E12, 37.09999999999991], [1.62584239E12, 62.0], [1.62584291E12, 38.0], [1.62584274E12, 34.0], [1.62584214E12, 1253.0], [1.62584257E12, 20.0], [1.6258424E12, 58.0], [1.62584231E12, 41.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584297E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 161.0, "series": [{"data": [[2.0, 161.0], [3.0, 50.0], [4.0, 48.5], [5.0, 50.0], [6.0, 23.0], [7.0, 49.5], [8.0, 49.0], [9.0, 50.0], [10.0, 22.0], [11.0, 49.0], [12.0, 37.0], [13.0, 51.0], [14.0, 15.0], [15.0, 11.0], [16.0, 29.0], [17.0, 52.0], [18.0, 44.0], [19.0, 47.0], [20.0, 42.5], [21.0, 45.0], [22.0, 49.0], [23.0, 48.0], [24.0, 28.0], [25.0, 27.0], [26.0, 45.0], [27.0, 14.0], [28.0, 26.0], [29.0, 48.0], [30.0, 23.0], [31.0, 48.0], [33.0, 35.0], [32.0, 15.0], [35.0, 22.0], [34.0, 47.0], [37.0, 48.0], [36.0, 24.0], [39.0, 39.0], [38.0, 23.0], [41.0, 45.0], [40.0, 44.5], [43.0, 24.0], [42.0, 12.0], [44.0, 51.0], [45.0, 51.0], [46.0, 27.0], [47.0, 13.0], [49.0, 48.0], [48.0, 27.0], [50.0, 49.0], [51.0, 37.0], [52.0, 51.0], [53.0, 22.0], [55.0, 50.0], [54.0, 26.0], [56.0, 21.0], [57.0, 12.0], [58.0, 25.0], [59.0, 45.0], [60.0, 43.0], [61.0, 38.0], [63.0, 48.0], [62.0, 21.0], [64.0, 51.0], [65.0, 25.0], [67.0, 51.0], [66.0, 21.0], [70.0, 45.0], [68.0, 46.0], [71.0, 27.0], [69.0, 24.0], [74.0, 42.0], [72.0, 52.5], [75.0, 23.0], [73.0, 21.5], [76.0, 45.5], [79.0, 49.0], [78.0, 26.0], [77.0, 51.0], [83.0, 49.0], [81.0, 50.0], [80.0, 22.0], [85.0, 28.0], [86.0, 22.0], [84.0, 22.0], [89.0, 52.0], [88.0, 29.0], [90.0, 23.0], [91.0, 22.0], [93.0, 58.0], [95.0, 23.0], [94.0, 26.0], [92.0, 25.0], [99.0, 47.0], [96.0, 52.0], [97.0, 46.5], [98.0, 22.5], [101.0, 19.0], [102.0, 17.0], [103.0, 24.0], [100.0, 46.0], [106.0, 26.0], [107.0, 28.0], [104.0, 61.0], [105.0, 20.0], [109.0, 14.0], [111.0, 24.0], [110.0, 45.0], [108.0, 47.0], [113.0, 54.0], [115.0, 50.0], [112.0, 23.0], [114.0, 33.0], [116.0, 14.0], [118.0, 25.0], [119.0, 18.0], [117.0, 15.0], [122.0, 28.0], [120.0, 46.5], [121.0, 21.0], [123.0, 47.0], [125.0, 53.0], [127.0, 16.0], [124.0, 51.0], [126.0, 23.0], [134.0, 59.0], [130.0, 55.0], [133.0, 57.0], [129.0, 58.0], [131.0, 22.0], [128.0, 30.0], [132.0, 31.0], [135.0, 27.0], [142.0, 29.0], [141.0, 61.5], [138.0, 55.0], [139.0, 56.5], [137.0, 18.0], [140.0, 21.0], [136.0, 22.0], [143.0, 26.0], [144.0, 59.0], [145.0, 49.0], [149.0, 29.0], [148.0, 31.0], [146.0, 57.0], [151.0, 28.0], [150.0, 27.0], [147.0, 47.5], [152.0, 49.0], [155.0, 89.0], [153.0, 53.0], [154.0, 25.5], [158.0, 18.0], [157.0, 62.0], [1.0, 45.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 158.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 157.0, "series": [{"data": [[2.0, 157.0], [3.0, 43.0], [4.0, 41.0], [5.0, 43.0], [6.0, 21.0], [7.0, 42.5], [8.0, 42.0], [9.0, 43.0], [10.0, 20.0], [11.0, 41.0], [12.0, 32.0], [13.0, 43.0], [14.0, 15.0], [15.0, 11.0], [16.0, 26.5], [17.0, 45.0], [18.0, 38.0], [19.0, 40.0], [20.0, 38.0], [21.0, 38.0], [22.0, 42.0], [23.0, 41.0], [24.0, 24.5], [25.0, 24.0], [26.0, 38.0], [27.0, 14.0], [28.0, 23.0], [29.0, 40.0], [30.0, 21.0], [31.0, 41.0], [33.0, 31.5], [32.0, 15.0], [35.0, 20.0], [34.0, 40.0], [37.0, 41.0], [36.0, 22.0], [39.0, 34.5], [38.0, 21.0], [41.0, 38.5], [40.0, 38.5], [43.0, 22.0], [42.0, 12.0], [44.0, 44.0], [45.0, 44.0], [46.0, 23.0], [47.0, 13.0], [49.0, 41.0], [48.0, 24.0], [50.0, 42.0], [51.0, 32.5], [52.0, 43.5], [53.0, 20.5], [55.0, 43.0], [54.0, 23.0], [56.0, 19.0], [57.0, 11.0], [58.0, 22.0], [59.0, 38.5], [60.0, 38.5], [61.0, 34.0], [63.0, 42.0], [62.0, 19.0], [64.0, 44.0], [65.0, 22.0], [67.0, 44.0], [66.0, 18.5], [70.0, 38.5], [68.0, 40.0], [71.0, 24.0], [69.0, 22.0], [74.0, 38.0], [72.0, 44.0], [75.0, 20.0], [73.0, 19.5], [76.0, 39.0], [79.0, 42.0], [78.0, 23.5], [77.0, 43.0], [83.0, 42.0], [81.0, 43.0], [80.0, 20.0], [85.0, 25.0], [86.0, 20.0], [84.0, 20.0], [89.0, 45.0], [88.0, 26.0], [90.0, 21.0], [91.0, 20.0], [93.0, 51.0], [95.0, 21.0], [94.0, 23.5], [92.0, 22.0], [99.0, 41.0], [96.0, 45.0], [97.0, 40.5], [98.0, 20.0], [101.0, 18.5], [102.0, 17.0], [103.0, 22.0], [100.0, 40.0], [106.0, 23.0], [107.0, 25.0], [104.0, 53.0], [105.0, 19.0], [109.0, 14.0], [111.0, 22.0], [110.0, 39.0], [108.0, 40.0], [113.0, 47.0], [115.0, 44.0], [112.0, 21.0], [114.0, 29.0], [116.0, 14.0], [118.0, 23.0], [119.0, 17.0], [117.0, 15.0], [122.0, 25.0], [120.0, 41.0], [121.0, 20.0], [123.0, 40.5], [125.0, 46.0], [127.0, 16.0], [124.0, 45.5], [126.0, 21.0], [134.0, 52.0], [130.0, 48.0], [133.0, 50.0], [129.0, 51.0], [131.0, 20.0], [128.0, 27.0], [132.0, 27.0], [135.0, 24.0], [142.0, 27.0], [141.0, 58.0], [138.0, 48.0], [139.0, 50.0], [137.0, 17.0], [140.0, 20.0], [136.0, 21.0], [143.0, 24.0], [144.0, 51.0], [145.0, 43.0], [149.0, 26.0], [148.0, 28.0], [146.0, 50.0], [151.0, 25.0], [150.0, 25.0], [147.0, 41.5], [152.0, 43.0], [155.0, 82.0], [153.0, 47.0], [154.0, 25.0], [158.0, 18.0], [157.0, 54.0], [1.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 158.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.62584207E12, "maxY": 150.0, "series": [{"data": [[1.62584221E12, 89.9], [1.62584281E12, 59.6], [1.62584264E12, 84.3], [1.62584255E12, 129.4], [1.62584238E12, 116.3], [1.62584213E12, 47.6], [1.6258429E12, 149.8], [1.62584273E12, 140.7], [1.62584256E12, 116.6], [1.62584247E12, 109.1], [1.6258423E12, 133.9], [1.6258422E12, 116.4], [1.62584297E12, 0.6], [1.6258428E12, 34.6], [1.62584271E12, 150.0], [1.62584254E12, 140.2], [1.62584237E12, 141.0], [1.62584212E12, 8.3], [1.62584289E12, 149.8], [1.62584272E12, 149.9], [1.62584263E12, 59.4], [1.62584246E12, 84.2], [1.62584229E12, 109.2], [1.62584296E12, 17.3], [1.62584287E12, 149.8], [1.6258427E12, 150.0], [1.62584253E12, 149.9], [1.62584219E12, 139.6], [1.62584236E12, 149.8], [1.62584288E12, 149.8], [1.62584279E12, 9.7], [1.62584262E12, 34.3], [1.62584245E12, 59.4], [1.62584211E12, 3.9], [1.62584228E12, 84.2], [1.62584235E12, 136.8], [1.62584286E12, 149.4], [1.62584218E12, 147.9], [1.62584269E12, 149.1], [1.62584252E12, 149.9], [1.62584227E12, 59.5], [1.62584295E12, 42.1], [1.62584278E12, 17.2], [1.6258421E12, 4.4], [1.62584261E12, 10.0], [1.62584244E12, 34.8], [1.62584251E12, 149.8], [1.62584234E12, 149.9], [1.62584217E12, 147.3], [1.62584285E12, 136.3], [1.62584268E12, 46.7], [1.62584243E12, 10.0], [1.62584226E12, 34.7], [1.62584209E12, 1.7], [1.62584294E12, 67.0], [1.62584277E12, 42.0], [1.6258426E12, 16.9], [1.62584267E12, 149.8], [1.6258425E12, 143.2], [1.62584233E12, 150.0], [1.62584207E12, 1.0], [1.62584216E12, 53.7], [1.62584284E12, 133.3], [1.62584259E12, 41.6], [1.62584242E12, 17.1], [1.62584208E12, 0.8], [1.62584225E12, 10.2], [1.62584293E12, 91.9], [1.62584276E12, 67.1], [1.62584283E12, 109.1], [1.62584266E12, 134.0], [1.62584249E12, 149.5], [1.62584223E12, 42.0], [1.62584232E12, 137.9], [1.62584275E12, 91.7], [1.62584258E12, 66.9], [1.62584241E12, 42.1], [1.62584215E12, 27.2], [1.62584224E12, 17.2], [1.62584292E12, 116.1], [1.62584282E12, 84.2], [1.62584222E12, 65.4], [1.62584265E12, 109.1], [1.62584248E12, 133.8], [1.62584239E12, 91.7], [1.62584291E12, 140.8], [1.62584274E12, 116.5], [1.62584214E12, 19.2], [1.62584257E12, 91.8], [1.6258424E12, 66.7], [1.62584231E12, 141.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584297E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.62584207E12, "maxY": 150.6, "series": [{"data": [[1.62584221E12, 89.9], [1.62584281E12, 59.3], [1.62584264E12, 84.3], [1.62584255E12, 129.5], [1.62584238E12, 116.5], [1.62584213E12, 38.9], [1.6258429E12, 150.0], [1.62584273E12, 140.9], [1.62584256E12, 116.6], [1.62584247E12, 109.0], [1.6258423E12, 133.8], [1.6258422E12, 116.7], [1.62584297E12, 0.6], [1.6258428E12, 34.4], [1.62584271E12, 150.1], [1.62584254E12, 140.3], [1.62584237E12, 141.2], [1.62584212E12, 8.3], [1.62584289E12, 149.7], [1.62584272E12, 149.7], [1.62584263E12, 59.3], [1.62584246E12, 84.2], [1.62584229E12, 109.5], [1.62584296E12, 17.5], [1.62584287E12, 149.7], [1.6258427E12, 149.9], [1.62584253E12, 150.6], [1.62584219E12, 140.0], [1.62584236E12, 149.7], [1.62584288E12, 149.9], [1.62584279E12, 9.7], [1.62584262E12, 34.3], [1.62584245E12, 59.3], [1.62584211E12, 3.9], [1.62584228E12, 84.1], [1.62584235E12, 136.3], [1.62584286E12, 149.8], [1.62584218E12, 148.6], [1.62584269E12, 149.2], [1.62584252E12, 149.7], [1.62584227E12, 59.3], [1.62584295E12, 42.0], [1.62584278E12, 17.2], [1.6258421E12, 4.4], [1.62584261E12, 10.0], [1.62584244E12, 34.8], [1.62584251E12, 149.9], [1.62584234E12, 149.9], [1.62584217E12, 146.4], [1.62584285E12, 136.3], [1.62584268E12, 46.6], [1.62584243E12, 9.9], [1.62584226E12, 34.6], [1.62584209E12, 1.7], [1.62584294E12, 67.1], [1.62584277E12, 42.2], [1.6258426E12, 16.9], [1.62584267E12, 149.7], [1.6258425E12, 142.7], [1.62584233E12, 150.1], [1.62584207E12, 1.0], [1.62584216E12, 65.6], [1.62584284E12, 133.1], [1.62584259E12, 41.7], [1.62584242E12, 17.2], [1.62584208E12, 0.8], [1.62584225E12, 10.1], [1.62584293E12, 92.0], [1.62584276E12, 67.0], [1.62584283E12, 109.0], [1.62584266E12, 134.0], [1.62584249E12, 149.5], [1.62584223E12, 42.1], [1.62584232E12, 138.2], [1.62584275E12, 91.8], [1.62584258E12, 66.9], [1.62584241E12, 42.2], [1.62584215E12, 14.2], [1.62584224E12, 17.4], [1.62584292E12, 116.1], [1.62584282E12, 84.2], [1.62584222E12, 65.7], [1.62584265E12, 109.0], [1.62584248E12, 133.7], [1.62584239E12, 91.8], [1.62584291E12, 140.8], [1.62584274E12, 116.6], [1.62584214E12, 27.9], [1.62584257E12, 91.8], [1.6258424E12, 66.9], [1.62584231E12, 140.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62584297E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.62584207E12, "maxY": 150.6, "series": [{"data": [[1.62584221E12, 89.9], [1.62584281E12, 59.3], [1.62584264E12, 84.3], [1.62584255E12, 129.5], [1.62584238E12, 116.5], [1.62584213E12, 38.9], [1.6258429E12, 150.0], [1.62584273E12, 140.9], [1.62584256E12, 116.6], [1.62584247E12, 109.0], [1.6258423E12, 133.8], [1.6258422E12, 116.7], [1.62584297E12, 0.6], [1.6258428E12, 34.4], [1.62584271E12, 150.1], [1.62584254E12, 140.3], [1.62584237E12, 141.2], [1.62584212E12, 8.3], [1.62584289E12, 149.7], [1.62584272E12, 149.7], [1.62584263E12, 59.3], [1.62584246E12, 84.2], [1.62584229E12, 109.5], [1.62584296E12, 17.5], [1.62584287E12, 149.7], [1.6258427E12, 149.9], [1.62584253E12, 150.6], [1.62584219E12, 140.0], [1.62584236E12, 149.7], [1.62584288E12, 149.9], [1.62584279E12, 9.7], [1.62584262E12, 34.3], [1.62584245E12, 59.3], [1.62584211E12, 3.9], [1.62584228E12, 84.1], [1.62584235E12, 136.3], [1.62584286E12, 149.8], [1.62584218E12, 148.6], [1.62584269E12, 149.2], [1.62584252E12, 149.7], [1.62584227E12, 59.3], [1.62584295E12, 42.0], [1.62584278E12, 17.2], [1.6258421E12, 4.4], [1.62584261E12, 10.0], [1.62584244E12, 34.8], [1.62584251E12, 149.9], [1.62584234E12, 149.9], [1.62584217E12, 146.4], [1.62584285E12, 136.3], [1.62584268E12, 46.6], [1.62584243E12, 9.9], [1.62584226E12, 34.6], [1.62584209E12, 1.7], [1.62584294E12, 67.1], [1.62584277E12, 42.2], [1.6258426E12, 16.9], [1.62584267E12, 149.7], [1.6258425E12, 142.7], [1.62584233E12, 150.1], [1.62584207E12, 1.0], [1.62584216E12, 65.6], [1.62584284E12, 133.1], [1.62584259E12, 41.7], [1.62584242E12, 17.2], [1.62584208E12, 0.8], [1.62584225E12, 10.1], [1.62584293E12, 92.0], [1.62584276E12, 67.0], [1.62584283E12, 109.0], [1.62584266E12, 134.0], [1.62584249E12, 149.5], [1.62584223E12, 42.1], [1.62584232E12, 138.2], [1.62584275E12, 91.8], [1.62584258E12, 66.9], [1.62584241E12, 42.2], [1.62584215E12, 14.2], [1.62584224E12, 17.4], [1.62584292E12, 116.1], [1.62584282E12, 84.2], [1.62584222E12, 65.7], [1.62584265E12, 109.0], [1.62584248E12, 133.7], [1.62584239E12, 91.8], [1.62584291E12, 140.8], [1.62584274E12, 116.6], [1.62584214E12, 27.9], [1.62584257E12, 91.8], [1.6258424E12, 66.9], [1.62584231E12, 140.8]], "isOverall": false, "label": "Healthy Thinking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584297E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.62584207E12, "maxY": 150.6, "series": [{"data": [[1.62584221E12, 89.9], [1.62584281E12, 59.3], [1.62584264E12, 84.3], [1.62584255E12, 129.5], [1.62584238E12, 116.5], [1.62584213E12, 38.9], [1.6258429E12, 150.0], [1.62584273E12, 140.9], [1.62584256E12, 116.6], [1.62584247E12, 109.0], [1.6258423E12, 133.8], [1.6258422E12, 116.7], [1.62584297E12, 0.6], [1.6258428E12, 34.4], [1.62584271E12, 150.1], [1.62584254E12, 140.3], [1.62584237E12, 141.2], [1.62584212E12, 8.3], [1.62584289E12, 149.7], [1.62584272E12, 149.7], [1.62584263E12, 59.3], [1.62584246E12, 84.2], [1.62584229E12, 109.5], [1.62584296E12, 17.5], [1.62584287E12, 149.7], [1.6258427E12, 149.9], [1.62584253E12, 150.6], [1.62584219E12, 140.0], [1.62584236E12, 149.7], [1.62584288E12, 149.9], [1.62584279E12, 9.7], [1.62584262E12, 34.3], [1.62584245E12, 59.3], [1.62584211E12, 3.9], [1.62584228E12, 84.1], [1.62584235E12, 136.3], [1.62584286E12, 149.8], [1.62584218E12, 148.6], [1.62584269E12, 149.2], [1.62584252E12, 149.7], [1.62584227E12, 59.3], [1.62584295E12, 42.0], [1.62584278E12, 17.2], [1.6258421E12, 4.4], [1.62584261E12, 10.0], [1.62584244E12, 34.8], [1.62584251E12, 149.9], [1.62584234E12, 149.9], [1.62584217E12, 146.4], [1.62584285E12, 136.3], [1.62584268E12, 46.6], [1.62584243E12, 9.9], [1.62584226E12, 34.6], [1.62584209E12, 1.7], [1.62584294E12, 67.1], [1.62584277E12, 42.2], [1.6258426E12, 16.9], [1.62584267E12, 149.7], [1.6258425E12, 142.7], [1.62584233E12, 150.1], [1.62584207E12, 1.0], [1.62584216E12, 65.6], [1.62584284E12, 133.1], [1.62584259E12, 41.7], [1.62584242E12, 17.2], [1.62584208E12, 0.8], [1.62584225E12, 10.1], [1.62584293E12, 92.0], [1.62584276E12, 67.0], [1.62584283E12, 109.0], [1.62584266E12, 134.0], [1.62584249E12, 149.5], [1.62584223E12, 42.1], [1.62584232E12, 138.2], [1.62584275E12, 91.8], [1.62584258E12, 66.9], [1.62584241E12, 42.2], [1.62584215E12, 14.2], [1.62584224E12, 17.4], [1.62584292E12, 116.1], [1.62584282E12, 84.2], [1.62584222E12, 65.7], [1.62584265E12, 109.0], [1.62584248E12, 133.7], [1.62584239E12, 91.8], [1.62584291E12, 140.8], [1.62584274E12, 116.6], [1.62584214E12, 27.9], [1.62584257E12, 91.8], [1.6258424E12, 66.9], [1.62584231E12, 140.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62584297E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

