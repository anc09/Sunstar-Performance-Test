/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 65.0, "minX": 0.0, "maxY": 30109.0, "series": [{"data": [[0.0, 65.0], [0.1, 69.0], [0.2, 73.0], [0.3, 79.0], [0.4, 83.0], [0.5, 85.0], [0.6, 90.0], [0.7, 91.0], [0.8, 92.0], [0.9, 92.0], [1.0, 93.0], [1.1, 95.0], [1.2, 97.0], [1.3, 97.0], [1.4, 100.0], [1.5, 101.0], [1.6, 103.0], [1.7, 103.0], [1.8, 106.0], [1.9, 107.0], [2.0, 110.0], [2.1, 113.0], [2.2, 119.0], [2.3, 122.0], [2.4, 133.0], [2.5, 135.0], [2.6, 139.0], [2.7, 141.0], [2.8, 144.0], [2.9, 147.0], [3.0, 148.0], [3.1, 149.0], [3.2, 153.0], [3.3, 155.0], [3.4, 156.0], [3.5, 158.0], [3.6, 160.0], [3.7, 160.0], [3.8, 162.0], [3.9, 163.0], [4.0, 165.0], [4.1, 171.0], [4.2, 173.0], [4.3, 174.0], [4.4, 175.0], [4.5, 177.0], [4.6, 183.0], [4.7, 186.0], [4.8, 187.0], [4.9, 188.0], [5.0, 192.0], [5.1, 196.0], [5.2, 201.0], [5.3, 203.0], [5.4, 209.0], [5.5, 211.0], [5.6, 218.0], [5.7, 221.0], [5.8, 229.0], [5.9, 235.0], [6.0, 237.0], [6.1, 238.0], [6.2, 240.0], [6.3, 242.0], [6.4, 244.0], [6.5, 249.0], [6.6, 254.0], [6.7, 255.0], [6.8, 257.0], [6.9, 258.0], [7.0, 259.0], [7.1, 262.0], [7.2, 265.0], [7.3, 267.0], [7.4, 269.0], [7.5, 269.0], [7.6, 271.0], [7.7, 273.0], [7.8, 275.0], [7.9, 275.0], [8.0, 277.0], [8.1, 278.0], [8.2, 279.0], [8.3, 280.0], [8.4, 281.0], [8.5, 284.0], [8.6, 287.0], [8.7, 288.0], [8.8, 289.0], [8.9, 289.0], [9.0, 291.0], [9.1, 292.0], [9.2, 293.0], [9.3, 296.0], [9.4, 297.0], [9.5, 299.0], [9.6, 300.0], [9.7, 302.0], [9.8, 303.0], [9.9, 305.0], [10.0, 305.0], [10.1, 306.0], [10.2, 307.0], [10.3, 309.0], [10.4, 311.0], [10.5, 312.0], [10.6, 313.0], [10.7, 314.0], [10.8, 318.0], [10.9, 319.0], [11.0, 320.0], [11.1, 321.0], [11.2, 324.0], [11.3, 325.0], [11.4, 326.0], [11.5, 328.0], [11.6, 328.0], [11.7, 330.0], [11.8, 331.0], [11.9, 332.0], [12.0, 334.0], [12.1, 335.0], [12.2, 337.0], [12.3, 340.0], [12.4, 342.0], [12.5, 343.0], [12.6, 343.0], [12.7, 345.0], [12.8, 348.0], [12.9, 348.0], [13.0, 350.0], [13.1, 352.0], [13.2, 353.0], [13.3, 353.0], [13.4, 355.0], [13.5, 355.0], [13.6, 357.0], [13.7, 358.0], [13.8, 359.0], [13.9, 359.0], [14.0, 361.0], [14.1, 362.0], [14.2, 366.0], [14.3, 367.0], [14.4, 368.0], [14.5, 369.0], [14.6, 370.0], [14.7, 371.0], [14.8, 372.0], [14.9, 373.0], [15.0, 374.0], [15.1, 374.0], [15.2, 375.0], [15.3, 376.0], [15.4, 377.0], [15.5, 377.0], [15.6, 379.0], [15.7, 380.0], [15.8, 381.0], [15.9, 382.0], [16.0, 384.0], [16.1, 384.0], [16.2, 385.0], [16.3, 386.0], [16.4, 388.0], [16.5, 389.0], [16.6, 391.0], [16.7, 392.0], [16.8, 393.0], [16.9, 396.0], [17.0, 397.0], [17.1, 399.0], [17.2, 400.0], [17.3, 402.0], [17.4, 404.0], [17.5, 412.0], [17.6, 414.0], [17.7, 415.0], [17.8, 418.0], [17.9, 420.0], [18.0, 423.0], [18.1, 425.0], [18.2, 427.0], [18.3, 429.0], [18.4, 431.0], [18.5, 432.0], [18.6, 435.0], [18.7, 435.0], [18.8, 438.0], [18.9, 440.0], [19.0, 442.0], [19.1, 444.0], [19.2, 445.0], [19.3, 448.0], [19.4, 452.0], [19.5, 454.0], [19.6, 458.0], [19.7, 460.0], [19.8, 460.0], [19.9, 464.0], [20.0, 468.0], [20.1, 469.0], [20.2, 474.0], [20.3, 475.0], [20.4, 478.0], [20.5, 479.0], [20.6, 484.0], [20.7, 486.0], [20.8, 490.0], [20.9, 493.0], [21.0, 496.0], [21.1, 497.0], [21.2, 502.0], [21.3, 505.0], [21.4, 508.0], [21.5, 511.0], [21.6, 515.0], [21.7, 518.0], [21.8, 521.0], [21.9, 522.0], [22.0, 523.0], [22.1, 529.0], [22.2, 531.0], [22.3, 533.0], [22.4, 534.0], [22.5, 539.0], [22.6, 543.0], [22.7, 543.0], [22.8, 545.0], [22.9, 548.0], [23.0, 551.0], [23.1, 554.0], [23.2, 556.0], [23.3, 557.0], [23.4, 558.0], [23.5, 560.0], [23.6, 563.0], [23.7, 565.0], [23.8, 568.0], [23.9, 568.0], [24.0, 572.0], [24.1, 573.0], [24.2, 575.0], [24.3, 576.0], [24.4, 582.0], [24.5, 586.0], [24.6, 589.0], [24.7, 592.0], [24.8, 596.0], [24.9, 598.0], [25.0, 599.0], [25.1, 601.0], [25.2, 604.0], [25.3, 605.0], [25.4, 610.0], [25.5, 612.0], [25.6, 614.0], [25.7, 616.0], [25.8, 618.0], [25.9, 620.0], [26.0, 622.0], [26.1, 627.0], [26.2, 628.0], [26.3, 632.0], [26.4, 634.0], [26.5, 639.0], [26.6, 642.0], [26.7, 644.0], [26.8, 646.0], [26.9, 651.0], [27.0, 656.0], [27.1, 661.0], [27.2, 663.0], [27.3, 668.0], [27.4, 669.0], [27.5, 681.0], [27.6, 683.0], [27.7, 685.0], [27.8, 689.0], [27.9, 694.0], [28.0, 698.0], [28.1, 701.0], [28.2, 703.0], [28.3, 705.0], [28.4, 709.0], [28.5, 719.0], [28.6, 723.0], [28.7, 728.0], [28.8, 731.0], [28.9, 734.0], [29.0, 738.0], [29.1, 744.0], [29.2, 747.0], [29.3, 755.0], [29.4, 759.0], [29.5, 764.0], [29.6, 766.0], [29.7, 769.0], [29.8, 773.0], [29.9, 779.0], [30.0, 781.0], [30.1, 790.0], [30.2, 792.0], [30.3, 796.0], [30.4, 801.0], [30.5, 805.0], [30.6, 811.0], [30.7, 815.0], [30.8, 819.0], [30.9, 823.0], [31.0, 824.0], [31.1, 830.0], [31.2, 834.0], [31.3, 843.0], [31.4, 848.0], [31.5, 851.0], [31.6, 855.0], [31.7, 868.0], [31.8, 874.0], [31.9, 877.0], [32.0, 881.0], [32.1, 882.0], [32.2, 883.0], [32.3, 888.0], [32.4, 892.0], [32.5, 895.0], [32.6, 897.0], [32.7, 900.0], [32.8, 906.0], [32.9, 911.0], [33.0, 913.0], [33.1, 918.0], [33.2, 922.0], [33.3, 925.0], [33.4, 931.0], [33.5, 937.0], [33.6, 940.0], [33.7, 947.0], [33.8, 951.0], [33.9, 952.0], [34.0, 955.0], [34.1, 958.0], [34.2, 959.0], [34.3, 961.0], [34.4, 965.0], [34.5, 967.0], [34.6, 967.0], [34.7, 969.0], [34.8, 972.0], [34.9, 976.0], [35.0, 980.0], [35.1, 983.0], [35.2, 986.0], [35.3, 987.0], [35.4, 992.0], [35.5, 997.0], [35.6, 1001.0], [35.7, 1007.0], [35.8, 1012.0], [35.9, 1015.0], [36.0, 1017.0], [36.1, 1020.0], [36.2, 1022.0], [36.3, 1025.0], [36.4, 1026.0], [36.5, 1031.0], [36.6, 1033.0], [36.7, 1035.0], [36.8, 1038.0], [36.9, 1041.0], [37.0, 1045.0], [37.1, 1047.0], [37.2, 1050.0], [37.3, 1051.0], [37.4, 1052.0], [37.5, 1055.0], [37.6, 1058.0], [37.7, 1059.0], [37.8, 1062.0], [37.9, 1065.0], [38.0, 1067.0], [38.1, 1069.0], [38.2, 1069.0], [38.3, 1072.0], [38.4, 1072.0], [38.5, 1076.0], [38.6, 1079.0], [38.7, 1081.0], [38.8, 1082.0], [38.9, 1084.0], [39.0, 1086.0], [39.1, 1089.0], [39.2, 1090.0], [39.3, 1095.0], [39.4, 1096.0], [39.5, 1097.0], [39.6, 1099.0], [39.7, 1101.0], [39.8, 1103.0], [39.9, 1106.0], [40.0, 1107.0], [40.1, 1112.0], [40.2, 1112.0], [40.3, 1115.0], [40.4, 1117.0], [40.5, 1119.0], [40.6, 1121.0], [40.7, 1124.0], [40.8, 1125.0], [40.9, 1128.0], [41.0, 1131.0], [41.1, 1134.0], [41.2, 1136.0], [41.3, 1137.0], [41.4, 1140.0], [41.5, 1141.0], [41.6, 1143.0], [41.7, 1146.0], [41.8, 1151.0], [41.9, 1155.0], [42.0, 1155.0], [42.1, 1156.0], [42.2, 1157.0], [42.3, 1161.0], [42.4, 1165.0], [42.5, 1171.0], [42.6, 1174.0], [42.7, 1177.0], [42.8, 1180.0], [42.9, 1184.0], [43.0, 1187.0], [43.1, 1189.0], [43.2, 1191.0], [43.3, 1193.0], [43.4, 1195.0], [43.5, 1200.0], [43.6, 1200.0], [43.7, 1206.0], [43.8, 1207.0], [43.9, 1211.0], [44.0, 1213.0], [44.1, 1216.0], [44.2, 1220.0], [44.3, 1223.0], [44.4, 1226.0], [44.5, 1230.0], [44.6, 1232.0], [44.7, 1235.0], [44.8, 1236.0], [44.9, 1242.0], [45.0, 1244.0], [45.1, 1246.0], [45.2, 1247.0], [45.3, 1252.0], [45.4, 1254.0], [45.5, 1258.0], [45.6, 1260.0], [45.7, 1264.0], [45.8, 1267.0], [45.9, 1270.0], [46.0, 1273.0], [46.1, 1276.0], [46.2, 1278.0], [46.3, 1283.0], [46.4, 1290.0], [46.5, 1293.0], [46.6, 1295.0], [46.7, 1297.0], [46.8, 1299.0], [46.9, 1303.0], [47.0, 1307.0], [47.1, 1309.0], [47.2, 1312.0], [47.3, 1314.0], [47.4, 1317.0], [47.5, 1322.0], [47.6, 1325.0], [47.7, 1327.0], [47.8, 1329.0], [47.9, 1332.0], [48.0, 1333.0], [48.1, 1337.0], [48.2, 1340.0], [48.3, 1344.0], [48.4, 1346.0], [48.5, 1351.0], [48.6, 1357.0], [48.7, 1358.0], [48.8, 1358.0], [48.9, 1363.0], [49.0, 1366.0], [49.1, 1368.0], [49.2, 1371.0], [49.3, 1375.0], [49.4, 1378.0], [49.5, 1381.0], [49.6, 1386.0], [49.7, 1388.0], [49.8, 1389.0], [49.9, 1396.0], [50.0, 1397.0], [50.1, 1400.0], [50.2, 1404.0], [50.3, 1407.0], [50.4, 1411.0], [50.5, 1414.0], [50.6, 1418.0], [50.7, 1424.0], [50.8, 1428.0], [50.9, 1430.0], [51.0, 1435.0], [51.1, 1436.0], [51.2, 1442.0], [51.3, 1443.0], [51.4, 1445.0], [51.5, 1450.0], [51.6, 1457.0], [51.7, 1459.0], [51.8, 1462.0], [51.9, 1464.0], [52.0, 1470.0], [52.1, 1472.0], [52.2, 1473.0], [52.3, 1475.0], [52.4, 1477.0], [52.5, 1479.0], [52.6, 1479.0], [52.7, 1481.0], [52.8, 1485.0], [52.9, 1487.0], [53.0, 1495.0], [53.1, 1499.0], [53.2, 1506.0], [53.3, 1506.0], [53.4, 1508.0], [53.5, 1510.0], [53.6, 1516.0], [53.7, 1519.0], [53.8, 1521.0], [53.9, 1528.0], [54.0, 1536.0], [54.1, 1538.0], [54.2, 1542.0], [54.3, 1544.0], [54.4, 1550.0], [54.5, 1555.0], [54.6, 1558.0], [54.7, 1563.0], [54.8, 1564.0], [54.9, 1566.0], [55.0, 1571.0], [55.1, 1572.0], [55.2, 1573.0], [55.3, 1575.0], [55.4, 1584.0], [55.5, 1586.0], [55.6, 1588.0], [55.7, 1592.0], [55.8, 1596.0], [55.9, 1600.0], [56.0, 1601.0], [56.1, 1607.0], [56.2, 1611.0], [56.3, 1612.0], [56.4, 1615.0], [56.5, 1618.0], [56.6, 1622.0], [56.7, 1623.0], [56.8, 1624.0], [56.9, 1627.0], [57.0, 1633.0], [57.1, 1635.0], [57.2, 1640.0], [57.3, 1642.0], [57.4, 1647.0], [57.5, 1650.0], [57.6, 1653.0], [57.7, 1654.0], [57.8, 1658.0], [57.9, 1661.0], [58.0, 1666.0], [58.1, 1674.0], [58.2, 1679.0], [58.3, 1680.0], [58.4, 1683.0], [58.5, 1689.0], [58.6, 1693.0], [58.7, 1700.0], [58.8, 1703.0], [58.9, 1707.0], [59.0, 1711.0], [59.1, 1712.0], [59.2, 1716.0], [59.3, 1721.0], [59.4, 1730.0], [59.5, 1736.0], [59.6, 1738.0], [59.7, 1741.0], [59.8, 1745.0], [59.9, 1755.0], [60.0, 1761.0], [60.1, 1762.0], [60.2, 1772.0], [60.3, 1774.0], [60.4, 1780.0], [60.5, 1787.0], [60.6, 1795.0], [60.7, 1804.0], [60.8, 1821.0], [60.9, 1828.0], [61.0, 1834.0], [61.1, 1837.0], [61.2, 1844.0], [61.3, 1849.0], [61.4, 1854.0], [61.5, 1861.0], [61.6, 1867.0], [61.7, 1876.0], [61.8, 1879.0], [61.9, 1885.0], [62.0, 1890.0], [62.1, 1893.0], [62.2, 1897.0], [62.3, 1907.0], [62.4, 1928.0], [62.5, 1935.0], [62.6, 1946.0], [62.7, 1952.0], [62.8, 1957.0], [62.9, 1959.0], [63.0, 1963.0], [63.1, 1967.0], [63.2, 1972.0], [63.3, 1976.0], [63.4, 1981.0], [63.5, 1991.0], [63.6, 2012.0], [63.7, 2025.0], [63.8, 2041.0], [63.9, 2044.0], [64.0, 2051.0], [64.1, 2074.0], [64.2, 2080.0], [64.3, 2087.0], [64.4, 2094.0], [64.5, 2101.0], [64.6, 2110.0], [64.7, 2125.0], [64.8, 2135.0], [64.9, 2138.0], [65.0, 2145.0], [65.1, 2148.0], [65.2, 2154.0], [65.3, 2159.0], [65.4, 2167.0], [65.5, 2172.0], [65.6, 2176.0], [65.7, 2187.0], [65.8, 2192.0], [65.9, 2197.0], [66.0, 2202.0], [66.1, 2214.0], [66.2, 2235.0], [66.3, 2239.0], [66.4, 2248.0], [66.5, 2255.0], [66.6, 2262.0], [66.7, 2275.0], [66.8, 2285.0], [66.9, 2287.0], [67.0, 2296.0], [67.1, 2300.0], [67.2, 2310.0], [67.3, 2318.0], [67.4, 2324.0], [67.5, 2334.0], [67.6, 2347.0], [67.7, 2356.0], [67.8, 2364.0], [67.9, 2369.0], [68.0, 2389.0], [68.1, 2394.0], [68.2, 2407.0], [68.3, 2417.0], [68.4, 2440.0], [68.5, 2449.0], [68.6, 2454.0], [68.7, 2458.0], [68.8, 2468.0], [68.9, 2472.0], [69.0, 2484.0], [69.1, 2494.0], [69.2, 2532.0], [69.3, 2548.0], [69.4, 2580.0], [69.5, 2583.0], [69.6, 2594.0], [69.7, 2611.0], [69.8, 2642.0], [69.9, 2650.0], [70.0, 2685.0], [70.1, 2700.0], [70.2, 2718.0], [70.3, 2736.0], [70.4, 2801.0], [70.5, 2809.0], [70.6, 2835.0], [70.7, 2851.0], [70.8, 2891.0], [70.9, 2922.0], [71.0, 2947.0], [71.1, 2953.0], [71.2, 3005.0], [71.3, 3020.0], [71.4, 3076.0], [71.5, 3083.0], [71.6, 3101.0], [71.7, 3125.0], [71.8, 3189.0], [71.9, 3209.0], [72.0, 3238.0], [72.1, 3266.0], [72.2, 3282.0], [72.3, 3306.0], [72.4, 3363.0], [72.5, 3406.0], [72.6, 3438.0], [72.7, 3459.0], [72.8, 3472.0], [72.9, 3497.0], [73.0, 3524.0], [73.1, 3552.0], [73.2, 3592.0], [73.3, 3610.0], [73.4, 3636.0], [73.5, 3652.0], [73.6, 3658.0], [73.7, 3672.0], [73.8, 3685.0], [73.9, 3706.0], [74.0, 3738.0], [74.1, 3755.0], [74.2, 3776.0], [74.3, 3799.0], [74.4, 3834.0], [74.5, 3838.0], [74.6, 3847.0], [74.7, 3860.0], [74.8, 3871.0], [74.9, 3887.0], [75.0, 3900.0], [75.1, 3912.0], [75.2, 3916.0], [75.3, 3924.0], [75.4, 3931.0], [75.5, 3947.0], [75.6, 3967.0], [75.7, 3976.0], [75.8, 3988.0], [75.9, 3998.0], [76.0, 4016.0], [76.1, 4025.0], [76.2, 4028.0], [76.3, 4044.0], [76.4, 4054.0], [76.5, 4069.0], [76.6, 4085.0], [76.7, 4095.0], [76.8, 4119.0], [76.9, 4130.0], [77.0, 4150.0], [77.1, 4161.0], [77.2, 4175.0], [77.3, 4201.0], [77.4, 4206.0], [77.5, 4219.0], [77.6, 4226.0], [77.7, 4254.0], [77.8, 4263.0], [77.9, 4276.0], [78.0, 4281.0], [78.1, 4291.0], [78.2, 4295.0], [78.3, 4310.0], [78.4, 4321.0], [78.5, 4331.0], [78.6, 4335.0], [78.7, 4343.0], [78.8, 4343.0], [78.9, 4355.0], [79.0, 4360.0], [79.1, 4367.0], [79.2, 4379.0], [79.3, 4389.0], [79.4, 4394.0], [79.5, 4408.0], [79.6, 4423.0], [79.7, 4428.0], [79.8, 4430.0], [79.9, 4440.0], [80.0, 4451.0], [80.1, 4472.0], [80.2, 4484.0], [80.3, 4489.0], [80.4, 4498.0], [80.5, 4505.0], [80.6, 4517.0], [80.7, 4526.0], [80.8, 4530.0], [80.9, 4544.0], [81.0, 4550.0], [81.1, 4555.0], [81.2, 4563.0], [81.3, 4569.0], [81.4, 4585.0], [81.5, 4591.0], [81.6, 4597.0], [81.7, 4603.0], [81.8, 4612.0], [81.9, 4616.0], [82.0, 4621.0], [82.1, 4627.0], [82.2, 4630.0], [82.3, 4641.0], [82.4, 4648.0], [82.5, 4652.0], [82.6, 4668.0], [82.7, 4673.0], [82.8, 4674.0], [82.9, 4683.0], [83.0, 4688.0], [83.1, 4707.0], [83.2, 4709.0], [83.3, 4722.0], [83.4, 4722.0], [83.5, 4729.0], [83.6, 4732.0], [83.7, 4742.0], [83.8, 4754.0], [83.9, 4767.0], [84.0, 4776.0], [84.1, 4783.0], [84.2, 4790.0], [84.3, 4798.0], [84.4, 4801.0], [84.5, 4821.0], [84.6, 4827.0], [84.7, 4839.0], [84.8, 4854.0], [84.9, 4875.0], [85.0, 4883.0], [85.1, 4906.0], [85.2, 4915.0], [85.3, 4925.0], [85.4, 4938.0], [85.5, 4950.0], [85.6, 4956.0], [85.7, 4963.0], [85.8, 4974.0], [85.9, 4990.0], [86.0, 5004.0], [86.1, 5020.0], [86.2, 5024.0], [86.3, 5034.0], [86.4, 5039.0], [86.5, 5046.0], [86.6, 5050.0], [86.7, 5056.0], [86.8, 5062.0], [86.9, 5085.0], [87.0, 5093.0], [87.1, 5099.0], [87.2, 5116.0], [87.3, 5123.0], [87.4, 5132.0], [87.5, 5141.0], [87.6, 5147.0], [87.7, 5154.0], [87.8, 5164.0], [87.9, 5170.0], [88.0, 5175.0], [88.1, 5190.0], [88.2, 5199.0], [88.3, 5208.0], [88.4, 5223.0], [88.5, 5239.0], [88.6, 5243.0], [88.7, 5259.0], [88.8, 5265.0], [88.9, 5282.0], [89.0, 5286.0], [89.1, 5307.0], [89.2, 5316.0], [89.3, 5321.0], [89.4, 5322.0], [89.5, 5335.0], [89.6, 5347.0], [89.7, 5364.0], [89.8, 5381.0], [89.9, 5409.0], [90.0, 5419.0], [90.1, 5442.0], [90.2, 5450.0], [90.3, 5465.0], [90.4, 5484.0], [90.5, 5515.0], [90.6, 5533.0], [90.7, 5556.0], [90.8, 5579.0], [90.9, 5606.0], [91.0, 5623.0], [91.1, 5631.0], [91.2, 5648.0], [91.3, 5668.0], [91.4, 5680.0], [91.5, 5700.0], [91.6, 5729.0], [91.7, 5749.0], [91.8, 5756.0], [91.9, 5797.0], [92.0, 5816.0], [92.1, 5828.0], [92.2, 5858.0], [92.3, 5880.0], [92.4, 5897.0], [92.5, 5931.0], [92.6, 5938.0], [92.7, 5969.0], [92.8, 5982.0], [92.9, 5993.0], [93.0, 6002.0], [93.1, 6031.0], [93.2, 6051.0], [93.3, 6104.0], [93.4, 6112.0], [93.5, 6117.0], [93.6, 6126.0], [93.7, 6139.0], [93.8, 6159.0], [93.9, 6164.0], [94.0, 6198.0], [94.1, 6207.0], [94.2, 6213.0], [94.3, 6222.0], [94.4, 6244.0], [94.5, 6256.0], [94.6, 6277.0], [94.7, 6293.0], [94.8, 6307.0], [94.9, 6319.0], [95.0, 6336.0], [95.1, 6349.0], [95.2, 6362.0], [95.3, 6369.0], [95.4, 6385.0], [95.5, 6414.0], [95.6, 6424.0], [95.7, 6451.0], [95.8, 6495.0], [95.9, 6500.0], [96.0, 6521.0], [96.1, 6573.0], [96.2, 6586.0], [96.3, 6623.0], [96.4, 6652.0], [96.5, 6669.0], [96.6, 6678.0], [96.7, 6708.0], [96.8, 6716.0], [96.9, 6737.0], [97.0, 6765.0], [97.1, 6835.0], [97.2, 6881.0], [97.3, 6956.0], [97.4, 6975.0], [97.5, 7055.0], [97.6, 7077.0], [97.7, 7186.0], [97.8, 7235.0], [97.9, 7291.0], [98.0, 7331.0], [98.1, 7355.0], [98.2, 7403.0], [98.3, 7468.0], [98.4, 7484.0], [98.5, 7673.0], [98.6, 7768.0], [98.7, 7793.0], [98.8, 7838.0], [98.9, 7912.0], [99.0, 7944.0], [99.1, 8145.0], [99.2, 8155.0], [99.3, 8382.0], [99.4, 8589.0], [99.5, 9191.0], [99.6, 11859.0], [99.7, 16229.0], [99.8, 21370.0], [99.9, 27929.0], [100.0, 30109.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 266.0, "series": [{"data": [[0.0, 49.0], [100.0, 133.0], [200.0, 152.0], [300.0, 266.0], [400.0, 139.0], [500.0, 140.0], [600.0, 103.0], [700.0, 82.0], [800.0, 80.0], [900.0, 101.0], [1000.0, 143.0], [1100.0, 135.0], [1200.0, 116.0], [1300.0, 115.0], [1400.0, 106.0], [1500.0, 97.0], [1600.0, 98.0], [1700.0, 69.0], [1800.0, 55.0], [1900.0, 46.0], [2000.0, 33.0], [2100.0, 51.0], [2200.0, 40.0], [2300.0, 37.0], [2400.0, 35.0], [2500.0, 19.0], [2600.0, 14.0], [2800.0, 15.0], [2700.0, 11.0], [2900.0, 12.0], [3000.0, 15.0], [3100.0, 8.0], [3200.0, 16.0], [3300.0, 7.0], [3400.0, 15.0], [3500.0, 13.0], [3700.0, 15.0], [3600.0, 21.0], [3800.0, 23.0], [3900.0, 34.0], [4000.0, 29.0], [4200.0, 33.0], [4100.0, 19.0], [4300.0, 41.0], [4500.0, 44.0], [4600.0, 49.0], [4400.0, 35.0], [4800.0, 25.0], [4700.0, 45.0], [4900.0, 31.0], [5000.0, 42.0], [5100.0, 37.0], [5200.0, 30.0], [5300.0, 28.0], [5500.0, 15.0], [5600.0, 22.0], [5400.0, 20.0], [5800.0, 17.0], [5700.0, 15.0], [6000.0, 11.0], [5900.0, 19.0], [6100.0, 27.0], [6200.0, 24.0], [6300.0, 26.0], [6500.0, 12.0], [6400.0, 15.0], [6600.0, 14.0], [6700.0, 15.0], [6900.0, 8.0], [6800.0, 6.0], [7000.0, 5.0], [7100.0, 5.0], [7300.0, 9.0], [7400.0, 8.0], [7200.0, 6.0], [7500.0, 2.0], [7600.0, 2.0], [7800.0, 4.0], [7700.0, 8.0], [7900.0, 5.0], [8000.0, 1.0], [8100.0, 6.0], [8400.0, 2.0], [8300.0, 1.0], [8200.0, 3.0], [8700.0, 2.0], [8500.0, 1.0], [9100.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9500.0, 1.0], [11800.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [13700.0, 1.0], [16200.0, 1.0], [19700.0, 1.0], [21100.0, 1.0], [21300.0, 1.0], [21700.0, 1.0], [23800.0, 1.0], [27600.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [28800.0, 1.0], [30100.0, 1.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 740.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1642.0, "series": [{"data": [[0.0, 740.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1120.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1642.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.5, "minX": 1.62773903E12, "maxY": 535.5953038674028, "series": [{"data": [[1.62773903E12, 18.5], [1.62773907E12, 148.76855123674906], [1.62773906E12, 44.38498212157334], [1.62773905E12, 8.5], [1.62773904E12, 14.0], [1.62773909E12, 510.04797979797985], [1.62773908E12, 535.5953038674028]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773909E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 173.0, "minX": 5.0, "maxY": 23866.0, "series": [{"data": [[5.0, 6963.749999999999], [6.0, 23866.0], [7.0, 21754.0], [8.0, 21370.0], [9.0, 21148.0], [10.0, 1080.1688311688315], [11.0, 5740.125], [12.0, 13795.0], [13.0, 6432.5], [14.0, 12527.0], [15.0, 5978.0], [16.0, 7858.0], [17.0, 8428.0], [18.0, 238.09183673469377], [19.0, 3778.0], [20.0, 3753.5], [21.0, 173.0], [22.0, 204.6], [23.0, 3238.1999999999994], [24.0, 272.5], [25.0, 302.0], [27.0, 302.0], [28.0, 239.0], [29.0, 202.75], [30.0, 196.5], [31.0, 2302.0], [32.0, 242.0], [33.0, 217.25], [35.0, 317.4054054054054], [37.0, 284.0], [38.0, 301.5], [39.0, 305.0], [40.0, 279.7142857142857], [41.0, 350.27192982456154], [42.0, 1567.125], [43.0, 348.375], [44.0, 394.2], [45.0, 401.5], [46.0, 362.5], [47.0, 364.0], [48.0, 386.0], [49.0, 350.6666666666667], [50.0, 360.0], [51.0, 426.31007751937994], [52.0, 669.0], [53.0, 429.2857142857143], [54.0, 279.0], [55.0, 412.5], [56.0, 299.0], [57.0, 415.6818181818182], [58.0, 506.0], [63.0, 455.0], [64.0, 939.6363636363637], [65.0, 1048.0588235294117], [74.0, 558.0], [75.0, 265.0], [79.0, 4796.0], [78.0, 4817.0], [77.0, 4962.0], [80.0, 627.2474226804123], [81.0, 613.0476190476192], [82.0, 851.952380952381], [83.0, 690.3333333333334], [84.0, 848.0], [85.0, 5095.142857142857], [86.0, 575.3125], [87.0, 2449.6], [88.0, 511.33333333333337], [89.0, 535.375], [90.0, 509.0], [91.0, 1301.1666666666667], [92.0, 1282.5], [93.0, 1243.5], [94.0, 1754.8], [95.0, 1823.3333333333333], [96.0, 716.9411764705883], [97.0, 1950.6315789473683], [98.0, 2001.6666666666667], [99.0, 1145.7142857142858], [100.0, 3446.0], [101.0, 749.1875], [102.0, 1863.0], [103.0, 293.0], [104.0, 1706.6666666666667], [105.0, 312.6], [106.0, 2457.0], [107.0, 1934.8], [108.0, 2198.0], [109.0, 813.7142857142858], [110.0, 799.1], [111.0, 1534.3620689655168], [112.0, 1471.2857142857142], [114.0, 3308.5], [115.0, 2968.0], [113.0, 4939.0], [116.0, 3615.9], [117.0, 1089.06], [118.0, 1427.6499999999999], [119.0, 2889.8888888888887], [120.0, 997.75], [121.0, 1124.0], [122.0, 991.875], [123.0, 941.8000000000001], [124.0, 1715.0625], [126.0, 975.7234042553192], [128.0, 748.5], [130.0, 2148.0], [131.0, 2107.666666666667], [134.0, 6312.0], [133.0, 4983.0], [132.0, 5087.0], [137.0, 1591.7777777777778], [138.0, 1519.4999999999998], [139.0, 1544.0], [140.0, 2106.714285714286], [141.0, 1349.8518518518517], [142.0, 1339.3658536585363], [143.0, 1262.4074074074074], [136.0, 5823.5], [144.0, 1066.0833333333335], [145.0, 2299.5], [146.0, 1516.9999999999998], [151.0, 4865.666666666667], [150.0, 5012.0], [149.0, 6716.0], [148.0, 5815.0], [154.0, 5556.0], [153.0, 4612.5], [152.0, 6277.0], [166.0, 1434.56], [167.0, 1280.2558139534885], [164.0, 8141.0], [168.0, 1320.090909090909], [169.0, 1546.0], [172.0, 1181.0], [173.0, 1435.5641025641025], [174.0, 1320.3333333333337], [175.0, 3858.0], [176.0, 1544.423076923077], [177.0, 3688.5], [178.0, 1546.9166666666667], [179.0, 1347.5370370370374], [180.0, 1233.2500000000002], [181.0, 2964.333333333333], [182.0, 1492.3972602739727], [183.0, 1693.1428571428573], [184.0, 1505.7777777777774], [191.0, 6496.0], [190.0, 6388.0], [189.0, 8148.0], [188.0, 7673.0], [187.0, 5077.0], [185.0, 4673.0], [198.0, 2724.0], [199.0, 2458.0], [193.0, 6590.0], [192.0, 6495.0], [207.0, 4742.0], [211.0, 4924.5], [215.0, 1901.666666666667], [214.0, 6108.0], [212.0, 7787.0], [210.0, 6451.0], [209.0, 7921.0], [208.0, 4778.0], [216.0, 1109.7368421052631], [217.0, 1525.6666666666667], [218.0, 1356.8235294117646], [219.0, 1668.6206896551728], [220.0, 1815.0555555555554], [221.0, 1729.5652173913045], [229.0, 6573.0], [228.0, 7827.0], [224.0, 4354.0], [233.0, 6050.0], [245.0, 4736.0], [240.0, 5680.0], [252.0, 1837.0], [253.0, 2273.2999999999997], [254.0, 2220.642857142857], [255.0, 2339.2], [249.0, 6045.0], [258.0, 4722.0], [263.0, 2048.5], [256.0, 2248.000000000001], [257.0, 4312.0], [259.0, 4313.0], [262.0, 1957.8750000000002], [265.0, 2298.0], [269.0, 1862.6666666666667], [270.0, 2232.8620689655177], [266.0, 4485.0], [261.0, 6979.0], [260.0, 7944.0], [273.0, 2199.3333333333335], [275.0, 2947.0], [282.0, 2480.0], [272.0, 6362.0], [288.0, 4295.0], [317.0, 4292.0], [331.0, 4739.0], [348.0, 2170.0], [341.0, 4731.0], [366.0, 4867.0], [365.0, 2850.6], [367.0, 6508.0], [363.0, 6187.0], [361.0, 5128.5], [359.0, 5127.5], [357.0, 5259.0], [356.0, 4732.0], [355.0, 6956.0], [354.0, 4683.0], [382.0, 6292.0], [383.0, 6302.0], [381.0, 5990.0], [380.0, 6486.0], [379.0, 4673.0], [378.0, 6343.0], [377.0, 5282.0], [376.0, 4425.0], [375.0, 7775.0], [368.0, 8841.5], [374.0, 4681.5], [373.0, 6499.0], [372.0, 5570.5], [398.0, 4714.0], [399.0, 4310.0], [396.0, 4412.0], [387.0, 5872.5], [385.0, 4777.0], [384.0, 5212.666666666667], [395.0, 4225.5], [394.0, 5516.607843137253], [393.0, 6377.0], [392.0, 5199.0], [391.0, 5200.0], [390.0, 4446.0], [389.0, 4673.5], [410.0, 4278.0], [407.0, 4651.0], [401.0, 6788.0], [400.0, 4603.0], [420.0, 4857.0], [430.0, 4219.0], [428.0, 5721.5], [427.0, 4804.0], [424.0, 5582.1166666666695], [422.0, 4028.0], [421.0, 6767.0], [418.0, 4624.0], [437.0, 3984.5], [434.0, 6898.333333333333], [457.0, 7314.0], [503.0, 2394.0], [505.0, 2405.0], [574.0, 5048.0], [575.0, 5931.0], [561.0, 4964.0], [563.0, 4632.0], [562.0, 3711.5], [573.0, 3895.0], [572.0, 3884.5], [571.0, 3740.0], [569.0, 5448.0], [568.0, 5130.5], [559.0, 4097.099999999999], [558.0, 4751.43790849673], [566.0, 5972.0], [565.0, 3913.0], [581.0, 3655.0], [601.0, 3610.0], [600.0, 3741.0], [583.0, 5934.0], [582.0, 5519.0], [579.0, 3461.0], [578.0, 4388.0], [577.0, 5933.0], [576.0, 4614.0], [599.0, 3625.0], [598.0, 3472.5], [596.0, 5917.5], [594.0, 3459.0], [593.0, 5187.0], [591.0, 5321.0], [590.0, 5207.5], [588.0, 3435.0], [587.0, 4603.0], [586.0, 5307.0], [585.0, 3265.0], [584.0, 5815.0], [722.0, 5314.333333333333], [721.0, 5152.5], [763.0, 5138.0], [762.0, 5049.0], [755.0, 5236.0], [741.0, 6560.5], [739.0, 6765.0], [738.0, 6112.0], [796.0, 5827.0], [799.0, 4904.0], [788.0, 6080.0], [785.0, 5045.0], [798.0, 6427.0], [797.0, 4502.0], [795.0, 4801.0], [794.0, 5993.0], [793.0, 6101.0], [792.0, 7345.0], [783.0, 5171.0], [782.0, 5118.0], [791.0, 7403.0], [789.0, 4938.0], [825.0, 4674.0], [830.0, 4472.0], [831.0, 4630.0], [817.0, 4464.333333333333], [816.0, 4722.0], [819.0, 4696.0], [818.0, 4226.0], [821.0, 4587.0], [820.0, 5020.0], [829.0, 4652.0], [827.0, 4139.0], [826.0, 4348.0], [824.0, 4153.0], [806.0, 4787.0], [805.0, 4726.0], [804.0, 4343.0], [803.0, 4831.636363636363], [802.0, 5975.0], [815.0, 4212.0], [814.0, 4672.0], [813.0, 4722.0], [812.0, 5195.5], [810.0, 4735.0], [809.0, 4273.0], [808.0, 4703.5], [823.0, 4620.0], [822.0, 4173.0], [860.0, 4568.0], [863.0, 4285.0], [848.0, 5702.0], [851.0, 4087.0], [850.0, 4553.0], [853.0, 4554.0], [852.0, 4075.0], [862.0, 4568.0], [861.0, 4444.0], [859.0, 4524.0], [858.0, 5062.0], [857.0, 4098.0], [856.0, 4546.0], [844.0, 4560.0], [832.0, 4597.0], [839.0, 5513.0], [838.0, 4497.0], [843.0, 4598.0], [842.0, 4484.0], [840.0, 4108.0], [855.0, 4542.0], [854.0, 6002.0], [890.0, 4762.490909090909], [894.0, 5285.0], [895.0, 5070.0], [893.0, 6370.0], [892.0, 6346.0], [891.0, 5360.448275862068], [879.0, 4343.0], [864.0, 5193.5], [867.0, 4275.0], [865.0, 4066.0], [870.0, 4853.0], [868.0, 4018.0], [878.0, 4955.5], [877.0, 4393.0], [876.0, 7064.0], [875.0, 4413.5], [874.0, 4544.0], [873.0, 4354.0], [884.0, 3975.0], [883.0, 4436.0], [881.0, 4503.0], [880.0, 5819.0], [924.0, 4797.0], [927.0, 4764.0], [913.0, 5170.0], [912.0, 4563.0], [915.0, 4950.0], [914.0, 5168.0], [917.0, 6534.0], [916.0, 6218.0], [926.0, 4798.0], [925.0, 4647.0], [923.0, 4925.0], [922.0, 5055.0], [921.0, 4500.0], [920.0, 4888.0], [911.0, 4526.0], [897.0, 6169.0], [896.0, 4612.0], [899.0, 4975.0], [898.0, 6198.0], [901.0, 6139.0], [900.0, 6292.0], [903.0, 6018.0], [902.0, 5997.0], [910.0, 4974.0], [909.0, 5221.666666666667], [908.0, 5977.0], [907.0, 6120.0], [906.0, 6115.0], [905.0, 4995.0], [904.0, 6497.0], [919.0, 5116.0], [918.0, 4821.0], [956.0, 2731.0], [959.0, 2936.0], [945.0, 3205.0], [944.0, 3216.0], [947.0, 3189.0], [946.0, 3282.0], [949.0, 3125.0], [948.0, 2969.0], [958.0, 2248.0], [957.0, 2841.0], [955.0, 2953.0], [954.0, 2922.0], [953.0, 3024.0], [952.0, 3083.0], [943.0, 3448.0], [929.0, 4292.0], [928.0, 4130.0], [931.0, 3903.0], [930.0, 4254.0], [933.0, 3454.0], [932.0, 5093.0], [935.0, 3332.0], [934.0, 4944.0], [942.0, 3583.0], [940.0, 4206.0], [939.0, 4263.0], [938.0, 4234.0], [937.0, 4505.0], [936.0, 4851.0], [951.0, 3013.0], [950.0, 3091.0], [984.0, 2154.0], [990.0, 2135.0], [991.0, 2453.0], [977.0, 2803.0], [976.0, 2809.0], [979.0, 2494.0], [978.0, 2145.0], [989.0, 2110.0], [988.0, 2413.0], [985.0, 3134.0], [975.0, 2779.0], [961.0, 2796.0], [960.0, 2241.0], [963.0, 2851.0], [962.0, 2856.0], [965.0, 2907.0], [964.0, 2324.0], [967.0, 2835.0], [966.0, 2214.0], [974.0, 2858.0], [973.0, 2952.0], [972.0, 2801.0], [971.0, 2837.0], [970.0, 2315.0], [969.0, 2198.0], [968.0, 2834.0], [983.0, 2472.0], [982.0, 2587.0], [981.0, 2692.0], [980.0, 2583.0], [996.0, 2486.0], [1000.0, 2586.0645161290327], [999.0, 2649.0], [998.0, 2860.0], [997.0, 2470.0], [995.0, 2308.0], [994.0, 1974.0], [993.0, 2514.0], [992.0, 2553.5]], "isOverall": false, "label": "Healthy Thinking", "isController": false}, {"data": [[283.5808109651625, 2291.049400342658]], "isOverall": false, "label": "Healthy Thinking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 90.0, "minX": 1.62773903E12, "maxY": 4464370.5, "series": [{"data": [[1.62773903E12, 15781.9], [1.62773907E12, 4464370.5], [1.62773906E12, 3308766.7], [1.62773905E12, 23666.8], [1.62773904E12, 19726.7], [1.62773909E12, 3123489.6], [1.62773908E12, 2855311.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62773903E12, 90.0], [1.62773907E12, 25470.0], [1.62773906E12, 18877.5], [1.62773905E12, 135.0], [1.62773904E12, 112.5], [1.62773909E12, 17820.0], [1.62773908E12, 16290.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773909E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 531.3098927294404, "minX": 1.62773903E12, "maxY": 20684.333333333332, "series": [{"data": [[1.62773903E12, 7627.5], [1.62773907E12, 1145.0600706713772], [1.62773906E12, 531.3098927294404], [1.62773905E12, 20684.333333333332], [1.62773904E12, 11743.6], [1.62773909E12, 5196.220959595955], [1.62773908E12, 2696.874309392264]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773909E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 524.0727056019076, "minX": 1.62773903E12, "maxY": 20548.666666666664, "series": [{"data": [[1.62773903E12, 7552.5], [1.62773907E12, 1121.8701413427557], [1.62773906E12, 524.0727056019076], [1.62773905E12, 20548.666666666664], [1.62773904E12, 11667.2], [1.62773909E12, 5164.691919191918], [1.62773908E12, 2652.255524861877]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773909E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 208.5, "minX": 1.62773903E12, "maxY": 5102.4128787878735, "series": [{"data": [[1.62773903E12, 208.5], [1.62773907E12, 1069.6819787985874], [1.62773906E12, 335.4445768772347], [1.62773905E12, 262.0], [1.62773904E12, 230.0], [1.62773909E12, 5102.4128787878735], [1.62773908E12, 2526.0082872928183]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773909E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 65.0, "minX": 1.62773903E12, "maxY": 30109.0, "series": [{"data": [[1.62773903E12, 8428.0], [1.62773907E12, 2617.0], [1.62773906E12, 30109.0], [1.62773905E12, 23866.0], [1.62773904E12, 13795.0], [1.62773909E12, 9506.0], [1.62773908E12, 7161.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62773903E12, 7334.0], [1.62773907E12, 238.0], [1.62773906E12, 65.0], [1.62773905E12, 16229.0], [1.62773904E12, 7858.0], [1.62773909E12, 3237.0], [1.62773908E12, 431.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62773903E12, 8428.0], [1.62773907E12, 1649.4], [1.62773906E12, 628.0], [1.62773905E12, 23866.0], [1.62773904E12, 13795.0], [1.62773909E12, 6850.4000000000015], [1.62773908E12, 5248.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62773903E12, 8428.0], [1.62773907E12, 2276.5400000000045], [1.62773906E12, 877.6000000000001], [1.62773905E12, 23866.0], [1.62773904E12, 13795.0], [1.62773909E12, 8498.789999999994], [1.62773908E12, 6530.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62773903E12, 8428.0], [1.62773907E12, 1767.499999999999], [1.62773906E12, 703.0], [1.62773905E12, 23866.0], [1.62773904E12, 13795.0], [1.62773909E12, 7497.2999999999965], [1.62773908E12, 5580.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773909E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 98.0, "minX": 1.0, "maxY": 15012.0, "series": [{"data": [[2.0, 12603.0], [3.0, 7355.0], [58.0, 2755.0], [75.0, 100.0], [83.0, 1290.0], [5.0, 4263.0], [88.0, 1085.5], [93.0, 162.0], [94.0, 2448.5], [97.0, 508.0], [101.0, 569.0], [103.0, 1328.0], [102.0, 1366.0], [107.0, 280.0], [106.0, 368.0], [109.0, 322.0], [114.0, 632.0], [115.0, 857.5], [112.0, 896.0], [113.0, 2127.0], [121.0, 1744.0], [129.0, 531.0], [133.0, 1124.0], [8.0, 4192.0], [132.0, 5282.5], [140.0, 1396.5], [178.0, 4548.0], [255.0, 4360.0], [1.0, 15012.0], [359.0, 5153.0], [23.0, 98.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 359.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 95.0, "minX": 1.0, "maxY": 14956.0, "series": [{"data": [[2.0, 12534.0], [3.0, 7291.0], [58.0, 2583.5], [75.0, 98.0], [83.0, 1289.0], [5.0, 4257.0], [88.0, 1082.0], [93.0, 159.0], [94.0, 2447.5], [97.0, 478.0], [101.0, 562.0], [103.0, 1327.0], [102.0, 1349.0], [107.0, 275.0], [106.0, 359.0], [109.0, 319.0], [114.0, 631.0], [115.0, 839.0], [112.0, 890.0], [113.0, 2027.0], [121.0, 1687.0], [129.0, 520.0], [133.0, 1119.0], [8.0, 4015.5], [132.0, 5281.5], [140.0, 1340.0], [178.0, 4536.5], [255.0, 4315.0], [1.0, 14956.0], [359.0, 5146.0], [23.0, 95.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 359.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.62773902E12, "maxY": 130.3, "series": [{"data": [[1.62773903E12, 1.9], [1.62773902E12, 0.1], [1.62773907E12, 126.1], [1.62773906E12, 91.8], [1.62773908E12, 130.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773908E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.62773903E12, "maxY": 113.2, "series": [{"data": [[1.62773903E12, 0.4], [1.62773907E12, 113.2], [1.62773906E12, 83.9], [1.62773905E12, 0.6], [1.62773904E12, 0.5], [1.62773909E12, 79.2], [1.62773908E12, 72.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62773909E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.62773903E12, "maxY": 113.2, "series": [{"data": [[1.62773903E12, 0.4], [1.62773907E12, 113.2], [1.62773906E12, 83.9], [1.62773905E12, 0.6], [1.62773904E12, 0.5], [1.62773909E12, 79.2], [1.62773908E12, 72.4]], "isOverall": false, "label": "Healthy Thinking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773909E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.62773903E12, "maxY": 113.2, "series": [{"data": [[1.62773903E12, 0.4], [1.62773907E12, 113.2], [1.62773906E12, 83.9], [1.62773905E12, 0.6], [1.62773904E12, 0.5], [1.62773909E12, 79.2], [1.62773908E12, 72.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62773909E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

