/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "maxY": 17820.0, "series": [{"data": [[0.0, 40.0], [0.1, 57.0], [0.2, 69.0], [0.3, 83.0], [0.4, 92.0], [0.5, 103.0], [0.6, 111.0], [0.7, 114.0], [0.8, 119.0], [0.9, 123.0], [1.0, 128.0], [1.1, 131.0], [1.2, 135.0], [1.3, 140.0], [1.4, 144.0], [1.5, 147.0], [1.6, 151.0], [1.7, 168.0], [1.8, 179.0], [1.9, 188.0], [2.0, 200.0], [2.1, 216.0], [2.2, 223.0], [2.3, 232.0], [2.4, 244.0], [2.5, 254.0], [2.6, 266.0], [2.7, 272.0], [2.8, 285.0], [2.9, 289.0], [3.0, 302.0], [3.1, 308.0], [3.2, 317.0], [3.3, 323.0], [3.4, 332.0], [3.5, 338.0], [3.6, 352.0], [3.7, 356.0], [3.8, 366.0], [3.9, 373.0], [4.0, 381.0], [4.1, 392.0], [4.2, 406.0], [4.3, 419.0], [4.4, 434.0], [4.5, 461.0], [4.6, 487.0], [4.7, 497.0], [4.8, 509.0], [4.9, 528.0], [5.0, 538.0], [5.1, 543.0], [5.2, 556.0], [5.3, 562.0], [5.4, 576.0], [5.5, 579.0], [5.6, 599.0], [5.7, 608.0], [5.8, 616.0], [5.9, 626.0], [6.0, 632.0], [6.1, 636.0], [6.2, 645.0], [6.3, 655.0], [6.4, 664.0], [6.5, 673.0], [6.6, 683.0], [6.7, 694.0], [6.8, 703.0], [6.9, 715.0], [7.0, 724.0], [7.1, 729.0], [7.2, 736.0], [7.3, 739.0], [7.4, 747.0], [7.5, 751.0], [7.6, 759.0], [7.7, 767.0], [7.8, 780.0], [7.9, 784.0], [8.0, 792.0], [8.1, 796.0], [8.2, 803.0], [8.3, 807.0], [8.4, 809.0], [8.5, 816.0], [8.6, 820.0], [8.7, 828.0], [8.8, 838.0], [8.9, 843.0], [9.0, 850.0], [9.1, 859.0], [9.2, 868.0], [9.3, 872.0], [9.4, 878.0], [9.5, 886.0], [9.6, 891.0], [9.7, 896.0], [9.8, 904.0], [9.9, 913.0], [10.0, 918.0], [10.1, 924.0], [10.2, 929.0], [10.3, 935.0], [10.4, 941.0], [10.5, 948.0], [10.6, 953.0], [10.7, 956.0], [10.8, 960.0], [10.9, 965.0], [11.0, 970.0], [11.1, 975.0], [11.2, 979.0], [11.3, 983.0], [11.4, 991.0], [11.5, 996.0], [11.6, 1000.0], [11.7, 1004.0], [11.8, 1010.0], [11.9, 1013.0], [12.0, 1017.0], [12.1, 1022.0], [12.2, 1026.0], [12.3, 1030.0], [12.4, 1036.0], [12.5, 1039.0], [12.6, 1043.0], [12.7, 1058.0], [12.8, 1059.0], [12.9, 1064.0], [13.0, 1069.0], [13.1, 1077.0], [13.2, 1082.0], [13.3, 1090.0], [13.4, 1095.0], [13.5, 1098.0], [13.6, 1105.0], [13.7, 1108.0], [13.8, 1116.0], [13.9, 1124.0], [14.0, 1128.0], [14.1, 1134.0], [14.2, 1138.0], [14.3, 1141.0], [14.4, 1151.0], [14.5, 1156.0], [14.6, 1159.0], [14.7, 1164.0], [14.8, 1173.0], [14.9, 1180.0], [15.0, 1187.0], [15.1, 1196.0], [15.2, 1203.0], [15.3, 1208.0], [15.4, 1216.0], [15.5, 1223.0], [15.6, 1227.0], [15.7, 1231.0], [15.8, 1235.0], [15.9, 1238.0], [16.0, 1243.0], [16.1, 1250.0], [16.2, 1256.0], [16.3, 1260.0], [16.4, 1267.0], [16.5, 1272.0], [16.6, 1280.0], [16.7, 1292.0], [16.8, 1296.0], [16.9, 1301.0], [17.0, 1304.0], [17.1, 1312.0], [17.2, 1320.0], [17.3, 1324.0], [17.4, 1330.0], [17.5, 1335.0], [17.6, 1342.0], [17.7, 1352.0], [17.8, 1358.0], [17.9, 1367.0], [18.0, 1371.0], [18.1, 1375.0], [18.2, 1380.0], [18.3, 1383.0], [18.4, 1385.0], [18.5, 1392.0], [18.6, 1398.0], [18.7, 1405.0], [18.8, 1412.0], [18.9, 1417.0], [19.0, 1422.0], [19.1, 1426.0], [19.2, 1429.0], [19.3, 1435.0], [19.4, 1441.0], [19.5, 1448.0], [19.6, 1451.0], [19.7, 1456.0], [19.8, 1464.0], [19.9, 1469.0], [20.0, 1472.0], [20.1, 1478.0], [20.2, 1480.0], [20.3, 1486.0], [20.4, 1495.0], [20.5, 1499.0], [20.6, 1504.0], [20.7, 1507.0], [20.8, 1511.0], [20.9, 1516.0], [21.0, 1519.0], [21.1, 1525.0], [21.2, 1526.0], [21.3, 1534.0], [21.4, 1542.0], [21.5, 1546.0], [21.6, 1550.0], [21.7, 1554.0], [21.8, 1559.0], [21.9, 1562.0], [22.0, 1567.0], [22.1, 1572.0], [22.2, 1579.0], [22.3, 1583.0], [22.4, 1592.0], [22.5, 1598.0], [22.6, 1603.0], [22.7, 1606.0], [22.8, 1609.0], [22.9, 1620.0], [23.0, 1627.0], [23.1, 1630.0], [23.2, 1642.0], [23.3, 1653.0], [23.4, 1656.0], [23.5, 1660.0], [23.6, 1665.0], [23.7, 1676.0], [23.8, 1680.0], [23.9, 1691.0], [24.0, 1695.0], [24.1, 1701.0], [24.2, 1707.0], [24.3, 1715.0], [24.4, 1724.0], [24.5, 1746.0], [24.6, 1753.0], [24.7, 1766.0], [24.8, 1782.0], [24.9, 1801.0], [25.0, 1807.0], [25.1, 1826.0], [25.2, 1839.0], [25.3, 1854.0], [25.4, 1866.0], [25.5, 1872.0], [25.6, 1886.0], [25.7, 1901.0], [25.8, 1907.0], [25.9, 1917.0], [26.0, 1928.0], [26.1, 1943.0], [26.2, 1947.0], [26.3, 1961.0], [26.4, 1970.0], [26.5, 1977.0], [26.6, 1986.0], [26.7, 1993.0], [26.8, 1997.0], [26.9, 2004.0], [27.0, 2010.0], [27.1, 2016.0], [27.2, 2022.0], [27.3, 2026.0], [27.4, 2030.0], [27.5, 2043.0], [27.6, 2046.0], [27.7, 2056.0], [27.8, 2063.0], [27.9, 2072.0], [28.0, 2078.0], [28.1, 2086.0], [28.2, 2094.0], [28.3, 2100.0], [28.4, 2110.0], [28.5, 2122.0], [28.6, 2131.0], [28.7, 2141.0], [28.8, 2144.0], [28.9, 2153.0], [29.0, 2159.0], [29.1, 2177.0], [29.2, 2190.0], [29.3, 2198.0], [29.4, 2201.0], [29.5, 2218.0], [29.6, 2239.0], [29.7, 2252.0], [29.8, 2263.0], [29.9, 2276.0], [30.0, 2288.0], [30.1, 2301.0], [30.2, 2309.0], [30.3, 2318.0], [30.4, 2335.0], [30.5, 2346.0], [30.6, 2356.0], [30.7, 2371.0], [30.8, 2380.0], [30.9, 2387.0], [31.0, 2392.0], [31.1, 2401.0], [31.2, 2406.0], [31.3, 2415.0], [31.4, 2422.0], [31.5, 2432.0], [31.6, 2436.0], [31.7, 2446.0], [31.8, 2453.0], [31.9, 2459.0], [32.0, 2470.0], [32.1, 2478.0], [32.2, 2484.0], [32.3, 2494.0], [32.4, 2510.0], [32.5, 2532.0], [32.6, 2549.0], [32.7, 2568.0], [32.8, 2573.0], [32.9, 2579.0], [33.0, 2587.0], [33.1, 2598.0], [33.2, 2614.0], [33.3, 2629.0], [33.4, 2639.0], [33.5, 2647.0], [33.6, 2656.0], [33.7, 2671.0], [33.8, 2686.0], [33.9, 2695.0], [34.0, 2704.0], [34.1, 2714.0], [34.2, 2721.0], [34.3, 2730.0], [34.4, 2743.0], [34.5, 2754.0], [34.6, 2764.0], [34.7, 2774.0], [34.8, 2782.0], [34.9, 2788.0], [35.0, 2795.0], [35.1, 2806.0], [35.2, 2818.0], [35.3, 2834.0], [35.4, 2842.0], [35.5, 2847.0], [35.6, 2858.0], [35.7, 2870.0], [35.8, 2881.0], [35.9, 2891.0], [36.0, 2899.0], [36.1, 2905.0], [36.2, 2916.0], [36.3, 2922.0], [36.4, 2931.0], [36.5, 2942.0], [36.6, 2957.0], [36.7, 2964.0], [36.8, 2977.0], [36.9, 2994.0], [37.0, 3006.0], [37.1, 3015.0], [37.2, 3029.0], [37.3, 3036.0], [37.4, 3050.0], [37.5, 3063.0], [37.6, 3068.0], [37.7, 3084.0], [37.8, 3093.0], [37.9, 3097.0], [38.0, 3114.0], [38.1, 3126.0], [38.2, 3140.0], [38.3, 3149.0], [38.4, 3156.0], [38.5, 3159.0], [38.6, 3166.0], [38.7, 3173.0], [38.8, 3177.0], [38.9, 3185.0], [39.0, 3191.0], [39.1, 3195.0], [39.2, 3205.0], [39.3, 3209.0], [39.4, 3217.0], [39.5, 3222.0], [39.6, 3229.0], [39.7, 3240.0], [39.8, 3242.0], [39.9, 3247.0], [40.0, 3257.0], [40.1, 3271.0], [40.2, 3280.0], [40.3, 3285.0], [40.4, 3290.0], [40.5, 3298.0], [40.6, 3304.0], [40.7, 3312.0], [40.8, 3323.0], [40.9, 3329.0], [41.0, 3339.0], [41.1, 3343.0], [41.2, 3346.0], [41.3, 3349.0], [41.4, 3361.0], [41.5, 3366.0], [41.6, 3378.0], [41.7, 3384.0], [41.8, 3398.0], [41.9, 3406.0], [42.0, 3413.0], [42.1, 3416.0], [42.2, 3425.0], [42.3, 3431.0], [42.4, 3442.0], [42.5, 3457.0], [42.6, 3467.0], [42.7, 3478.0], [42.8, 3485.0], [42.9, 3492.0], [43.0, 3501.0], [43.1, 3514.0], [43.2, 3524.0], [43.3, 3535.0], [43.4, 3544.0], [43.5, 3558.0], [43.6, 3567.0], [43.7, 3575.0], [43.8, 3585.0], [43.9, 3589.0], [44.0, 3599.0], [44.1, 3606.0], [44.2, 3617.0], [44.3, 3621.0], [44.4, 3633.0], [44.5, 3641.0], [44.6, 3653.0], [44.7, 3655.0], [44.8, 3665.0], [44.9, 3671.0], [45.0, 3677.0], [45.1, 3688.0], [45.2, 3693.0], [45.3, 3698.0], [45.4, 3707.0], [45.5, 3715.0], [45.6, 3725.0], [45.7, 3735.0], [45.8, 3742.0], [45.9, 3747.0], [46.0, 3760.0], [46.1, 3768.0], [46.2, 3780.0], [46.3, 3795.0], [46.4, 3802.0], [46.5, 3812.0], [46.6, 3831.0], [46.7, 3839.0], [46.8, 3847.0], [46.9, 3854.0], [47.0, 3861.0], [47.1, 3866.0], [47.2, 3871.0], [47.3, 3879.0], [47.4, 3893.0], [47.5, 3901.0], [47.6, 3909.0], [47.7, 3916.0], [47.8, 3923.0], [47.9, 3930.0], [48.0, 3940.0], [48.1, 3946.0], [48.2, 3955.0], [48.3, 3966.0], [48.4, 3969.0], [48.5, 3975.0], [48.6, 3978.0], [48.7, 3990.0], [48.8, 3999.0], [48.9, 4004.0], [49.0, 4009.0], [49.1, 4014.0], [49.2, 4019.0], [49.3, 4027.0], [49.4, 4033.0], [49.5, 4038.0], [49.6, 4048.0], [49.7, 4053.0], [49.8, 4063.0], [49.9, 4069.0], [50.0, 4084.0], [50.1, 4095.0], [50.2, 4099.0], [50.3, 4112.0], [50.4, 4123.0], [50.5, 4130.0], [50.6, 4135.0], [50.7, 4152.0], [50.8, 4164.0], [50.9, 4174.0], [51.0, 4190.0], [51.1, 4199.0], [51.2, 4211.0], [51.3, 4221.0], [51.4, 4228.0], [51.5, 4239.0], [51.6, 4248.0], [51.7, 4255.0], [51.8, 4268.0], [51.9, 4278.0], [52.0, 4285.0], [52.1, 4293.0], [52.2, 4298.0], [52.3, 4302.0], [52.4, 4311.0], [52.5, 4318.0], [52.6, 4327.0], [52.7, 4336.0], [52.8, 4344.0], [52.9, 4352.0], [53.0, 4360.0], [53.1, 4368.0], [53.2, 4381.0], [53.3, 4393.0], [53.4, 4400.0], [53.5, 4408.0], [53.6, 4412.0], [53.7, 4419.0], [53.8, 4424.0], [53.9, 4431.0], [54.0, 4440.0], [54.1, 4446.0], [54.2, 4463.0], [54.3, 4472.0], [54.4, 4480.0], [54.5, 4488.0], [54.6, 4493.0], [54.7, 4503.0], [54.8, 4514.0], [54.9, 4524.0], [55.0, 4531.0], [55.1, 4534.0], [55.2, 4540.0], [55.3, 4548.0], [55.4, 4553.0], [55.5, 4563.0], [55.6, 4578.0], [55.7, 4589.0], [55.8, 4597.0], [55.9, 4605.0], [56.0, 4611.0], [56.1, 4618.0], [56.2, 4626.0], [56.3, 4639.0], [56.4, 4645.0], [56.5, 4650.0], [56.6, 4653.0], [56.7, 4660.0], [56.8, 4663.0], [56.9, 4670.0], [57.0, 4674.0], [57.1, 4678.0], [57.2, 4682.0], [57.3, 4696.0], [57.4, 4700.0], [57.5, 4706.0], [57.6, 4716.0], [57.7, 4723.0], [57.8, 4729.0], [57.9, 4740.0], [58.0, 4746.0], [58.1, 4754.0], [58.2, 4761.0], [58.3, 4770.0], [58.4, 4776.0], [58.5, 4791.0], [58.6, 4795.0], [58.7, 4806.0], [58.8, 4810.0], [58.9, 4814.0], [59.0, 4816.0], [59.1, 4821.0], [59.2, 4833.0], [59.3, 4836.0], [59.4, 4839.0], [59.5, 4847.0], [59.6, 4855.0], [59.7, 4866.0], [59.8, 4871.0], [59.9, 4875.0], [60.0, 4879.0], [60.1, 4888.0], [60.2, 4895.0], [60.3, 4906.0], [60.4, 4909.0], [60.5, 4913.0], [60.6, 4918.0], [60.7, 4926.0], [60.8, 4932.0], [60.9, 4942.0], [61.0, 4949.0], [61.1, 4955.0], [61.2, 4963.0], [61.3, 4973.0], [61.4, 4984.0], [61.5, 4991.0], [61.6, 4999.0], [61.7, 5008.0], [61.8, 5015.0], [61.9, 5025.0], [62.0, 5032.0], [62.1, 5044.0], [62.2, 5049.0], [62.3, 5058.0], [62.4, 5069.0], [62.5, 5075.0], [62.6, 5080.0], [62.7, 5095.0], [62.8, 5107.0], [62.9, 5120.0], [63.0, 5127.0], [63.1, 5132.0], [63.2, 5138.0], [63.3, 5147.0], [63.4, 5151.0], [63.5, 5159.0], [63.6, 5163.0], [63.7, 5169.0], [63.8, 5181.0], [63.9, 5188.0], [64.0, 5191.0], [64.1, 5199.0], [64.2, 5203.0], [64.3, 5210.0], [64.4, 5213.0], [64.5, 5218.0], [64.6, 5222.0], [64.7, 5228.0], [64.8, 5233.0], [64.9, 5241.0], [65.0, 5245.0], [65.1, 5252.0], [65.2, 5255.0], [65.3, 5262.0], [65.4, 5266.0], [65.5, 5272.0], [65.6, 5276.0], [65.7, 5287.0], [65.8, 5289.0], [65.9, 5295.0], [66.0, 5300.0], [66.1, 5306.0], [66.2, 5309.0], [66.3, 5317.0], [66.4, 5321.0], [66.5, 5325.0], [66.6, 5331.0], [66.7, 5334.0], [66.8, 5341.0], [66.9, 5348.0], [67.0, 5352.0], [67.1, 5355.0], [67.2, 5362.0], [67.3, 5366.0], [67.4, 5371.0], [67.5, 5379.0], [67.6, 5383.0], [67.7, 5390.0], [67.8, 5393.0], [67.9, 5399.0], [68.0, 5408.0], [68.1, 5413.0], [68.2, 5427.0], [68.3, 5431.0], [68.4, 5440.0], [68.5, 5445.0], [68.6, 5454.0], [68.7, 5460.0], [68.8, 5475.0], [68.9, 5483.0], [69.0, 5492.0], [69.1, 5496.0], [69.2, 5503.0], [69.3, 5508.0], [69.4, 5515.0], [69.5, 5519.0], [69.6, 5523.0], [69.7, 5530.0], [69.8, 5539.0], [69.9, 5550.0], [70.0, 5556.0], [70.1, 5560.0], [70.2, 5573.0], [70.3, 5579.0], [70.4, 5588.0], [70.5, 5600.0], [70.6, 5608.0], [70.7, 5612.0], [70.8, 5621.0], [70.9, 5628.0], [71.0, 5635.0], [71.1, 5645.0], [71.2, 5652.0], [71.3, 5662.0], [71.4, 5672.0], [71.5, 5686.0], [71.6, 5697.0], [71.7, 5703.0], [71.8, 5717.0], [71.9, 5721.0], [72.0, 5727.0], [72.1, 5737.0], [72.2, 5741.0], [72.3, 5747.0], [72.4, 5752.0], [72.5, 5764.0], [72.6, 5772.0], [72.7, 5780.0], [72.8, 5786.0], [72.9, 5790.0], [73.0, 5798.0], [73.1, 5802.0], [73.2, 5807.0], [73.3, 5812.0], [73.4, 5819.0], [73.5, 5825.0], [73.6, 5833.0], [73.7, 5837.0], [73.8, 5844.0], [73.9, 5857.0], [74.0, 5863.0], [74.1, 5868.0], [74.2, 5871.0], [74.3, 5883.0], [74.4, 5887.0], [74.5, 5892.0], [74.6, 5897.0], [74.7, 5902.0], [74.8, 5912.0], [74.9, 5916.0], [75.0, 5929.0], [75.1, 5934.0], [75.2, 5939.0], [75.3, 5944.0], [75.4, 5949.0], [75.5, 5955.0], [75.6, 5963.0], [75.7, 5974.0], [75.8, 5989.0], [75.9, 5996.0], [76.0, 6007.0], [76.1, 6011.0], [76.2, 6019.0], [76.3, 6024.0], [76.4, 6028.0], [76.5, 6031.0], [76.6, 6041.0], [76.7, 6049.0], [76.8, 6063.0], [76.9, 6067.0], [77.0, 6074.0], [77.1, 6079.0], [77.2, 6088.0], [77.3, 6092.0], [77.4, 6099.0], [77.5, 6103.0], [77.6, 6111.0], [77.7, 6117.0], [77.8, 6125.0], [77.9, 6132.0], [78.0, 6137.0], [78.1, 6143.0], [78.2, 6155.0], [78.3, 6159.0], [78.4, 6175.0], [78.5, 6185.0], [78.6, 6196.0], [78.7, 6212.0], [78.8, 6222.0], [78.9, 6228.0], [79.0, 6240.0], [79.1, 6245.0], [79.2, 6255.0], [79.3, 6262.0], [79.4, 6268.0], [79.5, 6278.0], [79.6, 6284.0], [79.7, 6290.0], [79.8, 6297.0], [79.9, 6303.0], [80.0, 6308.0], [80.1, 6318.0], [80.2, 6336.0], [80.3, 6344.0], [80.4, 6349.0], [80.5, 6365.0], [80.6, 6374.0], [80.7, 6380.0], [80.8, 6399.0], [80.9, 6406.0], [81.0, 6419.0], [81.1, 6431.0], [81.2, 6440.0], [81.3, 6444.0], [81.4, 6454.0], [81.5, 6465.0], [81.6, 6478.0], [81.7, 6490.0], [81.8, 6498.0], [81.9, 6515.0], [82.0, 6525.0], [82.1, 6531.0], [82.2, 6538.0], [82.3, 6548.0], [82.4, 6563.0], [82.5, 6573.0], [82.6, 6582.0], [82.7, 6593.0], [82.8, 6603.0], [82.9, 6616.0], [83.0, 6627.0], [83.1, 6640.0], [83.2, 6650.0], [83.3, 6661.0], [83.4, 6672.0], [83.5, 6686.0], [83.6, 6696.0], [83.7, 6711.0], [83.8, 6724.0], [83.9, 6734.0], [84.0, 6738.0], [84.1, 6753.0], [84.2, 6764.0], [84.3, 6770.0], [84.4, 6782.0], [84.5, 6797.0], [84.6, 6807.0], [84.7, 6824.0], [84.8, 6835.0], [84.9, 6854.0], [85.0, 6871.0], [85.1, 6881.0], [85.2, 6887.0], [85.3, 6895.0], [85.4, 6913.0], [85.5, 6937.0], [85.6, 6944.0], [85.7, 6966.0], [85.8, 6973.0], [85.9, 6982.0], [86.0, 6995.0], [86.1, 7016.0], [86.2, 7030.0], [86.3, 7047.0], [86.4, 7067.0], [86.5, 7082.0], [86.6, 7103.0], [86.7, 7112.0], [86.8, 7121.0], [86.9, 7133.0], [87.0, 7142.0], [87.1, 7153.0], [87.2, 7160.0], [87.3, 7172.0], [87.4, 7183.0], [87.5, 7191.0], [87.6, 7196.0], [87.7, 7209.0], [87.8, 7221.0], [87.9, 7243.0], [88.0, 7251.0], [88.1, 7266.0], [88.2, 7282.0], [88.3, 7299.0], [88.4, 7314.0], [88.5, 7322.0], [88.6, 7328.0], [88.7, 7347.0], [88.8, 7356.0], [88.9, 7375.0], [89.0, 7388.0], [89.1, 7414.0], [89.2, 7430.0], [89.3, 7447.0], [89.4, 7464.0], [89.5, 7481.0], [89.6, 7494.0], [89.7, 7518.0], [89.8, 7534.0], [89.9, 7562.0], [90.0, 7576.0], [90.1, 7612.0], [90.2, 7637.0], [90.3, 7654.0], [90.4, 7678.0], [90.5, 7692.0], [90.6, 7701.0], [90.7, 7721.0], [90.8, 7746.0], [90.9, 7772.0], [91.0, 7787.0], [91.1, 7804.0], [91.2, 7827.0], [91.3, 7840.0], [91.4, 7854.0], [91.5, 7861.0], [91.6, 7875.0], [91.7, 7888.0], [91.8, 7904.0], [91.9, 7912.0], [92.0, 7921.0], [92.1, 7932.0], [92.2, 7941.0], [92.3, 7955.0], [92.4, 7974.0], [92.5, 7988.0], [92.6, 8017.0], [92.7, 8043.0], [92.8, 8057.0], [92.9, 8083.0], [93.0, 8093.0], [93.1, 8103.0], [93.2, 8113.0], [93.3, 8135.0], [93.4, 8151.0], [93.5, 8164.0], [93.6, 8172.0], [93.7, 8181.0], [93.8, 8192.0], [93.9, 8202.0], [94.0, 8212.0], [94.1, 8227.0], [94.2, 8250.0], [94.3, 8274.0], [94.4, 8293.0], [94.5, 8317.0], [94.6, 8342.0], [94.7, 8370.0], [94.8, 8405.0], [94.9, 8443.0], [95.0, 8478.0], [95.1, 8491.0], [95.2, 8504.0], [95.3, 8523.0], [95.4, 8547.0], [95.5, 8604.0], [95.6, 8646.0], [95.7, 8672.0], [95.8, 8718.0], [95.9, 8759.0], [96.0, 8782.0], [96.1, 8816.0], [96.2, 8843.0], [96.3, 8880.0], [96.4, 8913.0], [96.5, 8966.0], [96.6, 8994.0], [96.7, 9051.0], [96.8, 9084.0], [96.9, 9138.0], [97.0, 9169.0], [97.1, 9197.0], [97.2, 9240.0], [97.3, 9294.0], [97.4, 9323.0], [97.5, 9357.0], [97.6, 9387.0], [97.7, 9447.0], [97.8, 9483.0], [97.9, 9524.0], [98.0, 9555.0], [98.1, 9613.0], [98.2, 9819.0], [98.3, 9945.0], [98.4, 10291.0], [98.5, 10452.0], [98.6, 10630.0], [98.7, 10775.0], [98.8, 10936.0], [98.9, 11035.0], [99.0, 11188.0], [99.1, 11407.0], [99.2, 11556.0], [99.3, 11770.0], [99.4, 11914.0], [99.5, 12031.0], [99.6, 12243.0], [99.7, 12456.0], [99.8, 12663.0], [99.9, 14105.0], [100.0, 17820.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 150.0, "series": [{"data": [[0.0, 34.0], [100.0, 116.0], [200.0, 74.0], [300.0, 87.0], [400.0, 43.0], [500.0, 67.0], [600.0, 86.0], [700.0, 104.0], [800.0, 118.0], [900.0, 141.0], [1000.0, 144.0], [1100.0, 121.0], [1200.0, 131.0], [1300.0, 132.0], [1400.0, 142.0], [1500.0, 150.0], [1600.0, 116.0], [1700.0, 62.0], [1800.0, 58.0], [1900.0, 86.0], [2000.0, 111.0], [2100.0, 79.0], [2200.0, 55.0], [2300.0, 75.0], [2400.0, 93.0], [2500.0, 59.0], [2600.0, 64.0], [2800.0, 74.0], [2700.0, 81.0], [2900.0, 69.0], [3000.0, 73.0], [3100.0, 95.0], [3200.0, 100.0], [3300.0, 97.0], [3400.0, 86.0], [3500.0, 79.0], [3700.0, 78.0], [3600.0, 97.0], [3800.0, 83.0], [3900.0, 103.0], [4000.0, 104.0], [4100.0, 68.0], [4200.0, 83.0], [4300.0, 88.0], [4500.0, 86.0], [4400.0, 96.0], [4600.0, 116.0], [4800.0, 116.0], [4700.0, 98.0], [4900.0, 104.0], [5100.0, 101.0], [5000.0, 88.0], [5200.0, 140.0], [5300.0, 144.0], [5400.0, 92.0], [5500.0, 101.0], [5600.0, 87.0], [5700.0, 105.0], [5800.0, 121.0], [6100.0, 90.0], [5900.0, 98.0], [6000.0, 109.0], [6200.0, 93.0], [6300.0, 72.0], [6500.0, 71.0], [6400.0, 76.0], [6600.0, 64.0], [6700.0, 70.0], [6800.0, 60.0], [6900.0, 49.0], [7000.0, 41.0], [7100.0, 80.0], [7300.0, 55.0], [7400.0, 43.0], [7200.0, 52.0], [7600.0, 38.0], [7500.0, 34.0], [7700.0, 37.0], [7800.0, 52.0], [7900.0, 58.0], [8000.0, 39.0], [8100.0, 63.0], [8700.0, 22.0], [8200.0, 40.0], [8500.0, 25.0], [8300.0, 27.0], [8400.0, 28.0], [8600.0, 20.0], [9000.0, 16.0], [9100.0, 20.0], [8900.0, 20.0], [8800.0, 23.0], [9200.0, 15.0], [9400.0, 16.0], [9300.0, 25.0], [9500.0, 18.0], [9600.0, 5.0], [9700.0, 1.0], [10100.0, 2.0], [9900.0, 9.0], [10200.0, 2.0], [9800.0, 4.0], [10300.0, 5.0], [10600.0, 7.0], [10700.0, 5.0], [10500.0, 4.0], [10400.0, 3.0], [11000.0, 5.0], [11200.0, 4.0], [10900.0, 6.0], [11100.0, 5.0], [10800.0, 5.0], [11600.0, 3.0], [11400.0, 6.0], [11300.0, 3.0], [11700.0, 7.0], [11500.0, 2.0], [11900.0, 6.0], [12000.0, 6.0], [12100.0, 3.0], [12200.0, 3.0], [11800.0, 3.0], [12300.0, 5.0], [12600.0, 6.0], [12400.0, 3.0], [12500.0, 2.0], [12700.0, 1.0], [13000.0, 1.0], [13500.0, 1.0], [13600.0, 1.0], [14000.0, 1.0], [14100.0, 1.0], [14500.0, 2.0], [15500.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [17300.0, 1.0], [17800.0, 1.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 354.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5962.0, "series": [{"data": [[0.0, 354.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1187.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5962.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.5, "minX": 1.62625034E12, "maxY": 851.6717625899279, "series": [{"data": [[1.6262504E12, 797.6309403437807], [1.62625041E12, 851.6717625899279], [1.62625038E12, 598.1503604531406], [1.62625039E12, 682.9963846710048], [1.62625036E12, 230.4882400648825], [1.62625037E12, 545.1608863198463], [1.62625034E12, 15.5], [1.62625035E12, 77.38591916558015]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625041E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 54.0, "minX": 10.0, "maxY": 17111.0, "series": [{"data": [[10.0, 6217.5], [11.0, 4757.5], [12.0, 9148.0], [13.0, 9071.0], [14.0, 9063.0], [15.0, 8748.0], [16.0, 5809.0], [17.0, 4999.0], [18.0, 5714.0], [19.0, 4807.0], [20.0, 351.79012345679], [21.0, 539.7941176470589], [23.0, 228.0], [35.0, 605.6585365853663], [36.0, 277.4], [39.0, 291.125], [40.0, 372.0], [41.0, 331.5], [44.0, 312.3333333333333], [45.0, 320.0], [46.0, 329.5], [47.0, 327.0], [48.0, 360.0], [49.0, 340.5], [50.0, 356.1000000000001], [51.0, 379.0], [52.0, 351.8], [53.0, 341.3333333333333], [54.0, 408.0], [55.0, 425.6], [56.0, 401.0], [58.0, 383.6666666666667], [59.0, 408.0], [60.0, 460.6842105263158], [61.0, 307.0], [63.0, 7964.0], [67.0, 54.0], [66.0, 54.0], [65.0, 440.0], [64.0, 149.33333333333334], [71.0, 59.0], [70.0, 556.0], [69.0, 57.0], [75.0, 70.0], [74.0, 68.0], [72.0, 58.0], [79.0, 58.0], [77.0, 78.5], [76.0, 300.0], [81.0, 88.5], [80.0, 67.33333333333333], [87.0, 67.0], [86.0, 76.0], [84.0, 364.5], [89.0, 654.1818181818181], [91.0, 664.1123595505619], [90.0, 668.2307692307693], [92.0, 8912.0], [93.0, 17111.0], [94.0, 657.5], [95.0, 656.0], [96.0, 917.8214285714283], [98.0, 429.5], [99.0, 238.0], [100.0, 220.0], [104.0, 450.4], [105.0, 574.0], [107.0, 9349.0], [108.0, 847.0], [109.0, 795.8], [110.0, 828.75], [111.0, 639.6666666666666], [112.0, 891.0], [113.0, 965.7812500000003], [114.0, 994.0], [115.0, 882.5238095238094], [117.0, 946.4642857142859], [120.0, 762.6666666666666], [121.0, 955.7307692307693], [122.0, 952.4], [123.0, 652.0], [124.0, 845.3483146067415], [140.0, 1121.6521739130437], [141.0, 1135.5], [142.0, 1093.8333333333333], [143.0, 1126.9836065573772], [149.0, 1327.3720930232557], [150.0, 613.0], [148.0, 1087.0], [152.0, 1047.9285714285713], [153.0, 933.8181818181818], [154.0, 1256.2], [155.0, 1213.8947368421052], [156.0, 1118.9677419354841], [157.0, 1116.8529411764705], [178.0, 1155.0], [179.0, 1221.0], [180.0, 1095.0], [181.0, 1164.0], [182.0, 1247.25], [184.0, 1435.5], [185.0, 1484.4594594594596], [186.0, 1582.4090909090908], [187.0, 1507.888888888889], [188.0, 1545.0], [189.0, 1485.0], [190.0, 1400.1612903225805], [191.0, 1392.0512820512818], [192.0, 1484.5555555555557], [193.0, 1625.3333333333335], [194.0, 1593.3333333333333], [195.0, 1317.3157894736842], [197.0, 1502.5], [198.0, 1544.7520661157027], [199.0, 1270.9333333333332], [200.0, 1438.4444444444443], [201.0, 1518.0], [202.0, 1334.125], [203.0, 1140.8181818181815], [204.0, 1123.5512820512818], [205.0, 882.6], [217.0, 907.0], [229.0, 1056.0], [230.0, 1073.0], [232.0, 2671.4499999999994], [233.0, 1721.1000000000001], [234.0, 1556.0416666666672], [237.0, 3131.0], [238.0, 1731.6250000000002], [404.0, 1494.0], [405.0, 1628.0], [406.0, 1391.0], [419.0, 1304.0], [421.0, 1695.0], [422.0, 1711.0], [423.0, 2028.6321243523316], [424.0, 4012.0], [427.0, 1344.9999999999998], [428.0, 851.0], [430.0, 1598.25], [431.0, 1080.9999999999998], [433.0, 638.0], [435.0, 959.75], [436.0, 914.0], [438.0, 1070.8], [444.0, 782.0], [445.0, 782.0], [450.0, 2377.0], [451.0, 1653.25], [456.0, 2034.0], [495.0, 2018.5363636363636], [496.0, 2062.0], [513.0, 2320.3333333333335], [515.0, 2347.1428571428573], [516.0, 2225.2], [517.0, 2519.9411764705887], [518.0, 3141.182119205297], [519.0, 3778.8333333333335], [547.0, 2401.0], [550.0, 2104.0], [553.0, 2808.642857142856], [562.0, 3836.3146067415732], [564.0, 3768.6428571428573], [575.0, 3863.125], [589.0, 2004.0], [577.0, 5150.895238095238], [576.0, 3998.2508250825094], [590.0, 5341.941176470589], [578.0, 4273.38775510204], [580.0, 3399.743243243243], [583.0, 2278.0], [600.0, 4920.0], [602.0, 4838.0], [604.0, 6044.25], [606.0, 5207.0], [593.0, 6264.074074074073], [594.0, 4190.335664335662], [595.0, 4783.664335664338], [597.0, 5057.666666666667], [596.0, 4352.2], [598.0, 4978.333333333333], [584.0, 2280.3333333333335], [587.0, 2027.0], [588.0, 1703.0], [612.0, 4924.0], [610.0, 5241.5], [613.0, 5556.666666666667], [615.0, 5223.0], [617.0, 5371.717391304348], [618.0, 5329.0], [619.0, 5526.333333333333], [620.0, 5244.208333333332], [624.0, 4935.999999999999], [639.0, 7509.6785714285725], [636.0, 6581.8315789473645], [638.0, 7117.0], [632.0, 6622.181818181818], [633.0, 5292.275000000001], [625.0, 2406.809523809524], [627.0, 1693.0], [664.0, 5238.5], [654.0, 5482.833333333333], [640.0, 4167.746478873239], [652.0, 4298.5], [650.0, 2980.0], [653.0, 3001.0], [656.0, 2025.0], [657.0, 1799.2], [658.0, 5537.207999999998], [659.0, 5143.066985645935], [666.0, 6362.0], [665.0, 4532.0], [667.0, 4883.0], [668.0, 4447.428571428571], [669.0, 4704.614973262034], [670.0, 4135.0], [671.0, 4263.666666666667], [676.0, 4719.0], [674.0, 3234.3333333333335], [673.0, 4103.142857142857], [685.0, 4079.0], [672.0, 3980.5], [675.0, 3076.0], [677.0, 3900.0], [678.0, 3420.0], [679.0, 3287.0], [682.0, 4096.5], [683.0, 3442.0], [684.0, 4093.0], [688.0, 4526.0], [696.0, 3513.0], [703.0, 4477.0], [689.0, 3064.0], [691.0, 2558.0], [692.0, 4516.0], [695.0, 3323.0], [708.0, 3759.0], [704.0, 4412.0], [705.0, 4524.0], [707.0, 4407.666666666667], [706.0, 4122.117647058823], [710.0, 3935.5], [711.0, 3260.0], [721.0, 4095.0], [735.0, 4953.5], [732.0, 5200.0], [733.0, 5505.333333333333], [730.0, 6749.714285714286], [731.0, 4828.2222222222235], [728.0, 5755.6612903225805], [729.0, 5738.0161290322585], [722.0, 4011.5], [726.0, 5865.5], [727.0, 6125.0], [766.0, 5642.743589743588], [737.0, 5309.5], [736.0, 4449.5], [750.0, 3979.0], [739.0, 5176.251141552512], [761.0, 5116.191489361702], [762.0, 5472.0], [763.0, 6733.0], [764.0, 4553.0], [747.0, 6126.857142857142], [744.0, 3956.0], [748.0, 6595.202586206899], [767.0, 5539.35433070866], [752.0, 3832.0], [754.0, 5702.0], [753.0, 3692.0], [798.0, 7763.0], [780.0, 5869.0], [779.0, 7497.0], [778.0, 4280.0], [777.0, 7806.0], [776.0, 6876.5], [782.0, 7787.0], [781.0, 4286.0], [799.0, 6654.0], [785.0, 7848.0], [784.0, 4866.0], [787.0, 7931.0], [786.0, 3953.0], [797.0, 7356.0], [796.0, 6388.0], [794.0, 6074.0], [774.0, 2246.0], [773.0, 6994.5], [771.0, 3201.0], [770.0, 8035.0], [769.0, 6597.0], [768.0, 8787.5], [783.0, 3970.0], [791.0, 3921.0], [790.0, 4746.0], [789.0, 7939.0], [788.0, 4228.0], [825.0, 6665.666666666667], [830.0, 7735.0], [811.0, 7497.4444444444425], [809.0, 6446.0], [808.0, 7747.0], [813.0, 10951.0], [812.0, 6048.0], [815.0, 7347.0], [801.0, 6090.0], [800.0, 8499.0], [803.0, 6921.5], [802.0, 8845.0], [807.0, 6179.0], [805.0, 6924.0], [814.0, 8021.0], [820.0, 7874.142857142858], [822.0, 6737.5], [823.0, 6169.288135593221], [826.0, 6379.636363636364], [827.0, 8094.0], [831.0, 5750.333333333333], [819.0, 6403.0], [817.0, 5896.0], [829.0, 4953.0], [828.0, 7857.0], [834.0, 7326.333333333333], [832.0, 8475.0], [835.0, 7039.04761904762], [856.0, 6797.0], [839.0, 5154.0], [858.0, 7804.0], [857.0, 6268.0], [862.0, 9483.0], [860.0, 8389.0], [840.0, 7922.5], [842.0, 6265.0], [841.0, 7316.0], [843.0, 7211.0], [848.0, 7039.5], [850.0, 7055.5], [849.0, 7897.0], [851.0, 6232.0], [852.0, 6689.479166666665], [855.0, 7310.0], [854.0, 7955.5], [853.0, 6392.0], [845.0, 5368.5], [844.0, 8377.0], [846.0, 6031.0], [847.0, 7245.0], [891.0, 5391.0], [865.0, 7499.874999999999], [864.0, 6212.0], [879.0, 7748.0], [878.0, 7534.0], [875.0, 6543.0], [866.0, 6575.070370370367], [895.0, 7678.0], [882.0, 5911.0], [880.0, 4682.0], [885.0, 7530.0], [884.0, 5959.0], [887.0, 7518.0], [886.0, 4797.0], [894.0, 8467.0], [892.0, 7633.0], [890.0, 9180.0], [889.0, 5075.0], [888.0, 7739.0], [871.0, 7450.0], [900.0, 6636.666666666667], [905.0, 6360.587628865978], [906.0, 8532.248868778286], [907.0, 6405.714285714288], [897.0, 7220.0], [896.0, 8344.5], [904.0, 7989.0], [903.0, 7303.0], [902.0, 7776.333333333333], [901.0, 8164.333333333333], [899.0, 7550.0], [898.0, 6971.5]], "isOverall": false, "label": "Healthy Thinking", "isController": false}, {"data": [[552.7207783553247, 4154.196321471416]], "isOverall": false, "label": "Healthy Thinking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 907.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 225.0, "minX": 1.62625034E12, "maxY": 6278681.7, "series": [{"data": [[1.6262504E12, 4489985.0], [1.62625041E12, 5048368.8], [1.62625038E12, 4408242.9], [1.62625039E12, 6278681.7], [1.62625036E12, 5597673.1], [1.62625037E12, 4712416.2], [1.62625034E12, 45406.9], [1.62625035E12, 3482020.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6262504E12, 22252.5], [1.62625041E12, 25020.0], [1.62625038E12, 21847.5], [1.62625039E12, 31117.5], [1.62625036E12, 27742.5], [1.62625037E12, 23355.0], [1.62625034E12, 225.0], [1.62625035E12, 17257.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625041E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 749.8292046936117, "minX": 1.62625034E12, "maxY": 7132.9, "series": [{"data": [[1.6262504E12, 6140.944388270977], [1.62625041E12, 6588.048561151077], [1.62625038E12, 4574.564366632339], [1.62625039E12, 5284.493853940704], [1.62625036E12, 1436.5223033252262], [1.62625037E12, 3469.743737957612], [1.62625034E12, 7132.9], [1.62625035E12, 749.8292046936117]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625041E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 737.4185136896996, "minX": 1.62625034E12, "maxY": 6939.599999999999, "series": [{"data": [[1.6262504E12, 5986.1021233569145], [1.62625041E12, 6501.875000000005], [1.62625038E12, 4494.648815653963], [1.62625039E12, 5237.242227042663], [1.62625036E12, 1387.9586374695866], [1.62625037E12, 3389.1213872832373], [1.62625034E12, 6939.599999999999], [1.62625035E12, 737.4185136896996]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625041E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 237.1, "minX": 1.62625034E12, "maxY": 6402.366007194252, "series": [{"data": [[1.6262504E12, 5689.529828109198], [1.62625041E12, 6402.366007194252], [1.62625038E12, 4371.181256436661], [1.62625039E12, 5125.221258134496], [1.62625036E12, 1331.3057583130574], [1.62625037E12, 3246.1878612716755], [1.62625034E12, 237.1], [1.62625035E12, 517.0925684485006]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625041E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.62625034E12, "maxY": 17820.0, "series": [{"data": [[1.6262504E12, 11620.0], [1.62625041E12, 14523.0], [1.62625038E12, 10191.0], [1.62625039E12, 11034.0], [1.62625036E12, 4167.0], [1.62625037E12, 6718.0], [1.62625034E12, 9463.0], [1.62625035E12, 17820.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6262504E12, 1363.0], [1.62625041E12, 1706.0], [1.62625038E12, 796.0], [1.62625039E12, 282.0], [1.62625036E12, 287.0], [1.62625037E12, 732.0], [1.62625034E12, 4507.0], [1.62625035E12, 40.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6262504E12, 8467.0], [1.62625041E12, 9579.800000000001], [1.62625038E12, 7102.6], [1.62625039E12, 7153.0], [1.62625036E12, 2008.4000000000005], [1.62625037E12, 5340.5], [1.62625034E12, 9431.5], [1.62625035E12, 1013.4000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6262504E12, 10739.700000000003], [1.62625041E12, 12557.48], [1.62625038E12, 9088.76], [1.62625039E12, 9342.960000000003], [1.62625036E12, 3188.9600000000005], [1.62625037E12, 6310.2699999999995], [1.62625034E12, 9463.0], [1.62625035E12, 13759.079999999974]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6262504E12, 9101.0], [1.62625041E12, 11366.049999999994], [1.62625038E12, 7595.0], [1.62625039E12, 7978.799999999998], [1.62625036E12, 2274.2], [1.62625037E12, 5672.799999999999], [1.62625034E12, 9463.0], [1.62625035E12, 1092.1999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625041E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 145.0, "minX": 1.0, "maxY": 8023.0, "series": [{"data": [[2.0, 1756.0], [4.0, 7231.0], [5.0, 4405.0], [9.0, 840.0], [18.0, 3192.5], [25.0, 7896.0], [36.0, 5394.5], [41.0, 5054.0], [44.0, 7127.5], [53.0, 4195.0], [54.0, 1449.5], [55.0, 1673.0], [62.0, 4049.5], [67.0, 3690.0], [69.0, 1451.0], [70.0, 3713.0], [71.0, 4911.0], [72.0, 7308.0], [83.0, 145.0], [86.0, 4041.0], [92.0, 953.0], [94.0, 3149.0], [97.0, 289.0], [101.0, 359.0], [100.0, 5906.0], [103.0, 4348.0], [104.0, 1017.5], [108.0, 694.5], [110.0, 5448.0], [113.0, 935.0], [115.0, 3706.0], [112.0, 4134.5], [116.0, 2022.0], [125.0, 5193.0], [127.0, 5249.0], [128.0, 4975.5], [142.0, 2466.0], [141.0, 1518.0], [151.0, 1148.0], [145.0, 5220.0], [156.0, 4914.0], [154.0, 4872.0], [164.0, 7316.0], [174.0, 1413.0], [168.0, 5872.0], [181.0, 5310.0], [180.0, 5323.0], [189.0, 8023.0], [190.0, 4721.0], [199.0, 5724.0], [211.0, 5511.0], [230.0, 2806.0], [251.0, 1883.0], [253.0, 6466.0], [1.0, 7636.0], [283.0, 3335.0], [307.0, 5873.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 307.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 144.0, "minX": 1.0, "maxY": 8022.0, "series": [{"data": [[2.0, 1755.0], [4.0, 7048.5], [5.0, 4404.0], [9.0, 839.0], [18.0, 3191.5], [25.0, 7895.0], [36.0, 5233.0], [41.0, 4674.0], [44.0, 7126.5], [53.0, 4194.0], [54.0, 1442.0], [55.0, 1284.0], [62.0, 4028.0], [67.0, 3689.0], [69.0, 1088.0], [70.0, 3700.5], [71.0, 4818.0], [72.0, 7177.0], [83.0, 144.0], [86.0, 4023.0], [92.0, 951.0], [94.0, 2968.0], [97.0, 287.0], [101.0, 349.0], [100.0, 5887.5], [103.0, 4249.0], [104.0, 1007.5], [108.0, 682.0], [110.0, 5217.5], [113.0, 920.0], [115.0, 3696.0], [112.0, 4046.5], [116.0, 2010.0], [125.0, 5098.0], [127.0, 5233.0], [128.0, 4974.5], [142.0, 2268.0], [141.0, 1510.0], [151.0, 1117.0], [145.0, 5184.5], [156.0, 4879.5], [154.0, 4778.5], [164.0, 7212.5], [174.0, 1389.0], [168.0, 5778.5], [181.0, 5285.0], [180.0, 5207.0], [189.0, 8022.0], [190.0, 4719.5], [199.0, 5437.0], [211.0, 5424.0], [230.0, 2753.5], [251.0, 1871.0], [253.0, 6065.0], [1.0, 7438.0], [283.0, 3316.0], [307.0, 5850.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 307.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62625033E12, "maxY": 143.8, "series": [{"data": [[1.6262504E12, 112.9], [1.62625041E12, 30.3], [1.62625038E12, 119.6], [1.62625039E12, 141.8], [1.62625036E12, 113.6], [1.62625037E12, 143.8], [1.62625034E12, 0.5], [1.62625035E12, 86.3], [1.62625033E12, 1.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625041E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62625034E12, "maxY": 138.3, "series": [{"data": [[1.6262504E12, 98.9], [1.62625041E12, 111.2], [1.62625038E12, 97.1], [1.62625039E12, 138.3], [1.62625036E12, 123.3], [1.62625037E12, 103.8], [1.62625034E12, 1.0], [1.62625035E12, 76.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62625041E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62625034E12, "maxY": 138.3, "series": [{"data": [[1.6262504E12, 98.9], [1.62625041E12, 111.2], [1.62625038E12, 97.1], [1.62625039E12, 138.3], [1.62625036E12, 123.3], [1.62625037E12, 103.8], [1.62625034E12, 1.0], [1.62625035E12, 76.7]], "isOverall": false, "label": "Healthy Thinking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625041E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62625034E12, "maxY": 138.3, "series": [{"data": [[1.6262504E12, 98.9], [1.62625041E12, 111.2], [1.62625038E12, 97.1], [1.62625039E12, 138.3], [1.62625036E12, 123.3], [1.62625037E12, 103.8], [1.62625034E12, 1.0], [1.62625035E12, 76.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62625041E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

