/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "maxY": 15292.0, "series": [{"data": [[0.0, 45.0], [0.1, 47.0], [0.2, 49.0], [0.3, 49.0], [0.4, 50.0], [0.5, 50.0], [0.6, 51.0], [0.7, 52.0], [0.8, 52.0], [0.9, 53.0], [1.0, 53.0], [1.1, 53.0], [1.2, 53.0], [1.3, 54.0], [1.4, 54.0], [1.5, 54.0], [1.6, 55.0], [1.7, 55.0], [1.8, 55.0], [1.9, 56.0], [2.0, 56.0], [2.1, 56.0], [2.2, 56.0], [2.3, 57.0], [2.4, 57.0], [2.5, 57.0], [2.6, 58.0], [2.7, 58.0], [2.8, 58.0], [2.9, 58.0], [3.0, 59.0], [3.1, 59.0], [3.2, 59.0], [3.3, 59.0], [3.4, 59.0], [3.5, 60.0], [3.6, 60.0], [3.7, 60.0], [3.8, 60.0], [3.9, 60.0], [4.0, 61.0], [4.1, 61.0], [4.2, 61.0], [4.3, 61.0], [4.4, 61.0], [4.5, 62.0], [4.6, 62.0], [4.7, 62.0], [4.8, 62.0], [4.9, 63.0], [5.0, 63.0], [5.1, 63.0], [5.2, 63.0], [5.3, 64.0], [5.4, 64.0], [5.5, 64.0], [5.6, 64.0], [5.7, 64.0], [5.8, 64.0], [5.9, 65.0], [6.0, 65.0], [6.1, 65.0], [6.2, 65.0], [6.3, 65.0], [6.4, 66.0], [6.5, 66.0], [6.6, 66.0], [6.7, 66.0], [6.8, 66.0], [6.9, 66.0], [7.0, 67.0], [7.1, 67.0], [7.2, 67.0], [7.3, 67.0], [7.4, 67.0], [7.5, 67.0], [7.6, 68.0], [7.7, 68.0], [7.8, 68.0], [7.9, 68.0], [8.0, 68.0], [8.1, 69.0], [8.2, 69.0], [8.3, 69.0], [8.4, 69.0], [8.5, 69.0], [8.6, 69.0], [8.7, 69.0], [8.8, 70.0], [8.9, 70.0], [9.0, 70.0], [9.1, 70.0], [9.2, 70.0], [9.3, 70.0], [9.4, 70.0], [9.5, 71.0], [9.6, 71.0], [9.7, 71.0], [9.8, 71.0], [9.9, 71.0], [10.0, 71.0], [10.1, 71.0], [10.2, 72.0], [10.3, 72.0], [10.4, 72.0], [10.5, 72.0], [10.6, 72.0], [10.7, 72.0], [10.8, 73.0], [10.9, 73.0], [11.0, 73.0], [11.1, 73.0], [11.2, 73.0], [11.3, 73.0], [11.4, 74.0], [11.5, 74.0], [11.6, 74.0], [11.7, 74.0], [11.8, 74.0], [11.9, 74.0], [12.0, 75.0], [12.1, 75.0], [12.2, 75.0], [12.3, 75.0], [12.4, 75.0], [12.5, 75.0], [12.6, 75.0], [12.7, 76.0], [12.8, 76.0], [12.9, 76.0], [13.0, 76.0], [13.1, 76.0], [13.2, 76.0], [13.3, 77.0], [13.4, 77.0], [13.5, 77.0], [13.6, 77.0], [13.7, 77.0], [13.8, 77.0], [13.9, 78.0], [14.0, 78.0], [14.1, 78.0], [14.2, 78.0], [14.3, 78.0], [14.4, 78.0], [14.5, 78.0], [14.6, 79.0], [14.7, 79.0], [14.8, 79.0], [14.9, 79.0], [15.0, 79.0], [15.1, 79.0], [15.2, 79.0], [15.3, 80.0], [15.4, 80.0], [15.5, 80.0], [15.6, 80.0], [15.7, 80.0], [15.8, 80.0], [15.9, 81.0], [16.0, 81.0], [16.1, 81.0], [16.2, 81.0], [16.3, 81.0], [16.4, 81.0], [16.5, 81.0], [16.6, 82.0], [16.7, 82.0], [16.8, 82.0], [16.9, 82.0], [17.0, 82.0], [17.1, 82.0], [17.2, 82.0], [17.3, 83.0], [17.4, 83.0], [17.5, 83.0], [17.6, 83.0], [17.7, 83.0], [17.8, 83.0], [17.9, 83.0], [18.0, 84.0], [18.1, 84.0], [18.2, 84.0], [18.3, 84.0], [18.4, 84.0], [18.5, 84.0], [18.6, 85.0], [18.7, 85.0], [18.8, 85.0], [18.9, 85.0], [19.0, 85.0], [19.1, 85.0], [19.2, 85.0], [19.3, 86.0], [19.4, 86.0], [19.5, 86.0], [19.6, 86.0], [19.7, 86.0], [19.8, 87.0], [19.9, 87.0], [20.0, 87.0], [20.1, 87.0], [20.2, 87.0], [20.3, 87.0], [20.4, 87.0], [20.5, 87.0], [20.6, 88.0], [20.7, 88.0], [20.8, 88.0], [20.9, 88.0], [21.0, 88.0], [21.1, 88.0], [21.2, 89.0], [21.3, 89.0], [21.4, 89.0], [21.5, 89.0], [21.6, 90.0], [21.7, 90.0], [21.8, 90.0], [21.9, 90.0], [22.0, 90.0], [22.1, 90.0], [22.2, 91.0], [22.3, 91.0], [22.4, 91.0], [22.5, 91.0], [22.6, 91.0], [22.7, 91.0], [22.8, 92.0], [22.9, 92.0], [23.0, 92.0], [23.1, 92.0], [23.2, 92.0], [23.3, 92.0], [23.4, 93.0], [23.5, 93.0], [23.6, 93.0], [23.7, 93.0], [23.8, 93.0], [23.9, 93.0], [24.0, 93.0], [24.1, 94.0], [24.2, 94.0], [24.3, 94.0], [24.4, 94.0], [24.5, 94.0], [24.6, 94.0], [24.7, 95.0], [24.8, 95.0], [24.9, 95.0], [25.0, 95.0], [25.1, 95.0], [25.2, 96.0], [25.3, 96.0], [25.4, 96.0], [25.5, 96.0], [25.6, 96.0], [25.7, 97.0], [25.8, 97.0], [25.9, 97.0], [26.0, 97.0], [26.1, 97.0], [26.2, 97.0], [26.3, 98.0], [26.4, 98.0], [26.5, 98.0], [26.6, 98.0], [26.7, 98.0], [26.8, 98.0], [26.9, 99.0], [27.0, 99.0], [27.1, 99.0], [27.2, 99.0], [27.3, 99.0], [27.4, 100.0], [27.5, 100.0], [27.6, 100.0], [27.7, 100.0], [27.8, 101.0], [27.9, 101.0], [28.0, 101.0], [28.1, 101.0], [28.2, 102.0], [28.3, 102.0], [28.4, 102.0], [28.5, 102.0], [28.6, 103.0], [28.7, 103.0], [28.8, 103.0], [28.9, 103.0], [29.0, 103.0], [29.1, 104.0], [29.2, 104.0], [29.3, 104.0], [29.4, 104.0], [29.5, 104.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 105.0], [30.0, 105.0], [30.1, 106.0], [30.2, 106.0], [30.3, 106.0], [30.4, 106.0], [30.5, 106.0], [30.6, 107.0], [30.7, 107.0], [30.8, 107.0], [30.9, 107.0], [31.0, 108.0], [31.1, 108.0], [31.2, 108.0], [31.3, 108.0], [31.4, 109.0], [31.5, 109.0], [31.6, 109.0], [31.7, 109.0], [31.8, 109.0], [31.9, 110.0], [32.0, 110.0], [32.1, 110.0], [32.2, 110.0], [32.3, 111.0], [32.4, 111.0], [32.5, 111.0], [32.6, 111.0], [32.7, 112.0], [32.8, 112.0], [32.9, 112.0], [33.0, 112.0], [33.1, 112.0], [33.2, 113.0], [33.3, 113.0], [33.4, 113.0], [33.5, 114.0], [33.6, 114.0], [33.7, 114.0], [33.8, 114.0], [33.9, 115.0], [34.0, 115.0], [34.1, 115.0], [34.2, 116.0], [34.3, 116.0], [34.4, 116.0], [34.5, 116.0], [34.6, 117.0], [34.7, 117.0], [34.8, 117.0], [34.9, 118.0], [35.0, 118.0], [35.1, 119.0], [35.2, 119.0], [35.3, 120.0], [35.4, 120.0], [35.5, 120.0], [35.6, 121.0], [35.7, 121.0], [35.8, 121.0], [35.9, 122.0], [36.0, 122.0], [36.1, 122.0], [36.2, 122.0], [36.3, 123.0], [36.4, 123.0], [36.5, 123.0], [36.6, 123.0], [36.7, 124.0], [36.8, 124.0], [36.9, 124.0], [37.0, 125.0], [37.1, 125.0], [37.2, 126.0], [37.3, 126.0], [37.4, 127.0], [37.5, 127.0], [37.6, 128.0], [37.7, 128.0], [37.8, 128.0], [37.9, 128.0], [38.0, 129.0], [38.1, 129.0], [38.2, 129.0], [38.3, 130.0], [38.4, 130.0], [38.5, 131.0], [38.6, 131.0], [38.7, 132.0], [38.8, 132.0], [38.9, 133.0], [39.0, 133.0], [39.1, 133.0], [39.2, 134.0], [39.3, 134.0], [39.4, 134.0], [39.5, 135.0], [39.6, 135.0], [39.7, 136.0], [39.8, 136.0], [39.9, 136.0], [40.0, 137.0], [40.1, 137.0], [40.2, 137.0], [40.3, 138.0], [40.4, 138.0], [40.5, 139.0], [40.6, 139.0], [40.7, 139.0], [40.8, 140.0], [40.9, 140.0], [41.0, 140.0], [41.1, 141.0], [41.2, 141.0], [41.3, 142.0], [41.4, 142.0], [41.5, 142.0], [41.6, 142.0], [41.7, 143.0], [41.8, 144.0], [41.9, 144.0], [42.0, 145.0], [42.1, 146.0], [42.2, 146.0], [42.3, 146.0], [42.4, 147.0], [42.5, 147.0], [42.6, 148.0], [42.7, 149.0], [42.8, 150.0], [42.9, 150.0], [43.0, 151.0], [43.1, 151.0], [43.2, 152.0], [43.3, 152.0], [43.4, 153.0], [43.5, 153.0], [43.6, 153.0], [43.7, 154.0], [43.8, 155.0], [43.9, 155.0], [44.0, 156.0], [44.1, 156.0], [44.2, 157.0], [44.3, 158.0], [44.4, 159.0], [44.5, 159.0], [44.6, 160.0], [44.7, 160.0], [44.8, 161.0], [44.9, 161.0], [45.0, 162.0], [45.1, 163.0], [45.2, 163.0], [45.3, 164.0], [45.4, 165.0], [45.5, 165.0], [45.6, 166.0], [45.7, 166.0], [45.8, 167.0], [45.9, 168.0], [46.0, 168.0], [46.1, 169.0], [46.2, 170.0], [46.3, 170.0], [46.4, 171.0], [46.5, 172.0], [46.6, 173.0], [46.7, 173.0], [46.8, 174.0], [46.9, 175.0], [47.0, 175.0], [47.1, 176.0], [47.2, 176.0], [47.3, 177.0], [47.4, 178.0], [47.5, 179.0], [47.6, 180.0], [47.7, 181.0], [47.8, 182.0], [47.9, 183.0], [48.0, 184.0], [48.1, 185.0], [48.2, 187.0], [48.3, 187.0], [48.4, 188.0], [48.5, 189.0], [48.6, 189.0], [48.7, 190.0], [48.8, 192.0], [48.9, 192.0], [49.0, 193.0], [49.1, 194.0], [49.2, 195.0], [49.3, 196.0], [49.4, 196.0], [49.5, 197.0], [49.6, 198.0], [49.7, 199.0], [49.8, 200.0], [49.9, 201.0], [50.0, 202.0], [50.1, 203.0], [50.2, 204.0], [50.3, 205.0], [50.4, 205.0], [50.5, 206.0], [50.6, 208.0], [50.7, 209.0], [50.8, 209.0], [50.9, 211.0], [51.0, 212.0], [51.1, 214.0], [51.2, 215.0], [51.3, 216.0], [51.4, 218.0], [51.5, 219.0], [51.6, 220.0], [51.7, 221.0], [51.8, 223.0], [51.9, 224.0], [52.0, 226.0], [52.1, 228.0], [52.2, 228.0], [52.3, 231.0], [52.4, 231.0], [52.5, 233.0], [52.6, 235.0], [52.7, 236.0], [52.8, 238.0], [52.9, 238.0], [53.0, 240.0], [53.1, 241.0], [53.2, 243.0], [53.3, 244.0], [53.4, 246.0], [53.5, 246.0], [53.6, 247.0], [53.7, 248.0], [53.8, 249.0], [53.9, 251.0], [54.0, 252.0], [54.1, 253.0], [54.2, 254.0], [54.3, 256.0], [54.4, 257.0], [54.5, 258.0], [54.6, 259.0], [54.7, 260.0], [54.8, 262.0], [54.9, 263.0], [55.0, 264.0], [55.1, 265.0], [55.2, 267.0], [55.3, 268.0], [55.4, 270.0], [55.5, 271.0], [55.6, 273.0], [55.7, 275.0], [55.8, 276.0], [55.9, 277.0], [56.0, 279.0], [56.1, 281.0], [56.2, 282.0], [56.3, 283.0], [56.4, 284.0], [56.5, 286.0], [56.6, 287.0], [56.7, 288.0], [56.8, 290.0], [56.9, 293.0], [57.0, 294.0], [57.1, 297.0], [57.2, 298.0], [57.3, 299.0], [57.4, 300.0], [57.5, 301.0], [57.6, 301.0], [57.7, 302.0], [57.8, 303.0], [57.9, 304.0], [58.0, 306.0], [58.1, 308.0], [58.2, 309.0], [58.3, 311.0], [58.4, 313.0], [58.5, 314.0], [58.6, 316.0], [58.7, 318.0], [58.8, 319.0], [58.9, 321.0], [59.0, 323.0], [59.1, 323.0], [59.2, 325.0], [59.3, 327.0], [59.4, 327.0], [59.5, 330.0], [59.6, 332.0], [59.7, 334.0], [59.8, 337.0], [59.9, 339.0], [60.0, 341.0], [60.1, 343.0], [60.2, 345.0], [60.3, 346.0], [60.4, 350.0], [60.5, 353.0], [60.6, 357.0], [60.7, 359.0], [60.8, 361.0], [60.9, 363.0], [61.0, 367.0], [61.1, 371.0], [61.2, 372.0], [61.3, 377.0], [61.4, 380.0], [61.5, 382.0], [61.6, 384.0], [61.7, 388.0], [61.8, 389.0], [61.9, 392.0], [62.0, 394.0], [62.1, 397.0], [62.2, 401.0], [62.3, 403.0], [62.4, 404.0], [62.5, 409.0], [62.6, 411.0], [62.7, 413.0], [62.8, 416.0], [62.9, 417.0], [63.0, 421.0], [63.1, 422.0], [63.2, 426.0], [63.3, 428.0], [63.4, 429.0], [63.5, 431.0], [63.6, 433.0], [63.7, 435.0], [63.8, 437.0], [63.9, 440.0], [64.0, 441.0], [64.1, 443.0], [64.2, 444.0], [64.3, 446.0], [64.4, 447.0], [64.5, 450.0], [64.6, 451.0], [64.7, 453.0], [64.8, 456.0], [64.9, 457.0], [65.0, 459.0], [65.1, 462.0], [65.2, 463.0], [65.3, 465.0], [65.4, 468.0], [65.5, 472.0], [65.6, 473.0], [65.7, 476.0], [65.8, 476.0], [65.9, 478.0], [66.0, 480.0], [66.1, 481.0], [66.2, 483.0], [66.3, 487.0], [66.4, 487.0], [66.5, 490.0], [66.6, 495.0], [66.7, 498.0], [66.8, 501.0], [66.9, 505.0], [67.0, 510.0], [67.1, 512.0], [67.2, 515.0], [67.3, 517.0], [67.4, 522.0], [67.5, 525.0], [67.6, 532.0], [67.7, 534.0], [67.8, 537.0], [67.9, 545.0], [68.0, 554.0], [68.1, 558.0], [68.2, 563.0], [68.3, 569.0], [68.4, 571.0], [68.5, 576.0], [68.6, 578.0], [68.7, 581.0], [68.8, 585.0], [68.9, 591.0], [69.0, 596.0], [69.1, 601.0], [69.2, 603.0], [69.3, 608.0], [69.4, 612.0], [69.5, 618.0], [69.6, 623.0], [69.7, 627.0], [69.8, 631.0], [69.9, 633.0], [70.0, 636.0], [70.1, 642.0], [70.2, 645.0], [70.3, 651.0], [70.4, 657.0], [70.5, 661.0], [70.6, 665.0], [70.7, 668.0], [70.8, 671.0], [70.9, 676.0], [71.0, 680.0], [71.1, 684.0], [71.2, 687.0], [71.3, 691.0], [71.4, 698.0], [71.5, 700.0], [71.6, 701.0], [71.7, 705.0], [71.8, 709.0], [71.9, 712.0], [72.0, 721.0], [72.1, 726.0], [72.2, 728.0], [72.3, 734.0], [72.4, 740.0], [72.5, 743.0], [72.6, 750.0], [72.7, 754.0], [72.8, 759.0], [72.9, 768.0], [73.0, 770.0], [73.1, 779.0], [73.2, 785.0], [73.3, 793.0], [73.4, 798.0], [73.5, 801.0], [73.6, 811.0], [73.7, 818.0], [73.8, 825.0], [73.9, 830.0], [74.0, 834.0], [74.1, 849.0], [74.2, 855.0], [74.3, 862.0], [74.4, 869.0], [74.5, 877.0], [74.6, 881.0], [74.7, 888.0], [74.8, 892.0], [74.9, 897.0], [75.0, 905.0], [75.1, 908.0], [75.2, 911.0], [75.3, 918.0], [75.4, 925.0], [75.5, 933.0], [75.6, 936.0], [75.7, 941.0], [75.8, 942.0], [75.9, 948.0], [76.0, 951.0], [76.1, 958.0], [76.2, 962.0], [76.3, 966.0], [76.4, 969.0], [76.5, 973.0], [76.6, 977.0], [76.7, 985.0], [76.8, 990.0], [76.9, 996.0], [77.0, 1001.0], [77.1, 1008.0], [77.2, 1011.0], [77.3, 1016.0], [77.4, 1018.0], [77.5, 1022.0], [77.6, 1030.0], [77.7, 1034.0], [77.8, 1037.0], [77.9, 1044.0], [78.0, 1048.0], [78.1, 1051.0], [78.2, 1055.0], [78.3, 1059.0], [78.4, 1061.0], [78.5, 1065.0], [78.6, 1069.0], [78.7, 1071.0], [78.8, 1077.0], [78.9, 1084.0], [79.0, 1087.0], [79.1, 1091.0], [79.2, 1097.0], [79.3, 1102.0], [79.4, 1108.0], [79.5, 1121.0], [79.6, 1125.0], [79.7, 1134.0], [79.8, 1137.0], [79.9, 1142.0], [80.0, 1151.0], [80.1, 1155.0], [80.2, 1161.0], [80.3, 1169.0], [80.4, 1173.0], [80.5, 1178.0], [80.6, 1182.0], [80.7, 1190.0], [80.8, 1193.0], [80.9, 1200.0], [81.0, 1204.0], [81.1, 1206.0], [81.2, 1212.0], [81.3, 1216.0], [81.4, 1222.0], [81.5, 1226.0], [81.6, 1234.0], [81.7, 1238.0], [81.8, 1245.0], [81.9, 1249.0], [82.0, 1254.0], [82.1, 1259.0], [82.2, 1262.0], [82.3, 1267.0], [82.4, 1270.0], [82.5, 1273.0], [82.6, 1277.0], [82.7, 1283.0], [82.8, 1287.0], [82.9, 1292.0], [83.0, 1296.0], [83.1, 1303.0], [83.2, 1308.0], [83.3, 1312.0], [83.4, 1315.0], [83.5, 1321.0], [83.6, 1328.0], [83.7, 1334.0], [83.8, 1339.0], [83.9, 1344.0], [84.0, 1347.0], [84.1, 1353.0], [84.2, 1356.0], [84.3, 1362.0], [84.4, 1370.0], [84.5, 1375.0], [84.6, 1378.0], [84.7, 1388.0], [84.8, 1391.0], [84.9, 1394.0], [85.0, 1399.0], [85.1, 1404.0], [85.2, 1407.0], [85.3, 1412.0], [85.4, 1417.0], [85.5, 1422.0], [85.6, 1428.0], [85.7, 1433.0], [85.8, 1438.0], [85.9, 1444.0], [86.0, 1452.0], [86.1, 1456.0], [86.2, 1462.0], [86.3, 1470.0], [86.4, 1475.0], [86.5, 1479.0], [86.6, 1485.0], [86.7, 1487.0], [86.8, 1489.0], [86.9, 1495.0], [87.0, 1498.0], [87.1, 1503.0], [87.2, 1505.0], [87.3, 1509.0], [87.4, 1514.0], [87.5, 1518.0], [87.6, 1528.0], [87.7, 1533.0], [87.8, 1538.0], [87.9, 1543.0], [88.0, 1549.0], [88.1, 1552.0], [88.2, 1556.0], [88.3, 1559.0], [88.4, 1562.0], [88.5, 1566.0], [88.6, 1572.0], [88.7, 1580.0], [88.8, 1585.0], [88.9, 1588.0], [89.0, 1592.0], [89.1, 1595.0], [89.2, 1600.0], [89.3, 1604.0], [89.4, 1606.0], [89.5, 1611.0], [89.6, 1617.0], [89.7, 1623.0], [89.8, 1626.0], [89.9, 1630.0], [90.0, 1634.0], [90.1, 1639.0], [90.2, 1644.0], [90.3, 1649.0], [90.4, 1655.0], [90.5, 1660.0], [90.6, 1665.0], [90.7, 1669.0], [90.8, 1677.0], [90.9, 1684.0], [91.0, 1687.0], [91.1, 1689.0], [91.2, 1703.0], [91.3, 1715.0], [91.4, 1720.0], [91.5, 1728.0], [91.6, 1733.0], [91.7, 1738.0], [91.8, 1742.0], [91.9, 1749.0], [92.0, 1755.0], [92.1, 1764.0], [92.2, 1772.0], [92.3, 1778.0], [92.4, 1787.0], [92.5, 1795.0], [92.6, 1806.0], [92.7, 1814.0], [92.8, 1825.0], [92.9, 1830.0], [93.0, 1844.0], [93.1, 1856.0], [93.2, 1863.0], [93.3, 1874.0], [93.4, 1881.0], [93.5, 1892.0], [93.6, 1900.0], [93.7, 1910.0], [93.8, 1920.0], [93.9, 1929.0], [94.0, 1939.0], [94.1, 1944.0], [94.2, 1953.0], [94.3, 1963.0], [94.4, 1972.0], [94.5, 1977.0], [94.6, 1988.0], [94.7, 1995.0], [94.8, 2007.0], [94.9, 2015.0], [95.0, 2024.0], [95.1, 2039.0], [95.2, 2054.0], [95.3, 2060.0], [95.4, 2073.0], [95.5, 2092.0], [95.6, 2106.0], [95.7, 2117.0], [95.8, 2141.0], [95.9, 2165.0], [96.0, 2187.0], [96.1, 2215.0], [96.2, 2224.0], [96.3, 2235.0], [96.4, 2250.0], [96.5, 2258.0], [96.6, 2274.0], [96.7, 2303.0], [96.8, 2312.0], [96.9, 2320.0], [97.0, 2332.0], [97.1, 2335.0], [97.2, 2351.0], [97.3, 2376.0], [97.4, 2392.0], [97.5, 2401.0], [97.6, 2413.0], [97.7, 2422.0], [97.8, 2440.0], [97.9, 2455.0], [98.0, 2495.0], [98.1, 2516.0], [98.2, 2530.0], [98.3, 2557.0], [98.4, 2579.0], [98.5, 2602.0], [98.6, 2631.0], [98.7, 2727.0], [98.8, 2808.0], [98.9, 2874.0], [99.0, 3227.0], [99.1, 3288.0], [99.2, 3328.0], [99.3, 3369.0], [99.4, 3450.0], [99.5, 3521.0], [99.6, 3688.0], [99.7, 3861.0], [99.8, 5467.0], [99.9, 10793.0], [100.0, 15292.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2096.0, "series": [{"data": [[0.0, 2096.0], [600.0, 183.0], [700.0, 149.0], [800.0, 115.0], [900.0, 155.0], [1000.0, 176.0], [1100.0, 126.0], [1200.0, 165.0], [1300.0, 150.0], [1400.0, 155.0], [1500.0, 162.0], [1600.0, 156.0], [1700.0, 104.0], [1800.0, 81.0], [1900.0, 87.0], [2000.0, 63.0], [2100.0, 38.0], [2200.0, 49.0], [2300.0, 60.0], [2400.0, 42.0], [2500.0, 36.0], [2600.0, 11.0], [2700.0, 13.0], [2800.0, 9.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 2.0], [3200.0, 10.0], [3300.0, 20.0], [3400.0, 6.0], [3500.0, 8.0], [3600.0, 4.0], [3700.0, 5.0], [3800.0, 3.0], [4000.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4700.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [5400.0, 1.0], [5900.0, 1.0], [6500.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7200.0, 1.0], [8800.0, 1.0], [9600.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [11800.0, 1.0], [12700.0, 1.0], [13300.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [15200.0, 1.0], [100.0, 1717.0], [200.0, 584.0], [300.0, 365.0], [400.0, 355.0], [500.0, 178.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 993.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5118.0, "series": [{"data": [[0.0, 5118.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1552.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 993.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.09388185654008, "minX": 1.62721462E12, "maxY": 482.0236087689719, "series": [{"data": [[1.62721469E12, 482.0236087689719], [1.62721468E12, 312.082208588957], [1.62721467E12, 127.04123036649203], [1.62721466E12, 29.48838709677419], [1.62721465E12, 13.471526195899763], [1.62721464E12, 10.09388185654008], [1.62721463E12, 10.347826086956518], [1.62721462E12, 18.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62721469E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45.0, "minX": 5.0, "maxY": 12796.0, "series": [{"data": [[5.0, 12796.0], [6.0, 11805.0], [7.0, 10812.0], [8.0, 5449.5], [9.0, 125.84241245136172], [10.0, 106.97183098591545], [11.0, 150.7457627118644], [12.0, 126.52826510721249], [13.0, 134.48148148148152], [14.0, 136.37142857142848], [15.0, 257.1115879828325], [16.0, 142.4685314685314], [17.0, 2538.5], [18.0, 133.36723163841802], [19.0, 140.42000000000002], [20.0, 1018.6], [21.0, 128.83766233766244], [22.0, 139.23926380368093], [23.0, 130.54545454545453], [24.0, 149.62962962962973], [25.0, 159.66666666666666], [26.0, 160.53801169590636], [27.0, 190.75], [29.0, 204.0], [30.0, 184.51298701298705], [31.0, 182.8], [33.0, 185.85714285714286], [34.0, 198.74358974358978], [35.0, 203.78571428571433], [36.0, 219.0], [37.0, 213.125], [38.0, 233.0], [39.0, 221.0], [40.0, 217.82608695652172], [41.0, 254.112676056338], [42.0, 254.0], [43.0, 235.5], [44.0, 243.0], [45.0, 270.6], [46.0, 277.6666666666667], [47.0, 269.7142857142857], [48.0, 276.5], [49.0, 282.8], [50.0, 288.8888888888889], [51.0, 302.1818181818182], [52.0, 308.75], [53.0, 328.6602564102563], [54.0, 315.55555555555554], [59.0, 332.0], [60.0, 229.72727272727275], [61.0, 393.74193548387103], [63.0, 354.6666666666667], [64.0, 396.15789473684197], [65.0, 432.0], [66.0, 355.6666666666667], [67.0, 383.29999999999995], [68.0, 375.6923076923077], [69.0, 445.6666666666667], [70.0, 436.25], [71.0, 437.86274509803917], [72.0, 452.0], [73.0, 483.0], [74.0, 450.56249999999994], [75.0, 447.75], [76.0, 416.42857142857144], [77.0, 433.18181818181813], [78.0, 455.44444444444446], [79.0, 479.22222222222223], [81.0, 475.29629629629625], [82.0, 475.6842105263158], [83.0, 598.6875], [89.0, 464.0], [93.0, 446.0], [94.0, 455.0], [96.0, 463.0], [98.0, 506.0], [99.0, 468.5], [104.0, 364.6666666666667], [105.0, 419.3333333333333], [106.0, 557.6666666666667], [107.0, 589.5714285714287], [108.0, 625.7575757575758], [109.0, 504.0], [110.0, 434.3333333333333], [111.0, 406.0], [113.0, 423.0], [114.0, 351.88888888888897], [115.0, 337.75], [116.0, 195.0], [117.0, 206.0], [118.0, 182.85714285714286], [119.0, 201.63636363636365], [120.0, 214.0], [121.0, 221.0], [122.0, 231.0], [123.0, 231.5], [124.0, 235.4], [125.0, 231.47058823529412], [126.0, 262.8], [127.0, 261.25], [128.0, 268.3333333333333], [129.0, 272.8], [130.0, 272.5], [131.0, 273.2307692307693], [132.0, 275.72727272727275], [133.0, 292.6666666666667], [134.0, 289.5], [135.0, 283.6], [136.0, 294.25], [137.0, 317.5], [138.0, 309.8333333333333], [139.0, 423.61538461538464], [140.0, 356.0], [141.0, 974.5], [142.0, 307.5], [143.0, 1119.8095238095239], [144.0, 1881.0], [166.0, 412.0], [171.0, 428.0], [175.0, 446.0], [178.0, 448.0], [179.0, 476.0], [180.0, 517.0], [181.0, 1697.672131147541], [182.0, 1763.64], [183.0, 1816.0], [184.0, 1964.5], [185.0, 1202.756097560976], [186.0, 986.8490566037736], [187.0, 880.8], [189.0, 862.0], [192.0, 756.9142857142855], [194.0, 928.0], [195.0, 845.7692307692307], [196.0, 1111.2702702702702], [199.0, 1104.111111111111], [200.0, 1197.6534090909088], [201.0, 1128.0], [203.0, 928.3333333333334], [208.0, 1098.4578313253014], [216.0, 612.0], [217.0, 622.0], [219.0, 956.0], [221.0, 976.0], [222.0, 538.3333333333334], [224.0, 939.0], [225.0, 1006.0], [228.0, 1002.0], [229.0, 949.0], [231.0, 1001.0], [237.0, 542.0], [238.0, 959.6666666666667], [239.0, 1007.4285714285714], [240.0, 871.3333333333334], [241.0, 1472.4488188976377], [242.0, 1459.0], [243.0, 1452.5], [283.0, 1708.8999999999996], [286.0, 1400.984375], [287.0, 1211.0], [288.0, 1623.0], [318.0, 1968.0], [323.0, 1866.3333333333333], [324.0, 2041.2705882352939], [363.0, 3024.0], [364.0, 1896.6029962546818], [365.0, 1789.9411764705883], [366.0, 1459.25], [367.0, 1710.1612903225807], [371.0, 2026.0], [369.0, 551.5], [368.0, 1222.3564356435638], [370.0, 982.6818181818182], [373.0, 1990.0], [375.0, 3101.5], [376.0, 1917.9333333333336], [382.0, 829.625], [383.0, 749.8333333333334], [380.0, 1104.0882352941182], [381.0, 1286.6666666666665], [377.0, 1172.5555555555557], [378.0, 1748.967741935484], [379.0, 2028.3956043956039], [385.0, 559.4615384615383], [384.0, 602.4615384615385], [386.0, 528.7666666666669], [387.0, 494.5], [388.0, 415.7142857142858], [389.0, 382.0], [390.0, 353.0], [391.0, 319.7777777777778], [392.0, 223.0], [398.0, 189.0], [399.0, 178.0], [396.0, 196.0], [397.0, 177.0], [393.0, 269.0], [394.0, 214.11111111111111], [395.0, 160.5], [400.0, 178.25], [403.0, 178.0], [404.0, 128.8], [406.0, 104.0], [407.0, 98.0], [408.0, 88.0], [409.0, 112.0], [410.0, 110.0], [411.0, 82.16666666666667], [418.0, 99.5], [419.0, 56.0], [421.0, 82.0], [423.0, 62.5], [425.0, 127.0], [429.0, 63.0], [430.0, 104.0], [435.0, 72.5], [437.0, 68.0], [440.0, 67.25], [441.0, 68.0], [449.0, 78.0], [450.0, 76.0], [452.0, 73.0], [454.0, 89.0], [455.0, 89.0], [456.0, 73.0], [457.0, 92.0], [458.0, 66.8], [463.0, 64.0], [477.0, 50.0], [466.0, 83.0], [465.0, 87.0], [471.0, 52.0], [467.0, 71.25], [476.0, 50.0], [469.0, 55.0], [468.0, 52.0], [470.0, 55.666666666666664], [474.0, 75.75], [473.0, 50.0], [472.0, 47.0], [475.0, 65.0], [479.0, 46.0], [478.0, 52.0], [494.0, 49.0], [482.0, 72.0], [481.0, 46.0], [480.0, 52.0], [487.0, 49.0], [486.0, 53.0], [485.0, 50.0], [484.0, 50.0], [483.0, 56.5], [488.0, 68.0], [490.0, 55.666666666666664], [489.0, 55.0], [495.0, 47.0], [493.0, 51.0], [492.0, 54.0], [491.0, 49.0], [510.0, 45.0], [511.0, 49.0], [509.0, 50.0], [508.0, 55.0], [507.0, 53.0], [506.0, 48.0], [505.0, 53.0], [504.0, 47.0], [503.0, 49.0], [497.0, 53.0], [496.0, 55.0], [499.0, 49.0], [498.0, 54.0], [502.0, 53.0], [501.0, 50.0], [500.0, 58.0], [538.0, 60.0], [520.0, 56.333333333333336], [521.0, 64.66666666666667], [525.0, 54.5], [524.0, 47.0], [523.0, 55.0], [522.0, 50.0], [527.0, 50.0], [513.0, 48.0], [512.0, 53.0], [515.0, 50.0], [514.0, 51.0], [517.0, 54.0], [516.0, 58.0], [519.0, 54.0], [518.0, 52.0], [526.0, 50.0], [537.0, 52.0], [536.0, 61.0], [534.0, 58.666666666666664], [533.0, 50.0], [532.0, 60.0], [531.0, 56.0], [530.0, 53.0], [529.0, 57.0], [528.0, 53.0], [535.0, 56.0], [543.0, 83.0], [542.0, 78.0], [541.0, 51.0], [540.0, 53.0], [539.0, 51.0], [572.0, 56.0], [550.0, 67.0], [551.0, 56.0], [569.0, 54.0], [568.0, 67.0], [554.0, 59.0], [553.0, 50.0], [552.0, 54.0], [555.0, 47.0], [557.0, 56.0], [556.0, 58.0], [559.0, 72.0], [545.0, 96.0], [544.0, 71.0], [547.0, 66.0], [546.0, 66.0], [549.0, 59.0], [548.0, 73.0], [558.0, 50.0], [575.0, 50.0], [561.0, 62.0], [560.0, 65.0], [563.0, 58.0], [562.0, 76.0], [565.0, 83.0], [564.0, 83.0], [567.0, 71.0], [566.0, 62.0], [574.0, 56.0], [573.0, 54.0], [571.0, 58.0], [570.0, 71.0], [602.0, 66.0], [576.0, 71.0], [585.0, 57.5], [584.0, 54.0], [587.0, 51.0], [586.0, 61.0], [589.0, 49.0], [588.0, 50.0], [591.0, 55.0], [590.0, 52.0], [601.0, 77.66666666666667], [606.0, 66.0], [593.0, 53.0], [592.0, 50.0], [595.0, 72.0], [594.0, 54.0], [597.0, 76.0], [596.0, 72.0], [599.0, 60.0], [598.0, 71.0], [605.0, 88.0], [604.0, 54.0], [603.0, 90.0], [600.0, 54.0], [583.0, 59.0], [582.0, 78.0], [581.0, 58.0], [580.0, 65.0], [579.0, 58.0], [578.0, 60.0], [577.0, 48.0], [632.0, 64.0], [610.0, 64.5], [613.0, 69.5], [612.0, 71.0], [611.0, 59.0], [615.0, 64.0], [614.0, 87.0], [616.0, 64.0], [617.0, 66.0], [618.0, 61.0], [619.0, 66.0], [621.0, 53.0], [620.0, 58.0], [623.0, 57.0], [609.0, 75.0], [608.0, 67.0], [622.0, 61.0], [639.0, 84.0], [625.0, 60.0], [624.0, 60.0], [627.0, 60.0], [626.0, 57.0], [629.0, 53.0], [628.0, 58.0], [631.0, 63.0], [630.0, 64.0], [638.0, 61.0], [637.0, 65.0], [636.0, 65.0], [635.0, 65.5], [633.0, 60.0], [668.0, 87.0], [652.0, 84.16666666666667], [651.0, 85.0], [650.0, 88.0], [649.0, 126.5], [654.0, 137.0], [640.0, 77.0], [642.0, 71.0], [641.0, 71.0], [645.0, 109.0], [644.0, 63.0], [647.0, 92.0], [646.0, 92.0], [653.0, 138.0], [671.0, 138.0], [656.0, 136.0], [658.0, 91.0], [657.0, 129.0], [660.0, 106.0], [659.0, 107.0], [663.0, 97.0], [661.0, 103.0], [670.0, 141.0], [669.0, 81.0], [667.0, 89.0], [666.0, 90.0], [665.0, 94.0], [664.0, 93.0], [679.0, 61.333333333333336], [675.0, 83.0], [674.0, 133.0], [673.0, 136.0], [672.0, 136.0], [687.0, 62.0], [686.0, 73.0], [685.0, 61.0], [683.0, 111.0], [682.0, 120.0], [681.0, 125.0], [680.0, 127.0], [676.0, 178.0], [677.0, 160.5], [678.0, 128.5], [691.0, 74.5], [692.0, 73.5], [690.0, 87.0], [689.0, 73.0], [688.0, 83.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}, {"data": [[137.78742007046878, 588.6896776719307]], "isOverall": false, "label": "Healthy Thinking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 692.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 112.5, "minX": 1.62721462E12, "maxY": 7400037.0, "series": [{"data": [[1.62721469E12, 2692160.7], [1.62721468E12, 7400037.0], [1.62721467E12, 6936967.2], [1.62721466E12, 7036845.0], [1.62721465E12, 5979047.4], [1.62721464E12, 4303749.5], [1.62721463E12, 417679.8], [1.62721462E12, 22702.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62721469E12, 13342.5], [1.62721468E12, 36675.0], [1.62721467E12, 34380.0], [1.62721466E12, 34875.0], [1.62721465E12, 29632.5], [1.62721464E12, 21330.0], [1.62721463E12, 2070.0], [1.62721462E12, 112.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62721469E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 92.53454821564155, "minX": 1.62721462E12, "maxY": 4959.2, "series": [{"data": [[1.62721469E12, 360.1585160202359], [1.62721468E12, 1570.9907975460133], [1.62721467E12, 700.038612565444], [1.62721466E12, 178.72064516129035], [1.62721465E12, 92.53454821564155], [1.62721464E12, 130.14873417721532], [1.62721463E12, 1305.6413043478256], [1.62721462E12, 4959.2]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62721469E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 85.4365983295368, "minX": 1.62721462E12, "maxY": 4758.0, "series": [{"data": [[1.62721469E12, 352.7622259696457], [1.62721468E12, 1540.688957055216], [1.62721467E12, 683.2833769633502], [1.62721466E12, 171.4696774193545], [1.62721465E12, 85.4365983295368], [1.62721464E12, 122.71940928270038], [1.62721463E12, 1278.41304347826], [1.62721462E12, 4758.0]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62721469E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 64.63080168776371, "minX": 1.62721462E12, "maxY": 1490.8993865030684, "series": [{"data": [[1.62721469E12, 338.47723440134877], [1.62721468E12, 1490.8993865030684], [1.62721467E12, 651.0772251308919], [1.62721466E12, 157.68903225806477], [1.62721465E12, 73.75322703113143], [1.62721464E12, 64.63080168776371], [1.62721463E12, 89.75000000000003], [1.62721462E12, 188.8]], "isOverall": false, "label": "Healthy Thinking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62721469E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.62721462E12, "maxY": 15292.0, "series": [{"data": [[1.62721469E12, 1908.0], [1.62721468E12, 4442.0], [1.62721467E12, 3171.0], [1.62721466E12, 443.0], [1.62721465E12, 218.0], [1.62721464E12, 15292.0], [1.62721463E12, 13363.0], [1.62721462E12, 5467.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62721469E12, 45.0], [1.62721468E12, 209.0], [1.62721467E12, 123.0], [1.62721466E12, 54.0], [1.62721465E12, 50.0], [1.62721464E12, 51.0], [1.62721463E12, 59.0], [1.62721462E12, 4584.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62721469E12, 1203.0], [1.62721468E12, 2334.9], [1.62721467E12, 1357.9000000000012], [1.62721466E12, 274.9000000000001], [1.62721465E12, 122.0], [1.62721464E12, 110.0], [1.62721463E12, 6981.700000000001], [1.62721462E12, 5467.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62721469E12, 1751.2399999999998], [1.62721468E12, 3540.420000000001], [1.62721467E12, 2569.7800000000007], [1.62721466E12, 397.9000000000001], [1.62721465E12, 155.81999999999994], [1.62721464E12, 153.01999999999998], [1.62721463E12, 13363.0], [1.62721462E12, 5467.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62721469E12, 1493.899999999999], [1.62721468E12, 2612.449999999996], [1.62721467E12, 2080.199999999999], [1.62721466E12, 310.0], [1.62721465E12, 134.0], [1.62721464E12, 121.0], [1.62721463E12, 10799.65], [1.62721462E12, 5467.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62721469E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 50.0, "minX": 1.0, "maxY": 10802.5, "series": [{"data": [[2.0, 10802.5], [3.0, 5805.0], [18.0, 50.0], [22.0, 91.0], [24.0, 1267.5], [30.0, 54.5], [32.0, 51.0], [60.0, 106.0], [66.0, 59.0], [68.0, 1954.0], [78.0, 753.5], [81.0, 83.0], [80.0, 83.5], [85.0, 81.0], [86.0, 77.0], [88.0, 72.0], [89.0, 1060.0], [93.0, 79.0], [94.0, 79.0], [98.0, 84.0], [102.0, 91.0], [104.0, 70.5], [110.0, 81.0], [111.0, 79.0], [112.0, 90.0], [123.0, 81.0], [124.0, 85.0], [129.0, 82.0], [128.0, 83.5], [134.0, 81.0], [140.0, 98.0], [137.0, 502.0], [142.0, 254.0], [147.0, 126.0], [148.0, 185.0], [149.0, 1407.0], [156.0, 128.0], [155.0, 161.0], [153.0, 323.0], [158.0, 442.5], [157.0, 667.0], [160.0, 141.5], [165.0, 267.0], [161.0, 249.0], [164.0, 637.0], [170.0, 959.0], [189.0, 1051.0], [187.0, 1411.0], [204.0, 1069.5], [212.0, 1487.5], [224.0, 1985.5], [241.0, 1786.0], [247.0, 1359.0], [1.0, 5915.0], [261.0, 616.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 261.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 43.0, "minX": 1.0, "maxY": 10701.0, "series": [{"data": [[2.0, 10701.0], [3.0, 5615.0], [18.0, 43.0], [22.0, 80.0], [24.0, 1267.5], [30.0, 46.0], [32.0, 44.0], [60.0, 93.0], [66.0, 52.0], [68.0, 1950.5], [78.0, 691.0], [81.0, 75.0], [80.0, 73.0], [85.0, 74.0], [86.0, 69.5], [88.0, 64.5], [89.0, 859.0], [93.0, 71.0], [94.0, 70.5], [98.0, 78.0], [102.0, 84.0], [104.0, 65.0], [110.0, 75.5], [111.0, 73.0], [112.0, 83.0], [123.0, 75.0], [124.0, 78.0], [129.0, 75.0], [128.0, 77.5], [134.0, 73.5], [140.0, 90.5], [137.0, 475.0], [142.0, 247.0], [147.0, 118.0], [148.0, 177.0], [149.0, 1343.0], [156.0, 121.0], [155.0, 155.0], [153.0, 315.0], [158.0, 432.0], [157.0, 642.0], [160.0, 135.0], [165.0, 258.0], [161.0, 240.0], [164.0, 626.0], [170.0, 950.5], [189.0, 1037.0], [187.0, 1406.0], [204.0, 1062.0], [212.0, 1445.0], [224.0, 1985.5], [241.0, 1775.0], [247.0, 1312.0], [1.0, 5749.0], [261.0, 608.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 261.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.62721462E12, "maxY": 167.8, "series": [{"data": [[1.62721469E12, 43.3], [1.62721468E12, 158.7], [1.62721467E12, 167.8], [1.62721466E12, 158.5], [1.62721465E12, 132.5], [1.62721464E12, 94.3], [1.62721463E12, 9.2], [1.62721462E12, 2.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62721469E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62721462E12, "maxY": 163.0, "series": [{"data": [[1.62721469E12, 59.3], [1.62721468E12, 163.0], [1.62721467E12, 152.8], [1.62721466E12, 155.0], [1.62721465E12, 131.7], [1.62721464E12, 94.8], [1.62721463E12, 9.2], [1.62721462E12, 0.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.62721469E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62721462E12, "maxY": 163.0, "series": [{"data": [[1.62721469E12, 59.3], [1.62721468E12, 163.0], [1.62721467E12, 152.8], [1.62721466E12, 155.0], [1.62721465E12, 131.7], [1.62721464E12, 94.8], [1.62721463E12, 9.2], [1.62721462E12, 0.5]], "isOverall": false, "label": "Healthy Thinking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62721469E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62721462E12, "maxY": 163.0, "series": [{"data": [[1.62721469E12, 59.3], [1.62721468E12, 163.0], [1.62721467E12, 152.8], [1.62721466E12, 155.0], [1.62721465E12, 131.7], [1.62721464E12, 94.8], [1.62721463E12, 9.2], [1.62721462E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.62721469E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

